// This file is generated by godot editor

//@ts-ignore
declare module globalThis {
	/**
	 * A long integer value, the request id, that uniquely identifies the entry in the callback list.
	 * This is a non-zero value, but you may not make any other assumptions about its value.
	 * You can pass this value to `godot.cancelAnimationFrame()` to cancel the refresh callback request.
	 */
	type FrameRequetID = number;

	/**
	 * Request a refresh callback request, the `callback` will be called every frame
	 * @param callback The function to call when it's time to update your animation for the next repaint. The callback function is passed one single argument, a number similar to the one returned by `godot.OS.get_system_time_msecs()`, indicating the point in time when requestAnimationFrame() starts to execute callback functions.
	 */
	function requestAnimationFrame(callback: (time_stamp: number) => void): FrameRequetID;

	/**
	 * Cancel an frame request previously scheduled through a call to `godot.requestAnimationFrame()`.
	 * @param request_id The ID value returned by the call to `godot.requestAnimationFrame()` that requested the callback.
	 */
	function cancelAnimationFrame(request_id: FrameRequetID): void;
	
	/** Used to import CommonJS modules or load resources */
	function require(path: string): any;
	const module: { exports: any };
	const exports: any;
	
	/**
	 * The Console API provides functionality to allow developers to perform debugging tasks, such as logging messages or the values of variables at set points in your code, or timing how long an operation takes to complete.
	 */
	//@ts-ignore
	const console: {
		/**
		 * Outputs a message to the console. The message may be a single string (with optional substitution values), or it may be any one or more JavaScript objects.
		 * @param message A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.
		 */
		log(...message): void;
		
		/**
		 * Outputs a warning message to the console.
		 * @param message  list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.
		 */
		warn(...message): void;
		
		/**
		 * Outputs an error message to the console.
		 * @param message A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.
		 */
		error(...message): void;
		
		/** Outputs a stack trace to the console.
		 * @param message A list of JavaScript objects to output. The string representations of each of these objects are appended together in the order listed and output.
		*/
		trace(...message): void;

		/** Log JavaScript Objects as JSON format */
		LOG_OBJECT_TO_JSON: boolean;
	}

	/**
	 * A worker is an object created using a constructor of `Worker` that runs a named JavaScript file  this file contains the code that will run in the worker thread;
	 *
	 * Workers run in another global context that is different from the current context.
	 * 
	 * You can run whatever code you like inside the worker thread. All of the godot API are avaliable inside workers.
	 * 
	 * Data is sent between workers and the main thread via a system of messages  both sides send their messages using the `postMessage()` method, and respond to messages via the `onmessage` event handler (the message is contained within the Message event's data attribute.) The data is copied rather than shared.
	 *
	 * You can **transfer** value with `Worker.abandonValue` and `Worker.adoptValue`. After a value is abandoned you cannot using it anymore in the context.
	 *
	 * Workers may, in turn, spawn new workers, all sub-worker will be stopped when the host context stop.
	 */
	//@ts-ignore
	class Worker {
		
		/**
		 * The `onmessage` property of the Worker interface represents an event handler, that is a function to be called when the message event occurs.
		 * It will be called when the worker's parent receives a message from the worker context by `postMessage` method.
		 */
		onmessage(message: any): void;
		
		/**
		 * Sends a message to the worker's inner scope. This accepts a single parameter, which is the data to send to the worker.
		 * @param message The object to deliver to the worker; this will be in the data field in the event delivered to the `onmessage` handler.
		 * @note The data cannot be instance of `godot.Object` or any other JavaScript object conains functions.
		 */
		postMessage(message: any): void;
		
		/**
		 * Stop the worker thread
		 */
		terminate(): void;
		
		/**
		 * Drop the `value` in the context. You should never touching an abandoned value anymore be for it is adopted.
		 * 
		 * You can adopt the value in another thread context to transfer the value.
		 * 
		 * An `non zero` ID is return if no error happen.
		 * @param value The value to abandon in the context
		 * @note You can transfer any type the godot `Variant` can represent. But you cannot transfer JavaScript objects with function properties.
		 * @returns The ID of the abandoned value
		 */
		static abandonValue(value: any): number;
		
		/**
		 * Adopt an abandoned value.
		 * @param value_id The ID of the abandoned value
		 */
		static adoptValue(value_id: number): any;
	}
	
	/** **Worker context only**
	 * 
	 *  Stop the worker thread of current context
	 */
	function close(): void;
	
	/** **Worker context only**
	 * 
	 * The message handler to handle messages send from the host context
	 */
	//@ts-ignore
	function onmessage(message: any): void;
	
	/** **Worker context only**
	 * 
	 * Sends a message to the host thread context that spawned it.
	 *
	 * @param {*} message The message to send
	 */
	function postMessage(message: any): void;
	
	/** **Worker context only**
	 * 
	 * Synchronously load and run one or more scripts in the worker thread.
	 */
	function importScripts(...scripts: string[]): void;
	
	/** **Worker context only**
	 * 
	 * The flag is `true` if current context is inside a worker thread.
	 */
	const INSIDE_WORKER: true | undefined;
}

declare module godot {
	
	type GodotClass = new() => godot.Object;

	interface PropertyInfo {
		type?: VariantType;
		name?: string;
		hint?: PropertyHint;
		/**@see PropertyHint */
		hint_string?: string;
		/** @see PropertyUsageFlags */
		usage?: number;
		/** Default value of the property */
		default?: any;
	}
	
	/**
	 * Export class to godot
	 *
	 * @param target The class extends from `godot.Object`
	 * @param name The class name
	 */
	function register_class(target: GodotClass, name: string);

	/**
	 * Register signal to class
	 * @param target The class of the signal
	 * @param name signal name
	 */
	function register_signal(target: GodotClass | godot.Object, name: string);

	/**
	 * Register property to class
	 * @param target The class of the property
	 * @param name The name of the property
	 * @param value The default value of the property
	 */
	function register_property(target: GodotClass | godot.Object, name: string, value: any);
	
	/**
	 * The meta data of an script
	 * @param target The script class
	 * @param tool is tooled of this class
	 */
	function set_script_tooled(target: GodotClass, tool: boolean);
	
	/**
	 * The meta data of an script
	 * @param target The script class
	 * @param icon The icon of the class
	 */
	function set_script_icon(target: GodotClass, icon: string);
	
	/**
	 * Returns the internal type of the given `Variant` object, using the `godot.TYPE_*`
	 */
	function get_type(val: any): number;
	
	/**
	 * Loads a resource from the filesystem located at `path`.
	 * 
	 * **Note:** Resource paths can be obtained by right-clicking on a resource in the FileSystem dock and choosing **Copy Path**.
	 * ```
	 * // Load a scene called main located in the root of the project directory
	 * const main = godot.load("res://main.tscn")
	 * ```*/
	function load(path: string): Resource;
	
	
	/**
	 * Wait a signal of an object
	 * @param target The owner of the signal to wait
	 * @param signal The signal to wait
	 */
	function yield(target: godot.Object, signal: string): Promise<any[]>;
	
	const E: 2.7182818284590452353602874714;
	const LN2: 0.6931471805599453094172321215;
	const SQRT2: 1.4142135623730950488016887242;
	const SQRT12: 0.7071067811865475244008443621048490;
	
	/** The flag is `true` if current binary is compiled with `target=debug` or `target=release_debug` */
	const DEBUG_ENABLED: boolean;
	
	/** The flag is `true` if current binary is godot editor which is compiled with `tool=yes` */
	const TOOLS_ENABLED: boolean;
	
	/** The flag is `true` if current binary enable debug method information */
	const DEBUG_METHODS_ENABLED: boolean;
}

declare module godot {
	/** Vector used for 2D math.
	 2-element structure that can be used to represent positions in 2D space or any other pair of numeric values. */
	class Vector2 {
		constructor(x?: number, y?: number);
		constructor(v: Vector2);

		/** The vector's X component. Also accessible by using the index position ``0``. */
		x: number;

		/** The vector's Y component. Also accessible by using the index position ``1``. */
		y: number;


		/** Returns a new vector with all components in absolute values (i.e. positive). */
		abs() : Vector2;

		/** Returns the vector's angle in radians with respect to the X axis, or `(1, 0)` vector.

		 Equivalent to the result of `@GDScript.atan2` when called with the vector's `x` and `y` as parameters: `atan2(x, y)`. */
		angle() : number;

		/** Returns the angle in radians between the two vectors. */
		angle_to(to: Vector2) : number;

		/** Returns the angle in radians between the line connecting the two points and the X coordinate. */
		angle_to_point(to: Vector2) : number;

		/** Returns the ratio of `x` to `y`. */
		aspect() : number;

		/** Returns the vector "bounced off" from a plane defined by the given normal. */
		bounce(n: Vector2) : Vector2;

		/** Returns the vector with all components rounded up. */
		ceil() : Vector2;

		/** Returns the vector with a maximum length. */
		clamped(length: number) : Vector2;

		/** Returns the 2-dimensional analog of the cross product with the given vector. */
		cross(p_with: Vector2) : number;

		/** Cubically interpolates between this vector and `b` using `pre_a` and `post_b` as handles, and returns the result at position `t`. `t` is in the range of `0.0 - 1.0`, representing the amount of interpolation. */
		cubic_interpolate(b: Vector2, pre_a: Vector2, post_b: Vector2, t: number) : Vector2;

		/** Returns the normalized vector pointing from this vector to `b`. */
		direction_to(b: Vector2) : Vector2;

		/** Returns the squared distance to vector `b`. Prefer this function over `distance_to` if you need to sort vectors or need the squared distance for some formula. */
		distance_squared_to(to: Vector2) : number;

		/** Returns the distance to vector `b`. */
		distance_to(to: Vector2) : number;

		/** Returns the dot product with vector `b`. */
		dot(p_with: Vector2) : number;

		/** Returns the vector with all components rounded down. */
		floor() : Vector2;

		/**  */
		is_equal_approx(v: Vector2) : boolean;

		/** Returns `true` if the vector is normalized. */
		is_normalized() : boolean;

		/** Returns the vector's length. */
		length() : number;

		/** Returns the vector's length squared. Prefer this method over `length` if you need to sort vectors or need the squared length for some formula. */
		length_squared() : number;

		/** Returns the result of the linear interpolation between this vector and `b` by amount `t`. `t` is in the range of `0.0 - 1.0`, representing the amount of interpolation. */
		linear_interpolate(b: Vector2, t: number) : Vector2;

		/** Moves the vector toward `to` by the fixed `delta` amount. */
		move_toward(to: Vector2, delta: number) : Vector2;

		/** Returns the vector scaled to unit length. Equivalent to `v / v.length()`. */
		normalized() : Vector2;

		/** Returns a vector composed of the `fposmod` of this vector's components and `mod`. */
		posmod(mod: number) : Vector2;

		/** Returns a vector composed of the `fposmod` of this vector's components and `modv`'s components. */
		posmodv(modv: Vector2) : Vector2;

		/** Returns the vector projected onto the vector `b`. */
		project(b: Vector2) : Vector2;

		/** Returns the vector reflected from a plane defined by the given normal. */
		reflect(n: Vector2) : Vector2;

		/** Returns the vector rotated by `phi` radians. See also `@GDScript.deg2rad`. */
		rotated(phi: number) : Vector2;

		/** Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero. */
		round() : Vector2;

		/** Returns the vector with each component set to one or negative one, depending on the signs of the components. */
		sign() : Vector2;

		/** Returns the result of spherical linear interpolation between this vector and `b`, by amount `t`. `t` is in the range of `0.0 - 1.0`, representing the amount of interpolation.

		 **Note:** Both vectors must be normalized. */
		slerp(b: Vector2, t: number) : Vector2;

		/** Returns the component of the vector along a plane defined by the given normal. */
		slide(n: Vector2) : Vector2;

		/** Returns the vector snapped to a grid with the given size. */
		snapped(by: Vector2) : Vector2;

		/** Returns a perpendicular vector. */
		tangent() : Vector2;

	}

	namespace Vector2 {

		enum Axis {
			/** Enumerated value for the X axis. */
			AXIS_X = 0,
			/** Enumerated value for the Y axis. */
			AXIS_Y = 1,
		}

		/** Enumerated value for the X axis. */
		const AXIS_X: Axis.AXIS_X;

		/** Enumerated value for the Y axis. */
		const AXIS_Y: Axis.AXIS_Y;

		/** Zero vector. 
		 * @value `Vector2( 0, 0 )` */
		const ZERO: Readonly<Vector2>;

		/** One vector. 
		 * @value `Vector2( 1, 1 )` */
		const ONE: Readonly<Vector2>;

		/** Infinity vector. 
		 * @value `Vector2( inf, inf )` */
		const INF: Readonly<Vector2>;

		/** Left unit vector. 
		 * @value `Vector2( -1, 0 )` */
		const LEFT: Readonly<Vector2>;

		/** Right unit vector. 
		 * @value `Vector2( 1, 0 )` */
		const RIGHT: Readonly<Vector2>;

		/** Up unit vector. 
		 * @value `Vector2( 0, -1 )` */
		const UP: Readonly<Vector2>;

		/** Down unit vector. 
		 * @value `Vector2( 0, 1 )` */
		const DOWN: Readonly<Vector2>;

	}
	
	/** 2D axis-aligned bounding box.
	 Rect2 consists of a position, a size, and several utility functions. It is typically used for fast overlap tests. */
	class Rect2 {
		constructor(from: Rect2);
		constructor(x?: number, y?: number, w?: number, h?: number);
		constructor(pos: Vector2, size: Vector2);

		/** Position (starting corner). */
		position: Vector2;

		/** Size from position to end. */
		size: Vector2;
		
		/** Ending corner. */
		// end: Vector2;

		/** Returns a `Rect2` with equivalent position and area, modified so that the top-left corner is the origin and `width` and `height` are positive. */
		abs() : Rect2;

		/** Returns the intersection of this `Rect2` and b. */
		clip(b: Rect2) : Rect2;

		/** Returns `true` if this `Rect2` completely encloses another one. */
		encloses(b: Rect2) : boolean;

		/** Returns this `Rect2` expanded to include a given point. */
		expand(to: Vector2) : Rect2;

		/** Returns the area of the `Rect2`. */
		get_area() : number;

		/** Returns a copy of the `Rect2` grown a given amount of units towards all the sides. */
		grow(by: number) : Rect2;

		/** Returns a copy of the `Rect2` grown a given amount of units towards each direction individually. */
		grow_individual(left: number, top: number, right: number,  bottom: number) : Rect2;

		/** Returns a copy of the `Rect2` grown a given amount of units towards the `Margin` direction. */
		// grow_margin(margin: number, by: number) : Rect2;

		/** Returns `true` if the `Rect2` is flat or empty. */
		has_no_area() : boolean;

		/** Returns `true` if the `Rect2` contains a point. */
		has_point(point: Vector2) : boolean;

		/** Returns `true` if the `Rect2` overlaps with another. */
		intersects(b: Rect2) : boolean;

		/**  */
		is_equal_approx(rect: Rect2) : boolean;

		/** Returns a larger Rect2 that contains this Rect2 and `b`. */
		merge(b: Rect2) : Rect2;

	}

	/** Vector used for 3D math.
	 3-element structure that can be used to represent positions in 3D space or any other pair of numeric values. */
	class Vector3 {

		constructor(v: Vector3);
		constructor(x?: number, y?: number, z?: number);

		/** The vector's X component. Also accessible by using the index position ``0``. */
		x: number;

		/** The vector's Y component. Also accessible by using the index position ``1``. */
		y: number;

		/** The vector's Z component. Also accessible by using the index position ``2``. */
		z: number;


		/** Returns a new vector with all components in absolute values (i.e. positive). */
		abs() : Vector3;

		/** Returns the minimum angle to the given vector. */
		angle_to(to: Vector3) : number;

		/** Returns the vector "bounced off" from a plane defined by the given normal. */
		bounce(n: Vector3) : Vector3;

		/** Returns a new vector with all components rounded up. */
		ceil() : Vector3;

		/** Returns the cross product with `b`. */
		cross(b: Vector3) : Vector3;

		/** Performs a cubic interpolation between vectors `pre_a`, `a`, `b`, `post_b` (`a` is current), by the given amount `t`. `t` is in the range of `0.0 - 1.0`, representing the amount of interpolation. */
		cubic_interpolate(b: Vector3, pre_a: Vector3, post_b: Vector3, t: number) : Vector3;

		/** Returns the normalized vector pointing from this vector to `b`. */
		direction_to(b: Vector3) : Vector3;

		/** Returns the squared distance to `b`. Prefer this function over `distance_to` if you need to sort vectors or need the squared distance for some formula. */
		distance_squared_to(b: Vector3) : number;

		/** Returns the distance to `b`. */
		distance_to(b: Vector3) : number;

		/** Returns the dot product with `b`. */
		dot(b: Vector3) : number;

		/** Returns a new vector with all components rounded down. */
		floor() : Vector3;

		/** Returns the inverse of the vector. This is the same as `Vector3( 1.0 / v.x, 1.0 / v.y, 1.0 / v.z )`. */
		inverse() : Vector3;

		/**  */
		is_equal_approx(v: Vector3) : boolean;

		/** Returns `true` if the vector is normalized. */
		is_normalized() : boolean;

		/** Returns the vector's length. */
		length() : number;

		/** Returns the vector's length squared. Prefer this function over `length` if you need to sort vectors or need the squared length for some formula. */
		length_squared() : number;

		/** Returns the result of the linear interpolation between this vector and `b` by amount `t`. `t` is in the range of `0.0 - 1.0`, representing the amount of interpolation.. */
		linear_interpolate(b: Vector3, t: number) : Vector3;

		/** Returns the axis of the vector's largest value. See `AXIS_*` constants. */
		max_axis() : number;

		/** Returns the axis of the vector's smallest value. See `AXIS_*` constants. */
		min_axis() : number;

		/** Moves the vector toward `to` by the fixed `delta` amount. */
		move_toward(to: Vector3, delta: number) : Vector3;

		/** Returns the vector scaled to unit length. Equivalent to `v / v.length()`. */
		normalized() : Vector3;

		/** Returns the outer product with `b`. */
		outer(b: Vector3) : Basis;

		/** Returns a vector composed of the `fposmod` of this vector's components and `mod`. */
		posmod(mod: number) : Vector3;

		/** Returns a vector composed of the `fposmod` of this vector's components and `modv`'s components. */
		posmodv(modv: Vector3) : Vector3;

		/** Returns the vector projected onto the vector `b`. */
		project(b: Vector3) : Vector3;

		/** Returns the vector reflected from a plane defined by the given normal. */
		reflect(n: Vector3) : Vector3;

		/** Rotates the vector around a given axis by `phi` radians. The axis must be a normalized vector. */
		rotated(axis: Vector3, phi: number) : Vector3;

		/** Returns the vector with all components rounded to the nearest integer, with halfway cases rounded away from zero. */
		round() : Vector3;

		/** Returns the vector with each component set to one or negative one, depending on the signs of the components. */
		sign() : Vector3;

		/** Returns the result of spherical linear interpolation between this vector and `b`, by amount `t`. `t` is in the range of `0.0 - 1.0`, representing the amount of interpolation.

		 **Note:** Both vectors must be normalized. */
		slerp(b: Vector3, t: number) : Vector3;

		/** Returns the component of the vector along a plane defined by the given normal. */
		slide(n: Vector3) : Vector3;

		/** Returns a copy of the vector snapped to the lowest neared multiple. */
		snapped(by: Vector3) : Vector3;

		/** Returns a diagonal matrix with the vector as main diagonal. */
		to_diagonal_matrix() : Basis;

	}

	namespace Vector3 {
		enum Axis {
			AXIS_X = 0,
			AXIS_Y = 1,
			AXIS_Z = 2,
		}
		const AXIS_X: Axis.AXIS_X;
		const AXIS_Y: Axis.AXIS_Y;
		const AXIS_Z: Axis.AXIS_Z;

		/** Zero vector. 
		 * @value `Vector3( 0, 0, 0 )` */
		const ZERO: Readonly<Vector3>;

		/** One vector. 
		 * @value `Vector3( 1, 1, 1 )` */
		const ONE: Readonly<Vector3>;

		/** Infinity vector. 
		 * @value `Vector3( inf, inf, inf )` */
		const INF: Readonly<Vector3>;

		/** Left unit vector. 
		 * @value `Vector3( -1, 0, 0 )` */
		const LEFT: Readonly<Vector3>;

		/** Right unit vector. 
		 * @value `Vector3( 1, 0, 0 )` */
		const RIGHT: Readonly<Vector3>;

		/** Up unit vector. 
		 * @value `Vector3( 0, 1, 0 )` */
		const UP: Readonly<Vector3>;

		/** Down unit vector. 
		 * @value `Vector3( 0, -1, 0 )` */
		const DOWN: Readonly<Vector3>;

		/** Forward unit vector. 
		 * @value `Vector3( 0, 0, -1 )` */
		const FORWARD: Readonly<Vector3>;

		/** Back unit vector. 
		 * @value `Vector3( 0, 0, 1 )` */
		const BACK: Readonly<Vector3>;
	}
	
	/** 33 matrix datatype.
	 33 matrix used for 3D rotation and scale. Contains 3 vector fields X, Y and Z as its columns, which can be interpreted as the local basis vectors of a transformation. Can also be accessed as array of 3D vectors. These vectors are orthogonal to each other, but are not necessarily normalized (due to scaling). Almost always used as an orthogonal basis for a `Transform`.

	 For such use, it is composed of a scaling and a rotation matrix, in that order (M = R.S). */
	class Basis {

		constructor();
		constructor(from: Basis);
		constructor(from: Quat);
		constructor(from: Vector3);
		constructor(axis: Vector3, phi: number);
		constructor(x_axis: Vector3, y_axis: Vector3, z_axis: Vector3);

		/** The basis matrix's X vector. */
		x: Vector3;

		/** The basis matrix's Y vector. */
		y: Vector3;

		/** The basis matrix's Z vector. */
		z: Vector3;


		/** Returns the determinant of the matrix. */
		determinant() : number;

		/** Assuming that the matrix is a proper rotation matrix (orthonormal matrix with determinant +1), return Euler angles (in the YXZ convention: first Z, then X, and Y last). Returned vector contains the rotation angles in the format (X angle, Y angle, Z angle). */
		get_euler() : Vector3;

		/** This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1,0 or 1, and returns the index of the point best representing the orientation of the object. It is mainly used by the grid map editor. For further details, refer to Godot source code. */
		get_orthogonal_index() : number;

		/**  */
		get_rotation_quat() : Quat;

		/** Assuming that the matrix is the combination of a rotation and scaling, return the absolute value of scaling factors along each axis. */
		get_scale() : Vector3;

		/** Returns the inverse of the matrix. */
		inverse() : Basis;

		/**  */
		// is_equal_approx(b: Basis, epsilon?: number) : boolean;

		/** Returns the orthonormalized version of the matrix (useful to call from time to time to avoid rounding error for orthogonal matrices). This performs a Gram-Schmidt orthonormalization on the basis of the matrix. */
		orthonormalized() : Basis;

		/** Introduce an additional rotation around the given axis by phi (radians). The axis must be a normalized vector. */
		rotated(axis: Vector3, phi: number) : Basis;

		/** Introduce an additional scaling specified by the given 3D scaling factor. */
		scaled(scale: Vector3) : Basis;

		/** Assuming that the matrix is a proper rotation matrix, slerp performs a spherical-linear interpolation with another rotation matrix. */
		slerp(b: Basis, t: number) : Basis;

		/** Transposed dot product with the X axis of the matrix. */
		tdotx(p_with: Vector3) : number;

		/** Transposed dot product with the Y axis of the matrix. */
		tdoty(p_with: Vector3) : number;

		/** Transposed dot product with the Z axis of the matrix. */
		tdotz(p_with: Vector3) : number;

		/** Returns the transposed version of the matrix. */
		transposed() : Basis;

		/** Returns a vector transformed (multiplied) by the matrix. */
		xform(v: Vector3) : Vector3;

		/** Returns a vector transformed (multiplied) by the transposed matrix.

		 **Note:** This results in a multiplication by the inverse of the matrix only if it represents a rotation-reflection. */
		xform_inv(v: Vector3) : Vector3;

	}

	namespace Basis {
		/** @value `Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )` */
		const IDENTITY: Readonly<Basis>;

		/** @value `Basis( -1, 0, 0, 0, 1, 0, 0, 0, 1 )` */
		const FLIP_X: Readonly<Basis>;

		/** @value `Basis( 1, 0, 0, 0, -1, 0, 0, 0, 1 )` */
		const FLIP_Y: Readonly<Basis>;

		/** @value `Basis( 1, 0, 0, 0, 1, 0, 0, 0, -1 )` */
		const FLIP_Z: Readonly<Basis>;
	}
	
	/** 3D transformation (34 matrix).
	 Represents one or many transformations in 3D space such as translation, rotation, or scaling. It consists of a `basis` and an `origin`. It is similar to a 34 matrix. */
	class Transform {
		constructor(from: Transform);
		constructor(from: Quat);
		constructor(from: Basis);
		constructor(from: Transform2D);
		constructor(basis: Basis, origin: Vector3);
		constructor(x_axis?: Vector3, y_axis?: Vector3, z_axis?: Vector3, origin?: Vector3);

		/** The basis is a matrix containing 3 `Vector3` as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object. */
		basis: Basis;

		/** The translation offset of the transform. */
		origin: Vector3;


		/** Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation. */
		affine_inverse() : Transform;

		/** Interpolates the transform to other Transform by weight amount (0-1). */
		interpolate_with(transform: Transform, weight: number) : Transform;

		/** Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling). */
		inverse() : Transform;

		/**  */
		is_equal_approx(transform: Transform) : boolean;

		/** Returns a copy of the transform rotated such that its -Z axis points towards the `target` position.

		 The transform will first be rotated around the given `up` vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the `target` and `up` vectors.

		 Operations take place in global space. */
		looking_at(target: Vector3, up: Vector3) : Transform;

		/** Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors. */
		orthonormalized() : Transform;

		/** Rotates the transform around given axis by phi. The axis must be a normalized vector. */
		rotated(axis: Vector3, phi: number) : Transform;

		/** Scales the transform by the specified 3D scaling factors. */
		scaled(scale: Vector3) : Transform;

		/** Translates the transform by the specified offset. */
		translated(ofs: Vector3) : Transform;

		/** Transforms the given `Vector3`, `Plane`, `AABB`, or `PoolVector3Array` by this transform. */
		// xform(v: any) : any;

		/** Inverse-transforms the given `Vector3`, `Plane`, `AABB`, or `PoolVector3Array` by this transform. */
		// xform_inv(v: any) : any;

	}

	namespace Transform {
		/** `Transform` with no translation, rotation or scaling applied. When applied to other data structures, `IDENTITY` performs no transformation. 
		 * @value `Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )` */
		const IDENTITY: Readonly<Transform>;

		/** `Transform` with mirroring applied perpendicular to the YZ plane. 
		 * @value `Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )` */
		const FLIP_X: Readonly<Transform>;

		/** `Transform` with mirroring applied perpendicular to the XZ plane. 
		 * @value `Transform( 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0 )` */
		const FLIP_Y: Readonly<Transform>;

		/** `Transform` with mirroring applied perpendicular to the XY plane. 
		 * @value `Transform( 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0 )` */
		const FLIP_Z: Readonly<Transform>;
	}

	/** 2D transformation (32 matrix).
	 Represents one or many transformations in 2D space such as translation, rotation, or scaling. It consists of two `x` and `y` `Vector2`s and an `origin`. It is similar to a 32 matrix. */
	class Transform2D {
		constructor();
		constructor(from: Transform2D);
		constructor(from: Transform);
		constructor(x_axis: Vector2, y_axis: Vector2, origin: Vector2);
		constructor(rotation: number, position: Vector2);

		/** The X axis of 22 basis matrix containing 2 `Vector2`s as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object. */
		x: Vector2;

		/** The Y axis of 22 basis matrix containing 2 `Vector2`s as its columns: X axis and Y axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object. */
		y: Vector2;

		/** The transform's translation offset. */
		origin: Vector2;


		/** Returns the inverse of the matrix. */
		affine_inverse() : Transform2D;

		/** Transforms the given vector by this transform's basis (no translation). */
		basis_xform(v: Vector2) : Vector2;

		/** Inverse-transforms the given vector by this transform's basis (no translation). */
		basis_xform_inv(v: Vector2) : Vector2;

		/** Returns the transform's origin (translation). */
		get_origin() : Vector2;

		/** Returns the transform's rotation (in radians). */
		get_rotation() : number;

		/** Returns the scale. */
		get_scale() : Vector2;

		/** Returns a transform interpolated between this transform and another by a given weight (0-1). */
		interpolate_with(transform: Transform2D, weight: number) : Transform2D;

		/** Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use affine_inverse for transforms with scaling). */
		inverse() : Transform2D;

		/**  */
		is_equal_approx(transform: Transform2D) : boolean;

		/** Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors. */
		orthonormalized() : Transform2D;

		/** Rotates the transform by the given angle (in radians). */
		rotated(phi: number) : Transform2D;

		/** Scales the transform by the given factor. */
		scaled(scale: Vector2) : Transform2D;

		/** Translates the transform by the given offset. */
		translated(offset: Vector2) : Transform2D;

		/** Transforms the given `Vector2`, `Rect2`, or `PoolVector2Array` by this transform. */
		// xform(v: any) : any;

		/** Inverse-transforms the given `Vector2`, `Rect2`, or `PoolVector2Array` by this transform. */
		// xform_inv(v: any) : any;

	}

	namespace Transform2D {
		/** `Transform2D` with no translation, rotation or scaling applied. When applied to other data structures, `IDENTITY` performs no transformation. 
		 * @value `Transform2D( 1, 0, 0, 1, 0, 0 )` */
		const IDENTITY: Readonly<Transform2D>;

		/** `Transform2D` with mirroring applied parallel to the X axis. 
		 * @value `Transform2D( -1, 0, 0, 1, 0, 0 )` */
		const FLIP_X: Readonly<Transform2D>;

		/** `Transform2D` with mirroring applied parallel to the Y axis. 
		 * @value `Transform2D( 1, 0, 0, -1, 0, 0 )` */
		const FLIP_Y: Readonly<Transform2D>;
	}
	
	/** Color in RGBA format with some support for ARGB format.
	 A color is represented by red, green, and blue `(r, g, b)` components. Additionally, `a` represents the alpha component, often used for transparency. Values are in floating-point and usually range from 0 to 1. Some properties (such as `CanvasItem.modulate`) may accept values greater than 1.

	 You can also create a color from standardized color names by using `@GDScript.ColorN`. */
	class Color {
		constructor(from: Color);
		constructor(from: string);
		constructor(from: number);
		constructor(r?: number, g?: number, b?: number, a?: number);

		/** Red value (range 0 to 1). */
		r: number;

		/** Green value (range 0 to 1). */
		g: number;

		/** Blue value (range 0 to 1). */
		b: number;

		/** Alpha value (range 0 to 1). */
		a: number;

		/** HSV hue value (range 0 to 1). */
		// h: number;

		/** HSV saturation value (range 0 to 1). */
		// s: number;

		/** HSV value (range 0 to 1). */
		// v: number;

		/** Red value (range 0 to 255). */
		// r8: number;

		/** Green value (range 0 to 255). */
		// g8: number;

		/** Blue value (range 0 to 255). */
		// b8: number;

		/** Alpha value (range 0 to 255). */
		// a8: number;


		/** Returns a new color resulting from blending this color over another. If the color is opaque, the result is also opaque. The second color may have a range of alpha values.

		 

		 	var bg = Color(0.0, 1.0, 0.0, 0.5) # Green with alpha of 50%
		 	var fg = Color(1.0, 0.0, 0.0, 0.5) # Red with alpha of 50%
		 	var blended_color = bg.blend(fg) # Brown with alpha of 75%
		  */
		blend(over: Color) : Color;

		/** Returns the most contrasting color.

		 

		 	var c = Color(0.3, 0.4, 0.9)
		 	var contrasted_color = c.contrasted() # Equivalent to RGBA(204, 229, 102, 255)
		  */
		contrasted() : Color;

		/** Returns a new color resulting from making this color darker by the specified percentage (ratio from 0 to 1).

		 

		 	var green = Color(0.0, 1.0, 0.0)
		 	var darkgreen = green.darkened(0.2) # 20% darker than regular green
		  */
		darkened(amount: number) : Color;

		/** Constructs a color from an HSV profile. `h`, `s`, and `v` are values between 0 and 1.

		 

		 	var c = Color.from_hsv(0.58, 0.5, 0.79, 0.8) # Equivalent to HSV(210, 50, 79, 0.8) or Color8(100, 151, 201, 0.8)
		  */
		from_hsv(h: number, s: number, v: number, a?: number) : Color;

		/** Returns the color's grayscale representation.

		 The gray value is calculated as `(r + g + b) / 3`.

		 

		 	var c = Color(0.2, 0.45, 0.82)
		 	var gray = c.gray() # A value of 0.466667
		  */
		gray() : number;

		/** Returns the inverted color `(1 - r, 1 - g, 1 - b, a)`.

		 

		 	var c = Color(0.3, 0.4, 0.9)
		 	var inverted_color = c.inverted() # A color of an RGBA(178, 153, 26, 255)
		  */
		inverted() : Color;

		/**  */
		is_equal_approx(color: Color) : boolean;

		/** Returns a new color resulting from making this color lighter by the specified percentage (ratio from 0 to 1).

		 

		 	var green = Color(0.0, 1.0, 0.0)
		 	var lightgreen = green.lightened(0.2) # 20% lighter than regular green
		  */
		lightened(amount: number) : Color;

		/** Returns the linear interpolation with another color. The interpolation factor `t` is between 0 and 1.

		 

		 	var c1 = Color(1.0, 0.0, 0.0)
		 	var c2 = Color(0.0, 1.0, 0.0)
		 	var li_c = c1.linear_interpolate(c2, 0.5) # A color of an RGBA(128, 128, 0, 255)
		  */
		linear_interpolate(b: Color, t: number) : Color;

		/** Returns the color's 32-bit integer in ABGR format (each byte represents a component of the ABGR profile). ABGR is the reversed version of the default format.

		 

		 	var c = Color(1, 0.5, 0.2)
		 	print(c.to_abgr32()) # Prints 4281565439
		  */
		to_abgr32() : number;

		/** Returns the color's 64-bit integer in ABGR format (each word represents a component of the ABGR profile). ABGR is the reversed version of the default format.

		 

		 	var c = Color(1, 0.5, 0.2)
		 	print(c.to_abgr64()) # Prints -225178692812801
		  */
		to_abgr64() : number;

		/** Returns the color's 32-bit integer in ARGB format (each byte represents a component of the ARGB profile). ARGB is more compatible with DirectX.

		 

		 	var c = Color(1, 0.5, 0.2)
		 	print(c.to_argb32()) # Prints 4294934323
		  */
		to_argb32() : number;

		/** Returns the color's 64-bit integer in ARGB format (each word represents a component of the ARGB profile). ARGB is more compatible with DirectX.

		 

		 	var c = Color(1, 0.5, 0.2)
		 	print(c.to_argb64()) # Prints -2147470541
		  */
		to_argb64() : number;

		/** Returns the color's HTML hexadecimal color string in ARGB format (ex: `ff34f822`).

		 Setting `with_alpha` to `false` excludes alpha from the hexadecimal string.

		 

		 	var c = Color(1, 1, 1, 0.5)
		 	var s1 = c.to_html() # Returns "7fffffff"
		 	var s2 = c.to_html(false) # Returns "ffffff"
		  */
		to_html(with_alpha?: boolean) : string;

		/** Returns the color's 32-bit integer in RGBA format (each byte represents a component of the RGBA profile). RGBA is Godot's default format.

		 

		 	var c = Color(1, 0.5, 0.2)
		 	print(c.to_rgba32()) # Prints 4286526463
		  */
		to_rgba32() : number;

		/** Returns the color's 64-bit integer in RGBA format (each word represents a component of the RGBA profile). RGBA is Godot's default format.

		 

		 	var c = Color(1, 0.5, 0.2)
		 	print(c.to_rgba64()) # Prints -140736629309441
		  */
		to_rgba64() : number;

	}

	namespace Color {
		/**  
		 * @value `Color( 0.75, 0.75, 0.75, 1 )` */
		const gray: Readonly<Color>

		/**  
		 * @value `Color( 0.94, 0.97, 1, 1 )` */
		const aliceblue: Readonly<Color>

		/**  
		 * @value `Color( 0.98, 0.92, 0.84, 1 )` */
		const antiquewhite: Readonly<Color>

		/**  
		 * @value `Color( 0, 1, 1, 1 )` */
		const aqua: Readonly<Color>

		/**  
		 * @value `Color( 0.5, 1, 0.83, 1 )` */
		const aquamarine: Readonly<Color>

		/**  
		 * @value `Color( 0.94, 1, 1, 1 )` */
		const azure: Readonly<Color>

		/**  
		 * @value `Color( 0.96, 0.96, 0.86, 1 )` */
		const beige: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.89, 0.77, 1 )` */
		const bisque: Readonly<Color>

		/**  
		 * @value `Color( 0, 0, 0, 1 )` */
		const black: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.92, 0.8, 1 )` */
		const blanchedalmond: Readonly<Color>

		/**  
		 * @value `Color( 0, 0, 1, 1 )` */
		const blue: Readonly<Color>

		/**  
		 * @value `Color( 0.54, 0.17, 0.89, 1 )` */
		const blueviolet: Readonly<Color>

		/**  
		 * @value `Color( 0.65, 0.16, 0.16, 1 )` */
		const brown: Readonly<Color>

		/**  
		 * @value `Color( 0.87, 0.72, 0.53, 1 )` */
		const burlywood: Readonly<Color>

		/**  
		 * @value `Color( 0.37, 0.62, 0.63, 1 )` */
		const cadetblue: Readonly<Color>

		/**  
		 * @value `Color( 0.5, 1, 0, 1 )` */
		const chartreuse: Readonly<Color>

		/**  
		 * @value `Color( 0.82, 0.41, 0.12, 1 )` */
		const chocolate: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.5, 0.31, 1 )` */
		const coral: Readonly<Color>

		/**  
		 * @value `Color( 0.39, 0.58, 0.93, 1 )` */
		const cornflower: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.97, 0.86, 1 )` */
		const cornsilk: Readonly<Color>

		/**  
		 * @value `Color( 0.86, 0.08, 0.24, 1 )` */
		const crimson: Readonly<Color>

		/**  
		 * @value `Color( 0, 1, 1, 1 )` */
		const cyan: Readonly<Color>

		/**  
		 * @value `Color( 0, 0, 0.55, 1 )` */
		const darkblue: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.55, 0.55, 1 )` */
		const darkcyan: Readonly<Color>

		/**  
		 * @value `Color( 0.72, 0.53, 0.04, 1 )` */
		const darkgoldenrod: Readonly<Color>

		/**  
		 * @value `Color( 0.66, 0.66, 0.66, 1 )` */
		const darkgray: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.39, 0, 1 )` */
		const darkgreen: Readonly<Color>

		/**  
		 * @value `Color( 0.74, 0.72, 0.42, 1 )` */
		const darkkhaki: Readonly<Color>

		/**  
		 * @value `Color( 0.55, 0, 0.55, 1 )` */
		const darkmagenta: Readonly<Color>

		/**  
		 * @value `Color( 0.33, 0.42, 0.18, 1 )` */
		const darkolivegreen: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.55, 0, 1 )` */
		const darkorange: Readonly<Color>

		/**  
		 * @value `Color( 0.6, 0.2, 0.8, 1 )` */
		const darkorchid: Readonly<Color>

		/**  
		 * @value `Color( 0.55, 0, 0, 1 )` */
		const darkred: Readonly<Color>

		/**  
		 * @value `Color( 0.91, 0.59, 0.48, 1 )` */
		const darksalmon: Readonly<Color>

		/**  
		 * @value `Color( 0.56, 0.74, 0.56, 1 )` */
		const darkseagreen: Readonly<Color>

		/**  
		 * @value `Color( 0.28, 0.24, 0.55, 1 )` */
		const darkslateblue: Readonly<Color>

		/**  
		 * @value `Color( 0.18, 0.31, 0.31, 1 )` */
		const darkslategray: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.81, 0.82, 1 )` */
		const darkturquoise: Readonly<Color>

		/**  
		 * @value `Color( 0.58, 0, 0.83, 1 )` */
		const darkviolet: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.08, 0.58, 1 )` */
		const deeppink: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.75, 1, 1 )` */
		const deepskyblue: Readonly<Color>

		/**  
		 * @value `Color( 0.41, 0.41, 0.41, 1 )` */
		const dimgray: Readonly<Color>

		/**  
		 * @value `Color( 0.12, 0.56, 1, 1 )` */
		const dodgerblue: Readonly<Color>

		/**  
		 * @value `Color( 0.7, 0.13, 0.13, 1 )` */
		const firebrick: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.98, 0.94, 1 )` */
		const floralwhite: Readonly<Color>

		/**  
		 * @value `Color( 0.13, 0.55, 0.13, 1 )` */
		const forestgreen: Readonly<Color>

		/**  
		 * @value `Color( 1, 0, 1, 1 )` */
		const fuchsia: Readonly<Color>

		/**  
		 * @value `Color( 0.86, 0.86, 0.86, 1 )` */
		const gainsboro: Readonly<Color>

		/**  
		 * @value `Color( 0.97, 0.97, 1, 1 )` */
		const ghostwhite: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.84, 0, 1 )` */
		const gold: Readonly<Color>

		/**  
		 * @value `Color( 0.85, 0.65, 0.13, 1 )` */
		const goldenrod: Readonly<Color>

		/**  
		 * @value `Color( 0, 1, 0, 1 )` */
		const green: Readonly<Color>

		/**  
		 * @value `Color( 0.68, 1, 0.18, 1 )` */
		const greenyellow: Readonly<Color>

		/**  
		 * @value `Color( 0.94, 1, 0.94, 1 )` */
		const honeydew: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.41, 0.71, 1 )` */
		const hotpink: Readonly<Color>

		/**  
		 * @value `Color( 0.8, 0.36, 0.36, 1 )` */
		const indianred: Readonly<Color>

		/**  
		 * @value `Color( 0.29, 0, 0.51, 1 )` */
		const indigo: Readonly<Color>

		/**  
		 * @value `Color( 1, 1, 0.94, 1 )` */
		const ivory: Readonly<Color>

		/**  
		 * @value `Color( 0.94, 0.9, 0.55, 1 )` */
		const khaki: Readonly<Color>

		/**  
		 * @value `Color( 0.9, 0.9, 0.98, 1 )` */
		const lavender: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.94, 0.96, 1 )` */
		const lavenderblush: Readonly<Color>

		/**  
		 * @value `Color( 0.49, 0.99, 0, 1 )` */
		const lawngreen: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.98, 0.8, 1 )` */
		const lemonchiffon: Readonly<Color>

		/**  
		 * @value `Color( 0.68, 0.85, 0.9, 1 )` */
		const lightblue: Readonly<Color>

		/**  
		 * @value `Color( 0.94, 0.5, 0.5, 1 )` */
		const lightcoral: Readonly<Color>

		/**  
		 * @value `Color( 0.88, 1, 1, 1 )` */
		const lightcyan: Readonly<Color>

		/**  
		 * @value `Color( 0.98, 0.98, 0.82, 1 )` */
		const lightgoldenrod: Readonly<Color>

		/**  
		 * @value `Color( 0.83, 0.83, 0.83, 1 )` */
		const lightgray: Readonly<Color>

		/**  
		 * @value `Color( 0.56, 0.93, 0.56, 1 )` */
		const lightgreen: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.71, 0.76, 1 )` */
		const lightpink: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.63, 0.48, 1 )` */
		const lightsalmon: Readonly<Color>

		/**  
		 * @value `Color( 0.13, 0.7, 0.67, 1 )` */
		const lightseagreen: Readonly<Color>

		/**  
		 * @value `Color( 0.53, 0.81, 0.98, 1 )` */
		const lightskyblue: Readonly<Color>

		/**  
		 * @value `Color( 0.47, 0.53, 0.6, 1 )` */
		const lightslategray: Readonly<Color>

		/**  
		 * @value `Color( 0.69, 0.77, 0.87, 1 )` */
		const lightsteelblue: Readonly<Color>

		/**  
		 * @value `Color( 1, 1, 0.88, 1 )` */
		const lightyellow: Readonly<Color>

		/**  
		 * @value `Color( 0, 1, 0, 1 )` */
		const lime: Readonly<Color>

		/**  
		 * @value `Color( 0.2, 0.8, 0.2, 1 )` */
		const limegreen: Readonly<Color>

		/**  
		 * @value `Color( 0.98, 0.94, 0.9, 1 )` */
		const linen: Readonly<Color>

		/**  
		 * @value `Color( 1, 0, 1, 1 )` */
		const magenta: Readonly<Color>

		/**  
		 * @value `Color( 0.69, 0.19, 0.38, 1 )` */
		const maroon: Readonly<Color>

		/**  
		 * @value `Color( 0.4, 0.8, 0.67, 1 )` */
		const mediumaquamarine: Readonly<Color>

		/**  
		 * @value `Color( 0, 0, 0.8, 1 )` */
		const mediumblue: Readonly<Color>

		/**  
		 * @value `Color( 0.73, 0.33, 0.83, 1 )` */
		const mediumorchid: Readonly<Color>

		/**  
		 * @value `Color( 0.58, 0.44, 0.86, 1 )` */
		const mediumpurple: Readonly<Color>

		/**  
		 * @value `Color( 0.24, 0.7, 0.44, 1 )` */
		const mediumseagreen: Readonly<Color>

		/**  
		 * @value `Color( 0.48, 0.41, 0.93, 1 )` */
		const mediumslateblue: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.98, 0.6, 1 )` */
		const mediumspringgreen: Readonly<Color>

		/**  
		 * @value `Color( 0.28, 0.82, 0.8, 1 )` */
		const mediumturquoise: Readonly<Color>

		/**  
		 * @value `Color( 0.78, 0.08, 0.52, 1 )` */
		const mediumvioletred: Readonly<Color>

		/**  
		 * @value `Color( 0.1, 0.1, 0.44, 1 )` */
		const midnightblue: Readonly<Color>

		/**  
		 * @value `Color( 0.96, 1, 0.98, 1 )` */
		const mintcream: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.89, 0.88, 1 )` */
		const mistyrose: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.89, 0.71, 1 )` */
		const moccasin: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.87, 0.68, 1 )` */
		const navajowhite: Readonly<Color>

		/**  
		 * @value `Color( 0, 0, 0.5, 1 )` */
		const navyblue: Readonly<Color>

		/**  
		 * @value `Color( 0.99, 0.96, 0.9, 1 )` */
		const oldlace: Readonly<Color>

		/**  
		 * @value `Color( 0.5, 0.5, 0, 1 )` */
		const olive: Readonly<Color>

		/**  
		 * @value `Color( 0.42, 0.56, 0.14, 1 )` */
		const olivedrab: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.65, 0, 1 )` */
		const orange: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.27, 0, 1 )` */
		const orangered: Readonly<Color>

		/**  
		 * @value `Color( 0.85, 0.44, 0.84, 1 )` */
		const orchid: Readonly<Color>

		/**  
		 * @value `Color( 0.93, 0.91, 0.67, 1 )` */
		const palegoldenrod: Readonly<Color>

		/**  
		 * @value `Color( 0.6, 0.98, 0.6, 1 )` */
		const palegreen: Readonly<Color>

		/**  
		 * @value `Color( 0.69, 0.93, 0.93, 1 )` */
		const paleturquoise: Readonly<Color>

		/**  
		 * @value `Color( 0.86, 0.44, 0.58, 1 )` */
		const palevioletred: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.94, 0.84, 1 )` */
		const papayawhip: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.85, 0.73, 1 )` */
		const peachpuff: Readonly<Color>

		/**  
		 * @value `Color( 0.8, 0.52, 0.25, 1 )` */
		const peru: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.75, 0.8, 1 )` */
		const pink: Readonly<Color>

		/**  
		 * @value `Color( 0.87, 0.63, 0.87, 1 )` */
		const plum: Readonly<Color>

		/**  
		 * @value `Color( 0.69, 0.88, 0.9, 1 )` */
		const powderblue: Readonly<Color>

		/**  
		 * @value `Color( 0.63, 0.13, 0.94, 1 )` */
		const purple: Readonly<Color>

		/**  
		 * @value `Color( 0.4, 0.2, 0.6, 1 )` */
		const rebeccapurple: Readonly<Color>

		/**  
		 * @value `Color( 1, 0, 0, 1 )` */
		const red: Readonly<Color>

		/**  
		 * @value `Color( 0.74, 0.56, 0.56, 1 )` */
		const rosybrown: Readonly<Color>

		/**  
		 * @value `Color( 0.25, 0.41, 0.88, 1 )` */
		const royalblue: Readonly<Color>

		/**  
		 * @value `Color( 0.55, 0.27, 0.07, 1 )` */
		const saddlebrown: Readonly<Color>

		/**  
		 * @value `Color( 0.98, 0.5, 0.45, 1 )` */
		const salmon: Readonly<Color>

		/**  
		 * @value `Color( 0.96, 0.64, 0.38, 1 )` */
		const sandybrown: Readonly<Color>

		/**  
		 * @value `Color( 0.18, 0.55, 0.34, 1 )` */
		const seagreen: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.96, 0.93, 1 )` */
		const seashell: Readonly<Color>

		/**  
		 * @value `Color( 0.63, 0.32, 0.18, 1 )` */
		const sienna: Readonly<Color>

		/**  
		 * @value `Color( 0.75, 0.75, 0.75, 1 )` */
		const silver: Readonly<Color>

		/**  
		 * @value `Color( 0.53, 0.81, 0.92, 1 )` */
		const skyblue: Readonly<Color>

		/**  
		 * @value `Color( 0.42, 0.35, 0.8, 1 )` */
		const slateblue: Readonly<Color>

		/**  
		 * @value `Color( 0.44, 0.5, 0.56, 1 )` */
		const slategray: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.98, 0.98, 1 )` */
		const snow: Readonly<Color>

		/**  
		 * @value `Color( 0, 1, 0.5, 1 )` */
		const springgreen: Readonly<Color>

		/**  
		 * @value `Color( 0.27, 0.51, 0.71, 1 )` */
		const steelblue: Readonly<Color>

		/**  
		 * @value `Color( 0.82, 0.71, 0.55, 1 )` */
		const tan: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.5, 0.5, 1 )` */
		const teal: Readonly<Color>

		/**  
		 * @value `Color( 0.85, 0.75, 0.85, 1 )` */
		const thistle: Readonly<Color>

		/**  
		 * @value `Color( 1, 0.39, 0.28, 1 )` */
		const tomato: Readonly<Color>

		/**  
		 * @value `Color( 1, 1, 1, 0 )` */
		const transparent: Readonly<Color>

		/**  
		 * @value `Color( 0.25, 0.88, 0.82, 1 )` */
		const turquoise: Readonly<Color>

		/**  
		 * @value `Color( 0.93, 0.51, 0.93, 1 )` */
		const violet: Readonly<Color>

		/**  
		 * @value `Color( 0.5, 0.5, 0.5, 1 )` */
		const webgray: Readonly<Color>

		/**  
		 * @value `Color( 0, 0.5, 0, 1 )` */
		const webgreen: Readonly<Color>

		/**  
		 * @value `Color( 0.5, 0, 0, 1 )` */
		const webmaroon: Readonly<Color>

		/**  
		 * @value `Color( 0.5, 0, 0.5, 1 )` */
		const webpurple: Readonly<Color>

		/**  
		 * @value `Color( 0.96, 0.87, 0.7, 1 )` */
		const wheat: Readonly<Color>

		/**  
		 * @value `Color( 1, 1, 1, 1 )` */
		const white: Readonly<Color>

		/**  
		 * @value `Color( 0.96, 0.96, 0.96, 1 )` */
		const whitesmoke: Readonly<Color>

		/**  
		 * @value `Color( 1, 1, 0, 1 )` */
		const yellow: Readonly<Color>

		/**  
		 * @value `Color( 0.6, 0.8, 0.2, 1 )` */
		const yellowgreen: Readonly<Color>
	}
	
	/** Handle for a `Resource`'s unique ID.
	 The RID type is used to access the unique integer ID of a resource. They are opaque, which means they do not grant access to the associated resource by themselves. They are used by and with the low-level Server classes such as `VisualServer`. */
	class RID {
		/** Returns the ID of the referenced resource. */
		get_id() : number;
	}
	
	/** Plane in hessian form.
	 Plane represents a normalized plane equation. Basically, "normal" is the normal of the plane (a,b,c normalized), and "d" is the distance from the origin to the plane (in the direction of "normal"). "Over" or "Above" the plane is considered the side of the plane towards where the normal is pointing. */
	class Plane {

		constructor(from: Plane);
		constructor(v1: Vector3, d: number);
		constructor(v1: Vector3, v2: Vector3, v3: Vector3);
		constructor(a?: number, b?: number, c?: number, d?: number);

		/**  */
		normal: Vector3;

		/**  */
		x: number;

		/**  */
		y: number;

		/**  */
		z: number;

		/**  */
		d: number;


		/** Returns the center of the plane. */
		center() : Vector3;

		/** Returns the shortest distance from the plane to the position `point`. */
		distance_to(point: Vector3) : number;

		/** Returns a point on the plane. */
		get_any_point() : Vector3;

		/** Returns `true` if `point` is inside the plane (by a very minimum `epsilon` threshold). */
		has_point(point: Vector3, epsilon?: number) : boolean;

		/** Returns the intersection point of the three planes `b`, `c` and this plane. If no intersection is found, `null` is returned. */
		// intersect_3(b: Plane, c: Plane) : Vector3;

		/** Returns the intersection point of a ray consisting of the position `from` and the direction normal `dir` with this plane. If no intersection is found, `null` is returned. */
		// intersects_ray(p_from: Vector3, dir: Vector3) : Vector3;

		/** Returns the intersection point of a segment from position `begin` to position `end` with this plane. If no intersection is found, `null` is returned. */
		// intersects_segment(begin: Vector3, end: Vector3) : Vector3;

		/**  */
		is_equal_approx(plane: Plane) : boolean;

		/** Returns `true` if `point` is located above the plane. */
		is_point_over(point: Vector3) : boolean;

		/** Returns a copy of the plane, normalized. */
		normalized() : Plane;

		/** Returns the orthogonal projection of point `p` into a point in the plane. */
		project(point: Vector3) : Vector3;

	}

	namespace Plane {
		/** @value `Plane( 1, 0, 0, 0 )` */
		const PLANE_YZ: Plane;

		/** @value `Plane( 0, 1, 0, 0 )` */
		const PLANE_XZ: Plane;

		/** @value `Plane( 0, 0, 1, 0 )` */
		const PLANE_XY: Plane;
	}
	
	/** Quaternion.
	 A unit quaternion used for representing 3D rotations.

	 It is similar to `Basis`, which implements matrix representation of rotations, and can be parametrized using both an axis-angle pair or Euler angles. But due to its compactness and the way it is stored in memory, certain operations (obtaining axis-angle and performing SLERP, in particular) are more efficient and robust against floating-point errors.

	 Quaternions need to be (re)normalized. */
	class Quat {
		constructor(from: Quat);
		constructor(from: Basis);
		constructor(euler: Vector3);
		constructor(axis: Vector3, angle: number);
		constructor(x?: number, y?: number, z?: number, w?: number);

		/** X component of the quaternion. */
		x: number;

		/** Y component of the quaternion. */
		y: number;

		/** Z component of the quaternion. */
		z: number;

		/** W component of the quaternion. */
		w: number;


		/** Performs a cubic spherical-linear interpolation with another quaternion. */
		cubic_slerp(b: Quat, pre_a: Quat, post_b: Quat, t: number) : Quat;

		/** Returns the dot product of two quaternions. */
		dot(b: Quat) : number;

		/** Returns Euler angles (in the YXZ convention: first Z, then X, and Y last) corresponding to the rotation represented by the unit quaternion. Returned vector contains the rotation angles in the format (X angle, Y angle, Z angle). */
		get_euler() : Vector3;

		/** Returns the inverse of the quaternion. */
		inverse() : Quat;

		/**  */
		is_equal_approx(quat: Quat) : boolean;

		/** Returns whether the quaternion is normalized or not. */
		is_normalized() : boolean;

		/** Returns the length of the quaternion. */
		length() : number;

		/** Returns the length of the quaternion, squared. */
		length_squared() : number;

		/** Returns a copy of the quaternion, normalized to unit length. */
		normalized() : Quat;

		/** Sets the quaternion to a rotation which rotates around axis by the specified angle, in radians. The axis must be a normalized vector. */
		set_axis_angle(axis: Vector3, angle: number) : void;

		/** Sets the quaternion to a rotation specified by Euler angles (in the YXZ convention: first Z, then X, and Y last), given in the vector format as (X angle, Y angle, Z angle). */
		set_euler(euler: Vector3) : void;

		/** Performs a spherical-linear interpolation with another quaternion. */
		slerp(b: Quat, t: number) : Quat;

		/** Performs a spherical-linear interpolation with another quaterion without checking if the rotation path is not bigger than 90. */
		slerpni(b: Quat, t: number) : Quat;

		/** Transforms the vector `v` by this quaternion. */
		xform(v: Vector3) : Vector3;

	}

	namespace Quat {
		/** @value `Quat( 0, 0, 0, 1 )` */
		const IDENTITY: Readonly<Quat>;
	}
	
	/** Axis-Aligned Bounding Box.
	 AABB consists of a position, a size, and several utility functions. It is typically used for fast overlap tests. */
	class AABB {

		constructor(from: AABB);
		constructor(position?: Vector3, size?: Vector3);

		/** Beginning corner. */
		position: Vector3;

		/** Size from position to end. */
		size: Vector3;

		/** Ending corner. */
		// end: Vector3;


		/** Returns `true` if this `AABB` completely encloses another one. */
		encloses(p_with: AABB) : boolean;

		/** Returns this `AABB` expanded to include a given point. */
		expand(to_point: Vector3) : AABB;

		/** Gets the area of the `AABB`. */
		get_area() : number;

		/** Gets the position of the 8 endpoints of the `AABB` in space. */
		get_endpoint(idx: number) : Vector3;

		/** Returns the normalized longest axis of the `AABB`. */
		get_longest_axis() : Vector3;

		/** Returns the index of the longest axis of the `AABB` (according to `Vector3`::AXIS* enum). */
		get_longest_axis_index() : number;

		/** Returns the scalar length of the longest axis of the `AABB`. */
		get_longest_axis_size() : number;

		/** Returns the normalized shortest axis of the `AABB`. */
		get_shortest_axis() : Vector3;

		/** Returns the index of the shortest axis of the `AABB` (according to `Vector3`::AXIS* enum). */
		get_shortest_axis_index() : number;

		/** Returns the scalar length of the shortest axis of the `AABB`. */
		get_shortest_axis_size() : number;

		/** Returns the support point in a given direction. This is useful for collision detection algorithms. */
		get_support(dir: Vector3) : Vector3;

		/** Returns a copy of the `AABB` grown a given amount of units towards all the sides. */
		grow(by: number) : AABB;

		/** Returns `true` if the `AABB` is flat or empty. */
		has_no_area() : boolean;

		/** Returns `true` if the `AABB` is empty. */
		has_no_surface() : boolean;

		/** Returns `true` if the `AABB` contains a point. */
		has_point(point: Vector3) : boolean;

		/** Returns the intersection between two `AABB`. An empty AABB (size 0,0,0) is returned on failure. */
		intersection(p_with: AABB) : AABB;

		/** Returns `true` if the `AABB` overlaps with another. */
		intersects(p_with: AABB) : boolean;

		/** Returns `true` if the `AABB` is on both sides of a plane. */
		intersects_plane(plane: Plane) : boolean;

		/** Returns `true` if the `AABB` intersects the line segment between `from` and `to`. */
		intersects_segment(p_from: Vector3, to: Vector3) : boolean;

		/**  */
		is_equal_approx(aabb: AABB) : boolean;

		/** Returns a larger AABB that contains this AABB and `with`. */
		merge(p_with: AABB) : AABB;

	}
	
	
	/** A pooled `Array` of bytes.
	 An `Array` specifically designed to hold bytes. Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference. */
	class PoolByteArray {
		
		constructor(source?: number[]);
		constructor(from: PoolByteArray);
		constructor(from: ArrayBuffer);
		
		/** Appends an element at the end of the array (alias of `push_back`). */
		append(byte: number) : void;

		/** Appends a `PoolByteArray` at the end of this array. */
		append_array(array: PoolByteArray) : void;

		/** Returns a new `PoolByteArray` with the data compressed. Set the compression mode using one of `File.CompressionMode`'s constants. */
		compress(compression_mode?: number) : PoolByteArray;

		/** Returns a new `PoolByteArray` with the data decompressed. Set `buffer_size` to the size of the uncompressed data. Set the compression mode using one of `File.CompressionMode`'s constants. */
		decompress(buffer_size: number, compression_mode?: number) : PoolByteArray;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Returns a copy of the array's contents as `String`. Fast alternative to `get_string_from_utf8` if the content is ASCII-only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use `get_string_from_utf8`. */
		get_string_from_ascii() : string;

		/** Returns a copy of the array's contents as `String`. Slower than `get_string_from_ascii` but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred. */
		get_string_from_utf8() : string;

		/**  */
		hex_encode() : string;

		/** Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, byte: number) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Appends an element at the end of the array. */
		push_back(byte: number) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the byte at the given index. */
		set(idx: number, byte: number) : void;
		
		/** Get the `byte` at the given index */
		get(idx: number): number;

		/** Returns the size of the array. */
		size() : number;

		/** Returns the slice of the `PoolByteArray` between indices (inclusive) as a new `PoolByteArray`. Any negative index is considered to be from the end of the array. */
		subarray(p_from: number, to: number) : PoolByteArray;
		
		/** Returns the content of the array as an `ArrayBuffer` */
		get_buffer() : ArrayBuffer;
	}

	/** A pooled `Array` of `Color`.
	 An `Array` specifically designed to hold `Color`. Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference. */
	class PoolColorArray {


		constructor(source?: Color[]);
		constructor(from: PoolColorArray);
		constructor(from: ArrayBuffer);

		/** Appends an element at the end of the array (alias of `push_back`). */
		append(color: Color) : void;

		/** Appends a `PoolColorArray` at the end of this array. */
		append_array(array: PoolColorArray) : void;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, color: Color) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Appends a value to the array. */
		push_back(color: Color) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the `Color` at the given index. */
		set(idx: number, color: Color) : void;
		
		/** Get the `Color` at the given index */
		get(idx: number): Color;

		/** Returns the size of the array. */
		size() : number;

		/** Returns the content of the array as an `ArrayBuffer` */
		get_buffer() : ArrayBuffer;
	}

	/** A pooled `Array` of integers (`int`).
	 An `Array` specifically designed to hold integer values (`int`). Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference.

	 **Note:** This type is limited to signed 32-bit integers, which means it can only take values in the interval ``-2^31, 2^31 - 1``, i.e. ``-2147483648, 2147483647``. Exceeding those bounds will wrap around. In comparison, `int` uses signed 64-bit integers which can hold much larger values. */
	class PoolIntArray {


		constructor(source?: number[]);
		constructor(from: PoolIntArray);
		constructor(from: ArrayBuffer);

		/** Appends an element at the end of the array (alias of `push_back`). */
		append(integer: number) : void;

		/** Appends a `PoolIntArray` at the end of this array. */
		append_array(array: PoolIntArray) : void;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Inserts a new int at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, integer: number) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Appends a value to the array. */
		push_back(integer: number) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the int at the given index. */
		set(idx: number, integer: number) : void;
		
		/** Get the `int` at the given index */
		get(idx: number): number;

		/** Returns the array size. */
		size() : number;

		/** Returns the content of the array as an `ArrayBuffer` */
		get_buffer() : ArrayBuffer;
	}

	/** A pooled `Array` of reals (`float`).
	 An `Array` specifically designed to hold floating-point values (`float`). Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference. */
	class PoolRealArray {

		constructor(source?: number[]);
		constructor(from: PoolRealArray);
		constructor(from: ArrayBuffer);

		/** Appends an element at the end of the array (alias of `push_back`). */
		append(value: number) : void;

		/** Appends a `PoolRealArray` at the end of this array. */
		append_array(array: PoolRealArray) : void;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, value: number) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Appends an element at the end of the array. */
		push_back(value: number) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the float at the given index. */
		set(idx: number, value: number) : void;
		
		/** Get the `number` at the given index */
		get(idx: number): number;

		/** Returns the size of the array. */
		size() : number;

		/** Returns the content of the array as an `ArrayBuffer` */
		get_buffer() : ArrayBuffer;
	}

	/** A pooled `Array` of `String`.
	 An `Array` specifically designed to hold `String`s. Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference. */
	class PoolStringArray {


		constructor(source?: string[]);
		constructor(from: PoolStringArray);

		/** Appends an element at the end of the array (alias of `push_back`). */
		append(p_string: string) : void;

		/** Appends a `PoolStringArray` at the end of this array. */
		append_array(array: PoolStringArray) : void;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, p_string: string) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Returns a `String` with each element of the array joined with the given `delimiter`. */
		join(delimiter: string) : string;

		/** Appends a string element at end of the array. */
		push_back(p_string: string) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the `String` at the given index. */
		set(idx: number, p_string: string) : void;
		
		/** Get the `string` at the given index */
		get(idx: number): string;

		/** Returns the size of the array. */
		size() : number;
	}

	/** A pooled `Array` of `Vector2`.
	 An `Array` specifically designed to hold `Vector2`. Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference. */
	class PoolVector2Array {

		constructor(source?: Vector2[]);
		constructor(from: PoolVector2Array);
		constructor(from: ArrayBuffer);

		/** Appends an element at the end of the array (alias of `push_back`). */
		append(vector2: Vector2) : void;

		/** Appends a `PoolVector2Array` at the end of this array. */
		append_array(array: PoolVector2Array) : void;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, vector2: Vector2) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Inserts a `Vector2` at the end. */
		push_back(vector2: Vector2) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the `Vector2` at the given index. */
		set(idx: number, vector2: Vector2) : void;
		
		/** Get the `Vector2` at the given index */
		get(idx: number): Vector2;

		/** Returns the size of the array. */
		size() : number;
		
		/** Returns the content of the array as an `ArrayBuffer` */
		get_buffer() : ArrayBuffer;
	}

	/** A pooled `Array` of `Vector3`.
	 An `Array` specifically designed to hold `Vector3`. Optimized for memory usage, does not fragment the memory.

	 **Note:** This type is passed by value and not by reference. */
	class PoolVector3Array {

		constructor(source?: Vector3[]);
		constructor(from: PoolVector3Array);
		constructor(from: ArrayBuffer);

		/** Appends an element at the end of the array (alias of `push_back`). */
		append(vector3: Vector3) : void;

		/** Appends a `PoolVector3Array` at the end of this array. */
		append_array(array: PoolVector3Array) : void;

		/** Returns `true` if the array is empty. */
		empty() : boolean;

		/** Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`). */
		insert(idx: number, vector3: Vector3) : number;

		/** Reverses the order of the elements in the array. */
		invert() : void;

		/** Inserts a `Vector3` at the end. */
		push_back(vector3: Vector3) : void;

		/** Removes an element from the array by index. */
		remove(idx: number) : void;

		/** Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size. */
		resize(idx: number) : void;

		/** Changes the `Vector3` at the given index. */
		set(idx: number, vector3: Vector3) : void;
		
		/** Get the `Vector3` at the given index */
		get(idx: number): Vector3;

		/** Returns the size of the array. */
		size() : number;
		
		/** Returns the content of the array as an `ArrayBuffer` */
		get_buffer() : ArrayBuffer;
	}
}



declare module godot {

	/** Constant that represents how many times the diameter of a circle fits around its perimeter. */
	const PI: 3.141593;

	/** The circle constant, the circumference of the unit circle. */
	const TAU: 6.283185;

	/** A positive infinity. (For negative infinity, use -INF). */
	const INF: number;

	/** Macro constant that expands to an expression of type float that represents a NaN.

	 The NaN values are used to identify undefined or non-representable values for floating-point elements, such as the square root of negative numbers or the result of 0/0. */
	const NAN: number;

	/** Left margin, usually used for `Control` or `StyleBox`-derived classes. */
	const MARGIN_LEFT: Margin.MARGIN_LEFT;

	/** Top margin, usually used for `Control` or `StyleBox`-derived classes. */
	const MARGIN_TOP: Margin.MARGIN_TOP;

	/** Right margin, usually used for `Control` or `StyleBox`-derived classes. */
	const MARGIN_RIGHT: Margin.MARGIN_RIGHT;

	/** Bottom margin, usually used for `Control` or `StyleBox`-derived classes. */
	const MARGIN_BOTTOM: Margin.MARGIN_BOTTOM;

	/** Top-left corner. */
	const CORNER_TOP_LEFT: Corner.CORNER_TOP_LEFT;

	/** Top-right corner. */
	const CORNER_TOP_RIGHT: Corner.CORNER_TOP_RIGHT;

	/** Bottom-right corner. */
	const CORNER_BOTTOM_RIGHT: Corner.CORNER_BOTTOM_RIGHT;

	/** Bottom-left corner. */
	const CORNER_BOTTOM_LEFT: Corner.CORNER_BOTTOM_LEFT;

	/** General vertical alignment, usually used for `Separator`, `ScrollBar`, `Slider`, etc. */
	const VERTICAL: Orientation.VERTICAL;

	/** General horizontal alignment, usually used for `Separator`, `ScrollBar`, `Slider`, etc. */
	const HORIZONTAL: Orientation.HORIZONTAL;

	/** Horizontal left alignment, usually for text-derived classes. */
	const HALIGN_LEFT: HAlign.HALIGN_LEFT;

	/** Horizontal center alignment, usually for text-derived classes. */
	const HALIGN_CENTER: HAlign.HALIGN_CENTER;

	/** Horizontal right alignment, usually for text-derived classes. */
	const HALIGN_RIGHT: HAlign.HALIGN_RIGHT;

	/** Vertical top alignment, usually for text-derived classes. */
	const VALIGN_TOP: VAlign.VALIGN_TOP;

	/** Vertical center alignment, usually for text-derived classes. */
	const VALIGN_CENTER: VAlign.VALIGN_CENTER;

	/** Vertical bottom alignment, usually for text-derived classes. */
	const VALIGN_BOTTOM: VAlign.VALIGN_BOTTOM;

	/** Scancodes with this bit applied are non-printable. */
	const SPKEY: 16777216;

	/** Escape key. */
	const KEY_ESCAPE: KeyList.KEY_ESCAPE;

	/** Tab key. */
	const KEY_TAB: KeyList.KEY_TAB;

	/** Shift+Tab key. */
	const KEY_BACKTAB: KeyList.KEY_BACKTAB;

	/** Backspace key. */
	const KEY_BACKSPACE: KeyList.KEY_BACKSPACE;

	/** Return key (on the main keyboard). */
	const KEY_ENTER: KeyList.KEY_ENTER;

	/** Enter key on the numeric keypad. */
	const KEY_KP_ENTER: KeyList.KEY_KP_ENTER;

	/** Insert key. */
	const KEY_INSERT: KeyList.KEY_INSERT;

	/** Delete key. */
	const KEY_DELETE: KeyList.KEY_DELETE;

	/** Pause key. */
	const KEY_PAUSE: KeyList.KEY_PAUSE;

	/** Print Screen key. */
	const KEY_PRINT: KeyList.KEY_PRINT;

	/** System Request key. */
	const KEY_SYSREQ: KeyList.KEY_SYSREQ;

	/** Clear key. */
	const KEY_CLEAR: KeyList.KEY_CLEAR;

	/** Home key. */
	const KEY_HOME: KeyList.KEY_HOME;

	/** End key. */
	const KEY_END: KeyList.KEY_END;

	/** Left arrow key. */
	const KEY_LEFT: KeyList.KEY_LEFT;

	/** Up arrow key. */
	const KEY_UP: KeyList.KEY_UP;

	/** Right arrow key. */
	const KEY_RIGHT: KeyList.KEY_RIGHT;

	/** Down arrow key. */
	const KEY_DOWN: KeyList.KEY_DOWN;

	/** Page Up key. */
	const KEY_PAGEUP: KeyList.KEY_PAGEUP;

	/** Page Down key. */
	const KEY_PAGEDOWN: KeyList.KEY_PAGEDOWN;

	/** Shift key. */
	const KEY_SHIFT: KeyList.KEY_SHIFT;

	/** Control key. */
	const KEY_CONTROL: KeyList.KEY_CONTROL;

	/** Meta key. */
	const KEY_META: KeyList.KEY_META;

	/** Alt key. */
	const KEY_ALT: KeyList.KEY_ALT;

	/** Caps Lock key. */
	const KEY_CAPSLOCK: KeyList.KEY_CAPSLOCK;

	/** Num Lock key. */
	const KEY_NUMLOCK: KeyList.KEY_NUMLOCK;

	/** Scroll Lock key. */
	const KEY_SCROLLLOCK: KeyList.KEY_SCROLLLOCK;

	/** F1 key. */
	const KEY_F1: KeyList.KEY_F1;

	/** F2 key. */
	const KEY_F2: KeyList.KEY_F2;

	/** F3 key. */
	const KEY_F3: KeyList.KEY_F3;

	/** F4 key. */
	const KEY_F4: KeyList.KEY_F4;

	/** F5 key. */
	const KEY_F5: KeyList.KEY_F5;

	/** F6 key. */
	const KEY_F6: KeyList.KEY_F6;

	/** F7 key. */
	const KEY_F7: KeyList.KEY_F7;

	/** F8 key. */
	const KEY_F8: KeyList.KEY_F8;

	/** F9 key. */
	const KEY_F9: KeyList.KEY_F9;

	/** F10 key. */
	const KEY_F10: KeyList.KEY_F10;

	/** F11 key. */
	const KEY_F11: KeyList.KEY_F11;

	/** F12 key. */
	const KEY_F12: KeyList.KEY_F12;

	/** F13 key. */
	const KEY_F13: KeyList.KEY_F13;

	/** F14 key. */
	const KEY_F14: KeyList.KEY_F14;

	/** F15 key. */
	const KEY_F15: KeyList.KEY_F15;

	/** F16 key. */
	const KEY_F16: KeyList.KEY_F16;

	/** Multiply (*) key on the numeric keypad. */
	const KEY_KP_MULTIPLY: KeyList.KEY_KP_MULTIPLY;

	/** Divide (/) key on the numeric keypad. */
	const KEY_KP_DIVIDE: KeyList.KEY_KP_DIVIDE;

	/** Subtract (-) key on the numeric keypad. */
	const KEY_KP_SUBTRACT: KeyList.KEY_KP_SUBTRACT;

	/** Period (.) key on the numeric keypad. */
	const KEY_KP_PERIOD: KeyList.KEY_KP_PERIOD;

	/** Add (+) key on the numeric keypad. */
	const KEY_KP_ADD: KeyList.KEY_KP_ADD;

	/** Number 0 on the numeric keypad. */
	const KEY_KP_0: KeyList.KEY_KP_0;

	/** Number 1 on the numeric keypad. */
	const KEY_KP_1: KeyList.KEY_KP_1;

	/** Number 2 on the numeric keypad. */
	const KEY_KP_2: KeyList.KEY_KP_2;

	/** Number 3 on the numeric keypad. */
	const KEY_KP_3: KeyList.KEY_KP_3;

	/** Number 4 on the numeric keypad. */
	const KEY_KP_4: KeyList.KEY_KP_4;

	/** Number 5 on the numeric keypad. */
	const KEY_KP_5: KeyList.KEY_KP_5;

	/** Number 6 on the numeric keypad. */
	const KEY_KP_6: KeyList.KEY_KP_6;

	/** Number 7 on the numeric keypad. */
	const KEY_KP_7: KeyList.KEY_KP_7;

	/** Number 8 on the numeric keypad. */
	const KEY_KP_8: KeyList.KEY_KP_8;

	/** Number 9 on the numeric keypad. */
	const KEY_KP_9: KeyList.KEY_KP_9;

	/** Left Super key (Windows key). */
	const KEY_SUPER_L: KeyList.KEY_SUPER_L;

	/** Right Super key (Windows key). */
	const KEY_SUPER_R: KeyList.KEY_SUPER_R;

	/** Context menu key. */
	const KEY_MENU: KeyList.KEY_MENU;

	/** Left Hyper key. */
	const KEY_HYPER_L: KeyList.KEY_HYPER_L;

	/** Right Hyper key. */
	const KEY_HYPER_R: KeyList.KEY_HYPER_R;

	/** Help key. */
	const KEY_HELP: KeyList.KEY_HELP;

	/** Left Direction key. */
	const KEY_DIRECTION_L: KeyList.KEY_DIRECTION_L;

	/** Right Direction key. */
	const KEY_DIRECTION_R: KeyList.KEY_DIRECTION_R;

	/** Back key. */
	const KEY_BACK: KeyList.KEY_BACK;

	/** Forward key. */
	const KEY_FORWARD: KeyList.KEY_FORWARD;

	/** Stop key. */
	const KEY_STOP: KeyList.KEY_STOP;

	/** Refresh key. */
	const KEY_REFRESH: KeyList.KEY_REFRESH;

	/** Volume down key. */
	const KEY_VOLUMEDOWN: KeyList.KEY_VOLUMEDOWN;

	/** Mute volume key. */
	const KEY_VOLUMEMUTE: KeyList.KEY_VOLUMEMUTE;

	/** Volume up key. */
	const KEY_VOLUMEUP: KeyList.KEY_VOLUMEUP;

	/** Bass Boost key. */
	const KEY_BASSBOOST: KeyList.KEY_BASSBOOST;

	/** Bass up key. */
	const KEY_BASSUP: KeyList.KEY_BASSUP;

	/** Bass down key. */
	const KEY_BASSDOWN: KeyList.KEY_BASSDOWN;

	/** Treble up key. */
	const KEY_TREBLEUP: KeyList.KEY_TREBLEUP;

	/** Treble down key. */
	const KEY_TREBLEDOWN: KeyList.KEY_TREBLEDOWN;

	/** Media play key. */
	const KEY_MEDIAPLAY: KeyList.KEY_MEDIAPLAY;

	/** Media stop key. */
	const KEY_MEDIASTOP: KeyList.KEY_MEDIASTOP;

	/** Previous song key. */
	const KEY_MEDIAPREVIOUS: KeyList.KEY_MEDIAPREVIOUS;

	/** Next song key. */
	const KEY_MEDIANEXT: KeyList.KEY_MEDIANEXT;

	/** Media record key. */
	const KEY_MEDIARECORD: KeyList.KEY_MEDIARECORD;

	/** Home page key. */
	const KEY_HOMEPAGE: KeyList.KEY_HOMEPAGE;

	/** Favorites key. */
	const KEY_FAVORITES: KeyList.KEY_FAVORITES;

	/** Search key. */
	const KEY_SEARCH: KeyList.KEY_SEARCH;

	/** Standby key. */
	const KEY_STANDBY: KeyList.KEY_STANDBY;

	/** Open URL / Launch Browser key. */
	const KEY_OPENURL: KeyList.KEY_OPENURL;

	/** Launch Mail key. */
	const KEY_LAUNCHMAIL: KeyList.KEY_LAUNCHMAIL;

	/** Launch Media key. */
	const KEY_LAUNCHMEDIA: KeyList.KEY_LAUNCHMEDIA;

	/** Launch Shortcut 0 key. */
	const KEY_LAUNCH0: KeyList.KEY_LAUNCH0;

	/** Launch Shortcut 1 key. */
	const KEY_LAUNCH1: KeyList.KEY_LAUNCH1;

	/** Launch Shortcut 2 key. */
	const KEY_LAUNCH2: KeyList.KEY_LAUNCH2;

	/** Launch Shortcut 3 key. */
	const KEY_LAUNCH3: KeyList.KEY_LAUNCH3;

	/** Launch Shortcut 4 key. */
	const KEY_LAUNCH4: KeyList.KEY_LAUNCH4;

	/** Launch Shortcut 5 key. */
	const KEY_LAUNCH5: KeyList.KEY_LAUNCH5;

	/** Launch Shortcut 6 key. */
	const KEY_LAUNCH6: KeyList.KEY_LAUNCH6;

	/** Launch Shortcut 7 key. */
	const KEY_LAUNCH7: KeyList.KEY_LAUNCH7;

	/** Launch Shortcut 8 key. */
	const KEY_LAUNCH8: KeyList.KEY_LAUNCH8;

	/** Launch Shortcut 9 key. */
	const KEY_LAUNCH9: KeyList.KEY_LAUNCH9;

	/** Launch Shortcut A key. */
	const KEY_LAUNCHA: KeyList.KEY_LAUNCHA;

	/** Launch Shortcut B key. */
	const KEY_LAUNCHB: KeyList.KEY_LAUNCHB;

	/** Launch Shortcut C key. */
	const KEY_LAUNCHC: KeyList.KEY_LAUNCHC;

	/** Launch Shortcut D key. */
	const KEY_LAUNCHD: KeyList.KEY_LAUNCHD;

	/** Launch Shortcut E key. */
	const KEY_LAUNCHE: KeyList.KEY_LAUNCHE;

	/** Launch Shortcut F key. */
	const KEY_LAUNCHF: KeyList.KEY_LAUNCHF;

	/** Unknown key. */
	const KEY_UNKNOWN: KeyList.KEY_UNKNOWN;

	/** Space key. */
	const KEY_SPACE: KeyList.KEY_SPACE;

	/** ! key. */
	const KEY_EXCLAM: KeyList.KEY_EXCLAM;

	/** " key. */
	const KEY_QUOTEDBL: KeyList.KEY_QUOTEDBL;

	/** # key. */
	const KEY_NUMBERSIGN: KeyList.KEY_NUMBERSIGN;

	/** $ key. */
	const KEY_DOLLAR: KeyList.KEY_DOLLAR;

	/** % key. */
	const KEY_PERCENT: KeyList.KEY_PERCENT;

	/** & key. */
	const KEY_AMPERSAND: KeyList.KEY_AMPERSAND;

	/** ' key. */
	const KEY_APOSTROPHE: KeyList.KEY_APOSTROPHE;

	/** ( key. */
	const KEY_PARENLEFT: KeyList.KEY_PARENLEFT;

	/** ) key. */
	const KEY_PARENRIGHT: KeyList.KEY_PARENRIGHT;

	/** * key. */
	const KEY_ASTERISK: KeyList.KEY_ASTERISK;

	/** + key. */
	const KEY_PLUS: KeyList.KEY_PLUS;

	/** , key. */
	const KEY_COMMA: KeyList.KEY_COMMA;

	/** - key. */
	const KEY_MINUS: KeyList.KEY_MINUS;

	/** . key. */
	const KEY_PERIOD: KeyList.KEY_PERIOD;

	/** / key. */
	const KEY_SLASH: KeyList.KEY_SLASH;

	/** Number 0. */
	const KEY_0: KeyList.KEY_0;

	/** Number 1. */
	const KEY_1: KeyList.KEY_1;

	/** Number 2. */
	const KEY_2: KeyList.KEY_2;

	/** Number 3. */
	const KEY_3: KeyList.KEY_3;

	/** Number 4. */
	const KEY_4: KeyList.KEY_4;

	/** Number 5. */
	const KEY_5: KeyList.KEY_5;

	/** Number 6. */
	const KEY_6: KeyList.KEY_6;

	/** Number 7. */
	const KEY_7: KeyList.KEY_7;

	/** Number 8. */
	const KEY_8: KeyList.KEY_8;

	/** Number 9. */
	const KEY_9: KeyList.KEY_9;

	/** : key. */
	const KEY_COLON: KeyList.KEY_COLON;

	/** ; key. */
	const KEY_SEMICOLON: KeyList.KEY_SEMICOLON;

	/** < key. */
	const KEY_LESS: KeyList.KEY_LESS;

	/** = key. */
	const KEY_EQUAL: KeyList.KEY_EQUAL;

	/** > key. */
	const KEY_GREATER: KeyList.KEY_GREATER;

	/** ? key. */
	const KEY_QUESTION: KeyList.KEY_QUESTION;

	/** @ key. */
	const KEY_AT: KeyList.KEY_AT;

	/** A key. */
	const KEY_A: KeyList.KEY_A;

	/** B key. */
	const KEY_B: KeyList.KEY_B;

	/** C key. */
	const KEY_C: KeyList.KEY_C;

	/** D key. */
	const KEY_D: KeyList.KEY_D;

	/** E key. */
	const KEY_E: KeyList.KEY_E;

	/** F key. */
	const KEY_F: KeyList.KEY_F;

	/** G key. */
	const KEY_G: KeyList.KEY_G;

	/** H key. */
	const KEY_H: KeyList.KEY_H;

	/** I key. */
	const KEY_I: KeyList.KEY_I;

	/** J key. */
	const KEY_J: KeyList.KEY_J;

	/** K key. */
	const KEY_K: KeyList.KEY_K;

	/** L key. */
	const KEY_L: KeyList.KEY_L;

	/** M key. */
	const KEY_M: KeyList.KEY_M;

	/** N key. */
	const KEY_N: KeyList.KEY_N;

	/** O key. */
	const KEY_O: KeyList.KEY_O;

	/** P key. */
	const KEY_P: KeyList.KEY_P;

	/** Q key. */
	const KEY_Q: KeyList.KEY_Q;

	/** R key. */
	const KEY_R: KeyList.KEY_R;

	/** S key. */
	const KEY_S: KeyList.KEY_S;

	/** T key. */
	const KEY_T: KeyList.KEY_T;

	/** U key. */
	const KEY_U: KeyList.KEY_U;

	/** V key. */
	const KEY_V: KeyList.KEY_V;

	/** W key. */
	const KEY_W: KeyList.KEY_W;

	/** X key. */
	const KEY_X: KeyList.KEY_X;

	/** Y key. */
	const KEY_Y: KeyList.KEY_Y;

	/** Z key. */
	const KEY_Z: KeyList.KEY_Z;

	/** ` key. */
	const KEY_BRACKETLEFT: KeyList.KEY_BRACKETLEFT;

	/** \ key. */
	const KEY_BACKSLASH: KeyList.KEY_BACKSLASH;

	/** ` key. */
	const KEY_BRACKETRIGHT: KeyList.KEY_BRACKETRIGHT;

	/** ^ key. */
	const KEY_ASCIICIRCUM: KeyList.KEY_ASCIICIRCUM;

	/** _ key. */
	const KEY_UNDERSCORE: KeyList.KEY_UNDERSCORE;

	/** ` key. */
	const KEY_QUOTELEFT: KeyList.KEY_QUOTELEFT;

	/** { key. */
	const KEY_BRACELEFT: KeyList.KEY_BRACELEFT;

	/** | key. */
	const KEY_BAR: KeyList.KEY_BAR;

	/** } key. */
	const KEY_BRACERIGHT: KeyList.KEY_BRACERIGHT;

	/** ~ key. */
	const KEY_ASCIITILDE: KeyList.KEY_ASCIITILDE;

	/** Non-breakable space key. */
	const KEY_NOBREAKSPACE: KeyList.KEY_NOBREAKSPACE;

	/** ¡ key. */
	const KEY_EXCLAMDOWN: KeyList.KEY_EXCLAMDOWN;

	/** ¢ key. */
	const KEY_CENT: KeyList.KEY_CENT;

	/** £ key. */
	const KEY_STERLING: KeyList.KEY_STERLING;

	/** ¤ key. */
	const KEY_CURRENCY: KeyList.KEY_CURRENCY;

	/** ¥ key. */
	const KEY_YEN: KeyList.KEY_YEN;

	/** ¦ key. */
	const KEY_BROKENBAR: KeyList.KEY_BROKENBAR;

	/** § key. */
	const KEY_SECTION: KeyList.KEY_SECTION;

	/** ¨ key. */
	const KEY_DIAERESIS: KeyList.KEY_DIAERESIS;

	/** © key. */
	const KEY_COPYRIGHT: KeyList.KEY_COPYRIGHT;

	/** ª key. */
	const KEY_ORDFEMININE: KeyList.KEY_ORDFEMININE;

	/** « key. */
	const KEY_GUILLEMOTLEFT: KeyList.KEY_GUILLEMOTLEFT;

	/** ¬ key. */
	const KEY_NOTSIGN: KeyList.KEY_NOTSIGN;

	/** Soft hyphen key. */
	const KEY_HYPHEN: KeyList.KEY_HYPHEN;

	/** ® key. */
	const KEY_REGISTERED: KeyList.KEY_REGISTERED;

	/** ¯ key. */
	const KEY_MACRON: KeyList.KEY_MACRON;

	/** ° key. */
	const KEY_DEGREE: KeyList.KEY_DEGREE;

	/** ± key. */
	const KEY_PLUSMINUS: KeyList.KEY_PLUSMINUS;

	/** ² key. */
	const KEY_TWOSUPERIOR: KeyList.KEY_TWOSUPERIOR;

	/** ³ key. */
	const KEY_THREESUPERIOR: KeyList.KEY_THREESUPERIOR;

	/** ´ key. */
	const KEY_ACUTE: KeyList.KEY_ACUTE;

	/** µ key. */
	const KEY_MU: KeyList.KEY_MU;

	/** ¶ key. */
	const KEY_PARAGRAPH: KeyList.KEY_PARAGRAPH;

	/** · key. */
	const KEY_PERIODCENTERED: KeyList.KEY_PERIODCENTERED;

	/** ¸ key. */
	const KEY_CEDILLA: KeyList.KEY_CEDILLA;

	/** ¹ key. */
	const KEY_ONESUPERIOR: KeyList.KEY_ONESUPERIOR;

	/** º key. */
	const KEY_MASCULINE: KeyList.KEY_MASCULINE;

	/** » key. */
	const KEY_GUILLEMOTRIGHT: KeyList.KEY_GUILLEMOTRIGHT;

	/** ¼ key. */
	const KEY_ONEQUARTER: KeyList.KEY_ONEQUARTER;

	/** ½ key. */
	const KEY_ONEHALF: KeyList.KEY_ONEHALF;

	/** ¾ key. */
	const KEY_THREEQUARTERS: KeyList.KEY_THREEQUARTERS;

	/** ¿ key. */
	const KEY_QUESTIONDOWN: KeyList.KEY_QUESTIONDOWN;

	/** À key. */
	const KEY_AGRAVE: KeyList.KEY_AGRAVE;

	/** Á key. */
	const KEY_AACUTE: KeyList.KEY_AACUTE;

	/** Â key. */
	const KEY_ACIRCUMFLEX: KeyList.KEY_ACIRCUMFLEX;

	/** Ã key. */
	const KEY_ATILDE: KeyList.KEY_ATILDE;

	/** Ä key. */
	const KEY_ADIAERESIS: KeyList.KEY_ADIAERESIS;

	/** Å key. */
	const KEY_ARING: KeyList.KEY_ARING;

	/** Æ key. */
	const KEY_AE: KeyList.KEY_AE;

	/** Ç key. */
	const KEY_CCEDILLA: KeyList.KEY_CCEDILLA;

	/** È key. */
	const KEY_EGRAVE: KeyList.KEY_EGRAVE;

	/** É key. */
	const KEY_EACUTE: KeyList.KEY_EACUTE;

	/** Ê key. */
	const KEY_ECIRCUMFLEX: KeyList.KEY_ECIRCUMFLEX;

	/** Ë key. */
	const KEY_EDIAERESIS: KeyList.KEY_EDIAERESIS;

	/** Ì key. */
	const KEY_IGRAVE: KeyList.KEY_IGRAVE;

	/** Í key. */
	const KEY_IACUTE: KeyList.KEY_IACUTE;

	/** Î key. */
	const KEY_ICIRCUMFLEX: KeyList.KEY_ICIRCUMFLEX;

	/** Ï key. */
	const KEY_IDIAERESIS: KeyList.KEY_IDIAERESIS;

	/** Ð key. */
	const KEY_ETH: KeyList.KEY_ETH;

	/** Ñ key. */
	const KEY_NTILDE: KeyList.KEY_NTILDE;

	/** Ò key. */
	const KEY_OGRAVE: KeyList.KEY_OGRAVE;

	/** Ó key. */
	const KEY_OACUTE: KeyList.KEY_OACUTE;

	/** Ô key. */
	const KEY_OCIRCUMFLEX: KeyList.KEY_OCIRCUMFLEX;

	/** Õ key. */
	const KEY_OTILDE: KeyList.KEY_OTILDE;

	/** Ö key. */
	const KEY_ODIAERESIS: KeyList.KEY_ODIAERESIS;

	/** × key. */
	const KEY_MULTIPLY: KeyList.KEY_MULTIPLY;

	/** Ø key. */
	const KEY_OOBLIQUE: KeyList.KEY_OOBLIQUE;

	/** Ù key. */
	const KEY_UGRAVE: KeyList.KEY_UGRAVE;

	/** Ú key. */
	const KEY_UACUTE: KeyList.KEY_UACUTE;

	/** Û key. */
	const KEY_UCIRCUMFLEX: KeyList.KEY_UCIRCUMFLEX;

	/** Ü key. */
	const KEY_UDIAERESIS: KeyList.KEY_UDIAERESIS;

	/** Ý key. */
	const KEY_YACUTE: KeyList.KEY_YACUTE;

	/** Þ key. */
	const KEY_THORN: KeyList.KEY_THORN;

	/** ß key. */
	const KEY_SSHARP: KeyList.KEY_SSHARP;

	/** ÷ key. */
	const KEY_DIVISION: KeyList.KEY_DIVISION;

	/** ÿ key. */
	const KEY_YDIAERESIS: KeyList.KEY_YDIAERESIS;

	/** Key Code mask. */
	const KEY_CODE_MASK: KeyModifierMask.KEY_CODE_MASK;

	/** Modifier key mask. */
	const KEY_MODIFIER_MASK: KeyModifierMask.KEY_MODIFIER_MASK;

	/** Shift key mask. */
	const KEY_MASK_SHIFT: KeyModifierMask.KEY_MASK_SHIFT;

	/** Alt key mask. */
	const KEY_MASK_ALT: KeyModifierMask.KEY_MASK_ALT;

	/** Meta key mask. */
	const KEY_MASK_META: KeyModifierMask.KEY_MASK_META;

	/** Ctrl key mask. */
	const KEY_MASK_CTRL: KeyModifierMask.KEY_MASK_CTRL;

	/** Command key mask. On macOS, this is equivalent to `KEY_MASK_META`. On other platforms, this is equivalent to `KEY_MASK_CTRL`. This mask should be preferred to `KEY_MASK_META` or `KEY_MASK_CTRL` for system shortcuts as it handles all platforms correctly. */
	const KEY_MASK_CMD: KeyModifierMask.KEY_MASK_CMD;

	/** Keypad key mask. */
	const KEY_MASK_KPAD: KeyModifierMask.KEY_MASK_KPAD;

	/** Group Switch key mask. */
	const KEY_MASK_GROUP_SWITCH: KeyModifierMask.KEY_MASK_GROUP_SWITCH;

	/** Left mouse button. */
	const BUTTON_LEFT: ButtonList.BUTTON_LEFT;

	/** Right mouse button. */
	const BUTTON_RIGHT: ButtonList.BUTTON_RIGHT;

	/** Middle mouse button. */
	const BUTTON_MIDDLE: ButtonList.BUTTON_MIDDLE;

	/** Extra mouse button 1 (only present on some mice). */
	const BUTTON_XBUTTON1: ButtonList.BUTTON_XBUTTON1;

	/** Extra mouse button 2 (only present on some mice). */
	const BUTTON_XBUTTON2: ButtonList.BUTTON_XBUTTON2;

	/** Mouse wheel up. */
	const BUTTON_WHEEL_UP: ButtonList.BUTTON_WHEEL_UP;

	/** Mouse wheel down. */
	const BUTTON_WHEEL_DOWN: ButtonList.BUTTON_WHEEL_DOWN;

	/** Mouse wheel left button (only present on some mice). */
	const BUTTON_WHEEL_LEFT: ButtonList.BUTTON_WHEEL_LEFT;

	/** Mouse wheel right button (only present on some mice). */
	const BUTTON_WHEEL_RIGHT: ButtonList.BUTTON_WHEEL_RIGHT;

	/** Left mouse button mask. */
	const BUTTON_MASK_LEFT: ButtonList.BUTTON_MASK_LEFT;

	/** Right mouse button mask. */
	const BUTTON_MASK_RIGHT: ButtonList.BUTTON_MASK_RIGHT;

	/** Middle mouse button mask. */
	const BUTTON_MASK_MIDDLE: ButtonList.BUTTON_MASK_MIDDLE;

	/** Extra mouse button 1 mask. */
	const BUTTON_MASK_XBUTTON1: ButtonList.BUTTON_MASK_XBUTTON1;

	/** Extra mouse button 2 mask. */
	const BUTTON_MASK_XBUTTON2: ButtonList.BUTTON_MASK_XBUTTON2;

	/** Invalid button or axis. */
	const JOY_INVALID_OPTION: JoystickList.JOY_INVALID_OPTION;

	/** Gamepad button 0. */
	const JOY_BUTTON_0: JoystickList.JOY_BUTTON_0;

	/** Gamepad button 1. */
	const JOY_BUTTON_1: JoystickList.JOY_BUTTON_1;

	/** Gamepad button 2. */
	const JOY_BUTTON_2: JoystickList.JOY_BUTTON_2;

	/** Gamepad button 3. */
	const JOY_BUTTON_3: JoystickList.JOY_BUTTON_3;

	/** Gamepad button 4. */
	const JOY_BUTTON_4: JoystickList.JOY_BUTTON_4;

	/** Gamepad button 5. */
	const JOY_BUTTON_5: JoystickList.JOY_BUTTON_5;

	/** Gamepad button 6. */
	const JOY_BUTTON_6: JoystickList.JOY_BUTTON_6;

	/** Gamepad button 7. */
	const JOY_BUTTON_7: JoystickList.JOY_BUTTON_7;

	/** Gamepad button 8. */
	const JOY_BUTTON_8: JoystickList.JOY_BUTTON_8;

	/** Gamepad button 9. */
	const JOY_BUTTON_9: JoystickList.JOY_BUTTON_9;

	/** Gamepad button 10. */
	const JOY_BUTTON_10: JoystickList.JOY_BUTTON_10;

	/** Gamepad button 11. */
	const JOY_BUTTON_11: JoystickList.JOY_BUTTON_11;

	/** Gamepad button 12. */
	const JOY_BUTTON_12: JoystickList.JOY_BUTTON_12;

	/** Gamepad button 13. */
	const JOY_BUTTON_13: JoystickList.JOY_BUTTON_13;

	/** Gamepad button 14. */
	const JOY_BUTTON_14: JoystickList.JOY_BUTTON_14;

	/** Gamepad button 15. */
	const JOY_BUTTON_15: JoystickList.JOY_BUTTON_15;

	/** Represents the maximum number of joystick buttons supported. */
	const JOY_BUTTON_MAX: JoystickList.JOY_BUTTON_MAX;

	/** DualShock circle button. */
	const JOY_SONY_CIRCLE: JoystickList.JOY_SONY_CIRCLE;

	/** DualShock X button. */
	const JOY_SONY_X: JoystickList.JOY_SONY_X;

	/** DualShock square button. */
	const JOY_SONY_SQUARE: JoystickList.JOY_SONY_SQUARE;

	/** DualShock triangle button. */
	const JOY_SONY_TRIANGLE: JoystickList.JOY_SONY_TRIANGLE;

	/** Xbox controller B button. */
	const JOY_XBOX_B: JoystickList.JOY_XBOX_B;

	/** Xbox controller A button. */
	const JOY_XBOX_A: JoystickList.JOY_XBOX_A;

	/** Xbox controller X button. */
	const JOY_XBOX_X: JoystickList.JOY_XBOX_X;

	/** Xbox controller Y button. */
	const JOY_XBOX_Y: JoystickList.JOY_XBOX_Y;

	/** Nintendo controller A button. */
	const JOY_DS_A: JoystickList.JOY_DS_A;

	/** Nintendo controller B button. */
	const JOY_DS_B: JoystickList.JOY_DS_B;

	/** Nintendo controller X button. */
	const JOY_DS_X: JoystickList.JOY_DS_X;

	/** Nintendo controller Y button. */
	const JOY_DS_Y: JoystickList.JOY_DS_Y;

	/** Grip (side) buttons on a VR controller. */
	const JOY_VR_GRIP: JoystickList.JOY_VR_GRIP;

	/** Push down on the touchpad or main joystick on a VR controller. */
	const JOY_VR_PAD: JoystickList.JOY_VR_PAD;

	/** Trigger on a VR controller. */
	const JOY_VR_TRIGGER: JoystickList.JOY_VR_TRIGGER;

	/** A button on the right Oculus Touch controller, X button on the left controller (also when used in OpenVR). */
	const JOY_OCULUS_AX: JoystickList.JOY_OCULUS_AX;

	/** B button on the right Oculus Touch controller, Y button on the left controller (also when used in OpenVR). */
	const JOY_OCULUS_BY: JoystickList.JOY_OCULUS_BY;

	/** Menu button on either Oculus Touch controller. */
	const JOY_OCULUS_MENU: JoystickList.JOY_OCULUS_MENU;

	/** Menu button in OpenVR (Except when Oculus Touch controllers are used). */
	const JOY_OPENVR_MENU: JoystickList.JOY_OPENVR_MENU;

	/** Gamepad button Select. */
	const JOY_SELECT: JoystickList.JOY_SELECT;

	/** Gamepad button Start. */
	const JOY_START: JoystickList.JOY_START;

	/** Gamepad DPad up. */
	const JOY_DPAD_UP: JoystickList.JOY_DPAD_UP;

	/** Gamepad DPad down. */
	const JOY_DPAD_DOWN: JoystickList.JOY_DPAD_DOWN;

	/** Gamepad DPad left. */
	const JOY_DPAD_LEFT: JoystickList.JOY_DPAD_LEFT;

	/** Gamepad DPad right. */
	const JOY_DPAD_RIGHT: JoystickList.JOY_DPAD_RIGHT;

	/** Gamepad left Shoulder button. */
	const JOY_L: JoystickList.JOY_L;

	/** Gamepad left trigger. */
	const JOY_L2: JoystickList.JOY_L2;

	/** Gamepad left stick click. */
	const JOY_L3: JoystickList.JOY_L3;

	/** Gamepad right Shoulder button. */
	const JOY_R: JoystickList.JOY_R;

	/** Gamepad right trigger. */
	const JOY_R2: JoystickList.JOY_R2;

	/** Gamepad right stick click. */
	const JOY_R3: JoystickList.JOY_R3;

	/** Gamepad left stick horizontal axis. */
	const JOY_AXIS_0: JoystickList.JOY_AXIS_0;

	/** Gamepad left stick vertical axis. */
	const JOY_AXIS_1: JoystickList.JOY_AXIS_1;

	/** Gamepad right stick horizontal axis. */
	const JOY_AXIS_2: JoystickList.JOY_AXIS_2;

	/** Gamepad right stick vertical axis. */
	const JOY_AXIS_3: JoystickList.JOY_AXIS_3;

	/** Generic gamepad axis 4. */
	const JOY_AXIS_4: JoystickList.JOY_AXIS_4;

	/** Generic gamepad axis 5. */
	const JOY_AXIS_5: JoystickList.JOY_AXIS_5;

	/** Gamepad left trigger analog axis. */
	const JOY_AXIS_6: JoystickList.JOY_AXIS_6;

	/** Gamepad right trigger analog axis. */
	const JOY_AXIS_7: JoystickList.JOY_AXIS_7;

	/** Generic gamepad axis 8. */
	const JOY_AXIS_8: JoystickList.JOY_AXIS_8;

	/** Generic gamepad axis 9. */
	const JOY_AXIS_9: JoystickList.JOY_AXIS_9;

	/** Represents the maximum number of joystick axes supported. */
	const JOY_AXIS_MAX: JoystickList.JOY_AXIS_MAX;

	/** Gamepad left stick horizontal axis. */
	const JOY_ANALOG_LX: JoystickList.JOY_ANALOG_LX;

	/** Gamepad left stick vertical axis. */
	const JOY_ANALOG_LY: JoystickList.JOY_ANALOG_LY;

	/** Gamepad right stick horizontal axis. */
	const JOY_ANALOG_RX: JoystickList.JOY_ANALOG_RX;

	/** Gamepad right stick vertical axis. */
	const JOY_ANALOG_RY: JoystickList.JOY_ANALOG_RY;

	/** Gamepad left analog trigger. */
	const JOY_ANALOG_L2: JoystickList.JOY_ANALOG_L2;

	/** Gamepad right analog trigger. */
	const JOY_ANALOG_R2: JoystickList.JOY_ANALOG_R2;

	/** VR Controller analog trigger. */
	const JOY_VR_ANALOG_TRIGGER: JoystickList.JOY_VR_ANALOG_TRIGGER;

	/** VR Controller analog grip (side buttons). */
	const JOY_VR_ANALOG_GRIP: JoystickList.JOY_VR_ANALOG_GRIP;

	/** OpenVR touchpad X axis (Joystick axis on Oculus Touch and Windows MR controllers). */
	const JOY_OPENVR_TOUCHPADX: JoystickList.JOY_OPENVR_TOUCHPADX;

	/** OpenVR touchpad Y axis (Joystick axis on Oculus Touch and Windows MR controllers). */
	const JOY_OPENVR_TOUCHPADY: JoystickList.JOY_OPENVR_TOUCHPADY;

	/** MIDI note OFF message. */
	const MIDI_MESSAGE_NOTE_OFF: MidiMessageList.MIDI_MESSAGE_NOTE_OFF;

	/** MIDI note ON message. */
	const MIDI_MESSAGE_NOTE_ON: MidiMessageList.MIDI_MESSAGE_NOTE_ON;

	/** MIDI aftertouch message. */
	const MIDI_MESSAGE_AFTERTOUCH: MidiMessageList.MIDI_MESSAGE_AFTERTOUCH;

	/** MIDI control change message. */
	const MIDI_MESSAGE_CONTROL_CHANGE: MidiMessageList.MIDI_MESSAGE_CONTROL_CHANGE;

	/** MIDI program change message. */
	const MIDI_MESSAGE_PROGRAM_CHANGE: MidiMessageList.MIDI_MESSAGE_PROGRAM_CHANGE;

	/** MIDI channel pressure message. */
	const MIDI_MESSAGE_CHANNEL_PRESSURE: MidiMessageList.MIDI_MESSAGE_CHANNEL_PRESSURE;

	/** MIDI pitch bend message. */
	const MIDI_MESSAGE_PITCH_BEND: MidiMessageList.MIDI_MESSAGE_PITCH_BEND;

	/** Methods that return `Error` return `OK` when no error occurred. Note that many functions don't return an error code but will print error messages to standard output.

	 Since `OK` has value 0, and all other failure codes are positive integers, it can also be used in boolean checks, e.g.:

	 ```gdscript
	 var err = method_that_returns_error()
	 if err != OK:
	     print("Failure!)
	 # Or, equivalent:
	 if err:
	     print("Still failing!)
	 ``` */
	const OK: Error.OK;

	/** Generic error. */
	const FAILED: Error.FAILED;

	/** Unavailable error. */
	const ERR_UNAVAILABLE: Error.ERR_UNAVAILABLE;

	/** Unconfigured error. */
	const ERR_UNCONFIGURED: Error.ERR_UNCONFIGURED;

	/** Unauthorized error. */
	const ERR_UNAUTHORIZED: Error.ERR_UNAUTHORIZED;

	/** Parameter range error. */
	const ERR_PARAMETER_RANGE_ERROR: Error.ERR_PARAMETER_RANGE_ERROR;

	/** Out of memory (OOM) error. */
	const ERR_OUT_OF_MEMORY: Error.ERR_OUT_OF_MEMORY;

	/** File: Not found error. */
	const ERR_FILE_NOT_FOUND: Error.ERR_FILE_NOT_FOUND;

	/** File: Bad drive error. */
	const ERR_FILE_BAD_DRIVE: Error.ERR_FILE_BAD_DRIVE;

	/** File: Bad path error. */
	const ERR_FILE_BAD_PATH: Error.ERR_FILE_BAD_PATH;

	/** File: No permission error. */
	const ERR_FILE_NO_PERMISSION: Error.ERR_FILE_NO_PERMISSION;

	/** File: Already in use error. */
	const ERR_FILE_ALREADY_IN_USE: Error.ERR_FILE_ALREADY_IN_USE;

	/** File: Can't open error. */
	const ERR_FILE_CANT_OPEN: Error.ERR_FILE_CANT_OPEN;

	/** File: Can't write error. */
	const ERR_FILE_CANT_WRITE: Error.ERR_FILE_CANT_WRITE;

	/** File: Can't read error. */
	const ERR_FILE_CANT_READ: Error.ERR_FILE_CANT_READ;

	/** File: Unrecognized error. */
	const ERR_FILE_UNRECOGNIZED: Error.ERR_FILE_UNRECOGNIZED;

	/** File: Corrupt error. */
	const ERR_FILE_CORRUPT: Error.ERR_FILE_CORRUPT;

	/** File: Missing dependencies error. */
	const ERR_FILE_MISSING_DEPENDENCIES: Error.ERR_FILE_MISSING_DEPENDENCIES;

	/** File: End of file (EOF) error. */
	const ERR_FILE_EOF: Error.ERR_FILE_EOF;

	/** Can't open error. */
	const ERR_CANT_OPEN: Error.ERR_CANT_OPEN;

	/** Can't create error. */
	const ERR_CANT_CREATE: Error.ERR_CANT_CREATE;

	/** Query failed error. */
	const ERR_QUERY_FAILED: Error.ERR_QUERY_FAILED;

	/** Already in use error. */
	const ERR_ALREADY_IN_USE: Error.ERR_ALREADY_IN_USE;

	/** Locked error. */
	const ERR_LOCKED: Error.ERR_LOCKED;

	/** Timeout error. */
	const ERR_TIMEOUT: Error.ERR_TIMEOUT;

	/** Can't connect error. */
	const ERR_CANT_CONNECT: Error.ERR_CANT_CONNECT;

	/** Can't resolve error. */
	const ERR_CANT_RESOLVE: Error.ERR_CANT_RESOLVE;

	/** Connection error. */
	const ERR_CONNECTION_ERROR: Error.ERR_CONNECTION_ERROR;

	/** Can't acquire resource error. */
	const ERR_CANT_ACQUIRE_RESOURCE: Error.ERR_CANT_ACQUIRE_RESOURCE;

	/** Can't fork process error. */
	const ERR_CANT_FORK: Error.ERR_CANT_FORK;

	/** Invalid data error. */
	const ERR_INVALID_DATA: Error.ERR_INVALID_DATA;

	/** Invalid parameter error. */
	const ERR_INVALID_PARAMETER: Error.ERR_INVALID_PARAMETER;

	/** Already exists error. */
	const ERR_ALREADY_EXISTS: Error.ERR_ALREADY_EXISTS;

	/** Does not exist error. */
	const ERR_DOES_NOT_EXIST: Error.ERR_DOES_NOT_EXIST;

	/** Database: Read error. */
	const ERR_DATABASE_CANT_READ: Error.ERR_DATABASE_CANT_READ;

	/** Database: Write error. */
	const ERR_DATABASE_CANT_WRITE: Error.ERR_DATABASE_CANT_WRITE;

	/** Compilation failed error. */
	const ERR_COMPILATION_FAILED: Error.ERR_COMPILATION_FAILED;

	/** Method not found error. */
	const ERR_METHOD_NOT_FOUND: Error.ERR_METHOD_NOT_FOUND;

	/** Linking failed error. */
	const ERR_LINK_FAILED: Error.ERR_LINK_FAILED;

	/** Script failed error. */
	const ERR_SCRIPT_FAILED: Error.ERR_SCRIPT_FAILED;

	/** Cycling link (import cycle) error. */
	const ERR_CYCLIC_LINK: Error.ERR_CYCLIC_LINK;

	/** Invalid declaration error. */
	const ERR_INVALID_DECLARATION: Error.ERR_INVALID_DECLARATION;

	/** Duplicate symbol error. */
	const ERR_DUPLICATE_SYMBOL: Error.ERR_DUPLICATE_SYMBOL;

	/** Parse error. */
	const ERR_PARSE_ERROR: Error.ERR_PARSE_ERROR;

	/** Busy error. */
	const ERR_BUSY: Error.ERR_BUSY;

	/** Skip error. */
	const ERR_SKIP: Error.ERR_SKIP;

	/** Help error. */
	const ERR_HELP: Error.ERR_HELP;

	/** Bug error. */
	const ERR_BUG: Error.ERR_BUG;

	/** Printer on fire error. (This is an easter egg, no engine methods return this error code.) */
	const ERR_PRINTER_ON_FIRE: Error.ERR_PRINTER_ON_FIRE;

	/** No hint for the edited property. */
	const PROPERTY_HINT_NONE: PropertyHint.PROPERTY_HINT_NONE;

	/** Hints that an integer or float property should be within a range specified via the hint string `"min,max"` or `"min,max,step"`. The hint string can optionally include `"or_greater"` and/or `"or_lesser"` to allow manual input going respectively above the max or below the min values. Example: `"-360,360,1,or_greater,or_lesser"`. */
	const PROPERTY_HINT_RANGE: PropertyHint.PROPERTY_HINT_RANGE;

	/** Hints that an integer or float property should be within an exponential range specified via the hint string `"min,max"` or `"min,max,step"`. The hint string can optionally include `"or_greater"` and/or `"or_lesser"` to allow manual input going respectively above the max or below the min values. Example: `"0.01,100,0.01,or_greater"`. */
	const PROPERTY_HINT_EXP_RANGE: PropertyHint.PROPERTY_HINT_EXP_RANGE;

	/** Hints that an integer, float or string property is an enumerated value to pick in a list specified via a hint string such as `"Hello,Something,Else"`. */
	const PROPERTY_HINT_ENUM: PropertyHint.PROPERTY_HINT_ENUM;

	/** Hints that a float property should be edited via an exponential easing function. The hint string can include `"attenuation"` to flip the curve horizontally and/or `"inout"` to also include in/out easing. */
	const PROPERTY_HINT_EXP_EASING: PropertyHint.PROPERTY_HINT_EXP_EASING;

	/** Deprecated hint, unused. */
	const PROPERTY_HINT_LENGTH: PropertyHint.PROPERTY_HINT_LENGTH;

	/** Deprecated hint, unused. */
	const PROPERTY_HINT_KEY_ACCEL: PropertyHint.PROPERTY_HINT_KEY_ACCEL;

	/** Hints that an integer property is a bitmask with named bit flags. For example, to allow toggling bits 0, 1, 2 and 4, the hint could be something like `"Bit0,Bit1,Bit2,,Bit4"`. */
	const PROPERTY_HINT_FLAGS: PropertyHint.PROPERTY_HINT_FLAGS;

	/** Hints that an integer property is a bitmask using the optionally named 2D render layers. */
	const PROPERTY_HINT_LAYERS_2D_RENDER: PropertyHint.PROPERTY_HINT_LAYERS_2D_RENDER;

	/** Hints that an integer property is a bitmask using the optionally named 2D physics layers. */
	const PROPERTY_HINT_LAYERS_2D_PHYSICS: PropertyHint.PROPERTY_HINT_LAYERS_2D_PHYSICS;

	/** Hints that an integer property is a bitmask using the optionally named 3D render layers. */
	const PROPERTY_HINT_LAYERS_3D_RENDER: PropertyHint.PROPERTY_HINT_LAYERS_3D_RENDER;

	/** Hints that an integer property is a bitmask using the optionally named 3D physics layers. */
	const PROPERTY_HINT_LAYERS_3D_PHYSICS: PropertyHint.PROPERTY_HINT_LAYERS_3D_PHYSICS;

	/** Hints that a string property is a path to a file. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like `"*.png,*.jpg"`. */
	const PROPERTY_HINT_FILE: PropertyHint.PROPERTY_HINT_FILE;

	/** Hints that a string property is a path to a directory. Editing it will show a file dialog for picking the path. */
	const PROPERTY_HINT_DIR: PropertyHint.PROPERTY_HINT_DIR;

	/** Hints that a string property is an absolute path to a file outside the project folder. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like `"*.png,*.jpg"`. */
	const PROPERTY_HINT_GLOBAL_FILE: PropertyHint.PROPERTY_HINT_GLOBAL_FILE;

	/** Hints that a string property is an absolute path to a directory outside the project folder. Editing it will show a file dialog for picking the path. */
	const PROPERTY_HINT_GLOBAL_DIR: PropertyHint.PROPERTY_HINT_GLOBAL_DIR;

	/** Hints that a property is an instance of a `Resource`-derived type, optionally specified via the hint string (e.g. `"Texture"`). Editing it will show a popup menu of valid resource types to instantiate. */
	const PROPERTY_HINT_RESOURCE_TYPE: PropertyHint.PROPERTY_HINT_RESOURCE_TYPE;

	/** Hints that a string property is text with line breaks. Editing it will show a text input field where line breaks can be typed. */
	const PROPERTY_HINT_MULTILINE_TEXT: PropertyHint.PROPERTY_HINT_MULTILINE_TEXT;

	/** Hints that a string property should have a placeholder text visible on its input field, whenever the property is empty. The hint string is the placeholder text to use. */
	const PROPERTY_HINT_PLACEHOLDER_TEXT: PropertyHint.PROPERTY_HINT_PLACEHOLDER_TEXT;

	/** Hints that a color property should be edited without changing its alpha component, i.e. only R, G and B channels are edited. */
	const PROPERTY_HINT_COLOR_NO_ALPHA: PropertyHint.PROPERTY_HINT_COLOR_NO_ALPHA;

	/** Hints that an image is compressed using lossy compression. */
	const PROPERTY_HINT_IMAGE_COMPRESS_LOSSY: PropertyHint.PROPERTY_HINT_IMAGE_COMPRESS_LOSSY;

	/** Hints that an image is compressed using lossless compression. */
	const PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS: PropertyHint.PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS;

	/** The property is serialized and saved in the scene file (default). */
	const PROPERTY_USAGE_STORAGE: PropertyUsageFlags.PROPERTY_USAGE_STORAGE;

	/** The property is shown in the editor inspector (default). */
	const PROPERTY_USAGE_EDITOR: PropertyUsageFlags.PROPERTY_USAGE_EDITOR;

	/** Deprecated usage flag, unused. */
	const PROPERTY_USAGE_NETWORK: PropertyUsageFlags.PROPERTY_USAGE_NETWORK;

	/** Deprecated usage flag, unused. */
	const PROPERTY_USAGE_EDITOR_HELPER: PropertyUsageFlags.PROPERTY_USAGE_EDITOR_HELPER;

	/** The property can be checked in the editor inspector. */
	const PROPERTY_USAGE_CHECKABLE: PropertyUsageFlags.PROPERTY_USAGE_CHECKABLE;

	/** The property is checked in the editor inspector. */
	const PROPERTY_USAGE_CHECKED: PropertyUsageFlags.PROPERTY_USAGE_CHECKED;

	/** The property is a translatable string. */
	const PROPERTY_USAGE_INTERNATIONALIZED: PropertyUsageFlags.PROPERTY_USAGE_INTERNATIONALIZED;

	/** Used to group properties together in the editor. */
	const PROPERTY_USAGE_GROUP: PropertyUsageFlags.PROPERTY_USAGE_GROUP;

	/** Used to categorize properties together in the editor. */
	const PROPERTY_USAGE_CATEGORY: PropertyUsageFlags.PROPERTY_USAGE_CATEGORY;

	/** The property does not save its state in `PackedScene`. */
	const PROPERTY_USAGE_NO_INSTANCE_STATE: PropertyUsageFlags.PROPERTY_USAGE_NO_INSTANCE_STATE;

	/** Editing the property prompts the user for restarting the editor. */
	const PROPERTY_USAGE_RESTART_IF_CHANGED: PropertyUsageFlags.PROPERTY_USAGE_RESTART_IF_CHANGED;

	/** The property is a script variable which should be serialized and saved in the scene file. */
	const PROPERTY_USAGE_SCRIPT_VARIABLE: PropertyUsageFlags.PROPERTY_USAGE_SCRIPT_VARIABLE;

	/** Default usage (storage, editor and network). */
	const PROPERTY_USAGE_DEFAULT: PropertyUsageFlags.PROPERTY_USAGE_DEFAULT;

	/** Default usage for translatable strings (storage, editor, network and internationalized). */
	const PROPERTY_USAGE_DEFAULT_INTL: PropertyUsageFlags.PROPERTY_USAGE_DEFAULT_INTL;

	/** Default usage but without showing the property in the editor (storage, network). */
	const PROPERTY_USAGE_NOEDITOR: PropertyUsageFlags.PROPERTY_USAGE_NOEDITOR;

	/** Flag for a normal method. */
	const METHOD_FLAG_NORMAL: MethodFlags.METHOD_FLAG_NORMAL;

	/** Flag for an editor method. */
	const METHOD_FLAG_EDITOR: MethodFlags.METHOD_FLAG_EDITOR;

	/** Deprecated method flag, unused. */
	const METHOD_FLAG_NOSCRIPT: MethodFlags.METHOD_FLAG_NOSCRIPT;

	/** Flag for a constant method. */
	const METHOD_FLAG_CONST: MethodFlags.METHOD_FLAG_CONST;

	/** Deprecated method flag, unused. */
	const METHOD_FLAG_REVERSE: MethodFlags.METHOD_FLAG_REVERSE;

	/** Flag for a virtual method. */
	const METHOD_FLAG_VIRTUAL: MethodFlags.METHOD_FLAG_VIRTUAL;

	/** Deprecated method flag, unused. */
	const METHOD_FLAG_FROM_SCRIPT: MethodFlags.METHOD_FLAG_FROM_SCRIPT;

	/** Default method flags. */
	const METHOD_FLAGS_DEFAULT: MethodFlags.METHOD_FLAGS_DEFAULT;

	/** Variable is `null`. */
	const TYPE_NIL: VariantType.TYPE_NIL;

	/** Variable is of type `bool`. */
	const TYPE_BOOL: VariantType.TYPE_BOOL;

	/** Variable is of type `int`. */
	const TYPE_INT: VariantType.TYPE_INT;

	/** Variable is of type `float` (real). */
	const TYPE_REAL: VariantType.TYPE_REAL;

	/** Variable is of type `String`. */
	const TYPE_STRING: VariantType.TYPE_STRING;

	/** Variable is of type `Vector2`. */
	const TYPE_VECTOR2: VariantType.TYPE_VECTOR2;

	/** Variable is of type `Rect2`. */
	const TYPE_RECT2: VariantType.TYPE_RECT2;

	/** Variable is of type `Vector3`. */
	const TYPE_VECTOR3: VariantType.TYPE_VECTOR3;

	/** Variable is of type `Transform2D`. */
	const TYPE_TRANSFORM2D: VariantType.TYPE_TRANSFORM2D;

	/** Variable is of type `Plane`. */
	const TYPE_PLANE: VariantType.TYPE_PLANE;

	/** Variable is of type `Quat`. */
	const TYPE_QUAT: VariantType.TYPE_QUAT;

	/** Variable is of type `AABB`. */
	const TYPE_AABB: VariantType.TYPE_AABB;

	/** Variable is of type `Basis`. */
	const TYPE_BASIS: VariantType.TYPE_BASIS;

	/** Variable is of type `Transform`. */
	const TYPE_TRANSFORM: VariantType.TYPE_TRANSFORM;

	/** Variable is of type `Color`. */
	const TYPE_COLOR: VariantType.TYPE_COLOR;

	/** Variable is of type `NodePath`. */
	const TYPE_NODE_PATH: VariantType.TYPE_NODE_PATH;

	/** Variable is of type `RID`. */
	const TYPE_RID: VariantType.TYPE_RID;

	/** Variable is of type `Object`. */
	const TYPE_OBJECT: VariantType.TYPE_OBJECT;

	/** Variable is of type `Dictionary`. */
	const TYPE_DICTIONARY: VariantType.TYPE_DICTIONARY;

	/** Variable is of type `Array`. */
	const TYPE_ARRAY: VariantType.TYPE_ARRAY;

	/** Variable is of type `PoolByteArray`. */
	const TYPE_RAW_ARRAY: VariantType.TYPE_RAW_ARRAY;

	/** Variable is of type `PoolIntArray`. */
	const TYPE_INT_ARRAY: VariantType.TYPE_INT_ARRAY;

	/** Variable is of type `PoolRealArray`. */
	const TYPE_REAL_ARRAY: VariantType.TYPE_REAL_ARRAY;

	/** Variable is of type `PoolStringArray`. */
	const TYPE_STRING_ARRAY: VariantType.TYPE_STRING_ARRAY;

	/** Variable is of type `PoolVector2Array`. */
	const TYPE_VECTOR2_ARRAY: VariantType.TYPE_VECTOR2_ARRAY;

	/** Variable is of type `PoolVector3Array`. */
	const TYPE_VECTOR3_ARRAY: VariantType.TYPE_VECTOR3_ARRAY;

	/** Variable is of type `PoolColorArray`. */
	const TYPE_COLOR_ARRAY: VariantType.TYPE_COLOR_ARRAY;

	/** Represents the size of the `Variant.Type` enum. */
	const TYPE_MAX: VariantType.TYPE_MAX;

	/** Equality operator (`==`). */
	const OP_EQUAL: VariantOperator.OP_EQUAL;

	/** Inequality operator (`!=`). */
	const OP_NOT_EQUAL: VariantOperator.OP_NOT_EQUAL;

	/** Less than operator (`<`). */
	const OP_LESS: VariantOperator.OP_LESS;

	/** Less than or equal operator (`<=`). */
	const OP_LESS_EQUAL: VariantOperator.OP_LESS_EQUAL;

	/** Greater than operator (`>`). */
	const OP_GREATER: VariantOperator.OP_GREATER;

	/** Greater than or equal operator (`>=`). */
	const OP_GREATER_EQUAL: VariantOperator.OP_GREATER_EQUAL;

	/** Addition operator (`+`). */
	const OP_ADD: VariantOperator.OP_ADD;

	/** Subtraction operator (`-`). */
	const OP_SUBTRACT: VariantOperator.OP_SUBTRACT;

	/** Multiplication operator (`*`). */
	const OP_MULTIPLY: VariantOperator.OP_MULTIPLY;

	/** Division operator (`/`). */
	const OP_DIVIDE: VariantOperator.OP_DIVIDE;

	/** Unary negation operator (`-`). */
	const OP_NEGATE: VariantOperator.OP_NEGATE;

	/** Unary plus operator (`+`). */
	const OP_POSITIVE: VariantOperator.OP_POSITIVE;

	/** Remainder/modulo operator (`%`). */
	const OP_MODULE: VariantOperator.OP_MODULE;

	/** String concatenation operator (`+`). */
	const OP_STRING_CONCAT: VariantOperator.OP_STRING_CONCAT;

	/** Left shift operator (`<<`). */
	const OP_SHIFT_LEFT: VariantOperator.OP_SHIFT_LEFT;

	/** Right shift operator (`>>`). */
	const OP_SHIFT_RIGHT: VariantOperator.OP_SHIFT_RIGHT;

	/** Bitwise AND operator (`&`). */
	const OP_BIT_AND: VariantOperator.OP_BIT_AND;

	/** Bitwise OR operator (`|`). */
	const OP_BIT_OR: VariantOperator.OP_BIT_OR;

	/** Bitwise XOR operator (`^`). */
	const OP_BIT_XOR: VariantOperator.OP_BIT_XOR;

	/** Bitwise NOT operator (`~`). */
	const OP_BIT_NEGATE: VariantOperator.OP_BIT_NEGATE;

	/** Logical AND operator (`and` or `&&`). */
	const OP_AND: VariantOperator.OP_AND;

	/** Logical OR operator (`or` or `||`). */
	const OP_OR: VariantOperator.OP_OR;

	/** Logical XOR operator (not implemented in GDScript). */
	const OP_XOR: VariantOperator.OP_XOR;

	/** Logical NOT operator (`not` or `!`). */
	const OP_NOT: VariantOperator.OP_NOT;

	/** Logical IN operator (`in`). */
	const OP_IN: VariantOperator.OP_IN;

	/** Represents the size of the `Variant.Operator` enum. */
	const OP_MAX: VariantOperator.OP_MAX;

	enum ButtonList {
		/** Left mouse button. */
		BUTTON_LEFT = 1,
		/** Right mouse button. */
		BUTTON_RIGHT = 2,
		/** Middle mouse button. */
		BUTTON_MIDDLE = 3,
		/** Extra mouse button 1 (only present on some mice). */
		BUTTON_XBUTTON1 = 8,
		/** Extra mouse button 2 (only present on some mice). */
		BUTTON_XBUTTON2 = 9,
		/** Mouse wheel up. */
		BUTTON_WHEEL_UP = 4,
		/** Mouse wheel down. */
		BUTTON_WHEEL_DOWN = 5,
		/** Mouse wheel left button (only present on some mice). */
		BUTTON_WHEEL_LEFT = 6,
		/** Mouse wheel right button (only present on some mice). */
		BUTTON_WHEEL_RIGHT = 7,
		/** Left mouse button mask. */
		BUTTON_MASK_LEFT = 1,
		/** Right mouse button mask. */
		BUTTON_MASK_RIGHT = 2,
		/** Middle mouse button mask. */
		BUTTON_MASK_MIDDLE = 4,
		/** Extra mouse button 1 mask. */
		BUTTON_MASK_XBUTTON1 = 128,
		/** Extra mouse button 2 mask. */
		BUTTON_MASK_XBUTTON2 = 256,
	}
	enum Corner {
		/** Top-left corner. */
		CORNER_TOP_LEFT = 0,
		/** Top-right corner. */
		CORNER_TOP_RIGHT = 1,
		/** Bottom-right corner. */
		CORNER_BOTTOM_RIGHT = 2,
		/** Bottom-left corner. */
		CORNER_BOTTOM_LEFT = 3,
	}
	enum Error {
		/** Methods that return `Error` return `OK` when no error occurred. Note that many functions don't return an error code but will print error messages to standard output.

			 Since `OK` has value 0, and all other failure codes are positive integers, it can also be used in boolean checks, e.g.:

			 ```gdscript
			 var err = method_that_returns_error()
			 if err != OK:
			     print("Failure!)
			 # Or, equivalent:
			 if err:
			     print("Still failing!)
			 ``` */
		OK = 0,
		/** Generic error. */
		FAILED = 1,
		/** Unavailable error. */
		ERR_UNAVAILABLE = 2,
		/** Unconfigured error. */
		ERR_UNCONFIGURED = 3,
		/** Unauthorized error. */
		ERR_UNAUTHORIZED = 4,
		/** Parameter range error. */
		ERR_PARAMETER_RANGE_ERROR = 5,
		/** Out of memory (OOM) error. */
		ERR_OUT_OF_MEMORY = 6,
		/** File: Not found error. */
		ERR_FILE_NOT_FOUND = 7,
		/** File: Bad drive error. */
		ERR_FILE_BAD_DRIVE = 8,
		/** File: Bad path error. */
		ERR_FILE_BAD_PATH = 9,
		/** File: No permission error. */
		ERR_FILE_NO_PERMISSION = 10,
		/** File: Already in use error. */
		ERR_FILE_ALREADY_IN_USE = 11,
		/** File: Can't open error. */
		ERR_FILE_CANT_OPEN = 12,
		/** File: Can't write error. */
		ERR_FILE_CANT_WRITE = 13,
		/** File: Can't read error. */
		ERR_FILE_CANT_READ = 14,
		/** File: Unrecognized error. */
		ERR_FILE_UNRECOGNIZED = 15,
		/** File: Corrupt error. */
		ERR_FILE_CORRUPT = 16,
		/** File: Missing dependencies error. */
		ERR_FILE_MISSING_DEPENDENCIES = 17,
		/** File: End of file (EOF) error. */
		ERR_FILE_EOF = 18,
		/** Can't open error. */
		ERR_CANT_OPEN = 19,
		/** Can't create error. */
		ERR_CANT_CREATE = 20,
		/** Query failed error. */
		ERR_QUERY_FAILED = 21,
		/** Already in use error. */
		ERR_ALREADY_IN_USE = 22,
		/** Locked error. */
		ERR_LOCKED = 23,
		/** Timeout error. */
		ERR_TIMEOUT = 24,
		/** Can't connect error. */
		ERR_CANT_CONNECT = 25,
		/** Can't resolve error. */
		ERR_CANT_RESOLVE = 26,
		/** Connection error. */
		ERR_CONNECTION_ERROR = 27,
		/** Can't acquire resource error. */
		ERR_CANT_ACQUIRE_RESOURCE = 28,
		/** Can't fork process error. */
		ERR_CANT_FORK = 29,
		/** Invalid data error. */
		ERR_INVALID_DATA = 30,
		/** Invalid parameter error. */
		ERR_INVALID_PARAMETER = 31,
		/** Already exists error. */
		ERR_ALREADY_EXISTS = 32,
		/** Does not exist error. */
		ERR_DOES_NOT_EXIST = 33,
		/** Database: Read error. */
		ERR_DATABASE_CANT_READ = 34,
		/** Database: Write error. */
		ERR_DATABASE_CANT_WRITE = 35,
		/** Compilation failed error. */
		ERR_COMPILATION_FAILED = 36,
		/** Method not found error. */
		ERR_METHOD_NOT_FOUND = 37,
		/** Linking failed error. */
		ERR_LINK_FAILED = 38,
		/** Script failed error. */
		ERR_SCRIPT_FAILED = 39,
		/** Cycling link (import cycle) error. */
		ERR_CYCLIC_LINK = 40,
		/** Invalid declaration error. */
		ERR_INVALID_DECLARATION = 41,
		/** Duplicate symbol error. */
		ERR_DUPLICATE_SYMBOL = 42,
		/** Parse error. */
		ERR_PARSE_ERROR = 43,
		/** Busy error. */
		ERR_BUSY = 44,
		/** Skip error. */
		ERR_SKIP = 45,
		/** Help error. */
		ERR_HELP = 46,
		/** Bug error. */
		ERR_BUG = 47,
		/** Printer on fire error. (This is an easter egg, no engine methods return this error code.) */
		ERR_PRINTER_ON_FIRE = 48,
	}
	enum HAlign {
		/** Horizontal left alignment, usually for text-derived classes. */
		HALIGN_LEFT = 0,
		/** Horizontal center alignment, usually for text-derived classes. */
		HALIGN_CENTER = 1,
		/** Horizontal right alignment, usually for text-derived classes. */
		HALIGN_RIGHT = 2,
	}
	enum JoystickList {
		/** Invalid button or axis. */
		JOY_INVALID_OPTION = -1,
		/** Gamepad button 0. */
		JOY_BUTTON_0 = 0,
		/** Gamepad button 1. */
		JOY_BUTTON_1 = 1,
		/** Gamepad button 2. */
		JOY_BUTTON_2 = 2,
		/** Gamepad button 3. */
		JOY_BUTTON_3 = 3,
		/** Gamepad button 4. */
		JOY_BUTTON_4 = 4,
		/** Gamepad button 5. */
		JOY_BUTTON_5 = 5,
		/** Gamepad button 6. */
		JOY_BUTTON_6 = 6,
		/** Gamepad button 7. */
		JOY_BUTTON_7 = 7,
		/** Gamepad button 8. */
		JOY_BUTTON_8 = 8,
		/** Gamepad button 9. */
		JOY_BUTTON_9 = 9,
		/** Gamepad button 10. */
		JOY_BUTTON_10 = 10,
		/** Gamepad button 11. */
		JOY_BUTTON_11 = 11,
		/** Gamepad button 12. */
		JOY_BUTTON_12 = 12,
		/** Gamepad button 13. */
		JOY_BUTTON_13 = 13,
		/** Gamepad button 14. */
		JOY_BUTTON_14 = 14,
		/** Gamepad button 15. */
		JOY_BUTTON_15 = 15,
		/** Represents the maximum number of joystick buttons supported. */
		JOY_BUTTON_MAX = 16,
		/** DualShock circle button. */
		JOY_SONY_CIRCLE = 1,
		/** DualShock X button. */
		JOY_SONY_X = 0,
		/** DualShock square button. */
		JOY_SONY_SQUARE = 2,
		/** DualShock triangle button. */
		JOY_SONY_TRIANGLE = 3,
		/** Xbox controller B button. */
		JOY_XBOX_B = 1,
		/** Xbox controller A button. */
		JOY_XBOX_A = 0,
		/** Xbox controller X button. */
		JOY_XBOX_X = 2,
		/** Xbox controller Y button. */
		JOY_XBOX_Y = 3,
		/** Nintendo controller A button. */
		JOY_DS_A = 1,
		/** Nintendo controller B button. */
		JOY_DS_B = 0,
		/** Nintendo controller X button. */
		JOY_DS_X = 3,
		/** Nintendo controller Y button. */
		JOY_DS_Y = 2,
		/** Grip (side) buttons on a VR controller. */
		JOY_VR_GRIP = 2,
		/** Push down on the touchpad or main joystick on a VR controller. */
		JOY_VR_PAD = 14,
		/** Trigger on a VR controller. */
		JOY_VR_TRIGGER = 15,
		/** A button on the right Oculus Touch controller, X button on the left controller (also when used in OpenVR). */
		JOY_OCULUS_AX = 7,
		/** B button on the right Oculus Touch controller, Y button on the left controller (also when used in OpenVR). */
		JOY_OCULUS_BY = 1,
		/** Menu button on either Oculus Touch controller. */
		JOY_OCULUS_MENU = 3,
		/** Menu button in OpenVR (Except when Oculus Touch controllers are used). */
		JOY_OPENVR_MENU = 1,
		/** Gamepad button Select. */
		JOY_SELECT = 10,
		/** Gamepad button Start. */
		JOY_START = 11,
		/** Gamepad DPad up. */
		JOY_DPAD_UP = 12,
		/** Gamepad DPad down. */
		JOY_DPAD_DOWN = 13,
		/** Gamepad DPad left. */
		JOY_DPAD_LEFT = 14,
		/** Gamepad DPad right. */
		JOY_DPAD_RIGHT = 15,
		/** Gamepad left Shoulder button. */
		JOY_L = 4,
		/** Gamepad left trigger. */
		JOY_L2 = 6,
		/** Gamepad left stick click. */
		JOY_L3 = 8,
		/** Gamepad right Shoulder button. */
		JOY_R = 5,
		/** Gamepad right trigger. */
		JOY_R2 = 7,
		/** Gamepad right stick click. */
		JOY_R3 = 9,
		/** Gamepad left stick horizontal axis. */
		JOY_AXIS_0 = 0,
		/** Gamepad left stick vertical axis. */
		JOY_AXIS_1 = 1,
		/** Gamepad right stick horizontal axis. */
		JOY_AXIS_2 = 2,
		/** Gamepad right stick vertical axis. */
		JOY_AXIS_3 = 3,
		/** Generic gamepad axis 4. */
		JOY_AXIS_4 = 4,
		/** Generic gamepad axis 5. */
		JOY_AXIS_5 = 5,
		/** Gamepad left trigger analog axis. */
		JOY_AXIS_6 = 6,
		/** Gamepad right trigger analog axis. */
		JOY_AXIS_7 = 7,
		/** Generic gamepad axis 8. */
		JOY_AXIS_8 = 8,
		/** Generic gamepad axis 9. */
		JOY_AXIS_9 = 9,
		/** Represents the maximum number of joystick axes supported. */
		JOY_AXIS_MAX = 10,
		/** Gamepad left stick horizontal axis. */
		JOY_ANALOG_LX = 0,
		/** Gamepad left stick vertical axis. */
		JOY_ANALOG_LY = 1,
		/** Gamepad right stick horizontal axis. */
		JOY_ANALOG_RX = 2,
		/** Gamepad right stick vertical axis. */
		JOY_ANALOG_RY = 3,
		/** Gamepad left analog trigger. */
		JOY_ANALOG_L2 = 6,
		/** Gamepad right analog trigger. */
		JOY_ANALOG_R2 = 7,
		/** VR Controller analog trigger. */
		JOY_VR_ANALOG_TRIGGER = 2,
		/** VR Controller analog grip (side buttons). */
		JOY_VR_ANALOG_GRIP = 4,
		/** OpenVR touchpad X axis (Joystick axis on Oculus Touch and Windows MR controllers). */
		JOY_OPENVR_TOUCHPADX = 0,
		/** OpenVR touchpad Y axis (Joystick axis on Oculus Touch and Windows MR controllers). */
		JOY_OPENVR_TOUCHPADY = 1,
	}
	enum KeyList {
		/** Escape key. */
		KEY_ESCAPE = 16777217,
		/** Tab key. */
		KEY_TAB = 16777218,
		/** Shift+Tab key. */
		KEY_BACKTAB = 16777219,
		/** Backspace key. */
		KEY_BACKSPACE = 16777220,
		/** Return key (on the main keyboard). */
		KEY_ENTER = 16777221,
		/** Enter key on the numeric keypad. */
		KEY_KP_ENTER = 16777222,
		/** Insert key. */
		KEY_INSERT = 16777223,
		/** Delete key. */
		KEY_DELETE = 16777224,
		/** Pause key. */
		KEY_PAUSE = 16777225,
		/** Print Screen key. */
		KEY_PRINT = 16777226,
		/** System Request key. */
		KEY_SYSREQ = 16777227,
		/** Clear key. */
		KEY_CLEAR = 16777228,
		/** Home key. */
		KEY_HOME = 16777229,
		/** End key. */
		KEY_END = 16777230,
		/** Left arrow key. */
		KEY_LEFT = 16777231,
		/** Up arrow key. */
		KEY_UP = 16777232,
		/** Right arrow key. */
		KEY_RIGHT = 16777233,
		/** Down arrow key. */
		KEY_DOWN = 16777234,
		/** Page Up key. */
		KEY_PAGEUP = 16777235,
		/** Page Down key. */
		KEY_PAGEDOWN = 16777236,
		/** Shift key. */
		KEY_SHIFT = 16777237,
		/** Control key. */
		KEY_CONTROL = 16777238,
		/** Meta key. */
		KEY_META = 16777239,
		/** Alt key. */
		KEY_ALT = 16777240,
		/** Caps Lock key. */
		KEY_CAPSLOCK = 16777241,
		/** Num Lock key. */
		KEY_NUMLOCK = 16777242,
		/** Scroll Lock key. */
		KEY_SCROLLLOCK = 16777243,
		/** F1 key. */
		KEY_F1 = 16777244,
		/** F2 key. */
		KEY_F2 = 16777245,
		/** F3 key. */
		KEY_F3 = 16777246,
		/** F4 key. */
		KEY_F4 = 16777247,
		/** F5 key. */
		KEY_F5 = 16777248,
		/** F6 key. */
		KEY_F6 = 16777249,
		/** F7 key. */
		KEY_F7 = 16777250,
		/** F8 key. */
		KEY_F8 = 16777251,
		/** F9 key. */
		KEY_F9 = 16777252,
		/** F10 key. */
		KEY_F10 = 16777253,
		/** F11 key. */
		KEY_F11 = 16777254,
		/** F12 key. */
		KEY_F12 = 16777255,
		/** F13 key. */
		KEY_F13 = 16777256,
		/** F14 key. */
		KEY_F14 = 16777257,
		/** F15 key. */
		KEY_F15 = 16777258,
		/** F16 key. */
		KEY_F16 = 16777259,
		/** Multiply (*) key on the numeric keypad. */
		KEY_KP_MULTIPLY = 16777345,
		/** Divide (/) key on the numeric keypad. */
		KEY_KP_DIVIDE = 16777346,
		/** Subtract (-) key on the numeric keypad. */
		KEY_KP_SUBTRACT = 16777347,
		/** Period (.) key on the numeric keypad. */
		KEY_KP_PERIOD = 16777348,
		/** Add (+) key on the numeric keypad. */
		KEY_KP_ADD = 16777349,
		/** Number 0 on the numeric keypad. */
		KEY_KP_0 = 16777350,
		/** Number 1 on the numeric keypad. */
		KEY_KP_1 = 16777351,
		/** Number 2 on the numeric keypad. */
		KEY_KP_2 = 16777352,
		/** Number 3 on the numeric keypad. */
		KEY_KP_3 = 16777353,
		/** Number 4 on the numeric keypad. */
		KEY_KP_4 = 16777354,
		/** Number 5 on the numeric keypad. */
		KEY_KP_5 = 16777355,
		/** Number 6 on the numeric keypad. */
		KEY_KP_6 = 16777356,
		/** Number 7 on the numeric keypad. */
		KEY_KP_7 = 16777357,
		/** Number 8 on the numeric keypad. */
		KEY_KP_8 = 16777358,
		/** Number 9 on the numeric keypad. */
		KEY_KP_9 = 16777359,
		/** Left Super key (Windows key). */
		KEY_SUPER_L = 16777260,
		/** Right Super key (Windows key). */
		KEY_SUPER_R = 16777261,
		/** Context menu key. */
		KEY_MENU = 16777262,
		/** Left Hyper key. */
		KEY_HYPER_L = 16777263,
		/** Right Hyper key. */
		KEY_HYPER_R = 16777264,
		/** Help key. */
		KEY_HELP = 16777265,
		/** Left Direction key. */
		KEY_DIRECTION_L = 16777266,
		/** Right Direction key. */
		KEY_DIRECTION_R = 16777267,
		/** Back key. */
		KEY_BACK = 16777280,
		/** Forward key. */
		KEY_FORWARD = 16777281,
		/** Stop key. */
		KEY_STOP = 16777282,
		/** Refresh key. */
		KEY_REFRESH = 16777283,
		/** Volume down key. */
		KEY_VOLUMEDOWN = 16777284,
		/** Mute volume key. */
		KEY_VOLUMEMUTE = 16777285,
		/** Volume up key. */
		KEY_VOLUMEUP = 16777286,
		/** Bass Boost key. */
		KEY_BASSBOOST = 16777287,
		/** Bass up key. */
		KEY_BASSUP = 16777288,
		/** Bass down key. */
		KEY_BASSDOWN = 16777289,
		/** Treble up key. */
		KEY_TREBLEUP = 16777290,
		/** Treble down key. */
		KEY_TREBLEDOWN = 16777291,
		/** Media play key. */
		KEY_MEDIAPLAY = 16777292,
		/** Media stop key. */
		KEY_MEDIASTOP = 16777293,
		/** Previous song key. */
		KEY_MEDIAPREVIOUS = 16777294,
		/** Next song key. */
		KEY_MEDIANEXT = 16777295,
		/** Media record key. */
		KEY_MEDIARECORD = 16777296,
		/** Home page key. */
		KEY_HOMEPAGE = 16777297,
		/** Favorites key. */
		KEY_FAVORITES = 16777298,
		/** Search key. */
		KEY_SEARCH = 16777299,
		/** Standby key. */
		KEY_STANDBY = 16777300,
		/** Open URL / Launch Browser key. */
		KEY_OPENURL = 16777301,
		/** Launch Mail key. */
		KEY_LAUNCHMAIL = 16777302,
		/** Launch Media key. */
		KEY_LAUNCHMEDIA = 16777303,
		/** Launch Shortcut 0 key. */
		KEY_LAUNCH0 = 16777304,
		/** Launch Shortcut 1 key. */
		KEY_LAUNCH1 = 16777305,
		/** Launch Shortcut 2 key. */
		KEY_LAUNCH2 = 16777306,
		/** Launch Shortcut 3 key. */
		KEY_LAUNCH3 = 16777307,
		/** Launch Shortcut 4 key. */
		KEY_LAUNCH4 = 16777308,
		/** Launch Shortcut 5 key. */
		KEY_LAUNCH5 = 16777309,
		/** Launch Shortcut 6 key. */
		KEY_LAUNCH6 = 16777310,
		/** Launch Shortcut 7 key. */
		KEY_LAUNCH7 = 16777311,
		/** Launch Shortcut 8 key. */
		KEY_LAUNCH8 = 16777312,
		/** Launch Shortcut 9 key. */
		KEY_LAUNCH9 = 16777313,
		/** Launch Shortcut A key. */
		KEY_LAUNCHA = 16777314,
		/** Launch Shortcut B key. */
		KEY_LAUNCHB = 16777315,
		/** Launch Shortcut C key. */
		KEY_LAUNCHC = 16777316,
		/** Launch Shortcut D key. */
		KEY_LAUNCHD = 16777317,
		/** Launch Shortcut E key. */
		KEY_LAUNCHE = 16777318,
		/** Launch Shortcut F key. */
		KEY_LAUNCHF = 16777319,
		/** Unknown key. */
		KEY_UNKNOWN = 33554431,
		/** Space key. */
		KEY_SPACE = 32,
		/** ! key. */
		KEY_EXCLAM = 33,
		/** " key. */
		KEY_QUOTEDBL = 34,
		/** # key. */
		KEY_NUMBERSIGN = 35,
		/** $ key. */
		KEY_DOLLAR = 36,
		/** % key. */
		KEY_PERCENT = 37,
		/** & key. */
		KEY_AMPERSAND = 38,
		/** ' key. */
		KEY_APOSTROPHE = 39,
		/** ( key. */
		KEY_PARENLEFT = 40,
		/** ) key. */
		KEY_PARENRIGHT = 41,
		/** * key. */
		KEY_ASTERISK = 42,
		/** + key. */
		KEY_PLUS = 43,
		/** , key. */
		KEY_COMMA = 44,
		/** - key. */
		KEY_MINUS = 45,
		/** . key. */
		KEY_PERIOD = 46,
		/** / key. */
		KEY_SLASH = 47,
		/** Number 0. */
		KEY_0 = 48,
		/** Number 1. */
		KEY_1 = 49,
		/** Number 2. */
		KEY_2 = 50,
		/** Number 3. */
		KEY_3 = 51,
		/** Number 4. */
		KEY_4 = 52,
		/** Number 5. */
		KEY_5 = 53,
		/** Number 6. */
		KEY_6 = 54,
		/** Number 7. */
		KEY_7 = 55,
		/** Number 8. */
		KEY_8 = 56,
		/** Number 9. */
		KEY_9 = 57,
		/** : key. */
		KEY_COLON = 58,
		/** ; key. */
		KEY_SEMICOLON = 59,
		/** < key. */
		KEY_LESS = 60,
		/** = key. */
		KEY_EQUAL = 61,
		/** > key. */
		KEY_GREATER = 62,
		/** ? key. */
		KEY_QUESTION = 63,
		/** @ key. */
		KEY_AT = 64,
		/** A key. */
		KEY_A = 65,
		/** B key. */
		KEY_B = 66,
		/** C key. */
		KEY_C = 67,
		/** D key. */
		KEY_D = 68,
		/** E key. */
		KEY_E = 69,
		/** F key. */
		KEY_F = 70,
		/** G key. */
		KEY_G = 71,
		/** H key. */
		KEY_H = 72,
		/** I key. */
		KEY_I = 73,
		/** J key. */
		KEY_J = 74,
		/** K key. */
		KEY_K = 75,
		/** L key. */
		KEY_L = 76,
		/** M key. */
		KEY_M = 77,
		/** N key. */
		KEY_N = 78,
		/** O key. */
		KEY_O = 79,
		/** P key. */
		KEY_P = 80,
		/** Q key. */
		KEY_Q = 81,
		/** R key. */
		KEY_R = 82,
		/** S key. */
		KEY_S = 83,
		/** T key. */
		KEY_T = 84,
		/** U key. */
		KEY_U = 85,
		/** V key. */
		KEY_V = 86,
		/** W key. */
		KEY_W = 87,
		/** X key. */
		KEY_X = 88,
		/** Y key. */
		KEY_Y = 89,
		/** Z key. */
		KEY_Z = 90,
		/** ` key. */
		KEY_BRACKETLEFT = 91,
		/** \ key. */
		KEY_BACKSLASH = 92,
		/** ` key. */
		KEY_BRACKETRIGHT = 93,
		/** ^ key. */
		KEY_ASCIICIRCUM = 94,
		/** _ key. */
		KEY_UNDERSCORE = 95,
		/** ` key. */
		KEY_QUOTELEFT = 96,
		/** { key. */
		KEY_BRACELEFT = 123,
		/** | key. */
		KEY_BAR = 124,
		/** } key. */
		KEY_BRACERIGHT = 125,
		/** ~ key. */
		KEY_ASCIITILDE = 126,
		/** Non-breakable space key. */
		KEY_NOBREAKSPACE = 160,
		/** ¡ key. */
		KEY_EXCLAMDOWN = 161,
		/** ¢ key. */
		KEY_CENT = 162,
		/** £ key. */
		KEY_STERLING = 163,
		/** ¤ key. */
		KEY_CURRENCY = 164,
		/** ¥ key. */
		KEY_YEN = 165,
		/** ¦ key. */
		KEY_BROKENBAR = 166,
		/** § key. */
		KEY_SECTION = 167,
		/** ¨ key. */
		KEY_DIAERESIS = 168,
		/** © key. */
		KEY_COPYRIGHT = 169,
		/** ª key. */
		KEY_ORDFEMININE = 170,
		/** « key. */
		KEY_GUILLEMOTLEFT = 171,
		/** ¬ key. */
		KEY_NOTSIGN = 172,
		/** Soft hyphen key. */
		KEY_HYPHEN = 173,
		/** ® key. */
		KEY_REGISTERED = 174,
		/** ¯ key. */
		KEY_MACRON = 175,
		/** ° key. */
		KEY_DEGREE = 176,
		/** ± key. */
		KEY_PLUSMINUS = 177,
		/** ² key. */
		KEY_TWOSUPERIOR = 178,
		/** ³ key. */
		KEY_THREESUPERIOR = 179,
		/** ´ key. */
		KEY_ACUTE = 180,
		/** µ key. */
		KEY_MU = 181,
		/** ¶ key. */
		KEY_PARAGRAPH = 182,
		/** · key. */
		KEY_PERIODCENTERED = 183,
		/** ¸ key. */
		KEY_CEDILLA = 184,
		/** ¹ key. */
		KEY_ONESUPERIOR = 185,
		/** º key. */
		KEY_MASCULINE = 186,
		/** » key. */
		KEY_GUILLEMOTRIGHT = 187,
		/** ¼ key. */
		KEY_ONEQUARTER = 188,
		/** ½ key. */
		KEY_ONEHALF = 189,
		/** ¾ key. */
		KEY_THREEQUARTERS = 190,
		/** ¿ key. */
		KEY_QUESTIONDOWN = 191,
		/** À key. */
		KEY_AGRAVE = 192,
		/** Á key. */
		KEY_AACUTE = 193,
		/** Â key. */
		KEY_ACIRCUMFLEX = 194,
		/** Ã key. */
		KEY_ATILDE = 195,
		/** Ä key. */
		KEY_ADIAERESIS = 196,
		/** Å key. */
		KEY_ARING = 197,
		/** Æ key. */
		KEY_AE = 198,
		/** Ç key. */
		KEY_CCEDILLA = 199,
		/** È key. */
		KEY_EGRAVE = 200,
		/** É key. */
		KEY_EACUTE = 201,
		/** Ê key. */
		KEY_ECIRCUMFLEX = 202,
		/** Ë key. */
		KEY_EDIAERESIS = 203,
		/** Ì key. */
		KEY_IGRAVE = 204,
		/** Í key. */
		KEY_IACUTE = 205,
		/** Î key. */
		KEY_ICIRCUMFLEX = 206,
		/** Ï key. */
		KEY_IDIAERESIS = 207,
		/** Ð key. */
		KEY_ETH = 208,
		/** Ñ key. */
		KEY_NTILDE = 209,
		/** Ò key. */
		KEY_OGRAVE = 210,
		/** Ó key. */
		KEY_OACUTE = 211,
		/** Ô key. */
		KEY_OCIRCUMFLEX = 212,
		/** Õ key. */
		KEY_OTILDE = 213,
		/** Ö key. */
		KEY_ODIAERESIS = 214,
		/** × key. */
		KEY_MULTIPLY = 215,
		/** Ø key. */
		KEY_OOBLIQUE = 216,
		/** Ù key. */
		KEY_UGRAVE = 217,
		/** Ú key. */
		KEY_UACUTE = 218,
		/** Û key. */
		KEY_UCIRCUMFLEX = 219,
		/** Ü key. */
		KEY_UDIAERESIS = 220,
		/** Ý key. */
		KEY_YACUTE = 221,
		/** Þ key. */
		KEY_THORN = 222,
		/** ß key. */
		KEY_SSHARP = 223,
		/** ÷ key. */
		KEY_DIVISION = 247,
		/** ÿ key. */
		KEY_YDIAERESIS = 255,
	}
	enum KeyModifierMask {
		/** Key Code mask. */
		KEY_CODE_MASK = 33554431,
		/** Modifier key mask. */
		KEY_MODIFIER_MASK = -16777216,
		/** Shift key mask. */
		KEY_MASK_SHIFT = 33554432,
		/** Alt key mask. */
		KEY_MASK_ALT = 67108864,
		/** Meta key mask. */
		KEY_MASK_META = 134217728,
		/** Ctrl key mask. */
		KEY_MASK_CTRL = 268435456,
		/** Command key mask. On macOS, this is equivalent to `KEY_MASK_META`. On other platforms, this is equivalent to `KEY_MASK_CTRL`. This mask should be preferred to `KEY_MASK_META` or `KEY_MASK_CTRL` for system shortcuts as it handles all platforms correctly. */
		KEY_MASK_CMD = 268435456,
		/** Keypad key mask. */
		KEY_MASK_KPAD = 536870912,
		/** Group Switch key mask. */
		KEY_MASK_GROUP_SWITCH = 1073741824,
	}
	enum Margin {
		/** Left margin, usually used for `Control` or `StyleBox`-derived classes. */
		MARGIN_LEFT = 0,
		/** Top margin, usually used for `Control` or `StyleBox`-derived classes. */
		MARGIN_TOP = 1,
		/** Right margin, usually used for `Control` or `StyleBox`-derived classes. */
		MARGIN_RIGHT = 2,
		/** Bottom margin, usually used for `Control` or `StyleBox`-derived classes. */
		MARGIN_BOTTOM = 3,
	}
	enum MethodFlags {
		/** Flag for a normal method. */
		METHOD_FLAG_NORMAL = 1,
		/** Flag for an editor method. */
		METHOD_FLAG_EDITOR = 2,
		/** Deprecated method flag, unused. */
		METHOD_FLAG_NOSCRIPT = 4,
		/** Flag for a constant method. */
		METHOD_FLAG_CONST = 8,
		/** Deprecated method flag, unused. */
		METHOD_FLAG_REVERSE = 16,
		/** Flag for a virtual method. */
		METHOD_FLAG_VIRTUAL = 32,
		/** Deprecated method flag, unused. */
		METHOD_FLAG_FROM_SCRIPT = 64,
		/** Default method flags. */
		METHOD_FLAGS_DEFAULT = 1,
	}
	enum MidiMessageList {
		/** MIDI note OFF message. */
		MIDI_MESSAGE_NOTE_OFF = 8,
		/** MIDI note ON message. */
		MIDI_MESSAGE_NOTE_ON = 9,
		/** MIDI aftertouch message. */
		MIDI_MESSAGE_AFTERTOUCH = 10,
		/** MIDI control change message. */
		MIDI_MESSAGE_CONTROL_CHANGE = 11,
		/** MIDI program change message. */
		MIDI_MESSAGE_PROGRAM_CHANGE = 12,
		/** MIDI channel pressure message. */
		MIDI_MESSAGE_CHANNEL_PRESSURE = 13,
		/** MIDI pitch bend message. */
		MIDI_MESSAGE_PITCH_BEND = 14,
	}
	enum Orientation {
		/** General vertical alignment, usually used for `Separator`, `ScrollBar`, `Slider`, etc. */
		VERTICAL = 1,
		/** General horizontal alignment, usually used for `Separator`, `ScrollBar`, `Slider`, etc. */
		HORIZONTAL = 0,
	}
	enum PropertyHint {
		/** No hint for the edited property. */
		PROPERTY_HINT_NONE = 0,
		/** Hints that an integer or float property should be within a range specified via the hint string `"min,max"` or `"min,max,step"`. The hint string can optionally include `"or_greater"` and/or `"or_lesser"` to allow manual input going respectively above the max or below the min values. Example: `"-360,360,1,or_greater,or_lesser"`. */
		PROPERTY_HINT_RANGE = 1,
		/** Hints that an integer or float property should be within an exponential range specified via the hint string `"min,max"` or `"min,max,step"`. The hint string can optionally include `"or_greater"` and/or `"or_lesser"` to allow manual input going respectively above the max or below the min values. Example: `"0.01,100,0.01,or_greater"`. */
		PROPERTY_HINT_EXP_RANGE = 2,
		/** Hints that an integer, float or string property is an enumerated value to pick in a list specified via a hint string such as `"Hello,Something,Else"`. */
		PROPERTY_HINT_ENUM = 3,
		/** Hints that a float property should be edited via an exponential easing function. The hint string can include `"attenuation"` to flip the curve horizontally and/or `"inout"` to also include in/out easing. */
		PROPERTY_HINT_EXP_EASING = 4,
		/** Deprecated hint, unused. */
		PROPERTY_HINT_LENGTH = 5,
		/** Deprecated hint, unused. */
		PROPERTY_HINT_KEY_ACCEL = 7,
		/** Hints that an integer property is a bitmask with named bit flags. For example, to allow toggling bits 0, 1, 2 and 4, the hint could be something like `"Bit0,Bit1,Bit2,,Bit4"`. */
		PROPERTY_HINT_FLAGS = 8,
		/** Hints that an integer property is a bitmask using the optionally named 2D render layers. */
		PROPERTY_HINT_LAYERS_2D_RENDER = 9,
		/** Hints that an integer property is a bitmask using the optionally named 2D physics layers. */
		PROPERTY_HINT_LAYERS_2D_PHYSICS = 10,
		/** Hints that an integer property is a bitmask using the optionally named 3D render layers. */
		PROPERTY_HINT_LAYERS_3D_RENDER = 11,
		/** Hints that an integer property is a bitmask using the optionally named 3D physics layers. */
		PROPERTY_HINT_LAYERS_3D_PHYSICS = 12,
		/** Hints that a string property is a path to a file. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like `"*.png,*.jpg"`. */
		PROPERTY_HINT_FILE = 13,
		/** Hints that a string property is a path to a directory. Editing it will show a file dialog for picking the path. */
		PROPERTY_HINT_DIR = 14,
		/** Hints that a string property is an absolute path to a file outside the project folder. Editing it will show a file dialog for picking the path. The hint string can be a set of filters with wildcards like `"*.png,*.jpg"`. */
		PROPERTY_HINT_GLOBAL_FILE = 15,
		/** Hints that a string property is an absolute path to a directory outside the project folder. Editing it will show a file dialog for picking the path. */
		PROPERTY_HINT_GLOBAL_DIR = 16,
		/** Hints that a property is an instance of a `Resource`-derived type, optionally specified via the hint string (e.g. `"Texture"`). Editing it will show a popup menu of valid resource types to instantiate. */
		PROPERTY_HINT_RESOURCE_TYPE = 17,
		/** Hints that a string property is text with line breaks. Editing it will show a text input field where line breaks can be typed. */
		PROPERTY_HINT_MULTILINE_TEXT = 18,
		/** Hints that a string property should have a placeholder text visible on its input field, whenever the property is empty. The hint string is the placeholder text to use. */
		PROPERTY_HINT_PLACEHOLDER_TEXT = 19,
		/** Hints that a color property should be edited without changing its alpha component, i.e. only R, G and B channels are edited. */
		PROPERTY_HINT_COLOR_NO_ALPHA = 20,
		/** Hints that an image is compressed using lossy compression. */
		PROPERTY_HINT_IMAGE_COMPRESS_LOSSY = 21,
		/** Hints that an image is compressed using lossless compression. */
		PROPERTY_HINT_IMAGE_COMPRESS_LOSSLESS = 22,
	}
	enum PropertyUsageFlags {
		/** The property is serialized and saved in the scene file (default). */
		PROPERTY_USAGE_STORAGE = 1,
		/** The property is shown in the editor inspector (default). */
		PROPERTY_USAGE_EDITOR = 2,
		/** Deprecated usage flag, unused. */
		PROPERTY_USAGE_NETWORK = 4,
		/** Deprecated usage flag, unused. */
		PROPERTY_USAGE_EDITOR_HELPER = 8,
		/** The property can be checked in the editor inspector. */
		PROPERTY_USAGE_CHECKABLE = 16,
		/** The property is checked in the editor inspector. */
		PROPERTY_USAGE_CHECKED = 32,
		/** The property is a translatable string. */
		PROPERTY_USAGE_INTERNATIONALIZED = 64,
		/** Used to group properties together in the editor. */
		PROPERTY_USAGE_GROUP = 128,
		/** Used to categorize properties together in the editor. */
		PROPERTY_USAGE_CATEGORY = 256,
		/** The property does not save its state in `PackedScene`. */
		PROPERTY_USAGE_NO_INSTANCE_STATE = 2048,
		/** Editing the property prompts the user for restarting the editor. */
		PROPERTY_USAGE_RESTART_IF_CHANGED = 4096,
		/** The property is a script variable which should be serialized and saved in the scene file. */
		PROPERTY_USAGE_SCRIPT_VARIABLE = 8192,
		/** Default usage (storage, editor and network). */
		PROPERTY_USAGE_DEFAULT = 7,
		/** Default usage for translatable strings (storage, editor, network and internationalized). */
		PROPERTY_USAGE_DEFAULT_INTL = 71,
		/** Default usage but without showing the property in the editor (storage, network). */
		PROPERTY_USAGE_NOEDITOR = 5,
	}
	enum VAlign {
		/** Vertical top alignment, usually for text-derived classes. */
		VALIGN_TOP = 0,
		/** Vertical center alignment, usually for text-derived classes. */
		VALIGN_CENTER = 1,
		/** Vertical bottom alignment, usually for text-derived classes. */
		VALIGN_BOTTOM = 2,
	}
	enum VariantOperator {
		/** Equality operator (`==`). */
		OP_EQUAL = 0,
		/** Inequality operator (`!=`). */
		OP_NOT_EQUAL = 1,
		/** Less than operator (`<`). */
		OP_LESS = 2,
		/** Less than or equal operator (`<=`). */
		OP_LESS_EQUAL = 3,
		/** Greater than operator (`>`). */
		OP_GREATER = 4,
		/** Greater than or equal operator (`>=`). */
		OP_GREATER_EQUAL = 5,
		/** Addition operator (`+`). */
		OP_ADD = 6,
		/** Subtraction operator (`-`). */
		OP_SUBTRACT = 7,
		/** Multiplication operator (`*`). */
		OP_MULTIPLY = 8,
		/** Division operator (`/`). */
		OP_DIVIDE = 9,
		/** Unary negation operator (`-`). */
		OP_NEGATE = 10,
		/** Unary plus operator (`+`). */
		OP_POSITIVE = 11,
		/** Remainder/modulo operator (`%`). */
		OP_MODULE = 12,
		/** String concatenation operator (`+`). */
		OP_STRING_CONCAT = 13,
		/** Left shift operator (`<<`). */
		OP_SHIFT_LEFT = 14,
		/** Right shift operator (`>>`). */
		OP_SHIFT_RIGHT = 15,
		/** Bitwise AND operator (`&`). */
		OP_BIT_AND = 16,
		/** Bitwise OR operator (`|`). */
		OP_BIT_OR = 17,
		/** Bitwise XOR operator (`^`). */
		OP_BIT_XOR = 18,
		/** Bitwise NOT operator (`~`). */
		OP_BIT_NEGATE = 19,
		/** Logical AND operator (`and` or `&&`). */
		OP_AND = 20,
		/** Logical OR operator (`or` or `||`). */
		OP_OR = 21,
		/** Logical XOR operator (not implemented in GDScript). */
		OP_XOR = 22,
		/** Logical NOT operator (`not` or `!`). */
		OP_NOT = 23,
		/** Logical IN operator (`in`). */
		OP_IN = 24,
		/** Represents the size of the `Variant.Operator` enum. */
		OP_MAX = 25,
	}
	enum VariantType {
		/** Variable is `null`. */
		TYPE_NIL = 0,
		/** Variable is of type `bool`. */
		TYPE_BOOL = 1,
		/** Variable is of type `int`. */
		TYPE_INT = 2,
		/** Variable is of type `float` (real). */
		TYPE_REAL = 3,
		/** Variable is of type `String`. */
		TYPE_STRING = 4,
		/** Variable is of type `Vector2`. */
		TYPE_VECTOR2 = 5,
		/** Variable is of type `Rect2`. */
		TYPE_RECT2 = 6,
		/** Variable is of type `Vector3`. */
		TYPE_VECTOR3 = 7,
		/** Variable is of type `Transform2D`. */
		TYPE_TRANSFORM2D = 8,
		/** Variable is of type `Plane`. */
		TYPE_PLANE = 9,
		/** Variable is of type `Quat`. */
		TYPE_QUAT = 10,
		/** Variable is of type `AABB`. */
		TYPE_AABB = 11,
		/** Variable is of type `Basis`. */
		TYPE_BASIS = 12,
		/** Variable is of type `Transform`. */
		TYPE_TRANSFORM = 13,
		/** Variable is of type `Color`. */
		TYPE_COLOR = 14,
		/** Variable is of type `NodePath`. */
		TYPE_NODE_PATH = 15,
		/** Variable is of type `RID`. */
		TYPE_RID = 16,
		/** Variable is of type `Object`. */
		TYPE_OBJECT = 17,
		/** Variable is of type `Dictionary`. */
		TYPE_DICTIONARY = 18,
		/** Variable is of type `Array`. */
		TYPE_ARRAY = 19,
		/** Variable is of type `PoolByteArray`. */
		TYPE_RAW_ARRAY = 20,
		/** Variable is of type `PoolIntArray`. */
		TYPE_INT_ARRAY = 21,
		/** Variable is of type `PoolRealArray`. */
		TYPE_REAL_ARRAY = 22,
		/** Variable is of type `PoolStringArray`. */
		TYPE_STRING_ARRAY = 23,
		/** Variable is of type `PoolVector2Array`. */
		TYPE_VECTOR2_ARRAY = 24,
		/** Variable is of type `PoolVector3Array`. */
		TYPE_VECTOR3_ARRAY = 25,
		/** Variable is of type `PoolColorArray`. */
		TYPE_COLOR_ARRAY = 26,
		/** Represents the size of the `Variant.Type` enum. */
		TYPE_MAX = 27,
	}


	/** Returns the sine of angle `s` in radians.

		 ```gdscript
		 sin(0.523599) # Returns 0.5
		 ``` */
	function sin(s: number) : number;

	/** Returns the cosine of angle `s` in radians.

		 ```gdscript
		 # Prints 1 then -1
		 print(cos(PI * 2))
		 print(cos(PI))
		 ``` */
	function cos(s: number) : number;

	/** Returns the tangent of angle `s` in radians.

		 ```gdscript
		 tan(deg2rad(45)) # Returns 1
		 ``` */
	function tan(s: number) : number;

	/** Returns the hyperbolic sine of `s`.

		 ```gdscript
		 a = log(2.0) # Returns 0.693147
		 sinh(a) # Returns 0.75
		 ``` */
	function sinh(s: number) : number;

	/** Returns the hyperbolic cosine of `s` in radians.

		 ```gdscript
		 # Prints 1.543081
		 print(cosh(1))
		 ``` */
	function cosh(s: number) : number;

	/** Returns the hyperbolic tangent of `s`.

		 ```gdscript
		 a = log(2.0) # Returns 0.693147
		 tanh(a)      # Returns 0.6
		 ``` */
	function tanh(s: number) : number;

	/** Returns the arc sine of `s` in radians. Use to get the angle of sine `s`.

		 ```gdscript
		 # s is 0.523599 or 30 degrees if converted with rad2deg(s)
		 s = asin(0.5)
		 ``` */
	function asin(s: number) : number;

	/** Returns the arc cosine of `s` in radians. Use to get the angle of cosine `s`.

		 ```gdscript
		 # c is 0.523599 or 30 degrees if converted with rad2deg(s)
		 c = acos(0.866025)
		 ``` */
	function acos(s: number) : number;

	/** Returns the arc tangent of `s` in radians. Use it to get the angle from an angle's tangent in trigonometry: `atan(tan(angle)) == angle`.

		 The method cannot know in which quadrant the angle should fall. See `atan2` if you always want an exact angle.

		 ```gdscript
		 a = atan(0.5) # a is 0.463648
		 ``` */
	function atan(s: number) : number;

	/** Returns the arc tangent of `y/x` in radians. Use to get the angle of tangent `y/x`. To compute the value, the method takes into account the sign of both arguments in order to determine the quadrant.

		 ```gdscript
		 a = atan2(0, -1) # a is 3.141593
		 ``` */
	function atan2(y: number, x: number) : number;

	/** Returns the square root of `s`.

		 ```gdscript
		 sqrt(9) # Returns 3
		 ``` */
	function sqrt(s: number) : number;

	/** Returns the floating-point remainder of `a/b`, keeping the sign of `a`.

		 ```gdscript
		 # Remainder is 1.5
		 var remainder = fmod(7, 5.5)
		 ```

		 For the integer remainder operation, use the % operator. */
	function fmod(a: number, b: number) : number;

	/** Returns the floating-point modulus of `a/b` that wraps equally in positive and negative.

		 ```gdscript
		 var i = -6
		 while i < 5:
		     prints(i, fposmod(i, 3))
		     i += 1
		 ```

		 Produces:

		 ```gdscript
		 -6 0
		 -5 1
		 -4 2
		 -3 0
		 -2 1
		 -1 2
		 0 0
		 1 1
		 2 2
		 3 0
		 4 1
		 ``` */
	function fposmod(a: number, b: number) : number;

	/** Returns the integer modulus of `a/b` that wraps equally in positive and negative.

		 ```gdscript
		 var i = -6
		 while i < 5:
		     prints(i, posmod(i, 3))
		     i += 1
		 ```

		 Produces:

		 ```gdscript
		 -6 0
		 -5 1
		 -4 2
		 -3 0
		 -2 1
		 -1 2
		 0 0
		 1 1
		 2 2
		 3 0
		 4 1
		 ``` */
	function posmod(a: number, b: number) : number;

	/** Rounds `s` to the closest smaller integer and returns it.

		 ```gdscript
		 # a is 2.0
		 a = floor(2.99)
		 # a is -3.0
		 a = floor(-2.99)
		 ```

		 **Note:** This method returns a float. If you need an integer, you can use `int(s)` directly. */
	function floor(s: number) : number;

	/** Rounds `s` upward, returning the smallest integral value that is not less than `s`.

		 ```gdscript
		 i = ceil(1.45)  # i is 2
		 i = ceil(1.001) # i is 2
		 ``` */
	function ceil(s: number) : number;

	/** Returns the integral value that is nearest to `s`, with halfway cases rounded away from zero.

		 ```gdscript
		 round(2.6) # Returns 3
		 ``` */
	function round(s: number) : number;

	/** Returns the absolute value of parameter `s` (i.e. unsigned value, works for integer and float).

		 ```gdscript
		 # a is 1
		 a = abs(-1)
		 ``` */
	function abs(s: number) : number;

	/** Returns the sign of `s`: -1 or 1. Returns 0 if `s` is 0.

		 ```gdscript
		 sign(-6) # Returns -1
		 sign(0)  # Returns 0
		 sign(6)  # Returns 1
		 ``` */
	function sign(s: number) : number;

	/** Returns the result of `x` raised to the power of `y`.

		 ```gdscript
		 pow(2, 5) # Returns 32
		 ``` */
	function pow(base: number, exp: number) : number;

	/** Natural logarithm. The amount of time needed to reach a certain level of continuous growth.

		 **Note:** This is not the same as the "log" function on most calculators, which uses a base 10 logarithm.

		 ```gdscript
		 log(10) # Returns 2.302585
		 ``` */
	function log(s: number) : number;

	/** The natural exponential function. It raises the mathematical constant **e** to the power of `s` and returns it.

		 **e** has an approximate value of 2.71828.

		 For exponents to other bases use the method `pow`.

		 ```gdscript
		 a = exp(2) # Approximately 7.39
		 ``` */
	function exp(s: number) : number;

	/** Returns whether `s` is a NaN (Not-A-Number) value. */
	function is_nan(s: number) : boolean;

	/** Returns whether `s` is an infinity value (either positive infinity or negative infinity). */
	function is_inf(s: number) : boolean;

	/** Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in. */
	function ease(s: number, curve: number) : number;

	/** Deprecated alias for `step_decimals`. */
	function decimals(step: number) : number;

	/** Returns the position of the first non-zero digit, after the decimal point. Note that the maximum return value is 10, which is a design decision in the implementation.

		 ```gdscript
		 # n is 0
		 n = step_decimals(5)
		 # n is 4
		 n = step_decimals(1.0005)
		 # n is 9
		 n = step_decimals(0.000000005)
		 ``` */
	function step_decimals(step: number) : number;

	/** Snaps float value `s` to a given `step`. This can also be used to round a floating point number to an arbitrary number of decimals.

		 ```gdscript
		 stepify(100, 32) # Returns 96
		 stepify(3.14159, 0.01) # Returns 3.14
		 ``` */
	function stepify(s: number, step: number) : number;

	/** Linearly interpolates between two values by a normalized value. This is the opposite of `inverse_lerp`.

		 If the `from` and `to` arguments are of type `int` or `float`, the return value is a `float`.

		 If both are of the same vector type (`Vector2`, `Vector3` or `Color`), the return value will be of the same type (`lerp` then calls the vector type's `linear_interpolate` method).

		 ```gdscript
		 lerp(0, 4, 0.75) # Returns 3.0
		 lerp(Vector2(1, 5), Vector2(3, 2), 0.5) # Returns Vector2(2, 3.5)
		 ``` */
	function lerp(p_from: any, to: any, weight: number) : any;

	/** Linearly interpolates between two angles (in radians) by a normalized value.

		 Similar to `lerp`, but interpolates correctly when the angles wrap around `@GDScript.TAU`.

		 ```gdscript
		 extends Sprite
		 var elapsed = 0.0
		 func _process(delta):
		     var min_angle = deg2rad(0.0)
		     var max_angle = deg2rad(90.0)
		     rotation = lerp_angle(min_angle, max_angle, elapsed)
		     elapsed += delta
		 ``` */
	function lerp_angle(p_from: number, to: number, weight: number) : number;

	/** Returns a normalized value considering the given range. This is the opposite of `lerp`.

		 ```gdscript
		 var middle = lerp(20, 30, 0.75)
		 # `middle` is now 27.5.
		 # Now, we pretend to have forgotten the original ratio and want to get it back.
		 var ratio = inverse_lerp(20, 30, 27.5)
		 # `ratio` is now 0.75.
		 ``` */
	function inverse_lerp(p_from: number, to: number, weight: number) : number;

	/** Maps a `value` from range ``istart, istop`` to ``ostart, ostop``.

		 ```gdscript
		 range_lerp(75, 0, 100, -1, 1) # Returns 0.5
		 ``` */
	function range_lerp(value: number, istart: number, istop: number, ostart: number, ostop: number) : number;

	/** Returns a number smoothly interpolated between the `from` and `to`, based on the `weight`. Similar to `lerp`, but interpolates faster at the beginning and slower at the end.

		 ```gdscript
		 smoothstep(0, 2, 0.5) # Returns 0.15
		 smoothstep(0, 2, 1.0) # Returns 0.5
		 smoothstep(0, 2, 2.0) # Returns 1.0
		 ``` */
	function smoothstep(p_from: number, to: number, weight: number) : number;

	/** Moves `from` toward `to` by the `delta` value.

		 Use a negative `delta` value to move away.

		 ```gdscript
		 move_toward(10, 5, 4) # Returns 6
		 ``` */
	function move_toward(p_from: number, to: number, delta: number) : number;

	/** Returns the result of `value` decreased by `step` * `amount`.

		 ```gdscript
		 # a = 59
		 a = dectime(60, 10, 0.1))
		 ``` */
	function dectime(value: number, amount: number, step: number) : number;

	/** Randomizes the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time.

		 ```gdscript
		 func _ready():
		     randomize()
		 ``` */
	function randomize() : void;

	/** Returns a random unsigned 32 bit integer. Use remainder to obtain a random value in the interval ``0, N - 1`` (where N is smaller than 2^32).

		 ```gdscript
		 randi()           # Returns random integer between 0 and 2^32 - 1
		 randi() % 20      # Returns random integer between 0 and 19
		 randi() % 100     # Returns random integer between 0 and 99
		 randi() % 100 + 1 # Returns random integer between 1 and 100
		 ``` */
	function randi() : number;

	/** Returns a random floating point value on the interval ``0, 1``.

		 ```gdscript
		 randf() # Returns e.g. 0.375671
		 ``` */
	function randf() : number;

	/** Random range, any floating point value between `from` and `to`.

		 ```gdscript
		 prints(rand_range(0, 1), rand_range(0, 1)) # Prints e.g. 0.135591 0.405263
		 ``` */
	function rand_range(p_from: number, to: number) : number;

	/** Sets seed for the random number generator.

		 ```gdscript
		 my_seed = "Godot Rocks"
		 seed(my_seed.hash())
		 ``` */
	function seed(seed: number) : void;

	/** Random from seed: pass a `seed`, and an array with both number and new seed is returned. "Seed" here refers to the internal state of the pseudo random number generator. The internal state of the current implementation is 64 bits. */
	function rand_seed(seed: number) : any[];

	/** Returns degrees converted to radians.

		 ```gdscript
		 # r is 3.141593
		 r = deg2rad(180)
		 ``` */
	function deg2rad(deg: number) : number;

	/** Converts from radians to degrees.

		 ```gdscript
		 rad2deg(0.523599) # Returns 30
		 ``` */
	function rad2deg(rad: number) : number;

	/** Converts from linear energy to decibels (audio). This can be used to implement volume sliders that behave as expected (since volume isn't linear). Example:

		 ```gdscript
		 # "Slider" refers to a node that inherits Range such as HSlider or VSlider.
		 # Its range must be configured to go from 0 to 1.
		 # Change the bus name if you'd like to change the volume of a specific bus only.
		 AudioServer.set_bus_volume_db(AudioServer.get_bus_index("Master"), linear2db($Slider.value))
		 ``` */
	function linear2db(nrg: number) : number;

	/** Converts from decibels to linear energy (audio). */
	function db2linear(db: number) : number;

	/** Converts a 2D point expressed in the polar coordinate system (a distance from the origin `r` and an angle `th`) to the cartesian coordinate system (X and Y axis). */
	function polar2cartesian(r: number, th: number) : Vector2;

	/** Converts a 2D point expressed in the cartesian coordinate system (X and Y axis) to the polar coordinate system (a distance from the origin and an angle). */
	function cartesian2polar(x: number, y: number) : Vector2;

	/** Wraps integer `value` between `min` and `max`.

		 Usable for creating loop-alike behavior or infinite surfaces.

		 ```gdscript
		 # a is 0
		 a = wrapi(10, 0, 10)
		 ```

		 ```gdscript
		 # a is 9
		 a = wrapi(-1, 0, 10)
		 ```

		 ```gdscript
		 # Infinite loop between 0 and 9
		 frame = wrapi(frame + 1, 0, 10)
		 ```

		 **Note:** If you just want to wrap between 0 and `n` (where `n` is a positive integer value), it is better for performance to use the modulo operator like `number % n`.

		 `wrapi` is more flexible than using the modulo approach by giving the user a simple control over the minimum value. It also fully supports negative numbers, e.g.

		 ```gdscript
		 # result is -2
		 var result = wrapi(-6, -5, -1)
		 ``` */
	function wrapi(value: number, min: number, max: number) : number;

	/** Wraps float `value` between `min` and `max`.

		 Usable for creating loop-alike behavior or infinite surfaces.

		 ```gdscript
		 # a is 0.5
		 a = wrapf(10.5, 0.0, 10.0)
		 ```

		 ```gdscript
		 # a is 9.5
		 a = wrapf(-0.5, 0.0, 10.0)
		 ```

		 ```gdscript
		 # Infinite loop between 0.0 and 0.99
		 f = wrapf(f + 0.1, 0.0, 1.0)
		 ```

		 ```gdscript
		 # Infinite rotation (in radians)
		 angle = wrapf(angle + 0.1, 0.0, TAU)
		 ```

		 **Note:** If you just want to wrap between 0.0 and `n` (where `n` is a positive floating-point value), it is better for performance to use the `fmod` method like `fmod(number, n)`.

		 `wrapf` is more flexible than using the `fmod` approach by giving the user a simple control over the minimum value. It also fully supports negative numbers, e.g.

		 ```gdscript
		 # Infinite rotation (in radians)
		 angle = wrapf(angle + 0.1, -PI, PI)
		 ``` */
	function wrapf(value: number, min: number, max: number) : number;

	/** Returns the maximum of two values.

		 ```gdscript
		 max(1, 2) # Returns 2
		 max(-3.99, -4) # Returns -3.99
		 ``` */
	function max(a: number, b: number) : number;

	/** Returns the minimum of two values.

		 ```gdscript
		 min(1, 2) # Returns 1
		 min(-3.99, -4) # Returns -4
		 ``` */
	function min(a: number, b: number) : number;

	/** Clamps `value` and returns a value not less than `min` and not more than `max`.

		 ```gdscript
		 speed = 1000
		 # a is 20
		 a = clamp(speed, 1, 20)
		 
		 speed = -10
		 # a is 1
		 a = clamp(speed, 1, 20)
		 ``` */
	function clamp(value: number, min: number, max: number) : number;

	/** Returns the nearest larger power of 2 for integer `value`.

		 ```gdscript
		 nearest_po2(3) # Returns 4
		 nearest_po2(4) # Returns 4
		 nearest_po2(5) # Returns 8
		 ``` */
	function nearest_po2(value: number) : number;

	/** Returns a weak reference to an object.

		 A weak reference to an object is not enough to keep the object alive: when the only remaining references to a referent are weak references, garbage collection is free to destroy the referent and reuse its memory for something else. However, until the object is actually destroyed the weak reference may return the object even if there are no strong references to it. */
	function weakref(obj: Object) : WeakRef;

	/** Returns a reference to the specified function `funcname` in the `instance` node. As functions aren't first-class objects in GDscript, use `funcref` to store a `FuncRef` in a variable and call it later.

		 ```gdscript
		 func foo():
		     return("bar")
		 
		 a = funcref(self, "foo")
		 print(a.call_func()) # Prints bar
		 ``` */
	function funcref(instance: Object, funcname: string) : FuncRef;

	/** Converts from a type to another in the best way possible. The `type` parameter uses the `Variant.Type` values.

		 ```gdscript
		 a = Vector2(1, 0)
		 # Prints 1
		 print(a.length())
		 a = convert(a, TYPE_STRING)
		 # Prints 6 as "(1, 0)" is 6 characters
		 print(a.length())
		 ``` */
	function convert(what: any, type: number) : any;

	/** Returns whether the given class exists in `ClassDB`.

		 ```gdscript
		 type_exists("Sprite") # Returns true
		 type_exists("Variant") # Returns false
		 ``` */
	function type_exists(type: string) : boolean;

	/** Returns a character as a String of the given Unicode code point (which is compatible with ASCII code).

		 ```gdscript
		 a = char(65)      # a is "A"
		 a = char(65 + 32) # a is "a"
		 a = char(8364)    # a is "€"
		 ```

		 This is the inverse of `ord`. */
	function char(code: number) : string;

	/** Returns an integer representing the Unicode code point of the given Unicode character `char`.

		 ```gdscript
		 a = ord("A") # a is 65
		 a = ord("a") # a is 97
		 a = ord("€") # a is 8364
		 ```

		 This is the inverse of `char`. */
	function ord(char: string) : number;

	/** Converts one or more arguments to string in the best way possible.

		 ```gdscript
		 var a = [10, 20, 30]
		 var b = str(a);
		 len(a) # Returns 3
		 len(b) # Returns 12
		 ``` */
	function str(...args) : string;

	/** Converts one or more arguments to strings in the best way possible and prints them to the console.

		 ```gdscript
		 a = [1, 2, 3]
		 print("a", "b", a) # Prints ab[1, 2, 3]
		 ``` */
	function print(...args) : void;

	/** Prints one or more arguments to strings in the best way possible to standard error line.

		 ```gdscript
		 printerr("prints to stderr")
		 ``` */
	function printerr(...args) : void;

	/** Prints one or more arguments to strings in the best way possible to console. No newline is added at the end.

		 ```gdscript
		 printraw("A")
		 printraw("B")
		 # Prints AB
		 ```

		 **Note:** Due to limitations with Godot's built-in console, this only prints to the terminal. If you need to print in the editor, use another method, such as `print`. */
	function printraw(...args) : void;

	/** Converts a Variant `var` to a formatted string that can later be parsed using `str2var`.

		 ```gdscript
		 a = { "a": 1, "b": 2 }
		 print(var2str(a))
		 ```

		 prints

		 ```gdscript
		 {
		 "a": 1,
		 "b": 2
		 }
		 ``` */
	function var2str(p_var: any) : string;

	/** Converts a formatted string that was returned by `var2str` to the original value.

		 ```gdscript
		 a = '{ "a": 1, "b": 2 }'
		 b = str2var(a)
		 print(b["a"]) # Prints 1
		 ``` */
	function str2var(p_string: string) : any;

	/** Encodes a variable value to a byte array. When `full_objects` is `true` encoding objects is allowed (and can potentially include code). */
	//@ts-ignore
	function var2bytes(p_var: any, full_objects: boolean = false) : PoolByteArray;

	/** Decodes a byte array back to a value. When `allow_objects` is `true` decoding objects is allowed.

		 **WARNING:** Deserialized object can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats (remote code execution). */
	//@ts-ignore
	function bytes2var(bytes: PoolByteArray, allow_objects: boolean = false) : any;


	/** An anchor point in AR space.
	 The `ARVRAnchor` point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them.

	 This node is mapped to one of the anchors through its unique ID. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the ID; the nodes will simply remain on 0,0,0 until a plane is recognized.

	 Keep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view. */
	class ARVRAnchor extends Spatial {

		/** The anchor's ID. You can set this before the anchor itself exists. The first anchor gets an ID of `1`, the second an ID of `2`, etc. When anchors get removed, the engine can then assign the corresponding ID to new anchors. The most common situation where anchors "disappear" is when the AR server identifies that two anchors represent different parts of the same plane and merges them. */
		anchor_id: number;

		/** Returns the name given to this anchor. */
		get_anchor_name() : string;

		/** Returns `true` if the anchor is being tracked and `false` if no anchor with this ID is currently known. */
		get_is_active() : boolean;

		/** Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table. */
		get_size() : Vector3;

		/** Returns a plane aligned with our anchor; handy for intersection testing. */
		get_plane() : Plane;

		/** If provided by the `ARVRInterface`, this returns a mesh object for the anchor. For an anchor, this can be a shape related to the object being tracked or it can be a mesh that provides topology related to the anchor and can be used to create shadows/reflections on surfaces or for generating collision shapes. */
		get_mesh() : Mesh;

		/** Getter of `anchor_id` property */
		get_anchor_id() : number;

		/** Setter of `anchor_id` property */
		set_anchor_id(p_value: number) : void;
	}
	namespace ARVRAnchor {

		/** Emitted when the mesh associated with the anchor changes or when one becomes available. This is especially important for topology that is constantly being `mesh_updated`. */
		const mesh_updated: 'mesh_updated';
	}

	/** A camera node with a few overrules for AR/VR applied, such as location tracking.
	 This is a helper spatial node for our camera; note that, if stereoscopic rendering is applicable (VR-HMD), most of the camera properties are ignored, as the HMD information overrides them. The only properties that can be trusted are the near and far planes.

	 The position and orientation of this node is automatically updated by the ARVR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that, in contrast to the ARVR Controller, the render thread has access to the most up-to-date tracking data of the HMD and the location of the ARVRCamera can lag a few milliseconds behind what is used for rendering as a result. */
	class ARVRCamera extends Camera {
	}
	namespace ARVRCamera {
	}

	/** A spatial node representing a spatially-tracked controller.
	 This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers.

	 Controllers are linked by their ID. You can create controller nodes before the controllers are available. If your game always uses two controllers (one for each hand), you can predefine the controllers with ID 1 and 2; they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add ARVRController nodes to your scene.

	 The position of the controller node is automatically updated by the `ARVRServer`. This makes this node ideal to add child nodes to visualize the controller. */
	class ARVRController extends Spatial {

		/** The controller's ID.

		 A controller ID of 0 is unbound and will always result in an inactive node. Controller ID 1 is reserved for the first controller that identifies itself as the left-hand controller and ID 2 is reserved for the first controller that identifies itself as the right-hand controller.

		 For any other controller that the `ARVRServer` detects, we continue with controller ID 3.

		 When a controller is turned off, its slot is freed. This ensures controllers will keep the same ID even when controllers with lower IDs are turned off. */
		controller_id: number;

		/** The degree to which the controller vibrates. Ranges from `0.0` to `1.0` with precision `.01`. If changed, updates `ARVRPositionalTracker.rumble` accordingly.

		 This is a useful property to animate if you want the controller to vibrate for a limited duration. */
		rumble: number;

		/** If active, returns the name of the associated controller if provided by the AR/VR SDK used. */
		get_controller_name() : string;

		/** Returns the ID of the joystick object bound to this. Every controller tracked by the `ARVRServer` that has buttons and axis will also be registered as a joystick within Godot. This means that all the normal joystick tracking and input mapping will work for buttons and axis found on the AR/VR controllers. This ID is purely offered as information so you can link up the controller with its joystick entry. */
		get_joystick_id() : number;

		/** Returns `true` if the button at index `button` is pressed. See `JoystickList`, in particular the `JOY_VR_*` constants. */
		is_button_pressed(button: number) : number;

		/** Returns the value of the given axis for things like triggers, touchpads, etc. that are embedded into the controller. */
		get_joystick_axis(axis: number) : number;

		/** Returns `true` if the bound controller is active. ARVR systems attempt to track active controllers. */
		get_is_active() : boolean;

		/** Returns the hand holding this controller, if known. See `ARVRPositionalTracker.TrackerHand`. */
		get_hand() : number;

		/** If provided by the `ARVRInterface`, this returns a mesh associated with the controller. This can be used to visualize the controller. */
		get_mesh() : Mesh;

		/** Getter of `controller_id` property */
		get_controller_id() : number;

		/** Setter of `controller_id` property */
		set_controller_id(p_value: number) : void;

		/** Getter of `rumble` property */
		get_rumble() : number;

		/** Setter of `rumble` property */
		set_rumble(p_value: number) : void;
	}
	namespace ARVRController {

		/** Emitted when the mesh associated with the controller changes or when one becomes available. Generally speaking this will be a static mesh after becoming available. */
		const mesh_updated: 'mesh_updated';

		/** Emitted when a button on this controller is released. */
		const button_release: 'button_release';

		/** Emitted when a button on this controller is pressed. */
		const button_pressed: 'button_pressed';
	}

	/** Base class for an AR/VR interface implementation.
	 This class needs to be implemented to make an AR or VR platform available to Godot and these should be implemented as C++ modules or GDNative modules (note that for GDNative the subclass ARVRScriptInterface should be used). Part of the interface is exposed to GDScript so you can detect, enable and configure an AR or VR platform.

	 Interfaces should be written in such a way that simply enabling them will give us a working setup. You can query the available interfaces through `ARVRServer`. */
	class ARVRInterface extends Reference {

		/** `true` if this is the primary interface. */
		interface_is_primary: boolean;

		/** `true` if this interface been initialized. */
		interface_is_initialized: boolean;

		/** On an AR interface, `true` if anchor detection is enabled. */
		ar_is_anchor_detection_enabled: boolean;

		/** Returns the name of this interface (OpenVR, OpenHMD, ARKit, etc). */
		get_name() : string;

		/** Returns a combination of `Capabilities` flags providing information about the capabilities of this interface. */
		get_capabilities() : number;

		/** Call this to initialize this interface. The first interface that is initialized is identified as the primary interface and it will be used for rendering output.

		 After initializing the interface you want to use you then need to enable the AR/VR mode of a viewport and rendering should commence.

		 **Note:** You must enable the AR/VR mode on the main viewport for any device that uses the main output of Godot, such as for mobile VR.

		 If you do this for a platform that handles its own output (such as OpenVR) Godot will show just one eye without distortion on screen. Alternatively, you can add a separate viewport node to your scene and enable AR/VR on that viewport. It will be used to output to the HMD, leaving you free to do anything you like in the main window, such as using a separate camera as a spectator camera or rendering something completely different.

		 While currently not used, you can activate additional interfaces. You may wish to do this if you want to track controllers from other platforms. However, at this point in time only one interface can render to an HMD. */
		initialize() : boolean;

		/** Turns the interface off. */
		uninitialize() : void;

		/** If supported, returns the status of our tracking. This will allow you to provide feedback to the user whether there are issues with positional tracking. */
		get_tracking_status() : number;

		/** Returns the resolution at which we should render our intermediate results before things like lens distortion are applied by the VR platform. */
		get_render_targetsize() : Vector2;

		/** Returns `true` if the current output of this interface is in stereo. */
		is_stereo() : boolean;

		/** If this is an AR interface that requires displaying a camera feed as the background, this method returns the feed ID in the `CameraServer` for this interface. */
		get_camera_feed_id() : number;

		/** Getter of `interface_is_primary` property */
		is_primary() : boolean;

		/** Setter of `interface_is_primary` property */
		set_is_primary(p_value: boolean) : void;

		/** Getter of `interface_is_initialized` property */
		is_initialized() : boolean;

		/** Setter of `interface_is_initialized` property */
		set_is_initialized(p_value: boolean) : void;

		/** Getter of `ar_is_anchor_detection_enabled` property */
		get_anchor_detection_is_enabled() : boolean;

		/** Setter of `ar_is_anchor_detection_enabled` property */
		set_anchor_detection_is_enabled(p_value: boolean) : void;
	}
	namespace ARVRInterface {
		enum Capabilities {
			/** No ARVR capabilities. */
			ARVR_NONE = 0,
			/** This interface can work with normal rendering output (non-HMD based AR). */
			ARVR_MONO = 1,
			/** This interface supports stereoscopic rendering. */
			ARVR_STEREO = 2,
			/** This interface supports AR (video background and real world tracking). */
			ARVR_AR = 4,
			/** This interface outputs to an external device. If the main viewport is used, the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of `get_render_targetsize`). Using a separate viewport node frees up the main viewport for other purposes. */
			ARVR_EXTERNAL = 8,
		}
		enum Eyes {
			/** Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported. */
			EYE_MONO = 0,
			/** Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information. */
			EYE_LEFT = 1,
			/** Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information. */
			EYE_RIGHT = 2,
		}
		enum Tracking_status {
			/** Tracking is behaving as expected. */
			ARVR_NORMAL_TRACKING = 0,
			/** Tracking is hindered by excessive motion (the player is moving faster than tracking can keep up). */
			ARVR_EXCESSIVE_MOTION = 1,
			/** Tracking is hindered by insufficient features, it's too dark (for camera-based tracking), player is blocked, etc. */
			ARVR_INSUFFICIENT_FEATURES = 2,
			/** We don't know the status of the tracking or this interface does not provide feedback. */
			ARVR_UNKNOWN_TRACKING = 3,
			/** Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.). */
			ARVR_NOT_TRACKING = 4,
		}

		/** No ARVR capabilities. */
		const ARVR_NONE: Capabilities.ARVR_NONE;

		/** This interface can work with normal rendering output (non-HMD based AR). */
		const ARVR_MONO: Capabilities.ARVR_MONO;

		/** This interface supports stereoscopic rendering. */
		const ARVR_STEREO: Capabilities.ARVR_STEREO;

		/** This interface supports AR (video background and real world tracking). */
		const ARVR_AR: Capabilities.ARVR_AR;

		/** This interface outputs to an external device. If the main viewport is used, the on screen output is an unmodified buffer of either the left or right eye (stretched if the viewport size is not changed to the same aspect ratio of `get_render_targetsize`). Using a separate viewport node frees up the main viewport for other purposes. */
		const ARVR_EXTERNAL: Capabilities.ARVR_EXTERNAL;

		/** Mono output, this is mostly used internally when retrieving positioning information for our camera node or when stereo scopic rendering is not supported. */
		const EYE_MONO: Eyes.EYE_MONO;

		/** Left eye output, this is mostly used internally when rendering the image for the left eye and obtaining positioning and projection information. */
		const EYE_LEFT: Eyes.EYE_LEFT;

		/** Right eye output, this is mostly used internally when rendering the image for the right eye and obtaining positioning and projection information. */
		const EYE_RIGHT: Eyes.EYE_RIGHT;

		/** Tracking is behaving as expected. */
		const ARVR_NORMAL_TRACKING: Tracking_status.ARVR_NORMAL_TRACKING;

		/** Tracking is hindered by excessive motion (the player is moving faster than tracking can keep up). */
		const ARVR_EXCESSIVE_MOTION: Tracking_status.ARVR_EXCESSIVE_MOTION;

		/** Tracking is hindered by insufficient features, it's too dark (for camera-based tracking), player is blocked, etc. */
		const ARVR_INSUFFICIENT_FEATURES: Tracking_status.ARVR_INSUFFICIENT_FEATURES;

		/** We don't know the status of the tracking or this interface does not provide feedback. */
		const ARVR_UNKNOWN_TRACKING: Tracking_status.ARVR_UNKNOWN_TRACKING;

		/** Tracking is not functional (camera not plugged in or obscured, lighthouses turned off, etc.). */
		const ARVR_NOT_TRACKING: Tracking_status.ARVR_NOT_TRACKING;
	}

	/** GDNative wrapper for an ARVR interface.
	 This is a wrapper class for GDNative implementations of the ARVR interface. To use a GDNative ARVR interface, simply instantiate this object and set your GDNative library containing the ARVR interface implementation. */
	class ARVRInterfaceGDNative extends ARVRInterface {
	}
	namespace ARVRInterfaceGDNative {
	}

	/** The origin point in AR/VR.
	 This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world.

	 There should be only one of these nodes in your scene and you must have one. All the ARVRCamera, ARVRController and ARVRAnchor nodes should be direct children of this node for spatial tracking to work correctly.

	 It is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point.

	 For example, if your character is driving a car, the ARVROrigin node should be a child node of this car. Or, if you're implementing a teleport system to move your character, you should change the position of this node. */
	class ARVROrigin extends Spatial {

		/** Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 real world meter.

		 **Note:** This method is a passthrough to the `ARVRServer` itself. */
		world_scale: number;

		/** Getter of `world_scale` property */
		get_world_scale() : number;

		/** Setter of `world_scale` property */
		set_world_scale(p_value: number) : void;
	}
	namespace ARVROrigin {
	}

	/** A tracked object.
	 An instance of this object represents a device that is tracked, such as a controller or anchor point. HMDs aren't represented here as they are handled internally.

	 As controllers are turned on and the AR/VR interface detects them, instances of this object are automatically added to this list of active tracking objects accessible through the `ARVRServer`.

	 The `ARVRController` and `ARVRAnchor` both consume objects of this type and should be used in your project. The positional trackers are just under-the-hood objects that make this all work. These are mostly exposed so that GDNative-based interfaces can interact with them. */
	class ARVRPositionalTracker extends Object {

		/** The degree to which the tracker rumbles. Ranges from `0.0` to `1.0` with precision `.01`. */
		rumble: number;

		/** Returns the tracker's type. */
		get_type() : number;

		/** Returns the internal tracker ID. This uniquely identifies the tracker per tracker type and matches the ID you need to specify for nodes such as the `ARVRController` and `ARVRAnchor` nodes. */
		get_tracker_id() : number;

		/** Returns the controller or anchor point's name if available. */
		get_name() : string;

		/** If this is a controller that is being tracked, the controller will also be represented by a joystick entry with this ID. */
		get_joy_id() : number;

		/** Returns `true` if this device tracks orientation. */
		get_tracks_orientation() : boolean;

		/** Returns the controller's orientation matrix. */
		get_orientation() : Basis;

		/** Returns `true` if this device tracks position. */
		get_tracks_position() : boolean;

		/** Returns the world-space controller position. */
		get_position() : Vector3;

		/** Returns the hand holding this tracker, if known. See `TrackerHand` constants. */
		get_hand() : number;

		/** Returns the transform combining this device's orientation and position. */
		get_transform(adjust_by_reference_frame: boolean) : Transform;

		/** Returns the mesh related to a controller or anchor point if one is available. */
		get_mesh() : Mesh;

		/** Getter of `rumble` property */
		get_rumble() : number;

		/** Setter of `rumble` property */
		set_rumble(p_value: number) : void;
	}
	namespace ARVRPositionalTracker {
		enum TrackerHand {
			/** The hand this tracker is held in is unknown or not applicable. */
			TRACKER_HAND_UNKNOWN = 0,
			/** This tracker is the left hand controller. */
			TRACKER_LEFT_HAND = 1,
			/** This tracker is the right hand controller. */
			TRACKER_RIGHT_HAND = 2,
		}

		/** The hand this tracker is held in is unknown or not applicable. */
		const TRACKER_HAND_UNKNOWN: TrackerHand.TRACKER_HAND_UNKNOWN;

		/** This tracker is the left hand controller. */
		const TRACKER_LEFT_HAND: TrackerHand.TRACKER_LEFT_HAND;

		/** This tracker is the right hand controller. */
		const TRACKER_RIGHT_HAND: TrackerHand.TRACKER_RIGHT_HAND;
	}

	/** Server for AR and VR features.
	 The AR/VR server is the heart of our Advanced and Virtual Reality solution and handles all the processing. */
	class ARVRServer extends Object {

		/** Allows you to adjust the scale to your game's units. Most AR/VR platforms assume a scale of 1 game world unit = 1 real world meter. */
		static world_scale: number;

		/** The primary `ARVRInterface` currently bound to the `ARVRServer`. */
		static primary_interface: ARVRInterface;

		/** Returns the reference frame transform. Mostly used internally and exposed for GDNative build interfaces. */
		static get_reference_frame() : Transform;

		/** This is an important function to understand correctly. AR and VR platforms all handle positioning slightly differently.

		 For platforms that do not offer spatial tracking, our origin point (0,0,0) is the location of our HMD, but you have little control over the direction the player is facing in the real world.

		 For platforms that do offer spatial tracking, our origin point depends very much on the system. For OpenVR, our origin point is usually the center of the tracking space, on the ground. For other platforms, it's often the location of the tracking camera.

		 This method allows you to center your tracker on the location of the HMD. It will take the current location of the HMD and use that to adjust all your tracking data; in essence, realigning the real world to your player's current position in the game world.

		 For this method to produce usable results, tracking information must be available. This often takes a few frames after starting your game.

		 You should call this method after a few seconds have passed. For instance, when the user requests a realignment of the display holding a designated button on a controller for a short period of time, or when implementing a teleport mechanism. */
		static center_on_hmd(rotation_mode: ARVRServer.RotationMode, keep_height: boolean) : void;

		/** Returns the primary interface's transformation. */
		static get_hmd_transform() : Transform;

		/** Returns the number of interfaces currently registered with the AR/VR server. If your project supports multiple AR/VR platforms, you can look through the available interface, and either present the user with a selection or simply try to initialize each interface and use the first one that returns `true`. */
		static get_interface_count() : number;

		/** Returns the interface registered at a given index in our list of interfaces. */
		static get_interface(idx: number) : ARVRInterface;

		/** Returns a list of available interfaces the ID and name of each interface. */
		static get_interfaces() : any[];

		/** Finds an interface by its name. For instance, if your project uses capabilities of an AR/VR platform, you can find the interface for that platform by name and initialize it. */
		static find_interface(name: string) : ARVRInterface;

		/** Returns the number of trackers currently registered. */
		static get_tracker_count() : number;

		/** Returns the positional tracker at the given ID. */
		static get_tracker(idx: number) : ARVRPositionalTracker;

		/** Returns the absolute timestamp (in μs) of the last `ARVRServer` process callback. The value comes from an internal call to `OS.get_ticks_usec`. */
		static get_last_process_usec() : number;

		/** Returns the absolute timestamp (in μs) of the last `ARVRServer` commit of the AR/VR eyes to `VisualServer`. The value comes from an internal call to `OS.get_ticks_usec`. */
		static get_last_commit_usec() : number;

		/** Returns the duration (in μs) of the last frame. This is computed as the difference between `get_last_commit_usec` and `get_last_process_usec` when committing. */
		static get_last_frame_usec() : number;

		/** Getter of `world_scale` property */
		static get_world_scale() : number;

		/** Setter of `world_scale` property */
		static set_world_scale(p_value: number) : void;

		/** Getter of `primary_interface` property */
		static get_primary_interface() : ARVRInterface;

		/** Setter of `primary_interface` property */
		static set_primary_interface(p_value: ARVRInterface) : void;
	}
	namespace ARVRServer {

		/** Emitted when a tracker is removed. You should remove any `ARVRController` or `ARVRAnchor` points if applicable. This is not mandatory, the nodes simply become inactive and will be made active again when a new tracker becomes available (i.e. a new controller is switched on that takes the place of the previous one). */
		const tracker_removed: 'tracker_removed';

		/** Emitted when a new tracker has been added. If you don't use a fixed number of controllers or if you're using `ARVRAnchor`s for an AR solution, it is important to react to this signal to add the appropriate `ARVRController` or `ARVRAnchor` nodes related to this new tracker. */
		const tracker_added: 'tracker_added';

		/** Emitted when an interface is removed. */
		const interface_removed: 'interface_removed';

		/** Emitted when a new interface has been added. */
		const interface_added: 'interface_added';
		enum RotationMode {
			/** Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world. */
			RESET_FULL_ROTATION = 0,
			/** Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset. */
			RESET_BUT_KEEP_TILT = 1,
			/** Does not reset the orientation of the HMD, only the position of the player gets centered. */
			DONT_RESET_ROTATION = 2,
		}
		enum TrackerType {
			/** The tracker tracks the location of a controller. */
			TRACKER_CONTROLLER = 1,
			/** The tracker tracks the location of a base station. */
			TRACKER_BASESTATION = 2,
			/** The tracker tracks the location and size of an AR anchor. */
			TRACKER_ANCHOR = 4,
			/** Used internally to filter trackers of any known type. */
			TRACKER_ANY_KNOWN = 127,
			/** Used internally if we haven't set the tracker type yet. */
			TRACKER_UNKNOWN = 128,
			/** Used internally to select all trackers. */
			TRACKER_ANY = 255,
		}

		/** The tracker tracks the location of a controller. */
		const TRACKER_CONTROLLER: TrackerType.TRACKER_CONTROLLER;

		/** The tracker tracks the location of a base station. */
		const TRACKER_BASESTATION: TrackerType.TRACKER_BASESTATION;

		/** The tracker tracks the location and size of an AR anchor. */
		const TRACKER_ANCHOR: TrackerType.TRACKER_ANCHOR;

		/** Used internally to filter trackers of any known type. */
		const TRACKER_ANY_KNOWN: TrackerType.TRACKER_ANY_KNOWN;

		/** Used internally if we haven't set the tracker type yet. */
		const TRACKER_UNKNOWN: TrackerType.TRACKER_UNKNOWN;

		/** Used internally to select all trackers. */
		const TRACKER_ANY: TrackerType.TRACKER_ANY;

		/** Fully reset the orientation of the HMD. Regardless of what direction the user is looking to in the real world. The user will look dead ahead in the virtual world. */
		const RESET_FULL_ROTATION: RotationMode.RESET_FULL_ROTATION;

		/** Resets the orientation but keeps the tilt of the device. So if we're looking down, we keep looking down but heading will be reset. */
		const RESET_BUT_KEEP_TILT: RotationMode.RESET_BUT_KEEP_TILT;

		/** Does not reset the orientation of the HMD, only the position of the player gets centered. */
		const DONT_RESET_ROTATION: RotationMode.DONT_RESET_ROTATION;
	}

	/** An implementation of A* to find shortest paths among connected points in space.
	 A* (A star) is a computer algorithm that is widely used in pathfinding and graph traversal, the process of plotting short paths among vertices (points), passing through a given set of edges (segments). It enjoys widespread use due to its performance and accuracy. Godot's A* implementation uses points in three-dimensional space and Euclidean distances by default.

	 You must add points manually with `add_point` and create segments manually with `connect_points`. Then you can test if there is a path between two points with the `are_points_connected` function, get a path containing indices by `get_id_path`, or one containing actual coordinates with `get_point_path`.

	 It is also possible to use non-Euclidean distances. To do so, create a class that extends `AStar` and override methods `_compute_cost` and `_estimate_cost`. Both take two indices and return a length, as is shown in the following example.

	 ```gdscript
	 class MyAStar:
	     extends AStar
	 
	     func _compute_cost(u, v):
	         return abs(u - v)
	 
	     func _estimate_cost(u, v):
	         return min(0, abs(u - v) - 1)
	 ```

	 `_estimate_cost` should return a lower bound of the distance, i.e. `_estimate_cost(u, v) <= _compute_cost(u, v)`. This serves as a hint to the algorithm because the custom `_compute_cost` might be computation-heavy. If this is not the case, make `_estimate_cost` return the same value as `_compute_cost` to provide the algorithm with the most accurate information. */
	class AStar extends Reference {

		/** Called when computing the cost between two connected points.

		 Note that this function is hidden in the default `AStar` class. */
		_compute_cost(from_id: number, to_id: number) : number;

		/** Called when estimating the cost between a point and the path's ending point.

		 Note that this function is hidden in the default `AStar` class. */
		_estimate_cost(from_id: number, to_id: number) : number;

		/** Returns the next available point ID with no point associated to it. */
		get_available_point_id() : number;

		/** Adds a new point at the given position with the given identifier. The algorithm prefers points with lower `weight_scale` to form a path. The `id` must be 0 or larger, and the `weight_scale` must be 1 or larger.

		 ```gdscript
		 var astar = AStar.new()
		 astar.add_point(1, Vector3(1, 0, 0), 4) # Adds the point (1, 0, 0) with weight_scale 4 and id 1
		 ```

		 If there already exists a point for the given `id`, its position and weight scale are updated to the given values. */
		//@ts-ignore
		add_point(id: number, position: Vector3, weight_scale: number = 1.0) : void;

		/** Returns the position of the point associated with the given `id`. */
		get_point_position(id: number) : Vector3;

		/** Sets the `position` for the point with the given `id`. */
		set_point_position(id: number, position: Vector3) : void;

		/** Returns the weight scale of the point associated with the given `id`. */
		get_point_weight_scale(id: number) : number;

		/** Sets the `weight_scale` for the point with the given `id`. */
		set_point_weight_scale(id: number, weight_scale: number) : void;

		/** Removes the point associated with the given `id` from the points pool. */
		remove_point(id: number) : void;

		/** Returns whether a point associated with the given `id` exists. */
		has_point(id: number) : boolean;

		/** Returns an array with the IDs of the points that form the connection with the given point.

		 ```gdscript
		 var astar = AStar.new()
		 astar.add_point(1, Vector3(0, 0, 0))
		 astar.add_point(2, Vector3(0, 1, 0))
		 astar.add_point(3, Vector3(1, 1, 0))
		 astar.add_point(4, Vector3(2, 0, 0))
		 
		 astar.connect_points(1, 2, true)
		 astar.connect_points(1, 3, true)
		 
		 var neighbors = astar.get_point_connections(1) # Returns [2, 3]
		 ``` */
		get_point_connections(id: number) : PoolIntArray;

		/** Returns an array of all points. */
		get_points() : any[];

		/** Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle. */
		//@ts-ignore
		set_point_disabled(id: number, disabled: boolean = true) : void;

		/** Returns whether a point is disabled or not for pathfinding. By default, all points are enabled. */
		is_point_disabled(id: number) : boolean;

		/** Creates a segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is allowed, not the reverse direction.

		 ```gdscript
		 var astar = AStar.new()
		 astar.add_point(1, Vector3(1, 1, 0))
		 astar.add_point(2, Vector3(0, 5, 0))
		 astar.connect_points(1, 2, false)
		 ``` */
		//@ts-ignore
		connect_points(id: number, to_id: number, bidirectional: boolean = true) : void;

		/** Deletes the segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is prevented, and a unidirectional segment possibly remains. */
		//@ts-ignore
		disconnect_points(id: number, to_id: number, bidirectional: boolean = true) : void;

		/** Returns whether the two given points are directly connected by a segment. If `bidirectional` is `false`, returns whether movement from `id` to `to_id` is possible through this segment. */
		//@ts-ignore
		are_points_connected(id: number, to_id: number, bidirectional: boolean = true) : boolean;

		/** Returns the number of points currently in the points pool. */
		get_point_count() : number;

		/** Returns the capacity of the structure backing the points, useful in conjunction with `reserve_space`. */
		get_point_capacity() : number;

		/** Reserves space internally for `num_nodes` points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity. */
		reserve_space(num_nodes: number) : void;

		/** Clears all the points and segments. */
		clear() : void;

		/** Returns the ID of the closest point to `to_position`, optionally taking disabled points into account. Returns `-1` if there are no points in the points pool.

		 **Note:** If several points are the closest to `to_position`, the one with the smallest ID will be returned, ensuring a deterministic result. */
		//@ts-ignore
		get_closest_point(to_position: Vector3, include_disabled: boolean = false) : number;

		/** Returns the closest position to `to_position` that resides inside a segment between two connected points.

		 ```gdscript
		 var astar = AStar.new()
		 astar.add_point(1, Vector3(0, 0, 0))
		 astar.add_point(2, Vector3(0, 5, 0))
		 astar.connect_points(1, 2)
		 var res = astar.get_closest_position_in_segment(Vector3(3, 3, 0)) # Returns (0, 3, 0)
		 ```

		 The result is in the segment that goes from `y = 0` to `y = 5`. It's the closest position in the segment to the given point. */
		get_closest_position_in_segment(to_position: Vector3) : Vector3;

		/** Returns an array with the points that are in the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path. */
		get_point_path(from_id: number, to_id: number) : PoolVector3Array;

		/** Returns an array with the IDs of the points that form the path found by AStar between the given points. The array is ordered from the starting point to the ending point of the path.

		 ```gdscript
		 var astar = AStar.new()
		 astar.add_point(1, Vector3(0, 0, 0))
		 astar.add_point(2, Vector3(0, 1, 0), 1) # Default weight is 1
		 astar.add_point(3, Vector3(1, 1, 0))
		 astar.add_point(4, Vector3(2, 0, 0))
		 
		 astar.connect_points(1, 2, false)
		 astar.connect_points(2, 3, false)
		 astar.connect_points(4, 3, false)
		 astar.connect_points(1, 4, false)
		 
		 var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]
		 ```

		 If you change the 2nd point's weight to 3, then the result will be ``1, 4, 3`` instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2. */
		get_id_path(from_id: number, to_id: number) : PoolIntArray;
	}
	namespace AStar {
	}

	/** AStar class representation that uses 2D vectors as edges.
	 This is a wrapper for the `AStar` class which uses 2D vectors instead of 3D vectors. */
	class AStar2D extends Reference {

		/** Called when computing the cost between two connected points.

		 Note that this function is hidden in the default `AStar2D` class. */
		_compute_cost(from_id: number, to_id: number) : number;

		/** Called when estimating the cost between a point and the path's ending point.

		 Note that this function is hidden in the default `AStar2D` class. */
		_estimate_cost(from_id: number, to_id: number) : number;

		/** Returns the next available point ID with no point associated to it. */
		get_available_point_id() : number;

		/** Adds a new point at the given position with the given identifier. The algorithm prefers points with lower `weight_scale` to form a path. The `id` must be 0 or larger, and the `weight_scale` must be 1 or larger.

		 ```gdscript
		 var astar = AStar2D.new()
		 astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1
		 ```

		 If there already exists a point for the given `id`, its position and weight scale are updated to the given values. */
		//@ts-ignore
		add_point(id: number, position: Vector2, weight_scale: number = 1.0) : void;

		/** Returns the position of the point associated with the given `id`. */
		get_point_position(id: number) : Vector2;

		/** Sets the `position` for the point with the given `id`. */
		set_point_position(id: number, position: Vector2) : void;

		/** Returns the weight scale of the point associated with the given `id`. */
		get_point_weight_scale(id: number) : number;

		/** Sets the `weight_scale` for the point with the given `id`. */
		set_point_weight_scale(id: number, weight_scale: number) : void;

		/** Removes the point associated with the given `id` from the points pool. */
		remove_point(id: number) : void;

		/** Returns whether a point associated with the given `id` exists. */
		has_point(id: number) : boolean;

		/** Returns an array with the IDs of the points that form the connection with the given point.

		 ```gdscript
		 var astar = AStar2D.new()
		 astar.add_point(1, Vector2(0, 0))
		 astar.add_point(2, Vector2(0, 1))
		 astar.add_point(3, Vector2(1, 1))
		 astar.add_point(4, Vector2(2, 0))
		 
		 astar.connect_points(1, 2, true)
		 astar.connect_points(1, 3, true)
		 
		 var neighbors = astar.get_point_connections(1) # Returns [2, 3]
		 ``` */
		get_point_connections(id: number) : PoolIntArray;

		/** Returns an array of all points. */
		get_points() : any[];

		/** Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle. */
		//@ts-ignore
		set_point_disabled(id: number, disabled: boolean = true) : void;

		/** Returns whether a point is disabled or not for pathfinding. By default, all points are enabled. */
		is_point_disabled(id: number) : boolean;

		/** Creates a segment between the given points. If `bidirectional` is `false`, only movement from `id` to `to_id` is allowed, not the reverse direction.

		 ```gdscript
		 var astar = AStar2D.new()
		 astar.add_point(1, Vector2(1, 1))
		 astar.add_point(2, Vector2(0, 5))
		 astar.connect_points(1, 2, false)
		 ``` */
		//@ts-ignore
		connect_points(id: number, to_id: number, bidirectional: boolean = true) : void;

		/** Deletes the segment between the given points. */
		disconnect_points(id: number, to_id: number) : void;

		/** Returns whether there is a connection/segment between the given points. */
		are_points_connected(id: number, to_id: number) : boolean;

		/** Returns the number of points currently in the points pool. */
		get_point_count() : number;

		/** Returns the capacity of the structure backing the points, useful in conjunction with `reserve_space`. */
		get_point_capacity() : number;

		/** Reserves space internally for `num_nodes` points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity. */
		reserve_space(num_nodes: number) : void;

		/** Clears all the points and segments. */
		clear() : void;

		/** Returns the ID of the closest point to `to_position`, optionally taking disabled points into account. Returns `-1` if there are no points in the points pool.

		 **Note:** If several points are the closest to `to_position`, the one with the smallest ID will be returned, ensuring a deterministic result. */
		//@ts-ignore
		get_closest_point(to_position: Vector2, include_disabled: boolean = false) : number;

		/** Returns the closest position to `to_position` that resides inside a segment between two connected points.

		 ```gdscript
		 var astar = AStar2D.new()
		 astar.add_point(1, Vector2(0, 0))
		 astar.add_point(2, Vector2(0, 5))
		 astar.connect_points(1, 2)
		 var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)
		 ```

		 The result is in the segment that goes from `y = 0` to `y = 5`. It's the closest position in the segment to the given point. */
		get_closest_position_in_segment(to_position: Vector2) : Vector2;

		/** Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path. */
		get_point_path(from_id: number, to_id: number) : PoolVector2Array;

		/** Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.

		 ```gdscript
		 var astar = AStar2D.new()
		 astar.add_point(1, Vector2(0, 0))
		 astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1
		 astar.add_point(3, Vector2(1, 1))
		 astar.add_point(4, Vector2(2, 0))
		 
		 astar.connect_points(1, 2, false)
		 astar.connect_points(2, 3, false)
		 astar.connect_points(4, 3, false)
		 astar.connect_points(1, 4, false)
		 
		 var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]
		 ```

		 If you change the 2nd point's weight to 3, then the result will be ``1, 4, 3`` instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2. */
		get_id_path(from_id: number, to_id: number) : PoolIntArray;
	}
	namespace AStar2D {
	}

	/** Base dialog for user notification.
	 This dialog is useful for small notifications to the user about an event. It can only be accepted or closed, with the same result. */
	class AcceptDialog extends WindowDialog {

		/** The text displayed by the dialog. */
		dialog_text: string;

		/** If `true`, the dialog is hidden when the OK button is pressed. You can set it to `false` if you want to do e.g. input validation when receiving the `confirmed` signal, and handle hiding the dialog in your own logic.

		 **Note:** Some nodes derived from this class can have a different default value, and potentially their own built-in logic overriding this setting. For example `FileDialog` defaults to `false`, and has its own input validation code that is called when you press OK, which eventually hides the dialog if the input is valid. As such, this property can't be used in `FileDialog` to disable hiding the dialog when pressing OK. */
		dialog_hide_on_ok: boolean;

		/** Sets autowrapping for the text in the dialog. */
		dialog_autowrap: boolean;

		/**  */
		window_title: string;

		/** Returns the OK `Button` instance. */
		get_ok() : Button;

		/** Returns the label used for built-in text. */
		get_label() : Label;

		/** Adds a button with label `text` and a custom `action` to the dialog and returns the created button. `action` will be passed to the `custom_action` signal when pressed.

		 If `true`, `right` will place the button to the right of any sibling buttons. */
		//@ts-ignore
		add_button(text: string, right: boolean = false, action: string = "") : Button;

		/** Adds a button with label `name` and a cancel action to the dialog and returns the created button. */
		add_cancel(name: string) : Button;

		/** Registers a `LineEdit` in the dialog. When the enter key is pressed, the dialog will be accepted. */
		register_text_enter(line_edit: Node) : void;

		/** Getter of `dialog_text` property */
		get_text() : string;

		/** Setter of `dialog_text` property */
		set_text(p_value: string) : void;

		/** Getter of `dialog_hide_on_ok` property */
		get_hide_on_ok() : boolean;

		/** Setter of `dialog_hide_on_ok` property */
		set_hide_on_ok(p_value: boolean) : void;

		/** Getter of `dialog_autowrap` property */
		has_autowrap() : boolean;

		/** Setter of `dialog_autowrap` property */
		set_autowrap(p_value: boolean) : void;

		/** Getter of `window_title` property */
		get_title() : string;

		/** Setter of `window_title` property */
		set_title(p_value: string) : void;
	}
	namespace AcceptDialog {

		/** Emitted when the dialog is accepted, i.e. the OK button is pressed. */
		const confirmed: 'confirmed';

		/** Emitted when a custom button is pressed. See `add_button`. */
		const custom_action: 'custom_action';
	}

	/** Sprite node that can use multiple textures for animation.
	 Animations are created using a `SpriteFrames` resource, which can be configured in the editor via the SpriteFrames panel. */
	class AnimatedSprite extends Node2D {

		/** The `SpriteFrames` resource containing the animation(s). */
		frames: SpriteFrames;

		/** The current animation from the `frames` resource. If this value changes, the `frame` counter is reset. */
		animation: string;

		/** The displayed animation frame's index. */
		frame: number;

		/** The animation speed is multiplied by this value. */
		speed_scale: number;

		/** If `true`, the `animation` is currently playing. */
		playing: boolean;

		/** If `true`, texture will be centered. */
		centered: boolean;

		/** The texture's drawing offset. */
		offset: Vector2;

		/** If `true`, texture is flipped horizontally. */
		flip_h: boolean;

		/** If `true`, texture is flipped vertically. */
		flip_v: boolean;

		/** Plays the animation named `anim`. If no `anim` is provided, the current animation is played. If `backwards` is `true`, the animation will be played in reverse. */
		//@ts-ignore
		play(anim: string = "", backwards: boolean = false) : void;

		/** Stops the current animation (does not reset the frame counter). */
		stop() : void;

		/** Returns `true` if an animation is currently being played. */
		is_playing() : boolean;

		/** Getter of `frames` property */
		get_sprite_frames() : SpriteFrames;

		/** Setter of `frames` property */
		set_sprite_frames(p_value: SpriteFrames) : void;

		/** Getter of `animation` property */
		get_animation() : string;

		/** Setter of `animation` property */
		set_animation(p_value: string) : void;

		/** Getter of `frame` property */
		get_frame() : number;

		/** Setter of `frame` property */
		set_frame(p_value: number) : void;

		/** Getter of `speed_scale` property */
		get_speed_scale() : number;

		/** Setter of `speed_scale` property */
		set_speed_scale(p_value: number) : void;

		/** Getter of `playing` property */
		_is_playing() : boolean;

		/** Setter of `playing` property */
		_set_playing(p_value: boolean) : void;

		/** Getter of `centered` property */
		is_centered() : boolean;

		/** Setter of `centered` property */
		set_centered(p_value: boolean) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `flip_h` property */
		is_flipped_h() : boolean;

		/** Setter of `flip_h` property */
		set_flip_h(p_value: boolean) : void;

		/** Getter of `flip_v` property */
		is_flipped_v() : boolean;

		/** Setter of `flip_v` property */
		set_flip_v(p_value: boolean) : void;
	}
	namespace AnimatedSprite {

		/** Emitted when `frame` changed. */
		const frame_changed: 'frame_changed';

		/** Emitted when the animation is finished (when it plays the last frame). If the animation is looping, this signal is emitted every time the last frame is drawn. */
		const animation_finished: 'animation_finished';
	}

	/** 2D sprite node in 3D world, that can use multiple 2D textures for animation.
	 Animations are created using a `SpriteFrames` resource, which can be configured in the editor via the SpriteFrames panel. */
	class AnimatedSprite3D extends SpriteBase3D {

		/** The `SpriteFrames` resource containing the animation(s). */
		frames: SpriteFrames;

		/** The current animation from the `frames` resource. If this value changes, the `frame` counter is reset. */
		animation: string;

		/** The displayed animation frame's index. */
		frame: number;

		/** If `true`, the `animation` is currently playing. */
		playing: boolean;

		/** Plays the animation named `anim`. If no `anim` is provided, the current animation is played. */
		//@ts-ignore
		play(anim: string = "") : void;

		/** Stops the current animation (does not reset the frame counter). */
		stop() : void;

		/** Returns `true` if an animation is currently being played. */
		is_playing() : boolean;

		/** Getter of `frames` property */
		get_sprite_frames() : SpriteFrames;

		/** Setter of `frames` property */
		set_sprite_frames(p_value: SpriteFrames) : void;

		/** Getter of `animation` property */
		get_animation() : string;

		/** Setter of `animation` property */
		set_animation(p_value: string) : void;

		/** Getter of `frame` property */
		get_frame() : number;

		/** Setter of `frame` property */
		set_frame(p_value: number) : void;

		/** Getter of `playing` property */
		_is_playing() : boolean;

		/** Setter of `playing` property */
		_set_playing(p_value: boolean) : void;
	}
	namespace AnimatedSprite3D {

		/** Emitted when `frame` changed. */
		const frame_changed: 'frame_changed';
	}

	/** Proxy texture for simple frame-based animations.
	 `AnimatedTexture` is a resource format for frame-based animations, where multiple textures can be chained automatically with a predefined delay for each frame. Unlike `AnimationPlayer` or `AnimatedSprite`, it isn't a `Node`, but has the advantage of being usable anywhere a `Texture` resource can be used, e.g. in a `TileSet`.

	 The playback of the animation is controlled by the `fps` property as well as each frame's optional delay (see `set_frame_delay`). The animation loops, i.e. it will restart at frame 0 automatically after playing the last frame.

	 `AnimatedTexture` currently requires all frame textures to have the same size, otherwise the bigger ones will be cropped to match the smallest one. Also, it doesn't support `AtlasTexture`. Each frame needs to be separate image. */
	class AnimatedTexture extends Texture {

		/** Number of frames to use in the animation. While you can create the frames independently with `set_frame_texture`, you need to set this value for the animation to take new frames into account. The maximum number of frames is `MAX_FRAMES`. */
		frames: number;

		/** Sets the currently visible frame of the texture. */
		current_frame: number;

		/** If `true`, the animation will pause where it currently is (i.e. at `current_frame`). The animation will continue from where it was paused when changing this property to `false`. */
		pause: boolean;

		/** If `true`, the animation will only play once and will not loop back to the first frame after reaching the end. Note that reaching the end will not set `pause` to `true`. */
		oneshot: boolean;

		/** Animation speed in frames per second. This value defines the default time interval between two frames of the animation, and thus the overall duration of the animation loop based on the `frames` property. A value of 0 means no predefined number of frames per second, the animation will play according to each frame's frame delay (see `set_frame_delay`).

		 For example, an animation with 8 frames, no frame delay and a `fps` value of 2 will run for 4 seconds, with each frame lasting 0.5 seconds. */
		fps: number;

		/**  */
		flags: number;

		/** Assigns a `Texture` to the given frame. Frame IDs start at 0, so the first frame has ID 0, and the last frame of the animation has ID `frames` - 1.

		 You can define any number of textures up to `MAX_FRAMES`, but keep in mind that only frames from 0 to `frames` - 1 will be part of the animation. */
		set_frame_texture(frame: number, texture: Texture) : void;

		/** Returns the given frame's `Texture`. */
		get_frame_texture(frame: number) : Texture;

		/** Sets an additional delay (in seconds) between this frame and the next one, that will be added to the time interval defined by `fps`. By default, frames have no delay defined. If a delay value is defined, the final time interval between this frame and the next will be `1.0 / fps + delay`.

		 For example, for an animation with 3 frames, 2 FPS and a frame delay on the second frame of 1.2, the resulting playback will be:

		 ```gdscript
		 Frame 0: 0.5 s (1 / fps)
		 Frame 1: 1.7 s (1 / fps + 1.2)
		 Frame 2: 0.5 s (1 / fps)
		 Total duration: 2.7 s
		 ``` */
		set_frame_delay(frame: number, delay: number) : void;

		/** Returns the given frame's delay value. */
		get_frame_delay(frame: number) : number;

		/** Getter of `frames` property */
		get_frames() : number;

		/** Setter of `frames` property */
		set_frames(p_value: number) : void;

		/** Getter of `current_frame` property */
		get_current_frame() : number;

		/** Setter of `current_frame` property */
		set_current_frame(p_value: number) : void;

		/** Getter of `pause` property */
		get_pause() : boolean;

		/** Setter of `pause` property */
		set_pause(p_value: boolean) : void;

		/** Getter of `oneshot` property */
		get_oneshot() : boolean;

		/** Setter of `oneshot` property */
		set_oneshot(p_value: boolean) : void;

		/** Getter of `fps` property */
		get_fps() : number;

		/** Setter of `fps` property */
		set_fps(p_value: number) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace AnimatedTexture {

		/** The maximum number of frames supported by `AnimatedTexture`. If you need more frames in your animation, use `AnimationPlayer` or `AnimatedSprite`. */
		const MAX_FRAMES: 256;
	}

	/** Contains data used to animate everything in the engine.
	 An Animation resource contains data used to animate everything in the engine. Animations are divided into tracks, and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.

	 ```gdscript
	 # This creates an animation that makes the node "Enemy" move to the right by
	 # 100 pixels in 1 second.
	 var animation = Animation.new()
	 var track_index = animation.add_track(Animation.TYPE_VALUE)
	 animation.track_set_path(track_index, "Enemy:position.x")
	 animation.track_insert_key(track_index, 0.0, 0)
	 animation.track_insert_key(track_index, 0.5, 100)
	 ```

	 Animations are just data containers, and must be added to nodes such as an `AnimationPlayer` or `AnimationTreePlayer` to be played back. Animation tracks have different types, each with its own set of dedicated methods. Check `TrackType` to see available types. */
	class Animation extends Resource {

		/** The total length of the animation (in seconds).

		 **Note:** Length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping. */
		length: number;

		/** A flag indicating that the animation must loop. This is uses for correct interpolation of animation cycles, and for hinting the player that it must restart the animation. */
		loop: boolean;

		/** The animation step value. */
		step: number;

		/** Adds a track to the Animation. */
		//@ts-ignore
		add_track(type: Animation.TrackType, at_position: number = -1) : number;

		/** Removes a track by specifying the track index. */
		remove_track(track_idx: number) : void;

		/** Returns the amount of tracks in the animation. */
		get_track_count() : number;

		/** Gets the type of a track. */
		track_get_type(track_idx: number) : number;

		/** Gets the path of a track. For more information on the path format, see `track_set_path`. */
		track_get_path(track_idx: number) : string;

		/** Sets the path of a track. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by `":"`.

		 For example, `"character/skeleton:ankle"` or `"character/mesh:transform/local"`. */
		track_set_path(track_idx: number, path: string) : void;

		/** Returns the index of the specified track. If the track is not found, return -1. */
		find_track(path: string) : number;

		/** Moves a track up. */
		track_move_up(track_idx: number) : void;

		/** Moves a track down. */
		track_move_down(track_idx: number) : void;

		/** Changes the index position of track `idx` to the one defined in `to_idx`. */
		track_move_to(track_idx: number, to_idx: number) : void;

		/** Swaps the track `idx`'s index position with the track `with_idx`. */
		track_swap(track_idx: number, with_idx: number) : void;

		/** Sets the given track as imported or not. */
		track_set_imported(track_idx: number, imported: boolean) : void;

		/** Returns `true` if the given track is imported. Else, return `false`. */
		track_is_imported(track_idx: number) : boolean;

		/** Enables/disables the given track. Tracks are enabled by default. */
		track_set_enabled(track_idx: number, enabled: boolean) : void;

		/** Returns `true` if the track at index `idx` is enabled. */
		track_is_enabled(track_idx: number) : boolean;

		/** Insert a transform key for a transform track. */
		transform_track_insert_key(track_idx: number, time: number, location: Vector3, rotation: Quat, scale: Vector3) : number;

		/** Insert a generic key in a given track. */
		//@ts-ignore
		track_insert_key(track_idx: number, time: number, key: any, transition: number = 1) : void;

		/** Removes a key by index in a given track. */
		track_remove_key(track_idx: number, key_idx: number) : void;

		/** Removes a key by position (seconds) in a given track. */
		track_remove_key_at_position(track_idx: number, position: number) : void;

		/** Sets the value of an existing key. */
		track_set_key_value(track_idx: number, key: number, value: any) : void;

		/** Sets the transition curve (easing) for a specific key (see the built-in math function `@GDScript.ease`). */
		track_set_key_transition(track_idx: number, key_idx: number, transition: number) : void;

		/** Sets the time of an existing key. */
		track_set_key_time(track_idx: number, key_idx: number, time: number) : void;

		/** Returns the transition curve (easing) for a specific key (see the built-in math function `@GDScript.ease`). */
		track_get_key_transition(track_idx: number, key_idx: number) : number;

		/** Returns the amount of keys in a given track. */
		track_get_key_count(track_idx: number) : number;

		/** Returns the value of a given key in a given track. */
		track_get_key_value(track_idx: number, key_idx: number) : any;

		/** Returns the time at which the key is located. */
		track_get_key_time(track_idx: number, key_idx: number) : number;

		/** Finds the key index by time in a given track. Optionally, only find it if the exact time is given. */
		//@ts-ignore
		track_find_key(track_idx: number, time: number, exact: boolean = false) : number;

		/** Sets the interpolation type of a given track. */
		track_set_interpolation_type(track_idx: number, interpolation: Animation.InterpolationType) : void;

		/** Returns the interpolation type of a given track. */
		track_get_interpolation_type(track_idx: number) : number;

		/** If `true`, the track at `idx` wraps the interpolation loop. */
		track_set_interpolation_loop_wrap(track_idx: number, interpolation: boolean) : void;

		/** Returns `true` if the track at `idx` wraps the interpolation loop. New tracks wrap the interpolation loop by default. */
		track_get_interpolation_loop_wrap(track_idx: number) : boolean;

		/** Returns the interpolated value of a transform track at a given time (in seconds). An array consisting of 3 elements: position (`Vector3`), rotation (`Quat`) and scale (`Vector3`). */
		transform_track_interpolate(track_idx: number, time_sec: number) : any[];

		/** Sets the update mode (see `UpdateMode`) of a value track. */
		value_track_set_update_mode(track_idx: number, mode: Animation.UpdateMode) : void;

		/** Returns the update mode of a value track. */
		value_track_get_update_mode(track_idx: number) : number;

		/** Returns all the key indices of a value track, given a position and delta time. */
		value_track_get_key_indices(track_idx: number, time_sec: number, delta: number) : PoolIntArray;

		/** Returns all the key indices of a method track, given a position and delta time. */
		method_track_get_key_indices(track_idx: number, time_sec: number, delta: number) : PoolIntArray;

		/** Returns the method name of a method track. */
		method_track_get_name(track_idx: number, key_idx: number) : string;

		/** Returns the arguments values to be called on a method track for a given key in a given track. */
		method_track_get_params(track_idx: number, key_idx: number) : any[];

		/** Inserts a Bezier Track key at the given `time` in seconds. The `track_idx` must be the index of a Bezier Track.

		 `in_handle` is the left-side weight of the added Bezier curve point, `out_handle` is the right-side one, while `value` is the actual value at this point. */
		//@ts-ignore
		bezier_track_insert_key(track_idx: number, time: number, value: number, in_handle: Vector2 = Vector2( 0, 0 ), out_handle: Vector2 = Vector2( 0, 0 )) : number;

		/** Sets the value of the key identified by `key_idx` to the given value. The `track_idx` must be the index of a Bezier Track. */
		bezier_track_set_key_value(track_idx: number, key_idx: number, value: number) : void;

		/** Sets the in handle of the key identified by `key_idx` to value `in_handle`. The `track_idx` must be the index of a Bezier Track. */
		bezier_track_set_key_in_handle(track_idx: number, key_idx: number, in_handle: Vector2) : void;

		/** Sets the out handle of the key identified by `key_idx` to value `out_handle`. The `track_idx` must be the index of a Bezier Track. */
		bezier_track_set_key_out_handle(track_idx: number, key_idx: number, out_handle: Vector2) : void;

		/** Returns the value of the key identified by `key_idx`. The `track_idx` must be the index of a Bezier Track. */
		bezier_track_get_key_value(track_idx: number, key_idx: number) : number;

		/** Returns the in handle of the key identified by `key_idx`. The `track_idx` must be the index of a Bezier Track. */
		bezier_track_get_key_in_handle(track_idx: number, key_idx: number) : Vector2;

		/** Returns the out handle of the key identified by `key_idx`. The `track_idx` must be the index of a Bezier Track. */
		bezier_track_get_key_out_handle(track_idx: number, key_idx: number) : Vector2;

		/** Returns the interpolated value at the given `time` (in seconds). The `track_idx` must be the index of a Bezier Track. */
		bezier_track_interpolate(track_idx: number, time: number) : number;

		/** Inserts an Audio Track key at the given `time` in seconds. The `track_idx` must be the index of an Audio Track.

		 `stream` is the `AudioStream` resource to play. `start_offset` is the number of seconds cut off at the beginning of the audio stream, while `end_offset` is at the ending. */
		//@ts-ignore
		audio_track_insert_key(track_idx: number, time: number, stream: Resource, start_offset: number = 0, end_offset: number = 0) : number;

		/** Sets the stream of the key identified by `key_idx` to value `offset`. The `track_idx` must be the index of an Audio Track. */
		audio_track_set_key_stream(track_idx: number, key_idx: number, stream: Resource) : void;

		/** Sets the start offset of the key identified by `key_idx` to value `offset`. The `track_idx` must be the index of an Audio Track. */
		audio_track_set_key_start_offset(track_idx: number, key_idx: number, offset: number) : void;

		/** Sets the end offset of the key identified by `key_idx` to value `offset`. The `track_idx` must be the index of an Audio Track. */
		audio_track_set_key_end_offset(track_idx: number, key_idx: number, offset: number) : void;

		/** Returns the audio stream of the key identified by `key_idx`. The `track_idx` must be the index of an Audio Track. */
		audio_track_get_key_stream(track_idx: number, key_idx: number) : Resource;

		/** Returns the start offset of the key identified by `key_idx`. The `track_idx` must be the index of an Audio Track.

		 Start offset is the number of seconds cut off at the beginning of the audio stream. */
		audio_track_get_key_start_offset(track_idx: number, key_idx: number) : number;

		/** Returns the end offset of the key identified by `key_idx`. The `track_idx` must be the index of an Audio Track.

		 End offset is the number of seconds cut off at the ending of the audio stream. */
		audio_track_get_key_end_offset(track_idx: number, key_idx: number) : number;

		/** Inserts a key with value `animation` at the given `time` (in seconds). The `track_idx` must be the index of an Animation Track. */
		animation_track_insert_key(track_idx: number, time: number, animation: string) : number;

		/** Sets the key identified by `key_idx` to value `animation`. The `track_idx` must be the index of an Animation Track. */
		animation_track_set_key_animation(track_idx: number, key_idx: number, animation: string) : void;

		/** Returns the animation name at the key identified by `key_idx`. The `track_idx` must be the index of an Animation Track. */
		animation_track_get_key_animation(track_idx: number, key_idx: number) : string;

		/** Clear the animation (clear all tracks and reset all). */
		clear() : void;

		/** Adds a new track that is a copy of the given track from `to_animation`. */
		copy_track(track_idx: number, to_animation: Animation) : void;

		/** Getter of `length` property */
		get_length() : number;

		/** Setter of `length` property */
		set_length(p_value: number) : void;

		/** Getter of `loop` property */
		has_loop() : boolean;

		/** Setter of `loop` property */
		set_loop(p_value: boolean) : void;

		/** Getter of `step` property */
		get_step() : number;

		/** Setter of `step` property */
		set_step(p_value: number) : void;
	}
	namespace Animation {

		/** Emitted when there's a change in the list of tracks, e.g. tracks are added, moved or have changed paths. */
		const tracks_changed: 'tracks_changed';
		enum InterpolationType {
			/** No interpolation (nearest value). */
			INTERPOLATION_NEAREST = 0,
			/** Linear interpolation. */
			INTERPOLATION_LINEAR = 1,
			/** Cubic interpolation. */
			INTERPOLATION_CUBIC = 2,
		}
		enum TrackType {
			/** Value tracks set values in node properties, but only those which can be Interpolated. */
			TYPE_VALUE = 0,
			/** Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are interpolated. */
			TYPE_TRANSFORM = 1,
			/** Method tracks call functions with given arguments per key. */
			TYPE_METHOD = 2,
			/** Bezier tracks are used to interpolate a value using custom curves. They can also be used to animate sub-properties of vectors and colors (e.g. alpha value of a `Color`). */
			TYPE_BEZIER = 3,
			/** Audio tracks are used to play an audio stream with either type of `AudioStreamPlayer`. The stream can be trimmed and previewed in the animation. */
			TYPE_AUDIO = 4,
			/** Animation tracks play animations in other `AnimationPlayer` nodes. */
			TYPE_ANIMATION = 5,
		}
		enum UpdateMode {
			/** Update between keyframes. */
			UPDATE_CONTINUOUS = 0,
			/** Update at the keyframes and hold the value. */
			UPDATE_DISCRETE = 1,
			/** Update at the keyframes. */
			UPDATE_TRIGGER = 2,
			/** Same as linear interpolation, but also interpolates from the current value (i.e. dynamically at runtime) if the first key isn't at 0 seconds. */
			UPDATE_CAPTURE = 3,
		}

		/** Value tracks set values in node properties, but only those which can be Interpolated. */
		const TYPE_VALUE: TrackType.TYPE_VALUE;

		/** Transform tracks are used to change node local transforms or skeleton pose bones. Transitions are interpolated. */
		const TYPE_TRANSFORM: TrackType.TYPE_TRANSFORM;

		/** Method tracks call functions with given arguments per key. */
		const TYPE_METHOD: TrackType.TYPE_METHOD;

		/** Bezier tracks are used to interpolate a value using custom curves. They can also be used to animate sub-properties of vectors and colors (e.g. alpha value of a `Color`). */
		const TYPE_BEZIER: TrackType.TYPE_BEZIER;

		/** Audio tracks are used to play an audio stream with either type of `AudioStreamPlayer`. The stream can be trimmed and previewed in the animation. */
		const TYPE_AUDIO: TrackType.TYPE_AUDIO;

		/** Animation tracks play animations in other `AnimationPlayer` nodes. */
		const TYPE_ANIMATION: TrackType.TYPE_ANIMATION;

		/** No interpolation (nearest value). */
		const INTERPOLATION_NEAREST: InterpolationType.INTERPOLATION_NEAREST;

		/** Linear interpolation. */
		const INTERPOLATION_LINEAR: InterpolationType.INTERPOLATION_LINEAR;

		/** Cubic interpolation. */
		const INTERPOLATION_CUBIC: InterpolationType.INTERPOLATION_CUBIC;

		/** Update between keyframes. */
		const UPDATE_CONTINUOUS: UpdateMode.UPDATE_CONTINUOUS;

		/** Update at the keyframes and hold the value. */
		const UPDATE_DISCRETE: UpdateMode.UPDATE_DISCRETE;

		/** Update at the keyframes. */
		const UPDATE_TRIGGER: UpdateMode.UPDATE_TRIGGER;

		/** Same as linear interpolation, but also interpolates from the current value (i.e. dynamically at runtime) if the first key isn't at 0 seconds. */
		const UPDATE_CAPTURE: UpdateMode.UPDATE_CAPTURE;
	}

	/** Base resource for `AnimationTree` nodes.
	 Base resource for `AnimationTree` nodes. In general, it's not used directly, but you can create custom ones with custom blending formulas.

	 Inherit this when creating nodes mainly for use in `AnimationNodeBlendTree`, otherwise `AnimationRootNode` should be used instead. */
	class AnimationNode extends Resource {

		/** If `true`, filtering is enabled. */
		filter_enabled: boolean;

		/** Gets the text caption for this node (used by some editors). */
		get_caption() : string;

		/** Gets a child node by index (used by editors inheriting from `AnimationRootNode`). */
		get_child_by_name(name: string) : Object;

		/** Gets all children nodes in order as a `name: node` dictionary. Only useful when inheriting `AnimationRootNode`. */
		get_child_nodes() : object;

		/** Gets the default value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees. */
		get_parameter_default_value(name: string) : any;

		/** Gets the property information for parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees. Format is similar to `Object.get_property_list`. */
		get_parameter_list() : any[];

		/** Returns `true` whether you want the blend tree editor to display filter editing on this node. */
		has_filter() : string;

		/** User-defined callback called when a custom node is processed. The `time` parameter is a relative delta, unless `seek` is `true`, in which case it is absolute.

		 Here, call the `blend_input`, `blend_node` or `blend_animation` functions. You can also use `get_parameter` and `set_parameter` to modify local memory.

		 This function should return the time left for the current animation to finish (if unsure, pass the value from the main blend being called). */
		process(time: number, seek: boolean) : void;

		/** Amount of inputs in this node, only useful for nodes that go into `AnimationNodeBlendTree`. */
		get_input_count() : number;

		/** Gets the name of an input by index. */
		get_input_name(input: number) : string;

		/** Adds an input to the node. This is only useful for nodes created for use in an `AnimationNodeBlendTree`. */
		add_input(name: string) : void;

		/** Removes an input, call this only when inactive. */
		remove_input(index: number) : void;

		/** Adds or removes a path for the filter. */
		set_filter_path(path: string, enable: boolean) : void;

		/** Returns `true` whether a given path is filtered. */
		is_path_filtered(path: string) : boolean;

		/** Blend an animation by `blend` amount (name must be valid in the linked `AnimationPlayer`). A `time` and `delta` may be passed, as well as whether `seek` happened. */
		blend_animation(animation: string, time: number, delta: number, seeked: boolean, blend: number) : void;

		/** Blend another animation node (in case this node contains children animation nodes). This function is only useful if you inherit from `AnimationRootNode` instead, else editors will not display your node for addition. */
		//@ts-ignore
		blend_node(name: string, node: AnimationNode, time: number, seek: boolean, blend: number, filter: AnimationNode.FilterAction = 0, optimize: boolean = true) : number;

		/** Blend an input. This is only useful for nodes created for an `AnimationNodeBlendTree`. The `time` parameter is a relative delta, unless `seek` is `true`, in which case it is absolute. A filter mode may be optionally passed (see `FilterAction` for options). */
		//@ts-ignore
		blend_input(input_index: number, time: number, seek: boolean, blend: number, filter: AnimationNode.FilterAction = 0, optimize: boolean = true) : number;

		/** Sets a custom parameter. These are used as local storage, because resources can be reused across the tree or scenes. */
		set_parameter(name: string, value: any) : void;

		/** Gets the value of a parameter. Parameters are custom local memory used for your nodes, given a resource can be reused in multiple trees. */
		get_parameter(name: string) : any;

		/** Getter of `filter_enabled` property */
		is_filter_enabled() : boolean;

		/** Setter of `filter_enabled` property */
		set_filter_enabled(p_value: boolean) : void;
	}
	namespace AnimationNode {

		/** Called when the node was removed from the graph. */
		const removed_from_graph: 'removed_from_graph';

		/** Emitted by nodes that inherit from this class and that have an internal tree when one of their nodes changes. The nodes that emit this signal are `AnimationNodeBlendSpace1D`, `AnimationNodeBlendSpace2D`, `AnimationNodeStateMachine`, and `AnimationNodeBlendTree`. */
		const tree_changed: 'tree_changed';
		enum FilterAction {
			/** Do not use filtering. */
			FILTER_IGNORE = 0,
			/** Paths matching the filter will be allowed to pass. */
			FILTER_PASS = 1,
			/** Paths matching the filter will be discarded. */
			FILTER_STOP = 2,
			/** Paths matching the filter will be blended (by the blend value). */
			FILTER_BLEND = 3,
		}

		/** Do not use filtering. */
		const FILTER_IGNORE: FilterAction.FILTER_IGNORE;

		/** Paths matching the filter will be allowed to pass. */
		const FILTER_PASS: FilterAction.FILTER_PASS;

		/** Paths matching the filter will be discarded. */
		const FILTER_STOP: FilterAction.FILTER_STOP;

		/** Paths matching the filter will be blended (by the blend value). */
		const FILTER_BLEND: FilterAction.FILTER_BLEND;
	}

	/** Blends two animations additively inside of an `AnimationNodeBlendTree`.
	 A resource to add to an `AnimationNodeBlendTree`. Blends two animations additively based on an amount value in the ``0.0, 1.0`` range. */
	class AnimationNodeAdd2 extends AnimationNode {

		/** If `true`, sets the `optimization` to `false` when calling `AnimationNode.blend_input`, forcing the blended animations to update every frame. */
		sync: boolean;

		/** Getter of `sync` property */
		is_using_sync() : boolean;

		/** Setter of `sync` property */
		set_use_sync(p_value: boolean) : void;
	}
	namespace AnimationNodeAdd2 {
	}

	/** Blends two of three animations additively inside of an `AnimationNodeBlendTree`.
	 A resource to add to an `AnimationNodeBlendTree`. Blends two animations together additively out of three based on a value in the ``-1.0, 1.0`` range.

	 This node has three inputs:

	 - The base animation to add to

	 - A -add animation to blend with when the blend amount is in the ``-1.0, 0.0`` range.

	 - A +add animation to blend with when the blend amount is in the ``0.0, 1.0`` range */
	class AnimationNodeAdd3 extends AnimationNode {

		/** If `true`, sets the `optimization` to `false` when calling `AnimationNode.blend_input`, forcing the blended animations to update every frame. */
		sync: boolean;

		/** Getter of `sync` property */
		is_using_sync() : boolean;

		/** Setter of `sync` property */
		set_use_sync(p_value: boolean) : void;
	}
	namespace AnimationNodeAdd3 {
	}

	/** Input animation to use in an `AnimationNodeBlendTree`.
	 A resource to add to an `AnimationNodeBlendTree`. Only features one output set using the `animation` property. Use it as an input for `AnimationNode` that blend animations together. */
	class AnimationNodeAnimation extends AnimationRootNode {

		/** Animation to use as an output. It is one of the animations provided by `AnimationTree.anim_player`. */
		animation: string;

		/** Getter of `animation` property */
		get_animation() : string;

		/** Setter of `animation` property */
		set_animation(p_value: string) : void;
	}
	namespace AnimationNodeAnimation {
	}

	/** Blends two animations linearly inside of an `AnimationNodeBlendTree`.
	 A resource to add to an `AnimationNodeBlendTree`. Blends two animations linearly based on an amount value in the ``0.0, 1.0`` range. */
	class AnimationNodeBlend2 extends AnimationNode {

		/** If `true`, sets the `optimization` to `false` when calling `AnimationNode.blend_input`, forcing the blended animations to update every frame. */
		sync: boolean;

		/** Getter of `sync` property */
		is_using_sync() : boolean;

		/** Setter of `sync` property */
		set_use_sync(p_value: boolean) : void;
	}
	namespace AnimationNodeBlend2 {
	}

	/** Blends two of three animations linearly inside of an `AnimationNodeBlendTree`.
	 A resource to add to an `AnimationNodeBlendTree`. Blends two animations together linearly out of three based on a value in the ``-1.0, 1.0`` range.

	 This node has three inputs:

	 - The base animation

	 - A -blend animation to blend with when the blend amount is in the ``-1.0, 0.0`` range.

	 - A +blend animation to blend with when the blend amount is in the ``0.0, 1.0`` range */
	class AnimationNodeBlend3 extends AnimationNode {

		/** If `true`, sets the `optimization` to `false` when calling `AnimationNode.blend_input`, forcing the blended animations to update every frame. */
		sync: boolean;

		/** Getter of `sync` property */
		is_using_sync() : boolean;

		/** Setter of `sync` property */
		set_use_sync(p_value: boolean) : void;
	}
	namespace AnimationNodeBlend3 {
	}

	/** Blends linearly between two of any number of `AnimationNode` of any type placed on a virtual axis.
	 A resource to add to an `AnimationNodeBlendTree`.

	 This is a virtual axis on which you can add any type of `AnimationNode` using `add_blend_point`.

	 Outputs the linear blend of the two `AnimationNode`s closest to the node's current value.

	 You can set the extents of the axis using the `min_space` and `max_space`. */
	class AnimationNodeBlendSpace1D extends AnimationRootNode {

		/** The blend space's axis's lower limit for the points' position. See `add_blend_point`. */
		min_space: number;

		/** The blend space's axis's upper limit for the points' position. See `add_blend_point`. */
		max_space: number;

		/** Position increment to snap to when moving a point on the axis. */
		snap: number;

		/** Label of the virtual axis of the blend space. */
		value_label: string;

		/** Adds a new point that represents a `node` on the virtual axis at a given position set by `pos`. You can insert it at a specific index using the `at_index` argument. If you use the default value for `at_index`, the point is inserted at the end of the blend points array. */
		//@ts-ignore
		add_blend_point(node: AnimationRootNode, pos: number, at_index: number = -1) : void;

		/** Updates the position of the point at index `point` on the blend axis. */
		set_blend_point_position(point: number, pos: number) : void;

		/** Returns the position of the point at index `point`. */
		get_blend_point_position(point: number) : number;

		/** Changes the `AnimationNode` referenced by the point at index `point`. */
		set_blend_point_node(point: number, node: AnimationRootNode) : void;

		/** Returns the `AnimationNode` referenced by the point at index `point`. */
		get_blend_point_node(point: number) : AnimationRootNode;

		/** Removes the point at index `point` from the blend axis. */
		remove_blend_point(point: number) : void;

		/** Returns the number of points on the blend axis. */
		get_blend_point_count() : number;

		/** Getter of `min_space` property */
		get_min_space() : number;

		/** Setter of `min_space` property */
		set_min_space(p_value: number) : void;

		/** Getter of `max_space` property */
		get_max_space() : number;

		/** Setter of `max_space` property */
		set_max_space(p_value: number) : void;

		/** Getter of `snap` property */
		get_snap() : number;

		/** Setter of `snap` property */
		set_snap(p_value: number) : void;

		/** Getter of `value_label` property */
		get_value_label() : string;

		/** Setter of `value_label` property */
		set_value_label(p_value: string) : void;
	}
	namespace AnimationNodeBlendSpace1D {
	}

	/** Blends linearly between three `AnimationNode` of any type placed in a 2D space.
	 A resource to add to an `AnimationNodeBlendTree`.

	 This node allows you to blend linearly between three animations using a `Vector2` weight.

	 You can add vertices to the blend space with `add_blend_point` and automatically triangulate it by setting `auto_triangles` to `true`. Otherwise, use `add_triangle` and `remove_triangle` to create up the blend space by hand. */
	class AnimationNodeBlendSpace2D extends AnimationRootNode {

		/** If `true`, the blend space is triangulated automatically. The mesh updates every time you add or remove points with `add_blend_point` and `remove_blend_point`. */
		auto_triangles: boolean;

		/** The blend space's X and Y axes' lower limit for the points' position. See `add_blend_point`. */
		min_space: Vector2;

		/** The blend space's X and Y axes' upper limit for the points' position. See `add_blend_point`. */
		max_space: Vector2;

		/** Position increment to snap to when moving a point. */
		snap: Vector2;

		/** Name of the blend space's X axis. */
		x_label: string;

		/** Name of the blend space's Y axis. */
		y_label: string;

		/** Controls the interpolation between animations. See `BlendMode` constants. */
		blend_mode: number;

		/** Adds a new point that represents a `node` at the position set by `pos`. You can insert it at a specific index using the `at_index` argument. If you use the default value for `at_index`, the point is inserted at the end of the blend points array. */
		//@ts-ignore
		add_blend_point(node: AnimationRootNode, pos: Vector2, at_index: number = -1) : void;

		/** Updates the position of the point at index `point` on the blend axis. */
		set_blend_point_position(point: number, pos: Vector2) : void;

		/** Returns the position of the point at index `point`. */
		get_blend_point_position(point: number) : Vector2;

		/** Changes the `AnimationNode` referenced by the point at index `point`. */
		set_blend_point_node(point: number, node: AnimationRootNode) : void;

		/** Returns the `AnimationRootNode` referenced by the point at index `point`. */
		get_blend_point_node(point: number) : AnimationRootNode;

		/** Removes the point at index `point` from the blend space. */
		remove_blend_point(point: number) : void;

		/** Returns the number of points in the blend space. */
		get_blend_point_count() : number;

		/** Creates a new triangle using three points `x`, `y`, and `z`. Triangles can overlap. You can insert the triangle at a specific index using the `at_index` argument. If you use the default value for `at_index`, the point is inserted at the end of the blend points array. */
		//@ts-ignore
		add_triangle(x: number, y: number, z: number, at_index: number = -1) : void;

		/** Returns the position of the point at index `point` in the triangle of index `triangle`. */
		get_triangle_point(triangle: number, point: number) : number;

		/** Removes the triangle at index `triangle` from the blend space. */
		remove_triangle(triangle: number) : void;

		/** Returns the number of triangles in the blend space. */
		get_triangle_count() : number;

		/** Getter of `auto_triangles` property */
		get_auto_triangles() : boolean;

		/** Setter of `auto_triangles` property */
		set_auto_triangles(p_value: boolean) : void;

		/** Getter of `min_space` property */
		get_min_space() : Vector2;

		/** Setter of `min_space` property */
		set_min_space(p_value: Vector2) : void;

		/** Getter of `max_space` property */
		get_max_space() : Vector2;

		/** Setter of `max_space` property */
		set_max_space(p_value: Vector2) : void;

		/** Getter of `snap` property */
		get_snap() : Vector2;

		/** Setter of `snap` property */
		set_snap(p_value: Vector2) : void;

		/** Getter of `x_label` property */
		get_x_label() : string;

		/** Setter of `x_label` property */
		set_x_label(p_value: string) : void;

		/** Getter of `y_label` property */
		get_y_label() : string;

		/** Setter of `y_label` property */
		set_y_label(p_value: string) : void;

		/** Getter of `blend_mode` property */
		get_blend_mode() : number;

		/** Setter of `blend_mode` property */
		set_blend_mode(p_value: number) : void;
	}
	namespace AnimationNodeBlendSpace2D {

		/** Emitted every time the blend space's triangles are created, removed, or when one of their vertices changes position. */
		const triangles_updated: 'triangles_updated';
		enum BlendMode {
			/** The interpolation between animations is linear. */
			BLEND_MODE_INTERPOLATED = 0,
			/** The blend space plays the animation of the node the blending position is closest to. Useful for frame-by-frame 2D animations. */
			BLEND_MODE_DISCRETE = 1,
			/** Similar to `BLEND_MODE_DISCRETE`, but starts the new animation at the last animation's playback position. */
			BLEND_MODE_DISCRETE_CARRY = 2,
		}

		/** The interpolation between animations is linear. */
		const BLEND_MODE_INTERPOLATED: BlendMode.BLEND_MODE_INTERPOLATED;

		/** The blend space plays the animation of the node the blending position is closest to. Useful for frame-by-frame 2D animations. */
		const BLEND_MODE_DISCRETE: BlendMode.BLEND_MODE_DISCRETE;

		/** Similar to `BLEND_MODE_DISCRETE`, but starts the new animation at the last animation's playback position. */
		const BLEND_MODE_DISCRETE_CARRY: BlendMode.BLEND_MODE_DISCRETE_CARRY;
	}

	/** `AnimationTree` node resource that contains many blend type nodes.
	 This node may contain a sub-tree of any other blend type nodes, such as mix, blend2, blend3, one shot, etc. This is one of the most commonly used roots. */
	class AnimationNodeBlendTree extends AnimationRootNode {

		/** The global offset of all sub-nodes. */
		graph_offset: Vector2;

		/** Adds an `AnimationNode` at the given `position`. The `name` is used to identify the created sub-node later. */
		//@ts-ignore
		add_node(name: string, node: AnimationNode, position: Vector2 = Vector2( 0, 0 )) : void;

		/** Returns the sub-node with the specified `name`. */
		get_node(name: string) : AnimationNode;

		/** Removes a sub-node. */
		remove_node(name: string) : void;

		/** Changes the name of a sub-node. */
		rename_node(name: string, new_name: string) : void;

		/** Returns `true` if a sub-node with specified `name` exists. */
		has_node(name: string) : boolean;

		/** Connects the output of an `AnimationNode` as input for another `AnimationNode`, at the input port specified by `input_index`. */
		connect_node(input_node: string, input_index: number, output_node: string) : void;

		/** Disconnects the node connected to the specified input. */
		disconnect_node(input_node: string, input_index: number) : void;

		/** Modifies the position of a sub-node. */
		set_node_position(name: string, position: Vector2) : void;

		/** Returns the position of the sub-node with the specified `name`. */
		get_node_position(name: string) : Vector2;

		/** Getter of `graph_offset` property */
		get_graph_offset() : Vector2;

		/** Setter of `graph_offset` property */
		set_graph_offset(p_value: Vector2) : void;
	}
	namespace AnimationNodeBlendTree {

		/** The connection was successful. */
		const CONNECTION_OK: 0;

		/** The input node is `null`. */
		const CONNECTION_ERROR_NO_INPUT: 1;

		/** The specified input port is out of range. */
		const CONNECTION_ERROR_NO_INPUT_INDEX: 2;

		/** The output node is `null`. */
		const CONNECTION_ERROR_NO_OUTPUT: 3;

		/** Input and output nodes are the same. */
		const CONNECTION_ERROR_SAME_NODE: 4;

		/** The specified connection already exists. */
		const CONNECTION_ERROR_CONNECTION_EXISTS: 5;
	}

	/** Plays an animation once in `AnimationNodeBlendTree`.
	 A resource to add to an `AnimationNodeBlendTree`. This node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters. */
	class AnimationNodeOneShot extends AnimationNode {

		/**  */
		fadein_time: number;

		/**  */
		fadeout_time: number;

		/** If `true`, the sub-animation will restart automatically after finishing. */
		autorestart: boolean;

		/** The delay after which the automatic restart is triggered, in seconds. */
		autorestart_delay: number;

		/** If `autorestart` is `true`, a random additional delay (in seconds) between 0 and this value will be added to `autorestart_delay`. */
		autorestart_random_delay: number;

		/**  */
		sync: boolean;

		/**  */
		set_mix_mode(mode: AnimationNodeOneShot.MixMode) : void;

		/**  */
		get_mix_mode() : number;

		/** Getter of `fadein_time` property */
		get_fadein_time() : number;

		/** Setter of `fadein_time` property */
		set_fadein_time(p_value: number) : void;

		/** Getter of `fadeout_time` property */
		get_fadeout_time() : number;

		/** Setter of `fadeout_time` property */
		set_fadeout_time(p_value: number) : void;

		/** Getter of `autorestart` property */
		has_autorestart() : boolean;

		/** Setter of `autorestart` property */
		set_autorestart(p_value: boolean) : void;

		/** Getter of `autorestart_delay` property */
		get_autorestart_delay() : number;

		/** Setter of `autorestart_delay` property */
		set_autorestart_delay(p_value: number) : void;

		/** Getter of `autorestart_random_delay` property */
		get_autorestart_random_delay() : number;

		/** Setter of `autorestart_random_delay` property */
		set_autorestart_random_delay(p_value: number) : void;

		/** Getter of `sync` property */
		is_using_sync() : boolean;

		/** Setter of `sync` property */
		set_use_sync(p_value: boolean) : void;
	}
	namespace AnimationNodeOneShot {
		enum MixMode {
			/**  */
			MIX_MODE_BLEND = 0,
			/**  */
			MIX_MODE_ADD = 1,
		}

		/**  */
		const MIX_MODE_BLEND: MixMode.MIX_MODE_BLEND;

		/**  */
		const MIX_MODE_ADD: MixMode.MIX_MODE_ADD;
	}

	/** Generic output node to be added to `AnimationNodeBlendTree`.
	  */
	class AnimationNodeOutput extends AnimationNode {
	}
	namespace AnimationNodeOutput {
	}

	/** State machine for control of animations.
	 Contains multiple nodes representing animation states, connected in a graph. Node transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the `AnimationNodeStateMachinePlayback` object from the `AnimationTree` node to control it programmatically.

	 **Example:**

	 ```gdscript
	 var state_machine = $AnimationTree.get("parameters/playback")
	 state_machine.travel("some_state")
	 ``` */
	class AnimationNodeStateMachine extends AnimationRootNode {

		/** Adds a new node to the graph. The `position` is used for display in the editor. */
		//@ts-ignore
		add_node(name: string, node: AnimationNode, position: Vector2 = Vector2( 0, 0 )) : void;

		/** Replaces the node and keeps its transitions unchanged. */
		replace_node(name: string, node: AnimationNode) : void;

		/** Returns the animation node with the given name. */
		get_node(name: string) : AnimationNode;

		/** Deletes the given node from the graph. */
		remove_node(name: string) : void;

		/** Renames the given node. */
		rename_node(name: string, new_name: string) : void;

		/** Returns `true` if the graph contains the given node. */
		has_node(name: string) : boolean;

		/** Returns the given animation node's name. */
		get_node_name(node: AnimationNode) : string;

		/** Sets the node's coordinates. Used for display in the editor. */
		set_node_position(name: string, position: Vector2) : void;

		/** Returns the given node's coordinates. Used for display in the editor. */
		get_node_position(name: string) : Vector2;

		/** Returns `true` if there is a transition between the given nodes. */
		has_transition(p_from: string, to: string) : boolean;

		/** Adds a transition between the given nodes. */
		add_transition(p_from: string, to: string, transition: AnimationNodeStateMachineTransition) : void;

		/** Returns the given transition. */
		get_transition(idx: number) : AnimationNodeStateMachineTransition;

		/** Returns the given transition's start node. */
		get_transition_from(idx: number) : string;

		/** Returns the given transition's end node. */
		get_transition_to(idx: number) : string;

		/** Returns the number of connections in the graph. */
		get_transition_count() : number;

		/** Deletes the given transition by index. */
		remove_transition_by_index(idx: number) : void;

		/** Deletes the transition between the two specified nodes. */
		remove_transition(p_from: string, to: string) : void;

		/** Sets the given node as the graph start point. */
		set_start_node(name: string) : void;

		/** Returns the graph's end node. */
		get_start_node() : string;

		/** Sets the given node as the graph end point. */
		set_end_node(name: string) : void;

		/** Returns the graph's end node. */
		get_end_node() : string;

		/** Sets the draw offset of the graph. Used for display in the editor. */
		set_graph_offset(offset: Vector2) : void;

		/** Returns the draw offset of the graph. Used for display in the editor. */
		get_graph_offset() : Vector2;
	}
	namespace AnimationNodeStateMachine {
	}

	/** Playback control for `AnimationNodeStateMachine`.
	 Allows control of `AnimationTree` state machines created with `AnimationNodeStateMachine`. Retrieve with `$AnimationTree.get("parameters/playback")`.

	 **Example:**

	 ```gdscript
	 var state_machine = $AnimationTree.get("parameters/playback")
	 state_machine.travel("some_state")
	 ``` */
	class AnimationNodeStateMachinePlayback extends Resource {

		/**  */
		resource_local_to_scene: boolean;

		/** Transitions from the current state to another one, following the shortest path. */
		travel(to_node: string) : void;

		/** Starts playing the given animation. */
		start(node: string) : void;

		/** Stops the currently playing animation. */
		stop() : void;

		/** Returns `true` if an animation is playing. */
		is_playing() : boolean;

		/** Returns the currently playing animation state. */
		get_current_node() : string;

		/** Returns the current travel path as computed internally by the A* algorithm. */
		get_travel_path() : PoolStringArray;

		/** Getter of `resource_local_to_scene` property */
		is_local_to_scene() : boolean;

		/** Setter of `resource_local_to_scene` property */
		set_local_to_scene(p_value: boolean) : void;
	}
	namespace AnimationNodeStateMachinePlayback {
	}

	/** 
	  */
	class AnimationNodeStateMachineTransition extends Resource {

		/** The transition type. */
		switch_mode: number;

		/** Turn on the transition automatically when this state is reached. This works best with `SWITCH_MODE_AT_END`. */
		auto_advance: boolean;

		/** Turn on auto advance when this condition is set. The provided name will become a boolean parameter on the `AnimationTree` that can be controlled from code (see `url=https://docs.godotengine.org/en/latest/tutorials/animation/animation_tree.html#controlling-from-code``/url`). For example, if `AnimationTree.tree_root` is an `AnimationNodeStateMachine` and `advance_condition` is set to `"idle"`:

		 ```gdscript
		 $animation_tree["parameters/conditions/idle"] = is_on_floor and (linear_velocity.x == 0)
		 ``` */
		advance_condition: string;

		/** The time to cross-fade between this state and the next. */
		xfade_time: number;

		/** Lower priority transitions are preferred when travelling through the tree via `AnimationNodeStateMachinePlayback.travel` or `auto_advance`. */
		priority: number;

		/** Don't use this transition during `AnimationNodeStateMachinePlayback.travel` or `auto_advance`. */
		disabled: boolean;

		/** Getter of `switch_mode` property */
		get_switch_mode() : number;

		/** Setter of `switch_mode` property */
		set_switch_mode(p_value: number) : void;

		/** Getter of `auto_advance` property */
		has_auto_advance() : boolean;

		/** Setter of `auto_advance` property */
		set_auto_advance(p_value: boolean) : void;

		/** Getter of `advance_condition` property */
		get_advance_condition() : string;

		/** Setter of `advance_condition` property */
		set_advance_condition(p_value: string) : void;

		/** Getter of `xfade_time` property */
		get_xfade_time() : number;

		/** Setter of `xfade_time` property */
		set_xfade_time(p_value: number) : void;

		/** Getter of `priority` property */
		get_priority() : number;

		/** Setter of `priority` property */
		set_priority(p_value: number) : void;

		/** Getter of `disabled` property */
		is_disabled() : boolean;

		/** Setter of `disabled` property */
		set_disabled(p_value: boolean) : void;
	}
	namespace AnimationNodeStateMachineTransition {

		/** Emitted when `advance_condition` is changed. */
		const advance_condition_changed: 'advance_condition_changed';
		enum SwitchMode {
			/** Switch to the next state immediately. The current state will end and blend into the beginning of the new one. */
			SWITCH_MODE_IMMEDIATE = 0,
			/** Switch to the next state immediately, but will seek the new state to the playback position of the old state. */
			SWITCH_MODE_SYNC = 1,
			/** Wait for the current state playback to end, then switch to the beginning of the next state animation. */
			SWITCH_MODE_AT_END = 2,
		}

		/** Switch to the next state immediately. The current state will end and blend into the beginning of the new one. */
		const SWITCH_MODE_IMMEDIATE: SwitchMode.SWITCH_MODE_IMMEDIATE;

		/** Switch to the next state immediately, but will seek the new state to the playback position of the old state. */
		const SWITCH_MODE_SYNC: SwitchMode.SWITCH_MODE_SYNC;

		/** Wait for the current state playback to end, then switch to the beginning of the next state animation. */
		const SWITCH_MODE_AT_END: SwitchMode.SWITCH_MODE_AT_END;
	}

	/** A time-scaling animation node to be used with `AnimationTree`.
	 Allows scaling the speed of the animation (or reversing it) in any children nodes. Setting it to 0 will pause the animation. */
	class AnimationNodeTimeScale extends AnimationNode {
	}
	namespace AnimationNodeTimeScale {
	}

	/** A time-seeking animation node to be used with `AnimationTree`.
	 This node can be used to cause a seek command to happen to any sub-children of the graph. After setting the time, this value returns to -1. */
	class AnimationNodeTimeSeek extends AnimationNode {
	}
	namespace AnimationNodeTimeSeek {
	}

	/** A generic animation transition node for `AnimationTree`.
	 Simple state machine for cases which don't require a more advanced `AnimationNodeStateMachine`. Animations can be connected to the inputs and transition times can be specified. */
	class AnimationNodeTransition extends AnimationNode {

		/** The number of available input ports for this node. */
		input_count: number;

		/** Cross-fading time (in seconds) between each animation connected to the inputs. */
		xfade_time: number;

		/**  */
		set_input_as_auto_advance(input: number, enable: boolean) : void;

		/**  */
		is_input_set_as_auto_advance(input: number) : boolean;

		/**  */
		set_input_caption(input: number, caption: string) : void;

		/**  */
		get_input_caption(input: number) : string;

		/** Getter of `input_count` property */
		get_enabled_inputs() : number;

		/** Setter of `input_count` property */
		set_enabled_inputs(p_value: number) : void;

		/** Getter of `xfade_time` property */
		get_cross_fade_time() : number;

		/** Setter of `xfade_time` property */
		set_cross_fade_time(p_value: number) : void;
	}
	namespace AnimationNodeTransition {
	}

	/** Container and player of `Animation` resources.
	 An animation player is used for general-purpose playback of `Animation` resources. It contains a dictionary of animations (referenced by name) and custom blend times between their transitions. Additionally, animations can be played and blended in different channels.

	 `AnimationPlayer` is more suited than `Tween` for animations where you know the final values in advance. For example, fading a screen in and out is more easily done with an `AnimationPlayer` node thanks to the animation tools provided by the editor. That particular example can also be implemented with a `Tween` node, but it requires doing everything by code.

	 Updating the target properties of animations occurs at process time. */
	class AnimationPlayer extends Node {

		/** The node from which node path references will travel. */
		root_node: string;

		/** The name of the current animation, "" if not playing anything. When being set, does not restart the animation. See also `play`. */
		current_animation: string;

		/** If playing, the current animation; otherwise, the animation last played. When set, would change the animation, but would not play it unless currently playing. See also `current_animation`. */
		assigned_animation: string;

		/** The name of the animation to play when the scene loads. */
		autoplay: string;

		/** The length (in seconds) of the currently being played animation. */
		current_animation_length: number;

		/** The position (in seconds) of the currently playing animation. */
		current_animation_position: number;

		/** The process notification in which to update animations. */
		playback_process_mode: number;

		/** The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision. */
		playback_default_blend_time: number;

		/** If `true`, updates animations in response to process-related notifications. */
		playback_active: boolean;

		/** The speed scaling ratio. For instance, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed. */
		playback_speed: number;

		/** The call mode to use for Call Method tracks. */
		method_call_mode: number;

		/** Adds `animation` to the player accessible with the key `name`. */
		add_animation(name: string, animation: Animation) : number;

		/** Removes the animation with key `name`. */
		remove_animation(name: string) : void;

		/** Renames an existing animation with key `name` to `newname`. */
		rename_animation(name: string, newname: string) : void;

		/** Returns `true` if the `AnimationPlayer` stores an `Animation` with key `name`. */
		has_animation(name: string) : boolean;

		/** Returns the `Animation` with key `name` or `null` if not found. */
		get_animation(name: string) : Animation;

		/** Returns the list of stored animation names. */
		get_animation_list() : PoolStringArray;

		/** Triggers the `anim_to` animation when the `anim_from` animation completes. */
		animation_set_next(anim_from: string, anim_to: string) : void;

		/** Returns the name of the next animation in the queue. */
		animation_get_next(anim_from: string) : string;

		/** Specifies a blend time (in seconds) between two animations, referenced by their names. */
		set_blend_time(anim_from: string, anim_to: string, sec: number) : void;

		/** Gets the blend time (in seconds) between two animations, referenced by their names. */
		get_blend_time(anim_from: string, anim_to: string) : number;

		/** Plays the animation with key `name`. Custom blend times and speed can be set. If `custom_speed` is negative and `from_end` is `true`, the animation will play backwards (which is equivalent to calling `play_backwards`).

		 The `AnimationPlayer` keeps track of its current or last played animation with `assigned_animation`. If this method is called with that same animation `name`, or with no `name` parameter, the assigned animation will resume playing if it was paused, or restart if it was stopped (see `stop` for both pause and stop). If the animation was already playing, it will keep playing.

		 **Note:** The animation will be updated the next time the `AnimationPlayer` is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call `advance(0)`. */
		//@ts-ignore
		play(name: string = "", custom_blend: number = -1, custom_speed: number = 1.0, from_end: boolean = false) : void;

		/** Plays the animation with key `name` in reverse.

		 This method is a shorthand for `play` with `custom_speed = -1.0` and `from_end = true`, so see its description for more information. */
		//@ts-ignore
		play_backwards(name: string = "", custom_blend: number = -1) : void;

		/** Stops or pauses the currently playing animation. If `reset` is `true`, the animation position is reset to `0` and the playback speed is reset to `1.0`.

		 If `reset` is `false`, the `current_animation_position` will be kept and calling `play` or `play_backwards` without arguments or with the same animation name as `assigned_animation` will resume the animation. */
		//@ts-ignore
		stop(reset: boolean = true) : void;

		/** Returns `true` if playing an animation. */
		is_playing() : boolean;

		/** Queues an animation for playback once the current one is done.

		 **Note:** If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow. */
		queue(name: string) : void;

		/** Returns a list of the animation names that are currently queued to play. */
		get_queue() : PoolStringArray;

		/** Clears all queued, unplayed animations. */
		clear_queue() : void;

		/** Gets the actual playing speed of current animation or 0 if not playing. This speed is the `playback_speed` property multiplied by `custom_speed` argument specified when calling the `play` method. */
		get_playing_speed() : number;

		/** Returns the name of `animation` or an empty string if not found. */
		find_animation(animation: Animation) : string;

		/** `AnimationPlayer` caches animated nodes. It may not notice if a node disappears; `clear_caches` forces it to update the cache again. */
		clear_caches() : void;

		/** Seeks the animation to the `seconds` point in time (in seconds). If `update` is `true`, the animation updates too, otherwise it updates at process time. Events between the current frame and `seconds` are skipped. */
		//@ts-ignore
		seek(seconds: number, update: boolean = false) : void;

		/** Shifts position in the animation timeline and immediately updates the animation. `delta` is the time in seconds to shift. Events between the current frame and `delta` are handled. */
		advance(delta: number) : void;

		/** Getter of `root_node` property */
		get_root() : string;

		/** Setter of `root_node` property */
		set_root(p_value: string) : void;

		/** Getter of `current_animation` property */
		get_current_animation() : string;

		/** Setter of `current_animation` property */
		set_current_animation(p_value: string) : void;

		/** Getter of `assigned_animation` property */
		get_assigned_animation() : string;

		/** Setter of `assigned_animation` property */
		set_assigned_animation(p_value: string) : void;

		/** Getter of `autoplay` property */
		get_autoplay() : string;

		/** Setter of `autoplay` property */
		set_autoplay(p_value: string) : void;

		/** Getter of `current_animation_length` property */
		get_current_animation_length() : number;

		/** Getter of `current_animation_position` property */
		get_current_animation_position() : number;

		/** Getter of `playback_process_mode` property */
		get_animation_process_mode() : number;

		/** Setter of `playback_process_mode` property */
		set_animation_process_mode(p_value: number) : void;

		/** Getter of `playback_default_blend_time` property */
		get_default_blend_time() : number;

		/** Setter of `playback_default_blend_time` property */
		set_default_blend_time(p_value: number) : void;

		/** Getter of `playback_active` property */
		is_active() : boolean;

		/** Setter of `playback_active` property */
		set_active(p_value: boolean) : void;

		/** Getter of `playback_speed` property */
		get_speed_scale() : number;

		/** Setter of `playback_speed` property */
		set_speed_scale(p_value: number) : void;

		/** Getter of `method_call_mode` property */
		get_method_call_mode() : number;

		/** Setter of `method_call_mode` property */
		set_method_call_mode(p_value: number) : void;
	}
	namespace AnimationPlayer {

		/** Notifies when the caches have been cleared, either automatically, or manually via `clear_caches`. */
		const caches_cleared: 'caches_cleared';

		/** Notifies when an animation starts playing. */
		const animation_started: 'animation_started';

		/** If the currently being played animation changes, this signal will notify of such change. */
		const animation_changed: 'animation_changed';

		/** Notifies when an animation finished playing. */
		const animation_finished: 'animation_finished';
		enum AnimationMethodCallMode {
			/** Batch method calls during the animation process, then do the calls after events are processed. This avoids bugs involving deleting nodes or modifying the AnimationPlayer while playing. */
			ANIMATION_METHOD_CALL_DEFERRED = 0,
			/** Make method calls immediately when reached in the animation. */
			ANIMATION_METHOD_CALL_IMMEDIATE = 1,
		}
		enum AnimationProcessMode {
			/** Process animation during the physics process. This is especially useful when animating physics bodies. */
			ANIMATION_PROCESS_PHYSICS = 0,
			/** Process animation during the idle process. */
			ANIMATION_PROCESS_IDLE = 1,
			/** Do not process animation. Use `advance` to process the animation manually. */
			ANIMATION_PROCESS_MANUAL = 2,
		}

		/** Process animation during the physics process. This is especially useful when animating physics bodies. */
		const ANIMATION_PROCESS_PHYSICS: AnimationProcessMode.ANIMATION_PROCESS_PHYSICS;

		/** Process animation during the idle process. */
		const ANIMATION_PROCESS_IDLE: AnimationProcessMode.ANIMATION_PROCESS_IDLE;

		/** Do not process animation. Use `advance` to process the animation manually. */
		const ANIMATION_PROCESS_MANUAL: AnimationProcessMode.ANIMATION_PROCESS_MANUAL;

		/** Batch method calls during the animation process, then do the calls after events are processed. This avoids bugs involving deleting nodes or modifying the AnimationPlayer while playing. */
		const ANIMATION_METHOD_CALL_DEFERRED: AnimationMethodCallMode.ANIMATION_METHOD_CALL_DEFERRED;

		/** Make method calls immediately when reached in the animation. */
		const ANIMATION_METHOD_CALL_IMMEDIATE: AnimationMethodCallMode.ANIMATION_METHOD_CALL_IMMEDIATE;
	}

	/** 
	  */
	class AnimationRootNode extends AnimationNode {
	}
	namespace AnimationRootNode {
	}

	/** 
	  */
	class AnimationTrackEditPlugin extends Reference {
	}
	namespace AnimationTrackEditPlugin {
	}

	/** A node to be used for advanced animation transitions in an `AnimationPlayer`.
	 Note: When linked with an `AnimationPlayer`, several properties and methods of the corresponding `AnimationPlayer` will not function as expected. Playback and transitions should be handled using only the `AnimationTree` and its constituent `AnimationNode`(s). The `AnimationPlayer` node should be used solely for adding, deleting, and editing animations. */
	class AnimationTree extends Node {

		/** The root animation node of this `AnimationTree`. See `AnimationNode`. */
		tree_root: AnimationNode;

		/** The path to the `AnimationPlayer` used for animating. */
		anim_player: string;

		/** If `true`, the `AnimationTree` will be processing. */
		active: boolean;

		/** The process mode of this `AnimationTree`. See `AnimationProcessMode` for available modes. */
		process_mode: number;

		/** The path to the Animation track used for root motion. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. To specify a track that controls properties or bones, append its name after the path, separated by `":"`. For example, `"character/skeleton:ankle"` or `"character/mesh:transform/local"`.

		 If the track has type `Animation.TYPE_TRANSFORM`, the transformation will be cancelled visually, and the animation will appear to stay in place. */
		root_motion_track: string;

		/** Retrieve the motion of the `root_motion_track` as a `Transform` that can be used elsewhere. If `root_motion_track` is not a path to a track of type `Animation.TYPE_TRANSFORM`, returns an identity transformation. */
		get_root_motion_transform() : Transform;

		/**  */
		rename_parameter(old_name: string, new_name: string) : void;

		/** Manually advance the animations by the specified time (in seconds). */
		advance(delta: number) : void;

		/** Getter of `tree_root` property */
		get_tree_root() : AnimationNode;

		/** Setter of `tree_root` property */
		set_tree_root(p_value: AnimationNode) : void;

		/** Getter of `anim_player` property */
		get_animation_player() : string;

		/** Setter of `anim_player` property */
		set_animation_player(p_value: string) : void;

		/** Getter of `active` property */
		is_active() : boolean;

		/** Setter of `active` property */
		set_active(p_value: boolean) : void;

		/** Getter of `process_mode` property */
		get_process_mode() : number;

		/** Setter of `process_mode` property */
		set_process_mode(p_value: number) : void;

		/** Getter of `root_motion_track` property */
		get_root_motion_track() : string;

		/** Setter of `root_motion_track` property */
		set_root_motion_track(p_value: string) : void;
	}
	namespace AnimationTree {
		enum AnimationProcessMode {
			/** The animations will progress during the physics frame (i.e. `Node._physics_process`). */
			ANIMATION_PROCESS_PHYSICS = 0,
			/** The animations will progress during the idle frame (i.e. `Node._process`). */
			ANIMATION_PROCESS_IDLE = 1,
			/** The animations will only progress manually (see `advance`). */
			ANIMATION_PROCESS_MANUAL = 2,
		}

		/** The animations will progress during the physics frame (i.e. `Node._physics_process`). */
		const ANIMATION_PROCESS_PHYSICS: AnimationProcessMode.ANIMATION_PROCESS_PHYSICS;

		/** The animations will progress during the idle frame (i.e. `Node._process`). */
		const ANIMATION_PROCESS_IDLE: AnimationProcessMode.ANIMATION_PROCESS_IDLE;

		/** The animations will only progress manually (see `advance`). */
		const ANIMATION_PROCESS_MANUAL: AnimationProcessMode.ANIMATION_PROCESS_MANUAL;
	}

	/** Animation player that uses a node graph for blending animations.
	 A node graph tool for blending multiple animations bound to an `AnimationPlayer`. Especially useful for animating characters or other skeleton-based rigs. It can combine several animations to form a desired pose.

	 It takes `Animation`s from an `AnimationPlayer` node and mixes them depending on the graph. */
	class AnimationTreePlayer extends Node {

		/** The thread in which to update animations. */
		playback_process_mode: number;

		/** The path to the `AnimationPlayer` from which this `AnimationTreePlayer` binds animations to animation nodes.

		 Once set, `Animation` nodes can be added to the `AnimationTreePlayer`. */
		master_player: string;

		/** The node from which to relatively access other nodes.

		 It accesses the bones, so it should point to the same node the `AnimationPlayer` would point its Root Node at. */
		base_path: string;

		/** If `true`, the `AnimationTreePlayer` is able to play animations. */
		active: boolean;

		/** Adds a `type` node to the graph with name `id`. */
		add_node(type: AnimationTreePlayer.NodeType, id: string) : void;

		/** Check if a node exists (by name). */
		node_exists(node: string) : boolean;

		/** Renames a node in the graph. */
		node_rename(node: string, new_name: string) : number;

		/** Gets the node type, will return from `NodeType` enum. */
		node_get_type(id: string) : number;

		/** Returns the input count for a given node. Different types of nodes have different amount of inputs. */
		node_get_input_count(id: string) : number;

		/** Returns the input source for a given node input. */
		node_get_input_source(id: string, idx: number) : string;

		/** Binds a new `Animation` from the `master_player` to the `AnimationTreePlayer`'s animation node with name `id`. */
		animation_node_set_animation(id: string, animation: Animation) : void;

		/** Returns the `AnimationPlayer`'s `Animation` bound to the `AnimationTreePlayer`'s animation node with name `id`. */
		animation_node_get_animation(id: string) : Animation;

		/** Binds the `Animation` named `source` from `master_player` to the animation node `id`. Recalculates caches. */
		animation_node_set_master_animation(id: string, source: string) : void;

		/** Returns the name of the `master_player`'s `Animation` bound to this animation node. */
		animation_node_get_master_animation(id: string) : string;

		/** Returns the absolute playback timestamp of the animation node with name `id`. */
		animation_node_get_position(id: string) : number;

		/** If `enable` is `true`, the animation node with ID `id` turns off the track modifying the property at `path`. The modified node's children continue to animate. */
		animation_node_set_filter_path(id: string, path: string, enable: boolean) : void;

		/** Sets the fade in time of a OneShot node given its name and value in seconds. */
		oneshot_node_set_fadein_time(id: string, time_sec: number) : void;

		/** Returns the fade in time of a OneShot node given its name. */
		oneshot_node_get_fadein_time(id: string) : number;

		/** Sets the fade out time of a OneShot node given its name and value in seconds. */
		oneshot_node_set_fadeout_time(id: string, time_sec: number) : void;

		/** Returns the fade out time of a OneShot node given its name. */
		oneshot_node_get_fadeout_time(id: string) : number;

		/** Sets the autorestart property of a OneShot node given its name and value. */
		oneshot_node_set_autorestart(id: string, enable: boolean) : void;

		/** Sets the autorestart delay of a OneShot node given its name and value in seconds. */
		oneshot_node_set_autorestart_delay(id: string, delay_sec: number) : void;

		/** Sets the autorestart random delay of a OneShot node given its name and value in seconds. */
		oneshot_node_set_autorestart_random_delay(id: string, rand_sec: number) : void;

		/** Returns whether a OneShot node will auto restart given its name. */
		oneshot_node_has_autorestart(id: string) : boolean;

		/** Returns the autostart delay of a OneShot node given its name. */
		oneshot_node_get_autorestart_delay(id: string) : number;

		/** Returns the autostart random delay of a OneShot node given its name. */
		oneshot_node_get_autorestart_random_delay(id: string) : number;

		/** Starts a OneShot node given its name. */
		oneshot_node_start(id: string) : void;

		/** Stops the OneShot node with name `id`. */
		oneshot_node_stop(id: string) : void;

		/** Returns whether a OneShot node is active given its name. */
		oneshot_node_is_active(id: string) : boolean;

		/** If `enable` is `true`, the OneShot node with ID `id` turns off the track modifying the property at `path`. The modified node's children continue to animate. */
		oneshot_node_set_filter_path(id: string, path: string, enable: boolean) : void;

		/** Sets the mix amount of a Mix node given its name and value.

		 A Mix node adds input b to input a by the amount given by ratio. */
		mix_node_set_amount(id: string, ratio: number) : void;

		/** Returns the mix amount of a Mix node given its name. */
		mix_node_get_amount(id: string) : number;

		/** Sets the blend amount of a Blend2 node given its name and value.

		 A Blend2 node blends two animations (A and B) with the amount between 0 and 1.

		 At 0, output is input A. Towards 1, the influence of A gets lessened, the influence of B gets raised. At 1, output is input B. */
		blend2_node_set_amount(id: string, blend: number) : void;

		/** Returns the blend amount of a Blend2 node given its name. */
		blend2_node_get_amount(id: string) : number;

		/** If `enable` is `true`, the Blend2 node with name `id` turns off the track modifying the property at `path`. The modified node's children continue to animate. */
		blend2_node_set_filter_path(id: string, path: string, enable: boolean) : void;

		/** Sets the blend amount of a Blend3 node given its name and value.

		 A Blend3 Node blends three animations (A, B-, B+) with the amount between -1 and 1.

		 At -1, output is input B-. From -1 to 0, the influence of B- gets lessened, the influence of A gets raised and the influence of B+ is 0. At 0, output is input A. From 0 to 1, the influence of A gets lessened, the influence of B+ gets raised and the influence of B+ is 0. At 1, output is input B+. */
		blend3_node_set_amount(id: string, blend: number) : void;

		/** Returns the blend amount of a Blend3 node given its name. */
		blend3_node_get_amount(id: string) : number;

		/** Sets the blend amount of a Blend4 node given its name and value.

		 A Blend4 Node blends two pairs of animations.

		 The two pairs are blended like Blend2 and then added together. */
		blend4_node_set_amount(id: string, blend: Vector2) : void;

		/** Returns the blend amount of a Blend4 node given its name. */
		blend4_node_get_amount(id: string) : Vector2;

		/** Sets the time scale of the TimeScale node with name `id` to `scale`.

		 The TimeScale node is used to speed `Animation`s up if the scale is above 1 or slow them down if it is below 1.

		 If applied after a blend or mix, affects all input animations to that blend or mix. */
		timescale_node_set_scale(id: string, scale: number) : void;

		/** Returns the time scale value of the TimeScale node with name `id`. */
		timescale_node_get_scale(id: string) : number;

		/** Sets the time seek value of the TimeSeek node with name `id` to `seconds`.

		 This functions as a seek in the `Animation` or the blend or mix of `Animation`s input in it. */
		timeseek_node_seek(id: string, seconds: number) : void;

		/** Resizes the number of inputs available for the transition node with name `id`. */
		transition_node_set_input_count(id: string, count: number) : void;

		/** Returns the number of inputs for the transition node with name `id`. You can add inputs by right-clicking on the transition node. */
		transition_node_get_input_count(id: string) : number;

		/** Deletes the input at `input_idx` for the transition node with name `id`. */
		transition_node_delete_input(id: string, input_idx: number) : void;

		/** The transition node with name `id` advances to its next input automatically when the input at `input_idx` completes. */
		transition_node_set_input_auto_advance(id: string, input_idx: number, enable: boolean) : void;

		/** Returns `true` if the input at `input_idx` on the transition node with name `id` is set to automatically advance to the next input upon completion. */
		transition_node_has_input_auto_advance(id: string, input_idx: number) : boolean;

		/** The transition node with name `id` sets its cross fade time to `time_sec`. */
		transition_node_set_xfade_time(id: string, time_sec: number) : void;

		/** Returns the cross fade time for the transition node with name `id`. */
		transition_node_get_xfade_time(id: string) : number;

		/** The transition node with name `id` sets its current input at `input_idx`. */
		transition_node_set_current(id: string, input_idx: number) : void;

		/** Returns the index of the currently evaluated input for the transition node with name `id`. */
		transition_node_get_current(id: string) : number;

		/** Sets the position of a node in the graph given its name and position. */
		node_set_position(id: string, screen_position: Vector2) : void;

		/** Returns position of a node in the graph given its name. */
		node_get_position(id: string) : Vector2;

		/** Removes the animation node with name `id`. */
		remove_node(id: string) : void;

		/** Connects node `id` to `dst_id` at the specified input slot. */
		connect_nodes(id: string, dst_id: string, dst_input_idx: number) : number;

		/** Returns whether node `id` and `dst_id` are connected at the specified slot. */
		are_nodes_connected(id: string, dst_id: string, dst_input_idx: number) : boolean;

		/** Disconnects nodes connected to `id` at the specified input slot. */
		disconnect_nodes(id: string, dst_input_idx: number) : void;

		/** Returns a `PoolStringArray` containing the name of all nodes. */
		get_node_list() : PoolStringArray;

		/** Shifts position in the animation timeline. `delta` is the time in seconds to shift. Events between the current frame and `delta` are handled. */
		advance(delta: number) : void;

		/** Resets this `AnimationTreePlayer`. */
		reset() : void;

		/** Manually recalculates the cache of track information generated from animation nodes. Needed when external sources modify the animation nodes' state. */
		recompute_caches() : void;

		/** Getter of `playback_process_mode` property */
		get_animation_process_mode() : number;

		/** Setter of `playback_process_mode` property */
		set_animation_process_mode(p_value: number) : void;

		/** Getter of `master_player` property */
		get_master_player() : string;

		/** Setter of `master_player` property */
		set_master_player(p_value: string) : void;

		/** Getter of `base_path` property */
		get_base_path() : string;

		/** Setter of `base_path` property */
		set_base_path(p_value: string) : void;

		/** Getter of `active` property */
		is_active() : boolean;

		/** Setter of `active` property */
		set_active(p_value: boolean) : void;
	}
	namespace AnimationTreePlayer {
		enum AnimationProcessMode {
			/** Process animation during the physics process. This is especially useful when animating physics bodies. */
			ANIMATION_PROCESS_PHYSICS = 0,
			/** Process animation during the idle process. */
			ANIMATION_PROCESS_IDLE = 1,
		}
		enum NodeType {
			/** Output node. */
			NODE_OUTPUT = 0,
			/** Animation node. */
			NODE_ANIMATION = 1,
			/** OneShot node. */
			NODE_ONESHOT = 2,
			/** Mix node. */
			NODE_MIX = 3,
			/** Blend2 node. */
			NODE_BLEND2 = 4,
			/** Blend3 node. */
			NODE_BLEND3 = 5,
			/** Blend4 node. */
			NODE_BLEND4 = 6,
			/** TimeScale node. */
			NODE_TIMESCALE = 7,
			/** TimeSeek node. */
			NODE_TIMESEEK = 8,
			/** Transition node. */
			NODE_TRANSITION = 9,
		}

		/** Output node. */
		const NODE_OUTPUT: NodeType.NODE_OUTPUT;

		/** Animation node. */
		const NODE_ANIMATION: NodeType.NODE_ANIMATION;

		/** OneShot node. */
		const NODE_ONESHOT: NodeType.NODE_ONESHOT;

		/** Mix node. */
		const NODE_MIX: NodeType.NODE_MIX;

		/** Blend2 node. */
		const NODE_BLEND2: NodeType.NODE_BLEND2;

		/** Blend3 node. */
		const NODE_BLEND3: NodeType.NODE_BLEND3;

		/** Blend4 node. */
		const NODE_BLEND4: NodeType.NODE_BLEND4;

		/** TimeScale node. */
		const NODE_TIMESCALE: NodeType.NODE_TIMESCALE;

		/** TimeSeek node. */
		const NODE_TIMESEEK: NodeType.NODE_TIMESEEK;

		/** Transition node. */
		const NODE_TRANSITION: NodeType.NODE_TRANSITION;

		/** Process animation during the physics process. This is especially useful when animating physics bodies. */
		const ANIMATION_PROCESS_PHYSICS: AnimationProcessMode.ANIMATION_PROCESS_PHYSICS;

		/** Process animation during the idle process. */
		const ANIMATION_PROCESS_IDLE: AnimationProcessMode.ANIMATION_PROCESS_IDLE;
	}

	/** General-purpose area node for detection and 3D physics influence.
	 3D area that detects `CollisionObject` nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping). */
	class Area extends CollisionObject {

		/** Override mode for gravity and damping calculations within this area. See `SpaceOverride` for possible values. */
		space_override: number;

		/** If `true`, gravity is calculated from a point (set via `gravity_vec`). See also `space_override`. */
		gravity_point: boolean;

		/** The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance. */
		gravity_distance_scale: number;

		/** The area's gravity vector (not normalized). If gravity is a point (see `gravity_point`), this will be the point of attraction. */
		gravity_vec: Vector3;

		/** The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction. */
		gravity: number;

		/** The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from `0` (no damping) to `1` (full damping). */
		linear_damp: number;

		/** The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from `0` (no damping) to `1` (full damping). */
		angular_damp: number;

		/** The area's priority. Higher priority areas are processed first. */
		priority: number;

		/** If `true`, the area detects bodies or areas entering and exiting it. */
		monitoring: boolean;

		/** If `true`, other monitoring areas can detect this area. */
		monitorable: boolean;

		/** The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also `collision_mask`. */
		collision_layer: number;

		/** The physics layers this area scans to determine collision detection. */
		collision_mask: number;

		/** If `true`, the area's audio bus overrides the default audio bus. */
		audio_bus_override: boolean;

		/** The name of the area's audio bus. */
		audio_bus_name: string;

		/** If `true`, the area applies reverb to its associated audio. */
		reverb_bus_enable: boolean;

		/** The reverb bus name to use for this area's associated audio. */
		reverb_bus_name: string;

		/** The degree to which this area applies reverb to its associated audio. Ranges from `0` to `1` with `0.1` precision. */
		reverb_bus_amount: number;

		/** The degree to which this area's reverb is a uniform effect. Ranges from `0` to `1` with `0.1` precision. */
		reverb_bus_uniformity: number;

		/** Set/clear individual bits on the collision mask. This simplifies editing which `Area` layers this `Area` scans. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Set/clear individual bits on the layer mask. This simplifies editing this `Area`'s layers. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the layer mask. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Returns a list of intersecting `PhysicsBody`s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. */
		get_overlapping_bodies() : any[];

		/** Returns a list of intersecting `Area`s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. */
		get_overlapping_areas() : any[];

		/** If `true`, the given physics body overlaps the Area.

		 **Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.

		 The `body` argument can either be a `PhysicsBody` or a `GridMap` instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		overlaps_body(body: Node) : boolean;

		/** If `true`, the given area overlaps the Area.

		 **Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead. */
		overlaps_area(area: Node) : boolean;

		/** Getter of `space_override` property */
		get_space_override_mode() : number;

		/** Setter of `space_override` property */
		set_space_override_mode(p_value: number) : void;

		/** Getter of `gravity_point` property */
		is_gravity_a_point() : boolean;

		/** Setter of `gravity_point` property */
		set_gravity_is_point(p_value: boolean) : void;

		/** Getter of `gravity_distance_scale` property */
		get_gravity_distance_scale() : number;

		/** Setter of `gravity_distance_scale` property */
		set_gravity_distance_scale(p_value: number) : void;

		/** Getter of `gravity_vec` property */
		get_gravity_vector() : Vector3;

		/** Setter of `gravity_vec` property */
		set_gravity_vector(p_value: Vector3) : void;

		/** Getter of `gravity` property */
		get_gravity() : number;

		/** Setter of `gravity` property */
		set_gravity(p_value: number) : void;

		/** Getter of `linear_damp` property */
		get_linear_damp() : number;

		/** Setter of `linear_damp` property */
		set_linear_damp(p_value: number) : void;

		/** Getter of `angular_damp` property */
		get_angular_damp() : number;

		/** Setter of `angular_damp` property */
		set_angular_damp(p_value: number) : void;

		/** Getter of `priority` property */
		get_priority() : number;

		/** Setter of `priority` property */
		set_priority(p_value: number) : void;

		/** Getter of `monitoring` property */
		is_monitoring() : boolean;

		/** Setter of `monitoring` property */
		set_monitoring(p_value: boolean) : void;

		/** Getter of `monitorable` property */
		is_monitorable() : boolean;

		/** Setter of `monitorable` property */
		set_monitorable(p_value: boolean) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `audio_bus_override` property */
		is_overriding_audio_bus() : boolean;

		/** Setter of `audio_bus_override` property */
		set_audio_bus_override(p_value: boolean) : void;

		/** Getter of `audio_bus_name` property */
		get_audio_bus() : string;

		/** Setter of `audio_bus_name` property */
		set_audio_bus(p_value: string) : void;

		/** Getter of `reverb_bus_enable` property */
		is_using_reverb_bus() : boolean;

		/** Setter of `reverb_bus_enable` property */
		set_use_reverb_bus(p_value: boolean) : void;

		/** Getter of `reverb_bus_name` property */
		get_reverb_bus() : string;

		/** Setter of `reverb_bus_name` property */
		set_reverb_bus(p_value: string) : void;

		/** Getter of `reverb_bus_amount` property */
		get_reverb_amount() : number;

		/** Setter of `reverb_bus_amount` property */
		set_reverb_amount(p_value: number) : void;

		/** Getter of `reverb_bus_uniformity` property */
		get_reverb_uniformity() : number;

		/** Setter of `reverb_bus_uniformity` property */
		set_reverb_uniformity(p_value: number) : void;
	}
	namespace Area {

		/** Emitted when another area exits. */
		const area_exited: 'area_exited';

		/** Emitted when another area exits, reporting which areas were overlapping. */
		const area_shape_exited: 'area_shape_exited';

		/** Emitted when a physics body enters.

			 The `body` argument can either be a `PhysicsBody` or a `GridMap` instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_entered: 'body_entered';

		/** Emitted when a physics body enters, reporting which shapes overlapped.

			 The `body` argument can either be a `PhysicsBody` or a `GridMap` instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_shape_entered: 'body_shape_entered';

		/** Emitted when another area enters. */
		const area_entered: 'area_entered';

		/** Emitted when another area enters, reporting which areas overlapped. `shape_owner_get_owner(shape_find_owner(shape))` returns the parent object of the owner of the `shape`. */
		const area_shape_entered: 'area_shape_entered';

		/** Emitted when a physics body exits.

			 The `body` argument can either be a `PhysicsBody` or a `GridMap` instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_exited: 'body_exited';

		/** Emitted when a physics body exits, reporting which shapes were overlapping.

			 The `body` argument can either be a `PhysicsBody` or a `GridMap` instance (while GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_shape_exited: 'body_shape_exited';
		enum SpaceOverride {
			/** This area does not affect gravity/damping. */
			SPACE_OVERRIDE_DISABLED = 0,
			/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order). */
			SPACE_OVERRIDE_COMBINE = 1,
			/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order), ignoring any lower priority areas. */
			SPACE_OVERRIDE_COMBINE_REPLACE = 2,
			/** This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas. */
			SPACE_OVERRIDE_REPLACE = 3,
			/** This area replaces any gravity/damping calculated so far (in `priority` order), but keeps calculating the rest of the areas. */
			SPACE_OVERRIDE_REPLACE_COMBINE = 4,
		}

		/** This area does not affect gravity/damping. */
		const SPACE_OVERRIDE_DISABLED: SpaceOverride.SPACE_OVERRIDE_DISABLED;

		/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order). */
		const SPACE_OVERRIDE_COMBINE: SpaceOverride.SPACE_OVERRIDE_COMBINE;

		/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order), ignoring any lower priority areas. */
		const SPACE_OVERRIDE_COMBINE_REPLACE: SpaceOverride.SPACE_OVERRIDE_COMBINE_REPLACE;

		/** This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas. */
		const SPACE_OVERRIDE_REPLACE: SpaceOverride.SPACE_OVERRIDE_REPLACE;

		/** This area replaces any gravity/damping calculated so far (in `priority` order), but keeps calculating the rest of the areas. */
		const SPACE_OVERRIDE_REPLACE_COMBINE: SpaceOverride.SPACE_OVERRIDE_REPLACE_COMBINE;
	}

	/** 2D area for detection and 2D physics influence.
	 2D area that detects `CollisionObject2D` nodes overlapping, entering, or exiting. Can also alter or override local physics parameters (gravity, damping). */
	class Area2D extends CollisionObject2D {

		/** Override mode for gravity and damping calculations within this area. See `SpaceOverride` for possible values. */
		space_override: number;

		/** If `true`, gravity is calculated from a point (set via `gravity_vec`). See also `space_override`. */
		gravity_point: boolean;

		/** The falloff factor for point gravity. The greater the value, the faster gravity decreases with distance. */
		gravity_distance_scale: number;

		/** The area's gravity vector (not normalized). If gravity is a point (see `gravity_point`), this will be the point of attraction. */
		gravity_vec: Vector2;

		/** The area's gravity intensity (ranges from -1024 to 1024). This value multiplies the gravity vector. This is useful to alter the force of gravity without altering its direction. */
		gravity: number;

		/** The rate at which objects stop moving in this area. Represents the linear velocity lost per second. Values range from `0` (no damping) to `1` (full damping). */
		linear_damp: number;

		/** The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. Values range from `0` (no damping) to `1` (full damping). */
		angular_damp: number;

		/** The area's priority. Higher priority areas are processed first. */
		priority: number;

		/** If `true`, the area detects bodies or areas entering and exiting it. */
		monitoring: boolean;

		/** If `true`, other monitoring areas can detect this area. */
		monitorable: boolean;

		/** The area's physics layer(s). Collidable objects can exist in any of 32 different layers. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See also `collision_mask`. */
		collision_layer: number;

		/** The physics layers this area scans to determine collision detection. */
		collision_mask: number;

		/** If `true`, the area's audio bus overrides the default audio bus. */
		audio_bus_override: boolean;

		/** The name of the area's audio bus. */
		audio_bus_name: string;

		/** Set/clear individual bits on the collision mask. This makes selecting the areas scanned easier. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. Describes whether this area will collide with others on the given layer. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Set/clear individual bits on the layer mask. This makes getting an area in/out of only one layer easier. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the layer mask. Describes whether other areas will collide with this one on the given layer. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Returns a list of intersecting `PhysicsBody2D`s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. */
		get_overlapping_bodies() : any[];

		/** Returns a list of intersecting `Area2D`s. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. */
		get_overlapping_areas() : any[];

		/** If `true`, the given physics body overlaps the Area2D.

		 **Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.

		 The `body` argument can either be a `PhysicsBody2D` or a `TileMap` instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		overlaps_body(body: Node) : boolean;

		/** If `true`, the given area overlaps the Area2D.

		 **Note:** The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead. */
		overlaps_area(area: Node) : boolean;

		/** Getter of `space_override` property */
		get_space_override_mode() : number;

		/** Setter of `space_override` property */
		set_space_override_mode(p_value: number) : void;

		/** Getter of `gravity_point` property */
		is_gravity_a_point() : boolean;

		/** Setter of `gravity_point` property */
		set_gravity_is_point(p_value: boolean) : void;

		/** Getter of `gravity_distance_scale` property */
		get_gravity_distance_scale() : number;

		/** Setter of `gravity_distance_scale` property */
		set_gravity_distance_scale(p_value: number) : void;

		/** Getter of `gravity_vec` property */
		get_gravity_vector() : Vector2;

		/** Setter of `gravity_vec` property */
		set_gravity_vector(p_value: Vector2) : void;

		/** Getter of `gravity` property */
		get_gravity() : number;

		/** Setter of `gravity` property */
		set_gravity(p_value: number) : void;

		/** Getter of `linear_damp` property */
		get_linear_damp() : number;

		/** Setter of `linear_damp` property */
		set_linear_damp(p_value: number) : void;

		/** Getter of `angular_damp` property */
		get_angular_damp() : number;

		/** Setter of `angular_damp` property */
		set_angular_damp(p_value: number) : void;

		/** Getter of `priority` property */
		get_priority() : number;

		/** Setter of `priority` property */
		set_priority(p_value: number) : void;

		/** Getter of `monitoring` property */
		is_monitoring() : boolean;

		/** Setter of `monitoring` property */
		set_monitoring(p_value: boolean) : void;

		/** Getter of `monitorable` property */
		is_monitorable() : boolean;

		/** Setter of `monitorable` property */
		set_monitorable(p_value: boolean) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `audio_bus_override` property */
		is_overriding_audio_bus() : boolean;

		/** Setter of `audio_bus_override` property */
		set_audio_bus_override(p_value: boolean) : void;

		/** Getter of `audio_bus_name` property */
		get_audio_bus_name() : string;

		/** Setter of `audio_bus_name` property */
		set_audio_bus_name(p_value: string) : void;
	}
	namespace Area2D {

		/** Emitted when another area exits. */
		const area_exited: 'area_exited';

		/** Emitted when another area exits, reporting which shapes were overlapping. */
		const area_shape_exited: 'area_shape_exited';

		/** Emitted when a physics body enters.

			 The `body` argument can either be a `PhysicsBody2D` or a `TileMap` instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_entered: 'body_entered';

		/** Emitted when a physics body enters, reporting which shapes overlapped.

			 The `body` argument can either be a `PhysicsBody2D` or a `TileMap` instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_shape_entered: 'body_shape_entered';

		/** Emitted when another area enters. */
		const area_entered: 'area_entered';

		/** Emitted when another area enters, reporting which shapes overlapped. `shape_owner_get_owner(shape_find_owner(shape))` returns the parent object of the owner of the `shape`. */
		const area_shape_entered: 'area_shape_entered';

		/** Emitted when a physics body exits.

			 The `body` argument can either be a `PhysicsBody2D` or a `TileMap` instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_exited: 'body_exited';

		/** Emitted when a physics body exits, reporting which shapes were overlapping.

			 The `body` argument can either be a `PhysicsBody2D` or a `TileMap` instance (while TileMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body). */
		const body_shape_exited: 'body_shape_exited';
		enum SpaceOverride {
			/** This area does not affect gravity/damping. */
			SPACE_OVERRIDE_DISABLED = 0,
			/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order). */
			SPACE_OVERRIDE_COMBINE = 1,
			/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order), ignoring any lower priority areas. */
			SPACE_OVERRIDE_COMBINE_REPLACE = 2,
			/** This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas. */
			SPACE_OVERRIDE_REPLACE = 3,
			/** This area replaces any gravity/damping calculated so far (in `priority` order), but keeps calculating the rest of the areas. */
			SPACE_OVERRIDE_REPLACE_COMBINE = 4,
		}

		/** This area does not affect gravity/damping. */
		const SPACE_OVERRIDE_DISABLED: SpaceOverride.SPACE_OVERRIDE_DISABLED;

		/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order). */
		const SPACE_OVERRIDE_COMBINE: SpaceOverride.SPACE_OVERRIDE_COMBINE;

		/** This area adds its gravity/damping values to whatever has been calculated so far (in `priority` order), ignoring any lower priority areas. */
		const SPACE_OVERRIDE_COMBINE_REPLACE: SpaceOverride.SPACE_OVERRIDE_COMBINE_REPLACE;

		/** This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas. */
		const SPACE_OVERRIDE_REPLACE: SpaceOverride.SPACE_OVERRIDE_REPLACE;

		/** This area replaces any gravity/damping calculated so far (in `priority` order), but keeps calculating the rest of the areas. */
		const SPACE_OVERRIDE_REPLACE_COMBINE: SpaceOverride.SPACE_OVERRIDE_REPLACE_COMBINE;
	}

	/** `Mesh` type that provides utility for constructing a surface from arrays.
	 The `ArrayMesh` is used to construct a `Mesh` by specifying the attributes as arrays.

	 The most basic example is the creation of a single triangle:

	 ```gdscript
	 var vertices = PoolVector3Array()
	 vertices.push_back(Vector3(0, 1, 0))
	 vertices.push_back(Vector3(1, 0, 0))
	 vertices.push_back(Vector3(0, 0, 1))
	 # Initialize the ArrayMesh.
	 var arr_mesh = ArrayMesh.new()
	 var arrays = []
	 arrays.resize(ArrayMesh.ARRAY_MAX)
	 arrays[ArrayMesh.ARRAY_VERTEX] = vertices
	 # Create the Mesh.
	 arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
	 var m = MeshInstance.new()
	 m.mesh = arr_mesh
	 ```

	 The `MeshInstance` is ready to be added to the `SceneTree` to be shown.

	 See also `ImmediateGeometry`, `MeshDataTool` and `SurfaceTool` for procedural geometry generation.

	 **Note:** Godot uses clockwise `url=https://learnopengl.com/Advanced-OpenGL/Face-culling`winding order`/url` for front faces of triangle primitive modes. */
	//@ts-ignore
	class ArrayMesh extends Mesh {

		/** Sets the blend shape mode to one of `Mesh.BlendShapeMode`. */
		blend_shape_mode: number;

		/** Overrides the `AABB` with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices. */
		custom_aabb: AABB;

		/** Adds name for a blend shape that will be added with `add_surface_from_arrays`. Must be called before surface is added. */
		add_blend_shape(name: string) : void;

		/** Returns the number of blend shapes that the `ArrayMesh` holds. */
		get_blend_shape_count() : number;

		/** Returns the name of the blend shape at this index. */
		get_blend_shape_name(index: number) : string;

		/** Removes all blend shapes from this `ArrayMesh`. */
		clear_blend_shapes() : void;

		/** Creates a new surface.

		 Surfaces are created to be rendered using a `primitive`, which may be any of the types defined in `Mesh.PrimitiveType`. (As a note, when using indices, it is recommended to only use points, lines or triangles.) `Mesh.get_surface_count` will become the `surf_idx` for this new surface.

		 The `arrays` argument is an array of arrays. See `ArrayType` for the values used in this array. For example, `arrays`0`` is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for `ARRAY_INDEX` if it is used.

		 Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data, and the index array defines the order of the vertices. */
		//@ts-ignore
		add_surface_from_arrays(primitive: Mesh.PrimitiveType, arrays: any[], blend_shapes: any[] = [  ], compress_flags: number = 97280) : void;

		/** Removes a surface at position `surf_idx`, shifting greater surfaces one `surf_idx` slot down. */
		surface_remove(surf_idx: number) : void;

		/** Updates a specified region of mesh arrays on the GPU.

		 **Warning:** Only use if you know what you are doing. You can easily cause crashes by calling this function with improper arguments. */
		surface_update_region(surf_idx: number, offset: number, data: PoolByteArray) : void;

		/** Returns the length in vertices of the vertex array in the requested surface (see `add_surface_from_arrays`). */
		surface_get_array_len(surf_idx: number) : number;

		/** Returns the length in indices of the index array in the requested surface (see `add_surface_from_arrays`). */
		surface_get_array_index_len(surf_idx: number) : number;

		/** Returns the format mask of the requested surface (see `add_surface_from_arrays`). */
		surface_get_format(surf_idx: number) : number;

		/** Returns the primitive type of the requested surface (see `add_surface_from_arrays`). */
		surface_get_primitive_type(surf_idx: number) : number;

		/** Returns the index of the first surface with this name held within this `ArrayMesh`. If none are found, -1 is returned. */
		surface_find_by_name(name: string) : number;

		/** Sets a name for a given surface. */
		surface_set_name(surf_idx: number, name: string) : void;

		/** Gets the name assigned to this surface. */
		surface_get_name(surf_idx: number) : string;

		/** Will regenerate normal maps for the `ArrayMesh`. */
		regen_normalmaps() : void;

		/** Will perform a UV unwrap on the `ArrayMesh` to prepare the mesh for lightmapping. */
		lightmap_unwrap(transform: Transform, texel_size: number) : number;

		/** Getter of `blend_shape_mode` property */
		get_blend_shape_mode() : number;

		/** Setter of `blend_shape_mode` property */
		set_blend_shape_mode(p_value: number) : void;

		/** Getter of `custom_aabb` property */
		get_custom_aabb() : AABB;

		/** Setter of `custom_aabb` property */
		set_custom_aabb(p_value: AABB) : void;
	}
	namespace ArrayMesh {
		enum ArrayFormat {
			/** Array format will include vertices (mandatory). */
			ARRAY_FORMAT_VERTEX = 1,
			/** Array format will include normals. */
			ARRAY_FORMAT_NORMAL = 2,
			/** Array format will include tangents. */
			ARRAY_FORMAT_TANGENT = 4,
			/** Array format will include a color array. */
			ARRAY_FORMAT_COLOR = 8,
			/** Array format will include UVs. */
			ARRAY_FORMAT_TEX_UV = 16,
			/** Array format will include another set of UVs. */
			ARRAY_FORMAT_TEX_UV2 = 32,
			/** Array format will include bone indices. */
			ARRAY_FORMAT_BONES = 64,
			/** Array format will include bone weights. */
			ARRAY_FORMAT_WEIGHTS = 128,
			/** Index array will be used. */
			ARRAY_FORMAT_INDEX = 256,
		}
		enum ArrayType {
			/** `PoolVector3Array`, `PoolVector2Array`, or `Array` of vertex positions. */
			ARRAY_VERTEX = 0,
			/** `PoolVector3Array` of vertex normals. */
			ARRAY_NORMAL = 1,
			/** `PoolRealArray` of vertex tangents. Each element in groups of 4 floats, first 3 floats determine the tangent, and the last the binormal direction as -1 or 1. */
			ARRAY_TANGENT = 2,
			/** `PoolColorArray` of vertex colors. */
			ARRAY_COLOR = 3,
			/** `PoolVector2Array` for UV coordinates. */
			ARRAY_TEX_UV = 4,
			/** `PoolVector2Array` for second UV coordinates. */
			ARRAY_TEX_UV2 = 5,
			/** `PoolRealArray` or `PoolIntArray` of bone indices. Each element in groups of 4 floats. */
			ARRAY_BONES = 6,
			/** `PoolRealArray` of bone weights. Each element in groups of 4 floats. */
			ARRAY_WEIGHTS = 7,
			/** `PoolIntArray` of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.

			 For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line. */
			ARRAY_INDEX = 8,
			/** Represents the size of the `ArrayType` enum. */
			ARRAY_MAX = 9,
		}

		/** Default value used for index_array_len when no indices are present. */
		const NO_INDEX_ARRAY: -1;

		/** Amount of weights/bone indices per vertex (always 4). */
		const ARRAY_WEIGHTS_SIZE: 4;

		/** `PoolVector3Array`, `PoolVector2Array`, or `Array` of vertex positions. */
		const ARRAY_VERTEX: ArrayType.ARRAY_VERTEX;

		/** `PoolVector3Array` of vertex normals. */
		const ARRAY_NORMAL: ArrayType.ARRAY_NORMAL;

		/** `PoolRealArray` of vertex tangents. Each element in groups of 4 floats, first 3 floats determine the tangent, and the last the binormal direction as -1 or 1. */
		const ARRAY_TANGENT: ArrayType.ARRAY_TANGENT;

		/** `PoolColorArray` of vertex colors. */
		const ARRAY_COLOR: ArrayType.ARRAY_COLOR;

		/** `PoolVector2Array` for UV coordinates. */
		const ARRAY_TEX_UV: ArrayType.ARRAY_TEX_UV;

		/** `PoolVector2Array` for second UV coordinates. */
		const ARRAY_TEX_UV2: ArrayType.ARRAY_TEX_UV2;

		/** `PoolRealArray` or `PoolIntArray` of bone indices. Each element in groups of 4 floats. */
		const ARRAY_BONES: ArrayType.ARRAY_BONES;

		/** `PoolRealArray` of bone weights. Each element in groups of 4 floats. */
		const ARRAY_WEIGHTS: ArrayType.ARRAY_WEIGHTS;

		/** `PoolIntArray` of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.

		 For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line. */
		const ARRAY_INDEX: ArrayType.ARRAY_INDEX;

		/** Represents the size of the `ArrayType` enum. */
		const ARRAY_MAX: ArrayType.ARRAY_MAX;

		/** Array format will include vertices (mandatory). */
		const ARRAY_FORMAT_VERTEX: ArrayFormat.ARRAY_FORMAT_VERTEX;

		/** Array format will include normals. */
		const ARRAY_FORMAT_NORMAL: ArrayFormat.ARRAY_FORMAT_NORMAL;

		/** Array format will include tangents. */
		const ARRAY_FORMAT_TANGENT: ArrayFormat.ARRAY_FORMAT_TANGENT;

		/** Array format will include a color array. */
		const ARRAY_FORMAT_COLOR: ArrayFormat.ARRAY_FORMAT_COLOR;

		/** Array format will include UVs. */
		const ARRAY_FORMAT_TEX_UV: ArrayFormat.ARRAY_FORMAT_TEX_UV;

		/** Array format will include another set of UVs. */
		const ARRAY_FORMAT_TEX_UV2: ArrayFormat.ARRAY_FORMAT_TEX_UV2;

		/** Array format will include bone indices. */
		const ARRAY_FORMAT_BONES: ArrayFormat.ARRAY_FORMAT_BONES;

		/** Array format will include bone weights. */
		const ARRAY_FORMAT_WEIGHTS: ArrayFormat.ARRAY_FORMAT_WEIGHTS;

		/** Index array will be used. */
		const ARRAY_FORMAT_INDEX: ArrayFormat.ARRAY_FORMAT_INDEX;
	}

	/** Packs multiple small textures in a single, bigger one. Helps to optimize video memory costs and render calls.
	 `Texture` resource aimed at managing big textures files that pack multiple smaller textures. Consists of a `Texture`, a margin that defines the border width, and a region that defines the actual area of the AtlasTexture. */
	class AtlasTexture extends Texture {

		/** The texture that contains the atlas. Can be any `Texture` subtype. */
		atlas: Texture;

		/** The AtlasTexture's used region. */
		region: Rect2;

		/** The margin around the region. The `Rect2`'s `Rect2.size` parameter ("w" and "h" in the editor) resizes the texture so it fits within the margin. */
		margin: Rect2;

		/** If `true`, clips the area outside of the region to avoid bleeding of the surrounding texture pixels. */
		filter_clip: boolean;

		/**  */
		flags: number;

		/** Getter of `atlas` property */
		get_atlas() : Texture;

		/** Setter of `atlas` property */
		set_atlas(p_value: Texture) : void;

		/** Getter of `region` property */
		get_region() : Rect2;

		/** Setter of `region` property */
		set_region(p_value: Rect2) : void;

		/** Getter of `margin` property */
		get_margin() : Rect2;

		/** Setter of `margin` property */
		set_margin(p_value: Rect2) : void;

		/** Getter of `filter_clip` property */
		has_filter_clip() : boolean;

		/** Setter of `filter_clip` property */
		set_filter_clip(p_value: boolean) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace AtlasTexture {
	}

	/** Stores information about the audio buses.
	 Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between buses. See `AudioServer` for usage. */
	class AudioBusLayout extends Resource {
	}
	namespace AudioBusLayout {
	}

	/** Audio effect for audio.
	 Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on. */
	class AudioEffect extends Resource {
	}
	namespace AudioEffect {
	}

	/** Adds an amplifying audio effect to an audio bus.

	 Increases or decreases the volume of the selected audio bus.
	 Increases or decreases the volume being routed through the audio bus. */
	class AudioEffectAmplify extends AudioEffect {

		/** Amount of amplification in decibels. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24. */
		volume_db: number;

		/** Getter of `volume_db` property */
		get_volume_db() : number;

		/** Setter of `volume_db` property */
		set_volume_db(p_value: number) : void;
	}
	namespace AudioEffectAmplify {
	}

	/** Adds a band limit filter to the audio bus.
	 Limits the frequencies in a range around the `AudioEffectFilter.cutoff_hz` and allows frequencies outside of this range to pass. */
	class AudioEffectBandLimitFilter extends AudioEffectFilter {
	}
	namespace AudioEffectBandLimitFilter {
	}

	/** Adds a band pass filter to the audio bus.
	 Attenuates the frequencies inside of a range around the `AudioEffectFilter.cutoff_hz` and cuts frequencies outside of this band. */
	class AudioEffectBandPassFilter extends AudioEffectFilter {
	}
	namespace AudioEffectBandPassFilter {
	}

	/** Adds a chorus audio effect.
	 Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter. */
	class AudioEffectChorus extends AudioEffect {

		/** The amount of voices in the effect. */
		voice_count: number;

		/** The effect's raw signal. */
		dry: number;

		/** The effect's processed signal. */
		wet: number;

		/** The voice's signal delay. */
		'voice/1/delay_ms': number;

		/** The voice's filter rate. */
		'voice/1/rate_hz': number;

		/** The voice filter's depth. */
		'voice/1/depth_ms': number;

		/** The voice's volume. */
		'voice/1/level_db': number;

		/** The voice's cutoff frequency. */
		'voice/1/cutoff_hz': number;

		/** The voice's pan level. */
		'voice/1/pan': number;

		/** The voice's signal delay. */
		'voice/2/delay_ms': number;

		/** The voice's filter rate. */
		'voice/2/rate_hz': number;

		/** The voice filter's depth. */
		'voice/2/depth_ms': number;

		/** The voice's volume. */
		'voice/2/level_db': number;

		/** The voice's cutoff frequency. */
		'voice/2/cutoff_hz': number;

		/** The voice's pan level. */
		'voice/2/pan': number;

		/** The voice's signal delay. */
		'voice/3/delay_ms': number;

		/** The voice's filter rate. */
		'voice/3/rate_hz': number;

		/** The voice filter's depth. */
		'voice/3/depth_ms': number;

		/** The voice's volume. */
		'voice/3/level_db': number;

		/** The voice's cutoff frequency. */
		'voice/3/cutoff_hz': number;

		/** The voice's pan level. */
		'voice/3/pan': number;

		/** The voice's signal delay. */
		'voice/4/delay_ms': number;

		/** The voice's filter rate. */
		'voice/4/rate_hz': number;

		/** The voice filter's depth. */
		'voice/4/depth_ms': number;

		/** The voice's volume. */
		'voice/4/level_db': number;

		/** The voice's cutoff frequency. */
		'voice/4/cutoff_hz': number;

		/** The voice's pan level. */
		'voice/4/pan': number;

		/**  */
		set_voice_delay_ms(voice_idx: number, delay_ms: number) : void;

		/**  */
		get_voice_delay_ms(voice_idx: number) : number;

		/**  */
		set_voice_rate_hz(voice_idx: number, rate_hz: number) : void;

		/**  */
		get_voice_rate_hz(voice_idx: number) : number;

		/**  */
		set_voice_depth_ms(voice_idx: number, depth_ms: number) : void;

		/**  */
		get_voice_depth_ms(voice_idx: number) : number;

		/**  */
		set_voice_level_db(voice_idx: number, level_db: number) : void;

		/**  */
		get_voice_level_db(voice_idx: number) : number;

		/**  */
		set_voice_cutoff_hz(voice_idx: number, cutoff_hz: number) : void;

		/**  */
		get_voice_cutoff_hz(voice_idx: number) : number;

		/**  */
		set_voice_pan(voice_idx: number, pan: number) : void;

		/**  */
		get_voice_pan(voice_idx: number) : number;

		/** Getter of `voice_count` property */
		get_voice_count() : number;

		/** Setter of `voice_count` property */
		set_voice_count(p_value: number) : void;

		/** Getter of `dry` property */
		get_dry() : number;

		/** Setter of `dry` property */
		set_dry(p_value: number) : void;

		/** Getter of `wet` property */
		get_wet() : number;

		/** Setter of `wet` property */
		set_wet(p_value: number) : void;

		/** Getter of `voice/1/delay_ms` property */
		get_voice_delay_ms() : number;

		/** Setter of `voice/1/delay_ms` property */
		set_voice_delay_ms(p_value: number) : void;

		/** Getter of `voice/1/rate_hz` property */
		get_voice_rate_hz() : number;

		/** Setter of `voice/1/rate_hz` property */
		set_voice_rate_hz(p_value: number) : void;

		/** Getter of `voice/1/depth_ms` property */
		get_voice_depth_ms() : number;

		/** Setter of `voice/1/depth_ms` property */
		set_voice_depth_ms(p_value: number) : void;

		/** Getter of `voice/1/level_db` property */
		get_voice_level_db() : number;

		/** Setter of `voice/1/level_db` property */
		set_voice_level_db(p_value: number) : void;

		/** Getter of `voice/1/cutoff_hz` property */
		get_voice_cutoff_hz() : number;

		/** Setter of `voice/1/cutoff_hz` property */
		set_voice_cutoff_hz(p_value: number) : void;

		/** Getter of `voice/1/pan` property */
		get_voice_pan() : number;

		/** Setter of `voice/1/pan` property */
		set_voice_pan(p_value: number) : void;

		/** Getter of `voice/2/delay_ms` property */
		get_voice_delay_ms() : number;

		/** Setter of `voice/2/delay_ms` property */
		set_voice_delay_ms(p_value: number) : void;

		/** Getter of `voice/2/rate_hz` property */
		get_voice_rate_hz() : number;

		/** Setter of `voice/2/rate_hz` property */
		set_voice_rate_hz(p_value: number) : void;

		/** Getter of `voice/2/depth_ms` property */
		get_voice_depth_ms() : number;

		/** Setter of `voice/2/depth_ms` property */
		set_voice_depth_ms(p_value: number) : void;

		/** Getter of `voice/2/level_db` property */
		get_voice_level_db() : number;

		/** Setter of `voice/2/level_db` property */
		set_voice_level_db(p_value: number) : void;

		/** Getter of `voice/2/cutoff_hz` property */
		get_voice_cutoff_hz() : number;

		/** Setter of `voice/2/cutoff_hz` property */
		set_voice_cutoff_hz(p_value: number) : void;

		/** Getter of `voice/2/pan` property */
		get_voice_pan() : number;

		/** Setter of `voice/2/pan` property */
		set_voice_pan(p_value: number) : void;

		/** Getter of `voice/3/delay_ms` property */
		get_voice_delay_ms() : number;

		/** Setter of `voice/3/delay_ms` property */
		set_voice_delay_ms(p_value: number) : void;

		/** Getter of `voice/3/rate_hz` property */
		get_voice_rate_hz() : number;

		/** Setter of `voice/3/rate_hz` property */
		set_voice_rate_hz(p_value: number) : void;

		/** Getter of `voice/3/depth_ms` property */
		get_voice_depth_ms() : number;

		/** Setter of `voice/3/depth_ms` property */
		set_voice_depth_ms(p_value: number) : void;

		/** Getter of `voice/3/level_db` property */
		get_voice_level_db() : number;

		/** Setter of `voice/3/level_db` property */
		set_voice_level_db(p_value: number) : void;

		/** Getter of `voice/3/cutoff_hz` property */
		get_voice_cutoff_hz() : number;

		/** Setter of `voice/3/cutoff_hz` property */
		set_voice_cutoff_hz(p_value: number) : void;

		/** Getter of `voice/3/pan` property */
		get_voice_pan() : number;

		/** Setter of `voice/3/pan` property */
		set_voice_pan(p_value: number) : void;

		/** Getter of `voice/4/delay_ms` property */
		get_voice_delay_ms() : number;

		/** Setter of `voice/4/delay_ms` property */
		set_voice_delay_ms(p_value: number) : void;

		/** Getter of `voice/4/rate_hz` property */
		get_voice_rate_hz() : number;

		/** Setter of `voice/4/rate_hz` property */
		set_voice_rate_hz(p_value: number) : void;

		/** Getter of `voice/4/depth_ms` property */
		get_voice_depth_ms() : number;

		/** Setter of `voice/4/depth_ms` property */
		set_voice_depth_ms(p_value: number) : void;

		/** Getter of `voice/4/level_db` property */
		get_voice_level_db() : number;

		/** Setter of `voice/4/level_db` property */
		set_voice_level_db(p_value: number) : void;

		/** Getter of `voice/4/cutoff_hz` property */
		get_voice_cutoff_hz() : number;

		/** Setter of `voice/4/cutoff_hz` property */
		set_voice_cutoff_hz(p_value: number) : void;

		/** Getter of `voice/4/pan` property */
		get_voice_pan() : number;

		/** Setter of `voice/4/pan` property */
		set_voice_pan(p_value: number) : void;
	}
	namespace AudioEffectChorus {
	}

	/** Adds a compressor audio effect to an audio bus.

	 Reduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.
	 Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).

	 Compressor has many uses in the mix:

	 - In the Master bus to compress the whole output (although an `AudioEffectLimiter` is probably better).

	 - In voice channels to ensure they sound as balanced as possible.

	 - Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.

	 - Accentuates transients by using a wider attack, making effects sound more punchy. */
	class AudioEffectCompressor extends AudioEffect {

		/** The level above which compression is applied to the audio. Value can range from -60 to 0. */
		threshold: number;

		/** Amount of compression applied to the audio once it passes the threshold level. The higher the ratio, the more the loud parts of the audio will be compressed. Value can range from 1 to 48. */
		ratio: number;

		/** Gain applied to the output signal. */
		gain: number;

		/** Compressor's reaction time when the signal exceeds the threshold, in microseconds. Value can range from 20 to 2000. */
		attack_us: number;

		/** Compressor's delay time to stop reducing the signal after the signal level falls below the threshold, in milliseconds. Value can range from 20 to 2000. */
		release_ms: number;

		/** Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). */
		mix: number;

		/** Reduce the sound level using another audio bus for threshold detection. */
		sidechain: string;

		/** Getter of `threshold` property */
		get_threshold() : number;

		/** Setter of `threshold` property */
		set_threshold(p_value: number) : void;

		/** Getter of `ratio` property */
		get_ratio() : number;

		/** Setter of `ratio` property */
		set_ratio(p_value: number) : void;

		/** Getter of `gain` property */
		get_gain() : number;

		/** Setter of `gain` property */
		set_gain(p_value: number) : void;

		/** Getter of `attack_us` property */
		get_attack_us() : number;

		/** Setter of `attack_us` property */
		set_attack_us(p_value: number) : void;

		/** Getter of `release_ms` property */
		get_release_ms() : number;

		/** Setter of `release_ms` property */
		set_release_ms(p_value: number) : void;

		/** Getter of `mix` property */
		get_mix() : number;

		/** Setter of `mix` property */
		set_mix(p_value: number) : void;

		/** Getter of `sidechain` property */
		get_sidechain() : string;

		/** Setter of `sidechain` property */
		set_sidechain(p_value: string) : void;
	}
	namespace AudioEffectCompressor {
	}

	/** Adds a delay audio effect to an audio bus. Plays input signal back after a period of time.

	 Two tap delay and feedback options.
	 Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds. */
	class AudioEffectDelay extends AudioEffect {

		/** Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. */
		dry: number;

		/** If `true`, `tap1` will be enabled. */
		'tap1/active': boolean;

		/** `tap1` delay time in milliseconds. */
		'tap1/delay_ms': number;

		/** Sound level for `tap1`. */
		'tap1/level_db': number;

		/** Pan position for `tap1`. Value can range from -1 (fully left) to 1 (fully right). */
		'tap1/pan': number;

		/** If `true`, `tap2` will be enabled. */
		'tap2/active': boolean;

		/** **Tap2** delay time in milliseconds. */
		'tap2/delay_ms': number;

		/** Sound level for `tap2`. */
		'tap2/level_db': number;

		/** Pan position for `tap2`. Value can range from -1 (fully left) to 1 (fully right). */
		'tap2/pan': number;

		/** If `true`, feedback is enabled. */
		'feedback/active': boolean;

		/** Feedback delay time in milliseconds. */
		'feedback/delay_ms': number;

		/** Sound level for `tap1`. */
		'feedback/level_db': number;

		/** Low-pass filter for feedback, in Hz. Frequencies below this value are filtered out of the source signal. */
		'feedback/lowpass': number;

		/** Getter of `dry` property */
		get_dry() : number;

		/** Setter of `dry` property */
		set_dry(p_value: number) : void;

		/** Getter of `tap1/active` property */
		is_tap1_active() : boolean;

		/** Setter of `tap1/active` property */
		set_tap1_active(p_value: boolean) : void;

		/** Getter of `tap1/delay_ms` property */
		get_tap1_delay_ms() : number;

		/** Setter of `tap1/delay_ms` property */
		set_tap1_delay_ms(p_value: number) : void;

		/** Getter of `tap1/level_db` property */
		get_tap1_level_db() : number;

		/** Setter of `tap1/level_db` property */
		set_tap1_level_db(p_value: number) : void;

		/** Getter of `tap1/pan` property */
		get_tap1_pan() : number;

		/** Setter of `tap1/pan` property */
		set_tap1_pan(p_value: number) : void;

		/** Getter of `tap2/active` property */
		is_tap2_active() : boolean;

		/** Setter of `tap2/active` property */
		set_tap2_active(p_value: boolean) : void;

		/** Getter of `tap2/delay_ms` property */
		get_tap2_delay_ms() : number;

		/** Setter of `tap2/delay_ms` property */
		set_tap2_delay_ms(p_value: number) : void;

		/** Getter of `tap2/level_db` property */
		get_tap2_level_db() : number;

		/** Setter of `tap2/level_db` property */
		set_tap2_level_db(p_value: number) : void;

		/** Getter of `tap2/pan` property */
		get_tap2_pan() : number;

		/** Setter of `tap2/pan` property */
		set_tap2_pan(p_value: number) : void;

		/** Getter of `feedback/active` property */
		is_feedback_active() : boolean;

		/** Setter of `feedback/active` property */
		set_feedback_active(p_value: boolean) : void;

		/** Getter of `feedback/delay_ms` property */
		get_feedback_delay_ms() : number;

		/** Setter of `feedback/delay_ms` property */
		set_feedback_delay_ms(p_value: number) : void;

		/** Getter of `feedback/level_db` property */
		get_feedback_level_db() : number;

		/** Setter of `feedback/level_db` property */
		set_feedback_level_db(p_value: number) : void;

		/** Getter of `feedback/lowpass` property */
		get_feedback_lowpass() : number;

		/** Setter of `feedback/lowpass` property */
		set_feedback_lowpass(p_value: number) : void;
	}
	namespace AudioEffectDelay {
	}

	/** Adds a distortion audio effect to an Audio bus.

	 Modify the sound to make it dirty.
	 Modify the sound and make it dirty. Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.

	 By distorting the waveform the frequency content change, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently. */
	class AudioEffectDistortion extends AudioEffect {

		/** Distortion type. */
		mode: number;

		/** Increases or decreases the volume before the effect. Value can range from -60 to 60. */
		pre_gain: number;

		/** High-pass filter, in Hz. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. */
		keep_hf_hz: number;

		/** Distortion power. Value can range from 0 to 1. */
		drive: number;

		/** Increases or decreases the volume after the effect. Value can range from -80 to 24. */
		post_gain: number;

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `pre_gain` property */
		get_pre_gain() : number;

		/** Setter of `pre_gain` property */
		set_pre_gain(p_value: number) : void;

		/** Getter of `keep_hf_hz` property */
		get_keep_hf_hz() : number;

		/** Setter of `keep_hf_hz` property */
		set_keep_hf_hz(p_value: number) : void;

		/** Getter of `drive` property */
		get_drive() : number;

		/** Setter of `drive` property */
		set_drive(p_value: number) : void;

		/** Getter of `post_gain` property */
		get_post_gain() : number;

		/** Setter of `post_gain` property */
		set_post_gain(p_value: number) : void;
	}
	namespace AudioEffectDistortion {
		enum Mode {
			/** Digital distortion effect which cuts off peaks at the top and bottom of the waveform. */
			MODE_CLIP = 0,
			/**  */
			MODE_ATAN = 1,
			/** Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices. */
			MODE_LOFI = 2,
			/** Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers. */
			MODE_OVERDRIVE = 3,
			/** Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound. */
			MODE_WAVESHAPE = 4,
		}

		/** Digital distortion effect which cuts off peaks at the top and bottom of the waveform. */
		const MODE_CLIP: Mode.MODE_CLIP;

		/**  */
		const MODE_ATAN: Mode.MODE_ATAN;

		/** Low-resolution digital distortion effect. You can use it to emulate the sound of early digital audio devices. */
		const MODE_LOFI: Mode.MODE_LOFI;

		/** Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers. */
		const MODE_OVERDRIVE: Mode.MODE_OVERDRIVE;

		/** Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound. */
		const MODE_WAVESHAPE: Mode.MODE_WAVESHAPE;
	}

	/** Base class for audio equalizers. Gives you control over frequencies.

	 Use it to create a custom equalizer if `AudioEffectEQ6`, `AudioEffectEQ10` or `AudioEffectEQ21` don't fit your needs.
	 AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQs are useful on the Master bus to completely master a mix and give it more character. They are also useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged). */
	class AudioEffectEQ extends AudioEffect {

		/** Sets band's gain at the specified index, in dB. */
		set_band_gain_db(band_idx: number, volume_db: number) : void;

		/** Returns the band's gain at the specified index, in dB. */
		get_band_gain_db(band_idx: number) : number;

		/** Returns the number of bands of the equalizer. */
		get_band_count() : number;
	}
	namespace AudioEffectEQ {
	}

	/** Adds a 10-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 31 Hz to 16000 Hz.

	 Each frequency can be modulated between -60/+24 dB.
	 Frequency bands:

	 Band 1: 31 Hz

	 Band 2: 62 Hz

	 Band 3: 125 Hz

	 Band 4: 250 Hz

	 Band 5: 500 Hz

	 Band 6: 1000 Hz

	 Band 7: 2000 Hz

	 Band 8: 4000 Hz

	 Band 9: 8000 Hz

	 Band 10: 16000 Hz

	 See also `AudioEffectEQ`, `AudioEffectEQ6`, `AudioEffectEQ21`. */
	class AudioEffectEQ10 extends AudioEffectEQ {
	}
	namespace AudioEffectEQ10 {
	}

	/** Adds a 21-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 22 Hz to 22000 Hz.

	 Each frequency can be modulated between -60/+24 dB.
	 Frequency bands:

	 Band 1: 22 Hz

	 Band 2: 32 Hz

	 Band 3: 44 Hz

	 Band 4: 63 Hz

	 Band 5: 90 Hz

	 Band 6: 125 Hz

	 Band 7: 175 Hz

	 Band 8: 250 Hz

	 Band 9: 350 Hz

	 Band 10: 500 Hz

	 Band 11: 700 Hz

	 Band 12: 1000 Hz

	 Band 13: 1400 Hz

	 Band 14: 2000 Hz

	 Band 15: 2800 Hz

	 Band 16: 4000 Hz

	 Band 17: 5600 Hz

	 Band 18: 8000 Hz

	 Band 19: 11000 Hz

	 Band 20: 16000 Hz

	 Band 21: 22000 Hz

	 See also `AudioEffectEQ`, `AudioEffectEQ6`, `AudioEffectEQ10`. */
	class AudioEffectEQ21 extends AudioEffectEQ {
	}
	namespace AudioEffectEQ21 {
	}

	/** Adds a 6-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 32 Hz to 10000 Hz.

	 Each frequency can be modulated between -60/+24 dB.
	 Frequency bands:

	 Band 1: 32 Hz

	 Band 2: 100 Hz

	 Band 3: 320 Hz

	 Band 4: 1000 Hz

	 Band 5: 3200 Hz

	 Band 6: 10000 Hz

	 See also `AudioEffectEQ`, `AudioEffectEQ10`, `AudioEffectEQ21`. */
	class AudioEffectEQ6 extends AudioEffectEQ {
	}
	namespace AudioEffectEQ6 {
	}

	/** Adds a filter to the audio bus.
	 Allows frequencies other than the `cutoff_hz` to pass. */
	class AudioEffectFilter extends AudioEffect {

		/** Threshold frequency for the filter, in Hz. */
		cutoff_hz: number;

		/** Amount of boost in the overtones near the cutoff frequency. */
		resonance: number;

		/** Gain amount of the frequencies after the filter. */
		gain: number;

		/**  */
		db: number;

		/** Getter of `cutoff_hz` property */
		get_cutoff() : number;

		/** Setter of `cutoff_hz` property */
		set_cutoff(p_value: number) : void;

		/** Getter of `resonance` property */
		get_resonance() : number;

		/** Setter of `resonance` property */
		set_resonance(p_value: number) : void;

		/** Getter of `gain` property */
		get_gain() : number;

		/** Setter of `gain` property */
		set_gain(p_value: number) : void;

		/** Getter of `db` property */
		get_db() : number;

		/** Setter of `db` property */
		set_db(p_value: number) : void;
	}
	namespace AudioEffectFilter {
		enum FilterDB {
			/**  */
			FILTER_6DB = 0,
			/**  */
			FILTER_12DB = 1,
			/**  */
			FILTER_18DB = 2,
			/**  */
			FILTER_24DB = 3,
		}

		/**  */
		const FILTER_6DB: FilterDB.FILTER_6DB;

		/**  */
		const FILTER_12DB: FilterDB.FILTER_12DB;

		/**  */
		const FILTER_18DB: FilterDB.FILTER_18DB;

		/**  */
		const FILTER_24DB: FilterDB.FILTER_24DB;
	}

	/** Adds a high-pass filter to the Audio Bus.
	 Cuts frequencies lower than the `AudioEffectFilter.cutoff_hz` and allows higher frequencies to pass. */
	class AudioEffectHighPassFilter extends AudioEffectFilter {
	}
	namespace AudioEffectHighPassFilter {
	}

	/** 
	  */
	class AudioEffectHighShelfFilter extends AudioEffectFilter {
	}
	namespace AudioEffectHighShelfFilter {
	}

	/** 
	  */
	class AudioEffectInstance extends Reference {
	}
	namespace AudioEffectInstance {
	}

	/** Adds a soft-clip limiter audio effect to an Audio bus.
	 A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master bus is always recommended to reduce the effects of clipping.

	 Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded. */
	class AudioEffectLimiter extends AudioEffect {

		/** The waveform's maximum allowed value, in decibels. Value can range from -20 to -0.1. */
		ceiling_db: number;

		/** Threshold from which the limiter begins to be active, in decibels. Value can range from -30 to 0. */
		threshold_db: number;

		/** Applies a gain to the limited waves, in decibels. Value can range from 0 to 6. */
		soft_clip_db: number;

		/**  */
		soft_clip_ratio: number;

		/** Getter of `ceiling_db` property */
		get_ceiling_db() : number;

		/** Setter of `ceiling_db` property */
		set_ceiling_db(p_value: number) : void;

		/** Getter of `threshold_db` property */
		get_threshold_db() : number;

		/** Setter of `threshold_db` property */
		set_threshold_db(p_value: number) : void;

		/** Getter of `soft_clip_db` property */
		get_soft_clip_db() : number;

		/** Setter of `soft_clip_db` property */
		set_soft_clip_db(p_value: number) : void;

		/** Getter of `soft_clip_ratio` property */
		get_soft_clip_ratio() : number;

		/** Setter of `soft_clip_ratio` property */
		set_soft_clip_ratio(p_value: number) : void;
	}
	namespace AudioEffectLimiter {
	}

	/** Adds a low-pass filter to the Audio bus.
	 Cuts frequencies higher than the `AudioEffectFilter.cutoff_hz` and allows lower frequencies to pass. */
	class AudioEffectLowPassFilter extends AudioEffectFilter {
	}
	namespace AudioEffectLowPassFilter {
	}

	/** 
	  */
	class AudioEffectLowShelfFilter extends AudioEffectFilter {
	}
	namespace AudioEffectLowShelfFilter {
	}

	/** Adds a notch filter to the Audio bus.
	 Attenuates frequencies in a narrow band around the `AudioEffectFilter.cutoff_hz` and cuts frequencies outside of this range. */
	class AudioEffectNotchFilter extends AudioEffectFilter {
	}
	namespace AudioEffectNotchFilter {
	}

	/** Adds a panner audio effect to an Audio bus. Pans sound left or right.
	 Determines how much of an audio signal is sent to the left and right buses. */
	class AudioEffectPanner extends AudioEffect {

		/** Pan position. Value can range from -1 (fully left) to 1 (fully right). */
		pan: number;

		/** Getter of `pan` property */
		get_pan() : number;

		/** Setter of `pan` property */
		set_pan(p_value: number) : void;
	}
	namespace AudioEffectPanner {
	}

	/** Adds a phaser audio effect to an Audio bus.

	 Combines the original signal with a copy that is slightly out of phase with the original.
	 Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a low-frequency oscillator. */
	class AudioEffectPhaser extends AudioEffect {

		/** Determines the minimum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000. */
		range_min_hz: number;

		/** Determines the maximum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000. */
		range_max_hz: number;

		/** Adjusts the rate in Hz at which the effect sweeps up and down across the frequency range. */
		rate_hz: number;

		/** Output percent of modified sound. Value can range from 0.1 to 0.9. */
		feedback: number;

		/** Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. */
		depth: number;

		/** Getter of `range_min_hz` property */
		get_range_min_hz() : number;

		/** Setter of `range_min_hz` property */
		set_range_min_hz(p_value: number) : void;

		/** Getter of `range_max_hz` property */
		get_range_max_hz() : number;

		/** Setter of `range_max_hz` property */
		set_range_max_hz(p_value: number) : void;

		/** Getter of `rate_hz` property */
		get_rate_hz() : number;

		/** Setter of `rate_hz` property */
		set_rate_hz(p_value: number) : void;

		/** Getter of `feedback` property */
		get_feedback() : number;

		/** Setter of `feedback` property */
		set_feedback(p_value: number) : void;

		/** Getter of `depth` property */
		get_depth() : number;

		/** Setter of `depth` property */
		set_depth(p_value: number) : void;
	}
	namespace AudioEffectPhaser {
	}

	/** Adds a pitch-shifting audio effect to an Audio bus.

	 Raises or lowers the pitch of original sound.
	 Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients. */
	class AudioEffectPitchShift extends AudioEffect {

		/** Pitch value. Can range from 0 (-1 octave) to 16 (+16 octaves). */
		pitch_scale: number;

		/**  */
		oversampling: number;

		/**  */
		fft_size: number;

		/** Getter of `pitch_scale` property */
		get_pitch_scale() : number;

		/** Setter of `pitch_scale` property */
		set_pitch_scale(p_value: number) : void;

		/** Getter of `oversampling` property */
		get_oversampling() : number;

		/** Setter of `oversampling` property */
		set_oversampling(p_value: number) : void;

		/** Getter of `fft_size` property */
		get_fft_size() : number;

		/** Setter of `fft_size` property */
		set_fft_size(p_value: number) : void;
	}
	namespace AudioEffectPitchShift {
		enum FFT_Size {
			/**  */
			FFT_SIZE_256 = 0,
			/**  */
			FFT_SIZE_512 = 1,
			/**  */
			FFT_SIZE_1024 = 2,
			/**  */
			FFT_SIZE_2048 = 3,
			/**  */
			FFT_SIZE_4096 = 4,
			/** Represents the size of the `FFT_Size` enum. */
			FFT_SIZE_MAX = 5,
		}

		/**  */
		const FFT_SIZE_256: FFT_Size.FFT_SIZE_256;

		/**  */
		const FFT_SIZE_512: FFT_Size.FFT_SIZE_512;

		/**  */
		const FFT_SIZE_1024: FFT_Size.FFT_SIZE_1024;

		/**  */
		const FFT_SIZE_2048: FFT_Size.FFT_SIZE_2048;

		/**  */
		const FFT_SIZE_4096: FFT_Size.FFT_SIZE_4096;

		/** Represents the size of the `FFT_Size` enum. */
		const FFT_SIZE_MAX: FFT_Size.FFT_SIZE_MAX;
	}

	/** Audio effect used for recording sound from a microphone.
	 Allows the user to record sound from a microphone. It sets and gets the format in which the audio file will be recorded (8-bit, 16-bit, or compressed). It checks whether or not the recording is active, and if it is, records the sound. It then returns the recorded sample. */
	class AudioEffectRecord extends AudioEffect {

		/** Specifies the format in which the sample will be recorded. See `AudioStreamSample.Format` for available formats. */
		format: number;

		/** If `true`, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample. */
		set_recording_active(record: boolean) : void;

		/** Returns whether the recording is active or not. */
		is_recording_active() : boolean;

		/** Returns the recorded sample. */
		get_recording() : AudioStreamSample;

		/** Getter of `format` property */
		get_format() : number;

		/** Setter of `format` property */
		set_format(p_value: number) : void;
	}
	namespace AudioEffectRecord {
	}

	/** Adds a reverberation audio effect to an Audio bus.

	 Simulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.
	 Simulates rooms of different sizes. Its parameters can be adjusted to simulate the sound of a specific room. */
	class AudioEffectReverb extends AudioEffect {

		/** Time between the original signal and the early reflections of the reverb signal, in milliseconds. */
		predelay_msec: number;

		/** Output percent of predelay. Value can range from 0 to 1. */
		predelay_feedback: number;

		/** Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. */
		room_size: number;

		/** Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. */
		damping: number;

		/** Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. */
		spread: number;

		/** High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. */
		hipass: number;

		/** Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. */
		dry: number;

		/** Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1. */
		wet: number;

		/** Getter of `predelay_msec` property */
		get_predelay_msec() : number;

		/** Setter of `predelay_msec` property */
		set_predelay_msec(p_value: number) : void;

		/** Getter of `predelay_feedback` property */
		get_predelay_feedback() : number;

		/** Setter of `predelay_feedback` property */
		set_predelay_feedback(p_value: number) : void;

		/** Getter of `room_size` property */
		get_room_size() : number;

		/** Setter of `room_size` property */
		set_room_size(p_value: number) : void;

		/** Getter of `damping` property */
		get_damping() : number;

		/** Setter of `damping` property */
		set_damping(p_value: number) : void;

		/** Getter of `spread` property */
		get_spread() : number;

		/** Setter of `spread` property */
		set_spread(p_value: number) : void;

		/** Getter of `hipass` property */
		get_hpf() : number;

		/** Setter of `hipass` property */
		set_hpf(p_value: number) : void;

		/** Getter of `dry` property */
		get_dry() : number;

		/** Setter of `dry` property */
		set_dry(p_value: number) : void;

		/** Getter of `wet` property */
		get_wet() : number;

		/** Setter of `wet` property */
		set_wet(p_value: number) : void;
	}
	namespace AudioEffectReverb {
	}

	/** 
	  */
	class AudioEffectSpectrumAnalyzer extends AudioEffect {

		/**  */
		buffer_length: number;

		/**  */
		tap_back_pos: number;

		/**  */
		fft_size: number;

		/** Getter of `buffer_length` property */
		get_buffer_length() : number;

		/** Setter of `buffer_length` property */
		set_buffer_length(p_value: number) : void;

		/** Getter of `tap_back_pos` property */
		get_tap_back_pos() : number;

		/** Setter of `tap_back_pos` property */
		set_tap_back_pos(p_value: number) : void;

		/** Getter of `fft_size` property */
		get_fft_size() : number;

		/** Setter of `fft_size` property */
		set_fft_size(p_value: number) : void;
	}
	namespace AudioEffectSpectrumAnalyzer {
		enum FFT_Size {
			/**  */
			FFT_SIZE_256 = 0,
			/**  */
			FFT_SIZE_512 = 1,
			/**  */
			FFT_SIZE_1024 = 2,
			/**  */
			FFT_SIZE_2048 = 3,
			/**  */
			FFT_SIZE_4096 = 4,
			/** Represents the size of the `FFT_Size` enum. */
			FFT_SIZE_MAX = 5,
		}

		/**  */
		const FFT_SIZE_256: FFT_Size.FFT_SIZE_256;

		/**  */
		const FFT_SIZE_512: FFT_Size.FFT_SIZE_512;

		/**  */
		const FFT_SIZE_1024: FFT_Size.FFT_SIZE_1024;

		/**  */
		const FFT_SIZE_2048: FFT_Size.FFT_SIZE_2048;

		/**  */
		const FFT_SIZE_4096: FFT_Size.FFT_SIZE_4096;

		/** Represents the size of the `FFT_Size` enum. */
		const FFT_SIZE_MAX: FFT_Size.FFT_SIZE_MAX;
	}

	/** 
	  */
	class AudioEffectSpectrumAnalyzerInstance extends AudioEffectInstance {

		/**  */
		//@ts-ignore
		get_magnitude_for_frequency_range(from_hz: number, to_hz: number, mode: AudioEffectSpectrumAnalyzerInstance.MagnitudeMode = 1) : Vector2;
	}
	namespace AudioEffectSpectrumAnalyzerInstance {
		enum MagnitudeMode {
			/** Use the average value as magnitude. */
			MAGNITUDE_AVERAGE = 0,
			/** Use the maximum value as magnitude. */
			MAGNITUDE_MAX = 1,
		}

		/** Use the average value as magnitude. */
		const MAGNITUDE_AVERAGE: MagnitudeMode.MAGNITUDE_AVERAGE;

		/** Use the maximum value as magnitude. */
		const MAGNITUDE_MAX: MagnitudeMode.MAGNITUDE_MAX;
	}

	/** 
	  */
	class AudioEffectStereoEnhance extends AudioEffect {

		/**  */
		pan_pullout: number;

		/**  */
		time_pullout_ms: number;

		/**  */
		surround: number;

		/** Getter of `pan_pullout` property */
		get_pan_pullout() : number;

		/** Setter of `pan_pullout` property */
		set_pan_pullout(p_value: number) : void;

		/** Getter of `time_pullout_ms` property */
		get_time_pullout() : number;

		/** Setter of `time_pullout_ms` property */
		set_time_pullout(p_value: number) : void;

		/** Getter of `surround` property */
		get_surround() : number;

		/** Setter of `surround` property */
		set_surround(p_value: number) : void;
	}
	namespace AudioEffectStereoEnhance {
	}

	/** Server interface for low-level audio access.
	 `AudioServer` is a low-level server interface for audio access. It is in charge of creating sample data (playable audio) as well as its playback via a voice interface. */
	class AudioServer extends Object {

		/** Number of available audio buses. */
		static bus_count: number;

		/** Name of the current device for audio output (see `get_device_list`). */
		static device: string;

		/** Scales the rate at which audio is played (i.e. setting it to `0.5` will make the audio be played twice as fast). */
		static global_rate_scale: number;

		/** Removes the bus at index `index`. */
		static remove_bus(index: number) : void;

		/** Adds a bus at `at_position`. */
		//@ts-ignore
		static add_bus(at_position: number = -1) : void;

		/** Moves the bus from index `index` to index `to_index`. */
		static move_bus(index: number, to_index: number) : void;

		/** Sets the name of the bus at index `bus_idx` to `name`. */
		static set_bus_name(bus_idx: number, name: string) : void;

		/** Returns the name of the bus with the index `bus_idx`. */
		static get_bus_name(bus_idx: number) : string;

		/** Returns the index of the bus with the name `bus_name`. */
		static get_bus_index(bus_name: string) : number;

		/** Returns the amount of channels of the bus at index `bus_idx`. */
		static get_bus_channels(bus_idx: number) : number;

		/** Sets the volume of the bus at index `bus_idx` to `volume_db`. */
		static set_bus_volume_db(bus_idx: number, volume_db: number) : void;

		/** Returns the volume of the bus at index `bus_idx` in dB. */
		static get_bus_volume_db(bus_idx: number) : number;

		/** Connects the output of the bus at `bus_idx` to the bus named `send`. */
		static set_bus_send(bus_idx: number, send: string) : void;

		/** Returns the name of the bus that the bus at index `bus_idx` sends to. */
		static get_bus_send(bus_idx: number) : string;

		/** If `true`, the bus at index `bus_idx` is in solo mode. */
		static set_bus_solo(bus_idx: number, enable: boolean) : void;

		/** If `true`, the bus at index `bus_idx` is in solo mode. */
		static is_bus_solo(bus_idx: number) : boolean;

		/** If `true`, the bus at index `bus_idx` is muted. */
		static set_bus_mute(bus_idx: number, enable: boolean) : void;

		/** If `true`, the bus at index `bus_idx` is muted. */
		static is_bus_mute(bus_idx: number) : boolean;

		/** If `true`, the bus at index `bus_idx` is bypassing effects. */
		static set_bus_bypass_effects(bus_idx: number, enable: boolean) : void;

		/** If `true`, the bus at index `bus_idx` is bypassing effects. */
		static is_bus_bypassing_effects(bus_idx: number) : boolean;

		/** Adds an `AudioEffect` effect to the bus `bus_idx` at `at_position`. */
		//@ts-ignore
		static add_bus_effect(bus_idx: number, effect: AudioEffect, at_position: number = -1) : void;

		/** Removes the effect at index `effect_idx` from the bus at index `bus_idx`. */
		static remove_bus_effect(bus_idx: number, effect_idx: number) : void;

		/** Returns the number of effects on the bus at `bus_idx`. */
		static get_bus_effect_count(bus_idx: number) : number;

		/** Returns the `AudioEffect` at position `effect_idx` in bus `bus_idx`. */
		static get_bus_effect(bus_idx: number, effect_idx: number) : AudioEffect;

		/** Returns the `AudioEffectInstance` assigned to the given bus and effect indices (and optionally channel). */
		//@ts-ignore
		static get_bus_effect_instance(bus_idx: number, effect_idx: number, channel: number = 0) : AudioEffectInstance;

		/** Swaps the position of two effects in bus `bus_idx`. */
		static swap_bus_effects(bus_idx: number, effect_idx: number, by_effect_idx: number) : void;

		/** If `true`, the effect at index `effect_idx` on the bus at index `bus_idx` is enabled. */
		static set_bus_effect_enabled(bus_idx: number, effect_idx: number, enabled: boolean) : void;

		/** If `true`, the effect at index `effect_idx` on the bus at index `bus_idx` is enabled. */
		static is_bus_effect_enabled(bus_idx: number, effect_idx: number) : boolean;

		/** Returns the peak volume of the left speaker at bus index `bus_idx` and channel index `channel`. */
		static get_bus_peak_volume_left_db(bus_idx: number, channel: number) : number;

		/** Returns the peak volume of the right speaker at bus index `bus_idx` and channel index `channel`. */
		static get_bus_peak_volume_right_db(bus_idx: number, channel: number) : number;

		/** Locks the audio driver's main loop.

		 **Note:** Remember to unlock it afterwards. */
		static lock() : void;

		/** Unlocks the audio driver's main loop. (After locking it, you should always unlock it.) */
		static unlock() : void;

		/** Returns the speaker configuration. */
		static get_speaker_mode() : number;

		/** Returns the sample rate at the output of the `AudioServer`. */
		static get_mix_rate() : number;

		/** Returns the names of all audio devices detected on the system. */
		static get_device_list() : any[];

		/** Returns the relative time until the next mix occurs. */
		static get_time_to_next_mix() : number;

		/** Returns the relative time since the last mix occurred. */
		static get_time_since_last_mix() : number;

		/** Returns the audio driver's output latency. */
		static get_output_latency() : number;

		/** Returns the names of all audio input devices detected on the system. */
		static capture_get_device_list() : any[];

		/** Name of the current device for audio input (see `capture_get_device_list`). */
		static capture_get_device() : string;

		/** Sets which audio input device is used for audio capture. */
		static capture_set_device(name: string) : void;

		/** Overwrites the currently used `AudioBusLayout`. */
		static set_bus_layout(bus_layout: AudioBusLayout) : void;

		/** Generates an `AudioBusLayout` using the available buses and effects. */
		static generate_bus_layout() : AudioBusLayout;

		/** Getter of `bus_count` property */
		static get_bus_count() : number;

		/** Setter of `bus_count` property */
		static set_bus_count(p_value: number) : void;

		/** Getter of `device` property */
		static get_device() : string;

		/** Setter of `device` property */
		static set_device(p_value: string) : void;

		/** Getter of `global_rate_scale` property */
		static get_global_rate_scale() : number;

		/** Setter of `global_rate_scale` property */
		static set_global_rate_scale(p_value: number) : void;
	}
	namespace AudioServer {

		/** Emitted when the `AudioBusLayout` changes. */
		const bus_layout_changed: 'bus_layout_changed';
		enum SpeakerMode {
			/** Two or fewer speakers were detected. */
			SPEAKER_MODE_STEREO = 0,
			/** A 3.1 channel surround setup was detected. */
			SPEAKER_SURROUND_31 = 1,
			/** A 5.1 channel surround setup was detected. */
			SPEAKER_SURROUND_51 = 2,
			/** A 7.1 channel surround setup was detected. */
			SPEAKER_SURROUND_71 = 3,
		}

		/** Two or fewer speakers were detected. */
		const SPEAKER_MODE_STEREO: SpeakerMode.SPEAKER_MODE_STEREO;

		/** A 3.1 channel surround setup was detected. */
		const SPEAKER_SURROUND_31: SpeakerMode.SPEAKER_SURROUND_31;

		/** A 5.1 channel surround setup was detected. */
		const SPEAKER_SURROUND_51: SpeakerMode.SPEAKER_SURROUND_51;

		/** A 7.1 channel surround setup was detected. */
		const SPEAKER_SURROUND_71: SpeakerMode.SPEAKER_SURROUND_71;
	}

	/** Base class for audio streams.
	 Base class for audio streams. Audio streams are used for sound effects and music playback, and support WAV (via `AudioStreamSample`) and OGG (via `AudioStreamOGGVorbis`) file formats. */
	class AudioStream extends Resource {

		/** Returns the length of the audio stream in seconds. */
		get_length() : number;
	}
	namespace AudioStream {
	}

	/** 
	  */
	class AudioStreamGenerator extends AudioStream {

		/**  */
		mix_rate: number;

		/**  */
		buffer_length: number;

		/** Getter of `mix_rate` property */
		get_mix_rate() : number;

		/** Setter of `mix_rate` property */
		set_mix_rate(p_value: number) : void;

		/** Getter of `buffer_length` property */
		get_buffer_length() : number;

		/** Setter of `buffer_length` property */
		set_buffer_length(p_value: number) : void;
	}
	namespace AudioStreamGenerator {
	}

	/** 
	  */
	class AudioStreamGeneratorPlayback extends AudioStreamPlaybackResampled {

		/**  */
		push_frame(frame: Vector2) : boolean;

		/**  */
		can_push_buffer(amount: number) : boolean;

		/**  */
		push_buffer(frames: PoolVector2Array) : boolean;

		/**  */
		get_frames_available() : number;

		/**  */
		get_skips() : number;

		/**  */
		clear_buffer() : void;
	}
	namespace AudioStreamGeneratorPlayback {
	}

	/** 
	  */
	class AudioStreamMicrophone extends AudioStream {
	}
	namespace AudioStreamMicrophone {
	}

	/** OGG Vorbis audio stream driver.
	  */
	class AudioStreamOGGVorbis extends AudioStream {

		/** Contains the audio data in bytes. */
		data: PoolByteArray;

		/** If `true`, the stream will automatically loop when it reaches the end. */
		loop: boolean;

		/** Time in seconds at which the stream starts after being looped. */
		loop_offset: number;

		/** Getter of `data` property */
		get_data() : PoolByteArray;

		/** Setter of `data` property */
		set_data(p_value: PoolByteArray) : void;

		/** Getter of `loop` property */
		has_loop() : boolean;

		/** Setter of `loop` property */
		set_loop(p_value: boolean) : void;

		/** Getter of `loop_offset` property */
		get_loop_offset() : number;

		/** Setter of `loop_offset` property */
		set_loop_offset(p_value: number) : void;
	}
	namespace AudioStreamOGGVorbis {
	}

	/** Meta class for playing back audio.
	 Can play, loop, pause a scroll through audio. See `AudioStream` and `AudioStreamOGGVorbis` for usage. */
	class AudioStreamPlayback extends Reference {
	}
	namespace AudioStreamPlayback {
	}

	/** 
	  */
	class AudioStreamPlaybackResampled extends AudioStreamPlayback {
	}
	namespace AudioStreamPlaybackResampled {
	}

	/** Plays back audio non-positionally.
	 Plays an audio stream non-positionally. */
	class AudioStreamPlayer extends Node {

		/** The `AudioStream` object to be played. */
		stream: AudioStream;

		/** Volume of sound, in dB. */
		volume_db: number;

		/** The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate. */
		pitch_scale: number;

		/** If `true`, audio is playing. */
		playing: boolean;

		/** If `true`, audio plays when added to scene tree. */
		autoplay: boolean;

		/** If `true`, the playback is paused. You can resume it by setting `stream_paused` to `false`. */
		stream_paused: boolean;

		/** If the audio configuration has more than two speakers, this sets the target channels. See `MixTarget` constants. */
		mix_target: number;

		/** Bus on which this audio is playing. */
		bus: string;

		/** Plays the audio from the given `from_position`, in seconds. */
		//@ts-ignore
		play(from_position: number = 0.0) : void;

		/** Sets the position from which audio will be played, in seconds. */
		seek(to_position: number) : void;

		/** Stops the audio. */
		stop() : void;

		/** Returns the position in the `AudioStream` in seconds. */
		get_playback_position() : number;

		/** Returns the `AudioStreamPlayback` object associated with this `AudioStreamPlayer`. */
		get_stream_playback() : AudioStreamPlayback;

		/** Getter of `stream` property */
		get_stream() : AudioStream;

		/** Setter of `stream` property */
		set_stream(p_value: AudioStream) : void;

		/** Getter of `volume_db` property */
		get_volume_db() : number;

		/** Setter of `volume_db` property */
		set_volume_db(p_value: number) : void;

		/** Getter of `pitch_scale` property */
		get_pitch_scale() : number;

		/** Setter of `pitch_scale` property */
		set_pitch_scale(p_value: number) : void;

		/** Getter of `playing` property */
		is_playing() : boolean;

		/** Setter of `playing` property */
		_set_playing(p_value: boolean) : void;

		/** Getter of `autoplay` property */
		is_autoplay_enabled() : boolean;

		/** Setter of `autoplay` property */
		set_autoplay(p_value: boolean) : void;

		/** Getter of `stream_paused` property */
		get_stream_paused() : boolean;

		/** Setter of `stream_paused` property */
		set_stream_paused(p_value: boolean) : void;

		/** Getter of `mix_target` property */
		get_mix_target() : number;

		/** Setter of `mix_target` property */
		set_mix_target(p_value: number) : void;

		/** Getter of `bus` property */
		get_bus() : string;

		/** Setter of `bus` property */
		set_bus(p_value: string) : void;
	}
	namespace AudioStreamPlayer {

		/** Emitted when the audio stops playing. */
		const finished: 'finished';
		enum MixTarget {
			/** The audio will be played only on the first channel. */
			MIX_TARGET_STEREO = 0,
			/** The audio will be played on all surround channels. */
			MIX_TARGET_SURROUND = 1,
			/** The audio will be played on the second channel, which is usually the center. */
			MIX_TARGET_CENTER = 2,
		}

		/** The audio will be played only on the first channel. */
		const MIX_TARGET_STEREO: MixTarget.MIX_TARGET_STEREO;

		/** The audio will be played on all surround channels. */
		const MIX_TARGET_SURROUND: MixTarget.MIX_TARGET_SURROUND;

		/** The audio will be played on the second channel, which is usually the center. */
		const MIX_TARGET_CENTER: MixTarget.MIX_TARGET_CENTER;
	}

	/** Plays audio in 2D.
	 Plays audio that dampens with distance from screen center. */
	class AudioStreamPlayer2D extends Node2D {

		/** The `AudioStream` object to be played. */
		stream: AudioStream;

		/** Base volume without dampening. */
		volume_db: number;

		/** The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate. */
		pitch_scale: number;

		/** If `true`, audio is playing. */
		playing: boolean;

		/** If `true`, audio plays when added to scene tree. */
		autoplay: boolean;

		/** If `true`, the playback is paused. You can resume it by setting `stream_paused` to `false`. */
		stream_paused: boolean;

		/** Maximum distance from which audio is still hearable. */
		max_distance: number;

		/** Dampens audio over distance with this as an exponent. */
		attenuation: number;

		/** Bus on which this audio is playing. */
		bus: string;

		/** Areas in which this sound plays. */
		area_mask: number;

		/** Plays the audio from the given position `from_position`, in seconds. */
		//@ts-ignore
		play(from_position: number = 0.0) : void;

		/** Sets the position from which audio will be played, in seconds. */
		seek(to_position: number) : void;

		/** Stops the audio. */
		stop() : void;

		/** Returns the position in the `AudioStream`. */
		get_playback_position() : number;

		/** Returns the `AudioStreamPlayback` object associated with this `AudioStreamPlayer2D`. */
		get_stream_playback() : AudioStreamPlayback;

		/** Getter of `stream` property */
		get_stream() : AudioStream;

		/** Setter of `stream` property */
		set_stream(p_value: AudioStream) : void;

		/** Getter of `volume_db` property */
		get_volume_db() : number;

		/** Setter of `volume_db` property */
		set_volume_db(p_value: number) : void;

		/** Getter of `pitch_scale` property */
		get_pitch_scale() : number;

		/** Setter of `pitch_scale` property */
		set_pitch_scale(p_value: number) : void;

		/** Getter of `playing` property */
		is_playing() : boolean;

		/** Setter of `playing` property */
		_set_playing(p_value: boolean) : void;

		/** Getter of `autoplay` property */
		is_autoplay_enabled() : boolean;

		/** Setter of `autoplay` property */
		set_autoplay(p_value: boolean) : void;

		/** Getter of `stream_paused` property */
		get_stream_paused() : boolean;

		/** Setter of `stream_paused` property */
		set_stream_paused(p_value: boolean) : void;

		/** Getter of `max_distance` property */
		get_max_distance() : number;

		/** Setter of `max_distance` property */
		set_max_distance(p_value: number) : void;

		/** Getter of `attenuation` property */
		get_attenuation() : number;

		/** Setter of `attenuation` property */
		set_attenuation(p_value: number) : void;

		/** Getter of `bus` property */
		get_bus() : string;

		/** Setter of `bus` property */
		set_bus(p_value: string) : void;

		/** Getter of `area_mask` property */
		get_area_mask() : number;

		/** Setter of `area_mask` property */
		set_area_mask(p_value: number) : void;
	}
	namespace AudioStreamPlayer2D {

		/** Emitted when the audio stops playing. */
		const finished: 'finished';
	}

	/** Plays 3D sound in 3D space.
	 Plays a sound effect with directed sound effects, dampens with distance if needed, generates effect of hearable position in space. */
	class AudioStreamPlayer3D extends Spatial {

		/** The `AudioStream` object to be played. */
		stream: AudioStream;

		/** Decides if audio should get quieter with distance linearly, quadratically, logarithmically, or not be affected by distance, effectively disabling attenuation. */
		attenuation_model: number;

		/** Base sound level unaffected by dampening, in dB. */
		unit_db: number;

		/** Factor for the attenuation effect. */
		unit_size: number;

		/** Sets the absolute maximum of the soundlevel, in dB. */
		max_db: number;

		/** The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate. */
		pitch_scale: number;

		/** If `true`, audio is playing. */
		playing: boolean;

		/** If `true`, audio plays when added to scene tree. */
		autoplay: boolean;

		/** If `true`, the playback is paused. You can resume it by setting `stream_paused` to `false`. */
		stream_paused: boolean;

		/** Sets the distance from which the `out_of_range_mode` takes effect. Has no effect if set to 0. */
		max_distance: number;

		/** Decides if audio should pause when source is outside of `max_distance` range. */
		out_of_range_mode: number;

		/** Bus on which this audio is playing. */
		bus: string;

		/** Areas in which this sound plays. */
		area_mask: number;

		/** If `true`, the audio should be dampened according to the direction of the sound. */
		emission_angle_enabled: boolean;

		/** The angle in which the audio reaches cameras undampened. */
		emission_angle_degrees: number;

		/** Dampens audio if camera is outside of `emission_angle_degrees` and `emission_angle_enabled` is set by this factor, in dB. */
		emission_angle_filter_attenuation_db: number;

		/** Dampens audio above this frequency, in Hz. */
		attenuation_filter_cutoff_hz: number;

		/** Amount how much the filter affects the loudness, in dB. */
		attenuation_filter_db: number;

		/** Decides in which step the Doppler effect should be calculated. */
		doppler_tracking: number;

		/** Plays the audio from the given position `from_position`, in seconds. */
		//@ts-ignore
		play(from_position: number = 0.0) : void;

		/** Sets the position from which audio will be played, in seconds. */
		seek(to_position: number) : void;

		/** Stops the audio. */
		stop() : void;

		/** Returns the position in the `AudioStream`. */
		get_playback_position() : number;

		/** Returns the `AudioStreamPlayback` object associated with this `AudioStreamPlayer3D`. */
		get_stream_playback() : AudioStreamPlayback;

		/** Getter of `stream` property */
		get_stream() : AudioStream;

		/** Setter of `stream` property */
		set_stream(p_value: AudioStream) : void;

		/** Getter of `attenuation_model` property */
		get_attenuation_model() : number;

		/** Setter of `attenuation_model` property */
		set_attenuation_model(p_value: number) : void;

		/** Getter of `unit_db` property */
		get_unit_db() : number;

		/** Setter of `unit_db` property */
		set_unit_db(p_value: number) : void;

		/** Getter of `unit_size` property */
		get_unit_size() : number;

		/** Setter of `unit_size` property */
		set_unit_size(p_value: number) : void;

		/** Getter of `max_db` property */
		get_max_db() : number;

		/** Setter of `max_db` property */
		set_max_db(p_value: number) : void;

		/** Getter of `pitch_scale` property */
		get_pitch_scale() : number;

		/** Setter of `pitch_scale` property */
		set_pitch_scale(p_value: number) : void;

		/** Getter of `playing` property */
		is_playing() : boolean;

		/** Setter of `playing` property */
		_set_playing(p_value: boolean) : void;

		/** Getter of `autoplay` property */
		is_autoplay_enabled() : boolean;

		/** Setter of `autoplay` property */
		set_autoplay(p_value: boolean) : void;

		/** Getter of `stream_paused` property */
		get_stream_paused() : boolean;

		/** Setter of `stream_paused` property */
		set_stream_paused(p_value: boolean) : void;

		/** Getter of `max_distance` property */
		get_max_distance() : number;

		/** Setter of `max_distance` property */
		set_max_distance(p_value: number) : void;

		/** Getter of `out_of_range_mode` property */
		get_out_of_range_mode() : number;

		/** Setter of `out_of_range_mode` property */
		set_out_of_range_mode(p_value: number) : void;

		/** Getter of `bus` property */
		get_bus() : string;

		/** Setter of `bus` property */
		set_bus(p_value: string) : void;

		/** Getter of `area_mask` property */
		get_area_mask() : number;

		/** Setter of `area_mask` property */
		set_area_mask(p_value: number) : void;

		/** Getter of `emission_angle_enabled` property */
		is_emission_angle_enabled() : boolean;

		/** Setter of `emission_angle_enabled` property */
		set_emission_angle_enabled(p_value: boolean) : void;

		/** Getter of `emission_angle_degrees` property */
		get_emission_angle() : number;

		/** Setter of `emission_angle_degrees` property */
		set_emission_angle(p_value: number) : void;

		/** Getter of `emission_angle_filter_attenuation_db` property */
		get_emission_angle_filter_attenuation_db() : number;

		/** Setter of `emission_angle_filter_attenuation_db` property */
		set_emission_angle_filter_attenuation_db(p_value: number) : void;

		/** Getter of `attenuation_filter_cutoff_hz` property */
		get_attenuation_filter_cutoff_hz() : number;

		/** Setter of `attenuation_filter_cutoff_hz` property */
		set_attenuation_filter_cutoff_hz(p_value: number) : void;

		/** Getter of `attenuation_filter_db` property */
		get_attenuation_filter_db() : number;

		/** Setter of `attenuation_filter_db` property */
		set_attenuation_filter_db(p_value: number) : void;

		/** Getter of `doppler_tracking` property */
		get_doppler_tracking() : number;

		/** Setter of `doppler_tracking` property */
		set_doppler_tracking(p_value: number) : void;
	}
	namespace AudioStreamPlayer3D {

		/** Emitted when the audio stops playing. */
		const finished: 'finished';
		enum AttenuationModel {
			/** Linear dampening of loudness according to distance. */
			ATTENUATION_INVERSE_DISTANCE = 0,
			/** Squared dampening of loudness according to distance. */
			ATTENUATION_INVERSE_SQUARE_DISTANCE = 1,
			/** Logarithmic dampening of loudness according to distance. */
			ATTENUATION_LOGARITHMIC = 2,
			/** No dampening of loudness according to distance. */
			ATTENUATION_DISABLED = 3,
		}
		enum DopplerTracking {
			/** Disables doppler tracking. */
			DOPPLER_TRACKING_DISABLED = 0,
			/** Executes doppler tracking in idle step. */
			DOPPLER_TRACKING_IDLE_STEP = 1,
			/** Executes doppler tracking in physics step. */
			DOPPLER_TRACKING_PHYSICS_STEP = 2,
		}
		enum OutOfRangeMode {
			/** Mix this audio in, even when it's out of range. */
			OUT_OF_RANGE_MIX = 0,
			/** Pause this audio when it gets out of range. */
			OUT_OF_RANGE_PAUSE = 1,
		}

		/** Linear dampening of loudness according to distance. */
		const ATTENUATION_INVERSE_DISTANCE: AttenuationModel.ATTENUATION_INVERSE_DISTANCE;

		/** Squared dampening of loudness according to distance. */
		const ATTENUATION_INVERSE_SQUARE_DISTANCE: AttenuationModel.ATTENUATION_INVERSE_SQUARE_DISTANCE;

		/** Logarithmic dampening of loudness according to distance. */
		const ATTENUATION_LOGARITHMIC: AttenuationModel.ATTENUATION_LOGARITHMIC;

		/** No dampening of loudness according to distance. */
		const ATTENUATION_DISABLED: AttenuationModel.ATTENUATION_DISABLED;

		/** Mix this audio in, even when it's out of range. */
		const OUT_OF_RANGE_MIX: OutOfRangeMode.OUT_OF_RANGE_MIX;

		/** Pause this audio when it gets out of range. */
		const OUT_OF_RANGE_PAUSE: OutOfRangeMode.OUT_OF_RANGE_PAUSE;

		/** Disables doppler tracking. */
		const DOPPLER_TRACKING_DISABLED: DopplerTracking.DOPPLER_TRACKING_DISABLED;

		/** Executes doppler tracking in idle step. */
		const DOPPLER_TRACKING_IDLE_STEP: DopplerTracking.DOPPLER_TRACKING_IDLE_STEP;

		/** Executes doppler tracking in physics step. */
		const DOPPLER_TRACKING_PHYSICS_STEP: DopplerTracking.DOPPLER_TRACKING_PHYSICS_STEP;
	}

	/** Plays audio with random pitch shifting.
	 Randomly varies pitch on each start. */
	class AudioStreamRandomPitch extends AudioStream {

		/** The current `AudioStream`. */
		audio_stream: AudioStream;

		/** The intensity of random pitch variation. */
		random_pitch: number;

		/** Getter of `audio_stream` property */
		get_audio_stream() : AudioStream;

		/** Setter of `audio_stream` property */
		set_audio_stream(p_value: AudioStream) : void;

		/** Getter of `random_pitch` property */
		get_random_pitch() : number;

		/** Setter of `random_pitch` property */
		set_random_pitch(p_value: number) : void;
	}
	namespace AudioStreamRandomPitch {
	}

	/** Stores audio data loaded from WAV files.
	 AudioStreamSample stores sound samples loaded from WAV files. To play the stored sound, use an `AudioStreamPlayer` (for non-positional audio) or `AudioStreamPlayer2D`/`AudioStreamPlayer3D` (for positional audio). The sound can be looped.

	 This class can also be used to store dynamically-generated PCM audio data. */
	class AudioStreamSample extends AudioStream {

		/** Contains the audio data in bytes.

		 **Note:** This property expects signed PCM8 data. To convert unsigned PCM8 to signed PCM8, subtract 128 from each byte. */
		data: PoolByteArray;

		/** Audio format. See `Format` constants for values. */
		format: number;

		/** The loop mode. This information will be imported automatically from the WAV file if present. See `LoopMode` constants for values. */
		loop_mode: number;

		/** The loop start point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present. */
		loop_begin: number;

		/** The loop end point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present. */
		loop_end: number;

		/** The sample rate for mixing this audio. */
		mix_rate: number;

		/** If `true`, audio is stereo. */
		stereo: boolean;

		/** Saves the AudioStreamSample as a WAV file to `path`. Samples with IMA ADPCM format can't be saved.

		 **Note:** A `.wav` extension is automatically appended to `path` if it is missing. */
		save_to_wav(path: string) : number;

		/** Getter of `data` property */
		get_data() : PoolByteArray;

		/** Setter of `data` property */
		set_data(p_value: PoolByteArray) : void;

		/** Getter of `format` property */
		get_format() : number;

		/** Setter of `format` property */
		set_format(p_value: number) : void;

		/** Getter of `loop_mode` property */
		get_loop_mode() : number;

		/** Setter of `loop_mode` property */
		set_loop_mode(p_value: number) : void;

		/** Getter of `loop_begin` property */
		get_loop_begin() : number;

		/** Setter of `loop_begin` property */
		set_loop_begin(p_value: number) : void;

		/** Getter of `loop_end` property */
		get_loop_end() : number;

		/** Setter of `loop_end` property */
		set_loop_end(p_value: number) : void;

		/** Getter of `mix_rate` property */
		get_mix_rate() : number;

		/** Setter of `mix_rate` property */
		set_mix_rate(p_value: number) : void;

		/** Getter of `stereo` property */
		is_stereo() : boolean;

		/** Setter of `stereo` property */
		set_stereo(p_value: boolean) : void;
	}
	namespace AudioStreamSample {
		enum Format {
			/** 8-bit audio codec. */
			FORMAT_8_BITS = 0,
			/** 16-bit audio codec. */
			FORMAT_16_BITS = 1,
			/** Audio is compressed using IMA ADPCM. */
			FORMAT_IMA_ADPCM = 2,
		}
		enum LoopMode {
			/** Audio does not loop. */
			LOOP_DISABLED = 0,
			/** Audio loops the data between `loop_begin` and `loop_end`, playing forward only. */
			LOOP_FORWARD = 1,
			/** Audio loops the data between `loop_begin` and `loop_end`, playing back and forth. */
			LOOP_PING_PONG = 2,
			/** Audio loops the data between `loop_begin` and `loop_end`, playing backward only. */
			LOOP_BACKWARD = 3,
		}

		/** 8-bit audio codec. */
		const FORMAT_8_BITS: Format.FORMAT_8_BITS;

		/** 16-bit audio codec. */
		const FORMAT_16_BITS: Format.FORMAT_16_BITS;

		/** Audio is compressed using IMA ADPCM. */
		const FORMAT_IMA_ADPCM: Format.FORMAT_IMA_ADPCM;

		/** Audio does not loop. */
		const LOOP_DISABLED: LoopMode.LOOP_DISABLED;

		/** Audio loops the data between `loop_begin` and `loop_end`, playing forward only. */
		const LOOP_FORWARD: LoopMode.LOOP_FORWARD;

		/** Audio loops the data between `loop_begin` and `loop_end`, playing back and forth. */
		const LOOP_PING_PONG: LoopMode.LOOP_PING_PONG;

		/** Audio loops the data between `loop_begin` and `loop_end`, playing backward only. */
		const LOOP_BACKWARD: LoopMode.LOOP_BACKWARD;
	}

	/** Copies a region of the screen (or the whole screen) to a buffer so it can be accessed in your shader scripts through the `texture(SCREEN_TEXTURE, ...)` function.
	 Node for back-buffering the currently-displayed screen. The region defined in the BackBufferCopy node is bufferized with the content of the screen it covers, or the entire screen according to the copy mode set. Use the `texture(SCREEN_TEXTURE, ...)` function in your shader scripts to access the buffer.

	 **Note:** Since this node inherits from `Node2D` (and not `Control`), anchors and margins won't apply to child `Control`-derived nodes. This can be problematic when resizing the window. To avoid this, add `Control`-derived nodes as *siblings* to the BackBufferCopy node instead of adding them as children. */
	class BackBufferCopy extends Node2D {

		/** Buffer mode. See `CopyMode` constants. */
		copy_mode: number;

		/** The area covered by the BackBufferCopy. Only used if `copy_mode` is `COPY_MODE_RECT`. */
		rect: Rect2;

		/** Getter of `copy_mode` property */
		get_copy_mode() : number;

		/** Setter of `copy_mode` property */
		set_copy_mode(p_value: number) : void;

		/** Getter of `rect` property */
		get_rect() : Rect2;

		/** Setter of `rect` property */
		set_rect(p_value: Rect2) : void;
	}
	namespace BackBufferCopy {
		enum CopyMode {
			/** Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers. */
			COPY_MODE_DISABLED = 0,
			/** BackBufferCopy buffers a rectangular region. */
			COPY_MODE_RECT = 1,
			/** BackBufferCopy buffers the entire screen. */
			COPY_MODE_VIEWPORT = 2,
		}

		/** Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers. */
		const COPY_MODE_DISABLED: CopyMode.COPY_MODE_DISABLED;

		/** BackBufferCopy buffers a rectangular region. */
		const COPY_MODE_RECT: CopyMode.COPY_MODE_RECT;

		/** BackBufferCopy buffers the entire screen. */
		const COPY_MODE_VIEWPORT: CopyMode.COPY_MODE_VIEWPORT;
	}

	/** Prerendered indirect light map for a scene.
	 Baked lightmaps are an alternative workflow for adding indirect (or baked) lighting to a scene. Unlike the `GIProbe` approach, baked lightmaps work fine on low-end PCs and mobile devices as they consume almost no resources in run-time.

	 **Note:** This node has many known bugs and will be `url=https://godotengine.org/article/godot-40-will-get-new-modernized-lightmapper`rewritten for Godot 4.0`/url`. See `url=https://github.com/godotengine/godot/issues/30929`GitHub issue #30929`/url`. */
	class BakedLightmap extends VisualInstance {

		/** Grid subdivision size for lightmapper calculation. The default value will work for most cases. Increase for better lighting on small details or if your scene is very large. */
		bake_cell_size: number;

		/** Three quality modes are available. Higher quality requires more rendering time. See `BakeQuality`. */
		bake_quality: number;

		/** Lightmapping mode. See `BakeMode`. */
		bake_mode: number;

		/** Defines how far the light will travel before it is no longer effective. The higher the number, the farther the light will travel. For instance, if the value is set to 2, the light will go twice as far. If the value is set to 0.5, the light will only go half as far. */
		bake_propagation: number;

		/** Multiplies the light sources' intensity by this value. For instance, if the value is set to 2, lights will be twice as bright. If the value is set to 0.5, lights will be half as bright. */
		bake_energy: number;

		/** If `true`, the lightmap can capture light values greater than `1.0`. Turning this off will result in a smaller file size. */
		bake_hdr: boolean;

		/** The size of the affected area. */
		bake_extents: Vector3;

		/** If a `Mesh.lightmap_size_hint` isn't specified, the lightmap baker will dynamically set the lightmap size using this value. This value is measured in texels per world unit. The maximum lightmap texture size is 4096x4096. */
		bake_default_texels_per_unit: number;

		/** Grid size used for real-time capture information on dynamic objects. Cannot be larger than `bake_cell_size`. */
		capture_cell_size: number;

		/** The location where lightmaps will be saved. */
		image_path: string;

		/** The calculated light data. */
		light_data: BakedLightmapData;

		/** Bakes the lightmaps within the currently edited scene. Returns a `BakeError` to signify if the bake was successful, or if unsuccessful, how the bake failed. */
		//@ts-ignore
		bake(from_node: Node = null, create_visual_debug: boolean = false) : number;

		/** Executes a dry run bake of lightmaps within the currently edited scene. */
		debug_bake() : void;

		/** Getter of `bake_cell_size` property */
		get_bake_cell_size() : number;

		/** Setter of `bake_cell_size` property */
		set_bake_cell_size(p_value: number) : void;

		/** Getter of `bake_quality` property */
		get_bake_quality() : number;

		/** Setter of `bake_quality` property */
		set_bake_quality(p_value: number) : void;

		/** Getter of `bake_mode` property */
		get_bake_mode() : number;

		/** Setter of `bake_mode` property */
		set_bake_mode(p_value: number) : void;

		/** Getter of `bake_propagation` property */
		get_propagation() : number;

		/** Setter of `bake_propagation` property */
		set_propagation(p_value: number) : void;

		/** Getter of `bake_energy` property */
		get_energy() : number;

		/** Setter of `bake_energy` property */
		set_energy(p_value: number) : void;

		/** Getter of `bake_hdr` property */
		is_hdr() : boolean;

		/** Setter of `bake_hdr` property */
		set_hdr(p_value: boolean) : void;

		/** Getter of `bake_extents` property */
		get_extents() : Vector3;

		/** Setter of `bake_extents` property */
		set_extents(p_value: Vector3) : void;

		/** Getter of `bake_default_texels_per_unit` property */
		get_bake_default_texels_per_unit() : number;

		/** Setter of `bake_default_texels_per_unit` property */
		set_bake_default_texels_per_unit(p_value: number) : void;

		/** Getter of `capture_cell_size` property */
		get_capture_cell_size() : number;

		/** Setter of `capture_cell_size` property */
		set_capture_cell_size(p_value: number) : void;

		/** Getter of `image_path` property */
		get_image_path() : string;

		/** Setter of `image_path` property */
		set_image_path(p_value: string) : void;

		/** Getter of `light_data` property */
		get_light_data() : BakedLightmapData;

		/** Setter of `light_data` property */
		set_light_data(p_value: BakedLightmapData) : void;
	}
	namespace BakedLightmap {
		enum BakeError {
			/** Baking was successful. */
			BAKE_ERROR_OK = 0,
			/** Returns if no viable save path is found. This can happen where an `image_path` is not specified or when the save location is invalid. */
			BAKE_ERROR_NO_SAVE_PATH = 1,
			/** Currently unused. */
			BAKE_ERROR_NO_MESHES = 2,
			/** Returns when the baker cannot save per-mesh textures to file. */
			BAKE_ERROR_CANT_CREATE_IMAGE = 3,
			/** Returns if user cancels baking. */
			BAKE_ERROR_USER_ABORTED = 4,
		}
		enum BakeMode {
			/** Less precise but faster bake mode. */
			BAKE_MODE_CONE_TRACE = 0,
			/** More precise bake mode but can take considerably longer to bake. */
			BAKE_MODE_RAY_TRACE = 1,
		}
		enum BakeQuality {
			/** The lowest bake quality mode. Fastest to calculate. */
			BAKE_QUALITY_LOW = 0,
			/** The default bake quality mode. */
			BAKE_QUALITY_MEDIUM = 1,
			/** The highest bake quality mode. Takes longer to calculate. */
			BAKE_QUALITY_HIGH = 2,
		}

		/** The lowest bake quality mode. Fastest to calculate. */
		const BAKE_QUALITY_LOW: BakeQuality.BAKE_QUALITY_LOW;

		/** The default bake quality mode. */
		const BAKE_QUALITY_MEDIUM: BakeQuality.BAKE_QUALITY_MEDIUM;

		/** The highest bake quality mode. Takes longer to calculate. */
		const BAKE_QUALITY_HIGH: BakeQuality.BAKE_QUALITY_HIGH;

		/** Less precise but faster bake mode. */
		const BAKE_MODE_CONE_TRACE: BakeMode.BAKE_MODE_CONE_TRACE;

		/** More precise bake mode but can take considerably longer to bake. */
		const BAKE_MODE_RAY_TRACE: BakeMode.BAKE_MODE_RAY_TRACE;

		/** Baking was successful. */
		const BAKE_ERROR_OK: BakeError.BAKE_ERROR_OK;

		/** Returns if no viable save path is found. This can happen where an `image_path` is not specified or when the save location is invalid. */
		const BAKE_ERROR_NO_SAVE_PATH: BakeError.BAKE_ERROR_NO_SAVE_PATH;

		/** Currently unused. */
		const BAKE_ERROR_NO_MESHES: BakeError.BAKE_ERROR_NO_MESHES;

		/** Returns when the baker cannot save per-mesh textures to file. */
		const BAKE_ERROR_CANT_CREATE_IMAGE: BakeError.BAKE_ERROR_CANT_CREATE_IMAGE;

		/** Returns if user cancels baking. */
		const BAKE_ERROR_USER_ABORTED: BakeError.BAKE_ERROR_USER_ABORTED;
	}

	/** 
	  */
	class BakedLightmapData extends Resource {

		/**  */
		bounds: AABB;

		/**  */
		cell_space_transform: Transform;

		/**  */
		cell_subdiv: number;

		/**  */
		energy: number;

		/**  */
		octree: PoolByteArray;

		/**  */
		add_user(path: string, lightmap: Texture, instance: number) : void;

		/**  */
		get_user_count() : number;

		/**  */
		get_user_path(user_idx: number) : string;

		/**  */
		get_user_lightmap(user_idx: number) : Texture;

		/**  */
		clear_users() : void;

		/** Getter of `bounds` property */
		get_bounds() : AABB;

		/** Setter of `bounds` property */
		set_bounds(p_value: AABB) : void;

		/** Getter of `cell_space_transform` property */
		get_cell_space_transform() : Transform;

		/** Setter of `cell_space_transform` property */
		set_cell_space_transform(p_value: Transform) : void;

		/** Getter of `cell_subdiv` property */
		get_cell_subdiv() : number;

		/** Setter of `cell_subdiv` property */
		set_cell_subdiv(p_value: number) : void;

		/** Getter of `energy` property */
		get_energy() : number;

		/** Setter of `energy` property */
		set_energy(p_value: number) : void;

		/** Getter of `octree` property */
		get_octree() : PoolByteArray;

		/** Setter of `octree` property */
		set_octree(p_value: PoolByteArray) : void;
	}
	namespace BakedLightmapData {
	}

	/** Base class for different kinds of buttons.
	 BaseButton is the abstract base class for buttons, so it shouldn't be used directly (it doesn't display anything). Other types of buttons inherit from it. */
	class BaseButton extends Control {

		/** If `true`, the button is in disabled state and can't be clicked or toggled. */
		disabled: boolean;

		/** If `true`, the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked. */
		toggle_mode: boolean;

		/** If `true`, the button will add information about its shortcut in the tooltip. */
		shortcut_in_tooltip: boolean;

		/** If `true`, the button's state is pressed. Means the button is pressed down or toggled (if `toggle_mode` is active). */
		pressed: boolean;

		/** Determines when the button is considered clicked, one of the `ActionMode` constants. */
		action_mode: number;

		/** Binary mask to choose which mouse buttons this button will respond to.

		 To allow both left-click and right-click, use `BUTTON_MASK_LEFT | BUTTON_MASK_RIGHT`. */
		button_mask: number;

		/** Focus access mode to use when switching between enabled/disabled (see `Control.focus_mode` and `disabled`). */
		enabled_focus_mode: number;

		/** If `true`, the button stays pressed when moving the cursor outside the button while pressing it.

		 **Note:** This property only affects the button's visual appearance. Signals will be emitted at the same moment regardless of this property's value. */
		keep_pressed_outside: boolean;

		/** `ShortCut` associated to the button. */
		shortcut: ShortCut;

		/** `ButtonGroup` associated to the button. */
		group: ButtonGroup;

		/**  */
		focus_mode: number;

		/** Called when the button is pressed. */
		_pressed() : void;

		/** Called when the button is toggled (only if `toggle_mode` is active). */
		_toggled(button_pressed: boolean) : void;

		/** Returns `true` if the mouse has entered the button and has not left it yet. */
		is_hovered() : boolean;

		/** Returns the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the `DrawMode` enum. */
		get_draw_mode() : number;

		/** Getter of `disabled` property */
		is_disabled() : boolean;

		/** Setter of `disabled` property */
		set_disabled(p_value: boolean) : void;

		/** Getter of `toggle_mode` property */
		is_toggle_mode() : boolean;

		/** Setter of `toggle_mode` property */
		set_toggle_mode(p_value: boolean) : void;

		/** Getter of `shortcut_in_tooltip` property */
		is_shortcut_in_tooltip_enabled() : boolean;

		/** Setter of `shortcut_in_tooltip` property */
		set_shortcut_in_tooltip(p_value: boolean) : void;

		/** Getter of `pressed` property */
		is_pressed() : boolean;

		/** Setter of `pressed` property */
		set_pressed(p_value: boolean) : void;

		/** Getter of `action_mode` property */
		get_action_mode() : number;

		/** Setter of `action_mode` property */
		set_action_mode(p_value: number) : void;

		/** Getter of `button_mask` property */
		get_button_mask() : number;

		/** Setter of `button_mask` property */
		set_button_mask(p_value: number) : void;

		/** Getter of `enabled_focus_mode` property */
		get_enabled_focus_mode() : number;

		/** Setter of `enabled_focus_mode` property */
		set_enabled_focus_mode(p_value: number) : void;

		/** Getter of `keep_pressed_outside` property */
		is_keep_pressed_outside() : boolean;

		/** Setter of `keep_pressed_outside` property */
		set_keep_pressed_outside(p_value: boolean) : void;

		/** Getter of `shortcut` property */
		get_shortcut() : ShortCut;

		/** Setter of `shortcut` property */
		set_shortcut(p_value: ShortCut) : void;

		/** Getter of `group` property */
		get_button_group() : ButtonGroup;

		/** Setter of `group` property */
		set_button_group(p_value: ButtonGroup) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace BaseButton {

		/** Emitted when the button starts being held down. */
		const button_down: 'button_down';

		/** Emitted when the button was just toggled between pressed and normal states (only if `toggle_mode` is active). The new state is contained in the `button_pressed` argument. */
		const toggled: 'toggled';

		/** Emitted when the button is toggled or pressed. This is on `button_down` if `action_mode` is `ACTION_MODE_BUTTON_PRESS` and on `button_up` otherwise. */
		const pressed: 'pressed';

		/** Emitted when the button stops being held down. */
		const button_up: 'button_up';
		enum ActionMode {
			/** Require just a press to consider the button clicked. */
			ACTION_MODE_BUTTON_PRESS = 0,
			/** Require a press and a subsequent release before considering the button clicked. */
			ACTION_MODE_BUTTON_RELEASE = 1,
		}
		enum DrawMode {
			/** The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons. */
			DRAW_NORMAL = 0,
			/** The state of buttons are pressed. */
			DRAW_PRESSED = 1,
			/** The state of buttons are hovered. */
			DRAW_HOVER = 2,
			/** The state of buttons are disabled. */
			DRAW_DISABLED = 3,
			/** The state of buttons are both hovered and pressed. */
			DRAW_HOVER_PRESSED = 4,
		}

		/** The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons. */
		const DRAW_NORMAL: DrawMode.DRAW_NORMAL;

		/** The state of buttons are pressed. */
		const DRAW_PRESSED: DrawMode.DRAW_PRESSED;

		/** The state of buttons are hovered. */
		const DRAW_HOVER: DrawMode.DRAW_HOVER;

		/** The state of buttons are disabled. */
		const DRAW_DISABLED: DrawMode.DRAW_DISABLED;

		/** The state of buttons are both hovered and pressed. */
		const DRAW_HOVER_PRESSED: DrawMode.DRAW_HOVER_PRESSED;

		/** Require just a press to consider the button clicked. */
		const ACTION_MODE_BUTTON_PRESS: ActionMode.ACTION_MODE_BUTTON_PRESS;

		/** Require a press and a subsequent release before considering the button clicked. */
		const ACTION_MODE_BUTTON_RELEASE: ActionMode.ACTION_MODE_BUTTON_RELEASE;
	}

	/** Boolean matrix.
	 A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates. */
	class BitMap extends Resource {

		/** Creates a bitmap with the specified size, filled with `false`. */
		create(size: Vector2) : void;

		/** Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to `false` if the alpha value of the image at that position is equal to `threshold` or less, and `true` in other case. */
		//@ts-ignore
		create_from_image_alpha(image: Image, threshold: number = 0.1) : void;

		/** Sets the bitmap's element at the specified position, to the specified value. */
		set_bit(position: Vector2, bit: boolean) : void;

		/** Returns bitmap's value at the specified position. */
		get_bit(position: Vector2) : boolean;

		/** Sets a rectangular portion of the bitmap to the specified value. */
		set_bit_rect(rect: Rect2, bit: boolean) : void;

		/** Returns the amount of bitmap elements that are set to `true`. */
		get_true_bit_count() : number;

		/** Returns bitmap's dimensions. */
		get_size() : Vector2;

		/**  */
		grow_mask(pixels: number, rect: Rect2) : void;

		/**  */
		//@ts-ignore
		opaque_to_polygons(rect: Rect2, epsilon: number = 2.0) : any[];
	}
	namespace BitMap {
	}

	/** Renders text using fonts under the `url=https://www.angelcode.com/products/bmfont/`BMFont`/url` format.

	 Handles files with the `.fnt` extension.
	 Renders text using `*.fnt` fonts containing texture atlases. Supports distance fields. For using vector font files like TTF directly, see `DynamicFont`. */
	class BitmapFont extends Font {

		/** Total font height (ascent plus descent) in pixels. */
		height: number;

		/** Ascent (number of pixels above the baseline). */
		ascent: number;

		/** If `true`, distance field hint is enabled. */
		distance_field: boolean;

		/** The fallback font. */
		fallback: BitmapFont;

		/** Creates a BitmapFont from the `*.fnt` file at `path`. */
		create_from_fnt(path: string) : number;

		/** Adds a kerning pair to the `BitmapFont` as a difference. Kerning pairs are special cases where a typeface advance is determined by the next character. */
		add_kerning_pair(char_a: number, char_b: number, kerning: number) : void;

		/** Returns a kerning pair as a difference. */
		get_kerning_pair(char_a: number, char_b: number) : number;

		/** Adds a texture to the `BitmapFont`. */
		add_texture(texture: Texture) : void;

		/** Adds a character to the font, where `character` is the Unicode value, `texture` is the texture index, `rect` is the region in the texture (in pixels!), `align` is the (optional) alignment for the character and `advance` is the (optional) advance. */
		//@ts-ignore
		add_char(character: number, texture: number, rect: Rect2, align: Vector2 = Vector2( 0, 0 ), advance: number = -1) : void;

		/** Returns the number of textures in the BitmapFont atlas. */
		get_texture_count() : number;

		/** Returns the font atlas texture at index `idx`. */
		get_texture(idx: number) : Texture;

		/** Clears all the font data and settings. */
		clear() : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;

		/** Getter of `ascent` property */
		get_ascent() : number;

		/** Setter of `ascent` property */
		set_ascent(p_value: number) : void;

		/** Getter of `distance_field` property */
		is_distance_field_hint() : boolean;

		/** Setter of `distance_field` property */
		set_distance_field_hint(p_value: boolean) : void;

		/** Getter of `fallback` property */
		get_fallback() : BitmapFont;

		/** Setter of `fallback` property */
		set_fallback(p_value: BitmapFont) : void;
	}
	namespace BitmapFont {
	}

	/** Joint used with `Skeleton2D` to control and animate other nodes.
	 Use a hierarchy of `Bone2D` bound to a `Skeleton2D` to control, and animate other `Node2D` nodes.

	 You can use `Bone2D` and `Skeleton2D` nodes to animate 2D meshes created with the Polygon 2D UV editor.

	 Each bone has a `rest` transform that you can reset to with `apply_rest`. These rest poses are relative to the bone's parent.

	 If in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses. */
	class Bone2D extends Node2D {

		/** Rest transform of the bone. You can reset the node's transforms to this value using `apply_rest`. */
		rest: Transform2D;

		/** Length of the bone's representation drawn in the editor's viewport in pixels. */
		default_length: number;

		/** Stores the node's current transforms in `rest`. */
		apply_rest() : void;

		/** Returns the node's `rest` `Transform2D` if it doesn't have a parent, or its rest pose relative to its parent. */
		get_skeleton_rest() : Transform2D;

		/** Returns the node's index as part of the entire skeleton. See `Skeleton2D`. */
		get_index_in_skeleton() : number;

		/** Getter of `rest` property */
		get_rest() : Transform2D;

		/** Setter of `rest` property */
		set_rest(p_value: Transform2D) : void;

		/** Getter of `default_length` property */
		get_default_length() : number;

		/** Setter of `default_length` property */
		set_default_length(p_value: number) : void;
	}
	namespace Bone2D {
	}

	/** A node that will attach to a bone.
	 This node must be the child of a `Skeleton` node. You can then select a bone for this node to attach to. The BoneAttachment node will copy the transform of the selected bone. */
	class BoneAttachment extends Spatial {

		/** The name of the attached bone. */
		bone_name: string;

		/** Getter of `bone_name` property */
		get_bone_name() : string;

		/** Setter of `bone_name` property */
		set_bone_name(p_value: string) : void;
	}
	namespace BoneAttachment {
	}

	/** Base class for box containers.
	 Arranges child controls vertically or horizontally, and rearranges the controls automatically when their minimum size changes. */
	class BoxContainer extends Container {

		/** The alignment of the container's children (must be one of `ALIGN_BEGIN`, `ALIGN_CENTER` or `ALIGN_END`). */
		alignment: number;

		/**  */
		mouse_filter: number;

		/** Adds a control to the box as a spacer. If `true`, `begin` will insert the spacer control in front of other children. */
		add_spacer(begin: boolean) : void;

		/** Getter of `alignment` property */
		get_alignment() : number;

		/** Setter of `alignment` property */
		set_alignment(p_value: number) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;
	}
	namespace BoxContainer {
		enum AlignMode {
			/** Aligns children with the beginning of the container. */
			ALIGN_BEGIN = 0,
			/** Aligns children with the center of the container. */
			ALIGN_CENTER = 1,
			/** Aligns children with the end of the container. */
			ALIGN_END = 2,
		}

		/** Aligns children with the beginning of the container. */
		const ALIGN_BEGIN: AlignMode.ALIGN_BEGIN;

		/** Aligns children with the center of the container. */
		const ALIGN_CENTER: AlignMode.ALIGN_CENTER;

		/** Aligns children with the end of the container. */
		const ALIGN_END: AlignMode.ALIGN_END;
	}

	/** Box shape resource.
	 3D box shape that can be a child of a `PhysicsBody` or `Area`. */
	class BoxShape extends Shape {

		/** The box's half extents. The width, height and depth of this shape is twice the half extents. */
		extents: Vector3;

		/** Getter of `extents` property */
		get_extents() : Vector3;

		/** Setter of `extents` property */
		set_extents(p_value: Vector3) : void;
	}
	namespace BoxShape {
	}

	/** Standard themed Button.
	 Button is the standard themed button. It can contain text and an icon, and will display them according to the current `Theme`. */
	class Button extends BaseButton {

		/** The button's text that will be displayed inside the button's area. */
		text: string;

		/** Button's icon, if text is present the icon will be placed before the text. */
		icon: Texture;

		/** Flat buttons don't display decoration. */
		flat: boolean;

		/** When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. */
		clip_text: boolean;

		/** Text alignment policy for the button's text, use one of the `TextAlign` constants. */
		align: number;

		/** When enabled, the button's icon will expand/shrink to fit the button's size while keeping its aspect. */
		expand_icon: boolean;

		/** Getter of `text` property */
		get_text() : string;

		/** Setter of `text` property */
		set_text(p_value: string) : void;

		/** Getter of `icon` property */
		get_button_icon() : Texture;

		/** Setter of `icon` property */
		set_button_icon(p_value: Texture) : void;

		/** Getter of `flat` property */
		is_flat() : boolean;

		/** Setter of `flat` property */
		set_flat(p_value: boolean) : void;

		/** Getter of `clip_text` property */
		get_clip_text() : boolean;

		/** Setter of `clip_text` property */
		set_clip_text(p_value: boolean) : void;

		/** Getter of `align` property */
		get_text_align() : number;

		/** Setter of `align` property */
		set_text_align(p_value: number) : void;

		/** Getter of `expand_icon` property */
		is_expand_icon() : boolean;

		/** Setter of `expand_icon` property */
		set_expand_icon(p_value: boolean) : void;
	}
	namespace Button {
		enum TextAlign {
			/** Align the text to the left. */
			ALIGN_LEFT = 0,
			/** Align the text to the center. */
			ALIGN_CENTER = 1,
			/** Align the text to the right. */
			ALIGN_RIGHT = 2,
		}

		/** Align the text to the left. */
		const ALIGN_LEFT: TextAlign.ALIGN_LEFT;

		/** Align the text to the center. */
		const ALIGN_CENTER: TextAlign.ALIGN_CENTER;

		/** Align the text to the right. */
		const ALIGN_RIGHT: TextAlign.ALIGN_RIGHT;
	}

	/** Group of Buttons.
	 Group of `Button`. All direct and indirect children buttons become radios. Only one allows being pressed.

	 `BaseButton.toggle_mode` should be `true`. */
	class ButtonGroup extends Resource {

		/**  */
		resource_local_to_scene: boolean;

		/** Returns the current pressed button. */
		get_pressed_button() : BaseButton;

		/** Returns an `Array` of `Button`s who have this as their `ButtonGroup` (see `BaseButton.group`). */
		get_buttons() : any[];

		/** Getter of `resource_local_to_scene` property */
		is_local_to_scene() : boolean;

		/** Setter of `resource_local_to_scene` property */
		set_local_to_scene(p_value: boolean) : void;
	}
	namespace ButtonGroup {
	}

	/** CPU-based 3D particle emitter.
	 CPU-based 3D particle node used to create a variety of particle systems and effects.

	 See also `Particles`, which provides the same functionality with hardware acceleration, but may not run on older devices. */
	//@ts-ignore
	class CPUParticles extends GeometryInstance {

		/** If `true`, particles are being emitted. */
		emitting: boolean;

		/** Number of particles emitted in one emission cycle. */
		amount: number;

		/** Amount of time each particle will exist. */
		lifetime: number;

		/** If `true`, only one emission cycle occurs. If set `true` during a cycle, emission will stop at the cycle's end. */
		one_shot: boolean;

		/** Particle system starts as if it had already run for this many seconds. */
		preprocess: number;

		/** Particle system's running speed scaling ratio. A value of `0` can be used to pause the particles. */
		speed_scale: number;

		/** How rapidly particles in an emission cycle are emitted. If greater than `0`, there will be a gap in emissions before the next cycle begins. */
		explosiveness: number;

		/** Emission lifetime randomness ratio. */
		randomness: number;

		/** Particle lifetime randomness ratio. */
		lifetime_randomness: number;

		/** The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the particle system itself. */
		fixed_fps: number;

		/** If `true`, results in fractional delta calculation which has a smoother particles display effect. */
		fract_delta: boolean;

		/** If `true`, particles use the parent node's coordinate space. If `false`, they use global coordinates. */
		local_coords: boolean;

		/** Particle draw order. Uses `DrawOrder` values. */
		draw_order: number;

		/** The `Mesh` used for each particle. If `null`, particles will be spheres. */
		mesh: Mesh;

		/** Particles will be emitted inside this region. See `EmissionShape` for possible values. */
		emission_shape: number;

		/** The sphere's radius if `EmissionShape` is set to `EMISSION_SHAPE_SPHERE`. */
		emission_sphere_radius: number;

		/** The rectangle's extents if `emission_shape` is set to `EMISSION_SHAPE_BOX`. */
		emission_box_extents: Vector3;

		/** Sets the initial positions to spawn particles when using `EMISSION_SHAPE_POINTS` or `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_points: PoolVector3Array;

		/** Sets the direction the particles will be emitted in when using `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_normals: PoolVector3Array;

		/** Sets the `Color`s to modulate particles by when using `EMISSION_SHAPE_POINTS` or `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_colors: PoolColorArray;

		/** Align Y axis of particle with the direction of its velocity. */
		flag_align_y: boolean;

		/** If `true`, particles rotate around Y axis by `angle`. */
		flag_rotate_y: boolean;

		/** If `true`, particles will not move on the z axis. */
		flag_disable_z: boolean;

		/** Unit vector specifying the particles' emission direction. */
		direction: Vector3;

		/** Each particle's initial direction range from `+spread` to `-spread` degrees. Applied to X/Z plane and Y/Z planes. */
		spread: number;

		/** Amount of `spread` in Y/Z plane. A value of `1` restricts particles to X/Z plane. */
		flatness: number;

		/** Gravity applied to every particle. */
		gravity: Vector3;

		/** Initial velocity magnitude for each particle. Direction comes from `spread` and the node's orientation. */
		initial_velocity: number;

		/** Initial velocity randomness ratio. */
		initial_velocity_random: number;

		/** Initial angular velocity applied to each particle. Sets the speed of rotation of the particle. */
		angular_velocity: number;

		/** Angular velocity randomness ratio. */
		angular_velocity_random: number;

		/** Each particle's angular velocity will vary along this `Curve`. */
		angular_velocity_curve: Curve;

		/** Orbital velocity applied to each particle. Makes the particles circle around origin in the local XY plane. Specified in number of full rotations around origin per second.

		 This property is only available when `flag_disable_z` is `true`. */
		orbit_velocity: number;

		/** Orbital velocity randomness ratio. */
		orbit_velocity_random: number;

		/** Each particle's orbital velocity will vary along this `Curve`. */
		orbit_velocity_curve: Curve;

		/** Linear acceleration applied to each particle in the direction of motion. */
		linear_accel: number;

		/** Linear acceleration randomness ratio. */
		linear_accel_random: number;

		/** Each particle's linear acceleration will vary along this `Curve`. */
		linear_accel_curve: Curve;

		/** Radial acceleration applied to each particle. Makes particle accelerate away from origin. */
		radial_accel: number;

		/** Radial acceleration randomness ratio. */
		radial_accel_random: number;

		/** Each particle's radial acceleration will vary along this `Curve`. */
		radial_accel_curve: Curve;

		/** Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion. */
		tangential_accel: number;

		/** Tangential acceleration randomness ratio. */
		tangential_accel_random: number;

		/** Each particle's tangential acceleration will vary along this `Curve`. */
		tangential_accel_curve: Curve;

		/** The rate at which particles lose velocity. */
		damping: number;

		/** Damping randomness ratio. */
		damping_random: number;

		/** Damping will vary along this `Curve`. */
		damping_curve: Curve;

		/** Initial rotation applied to each particle, in degrees. */
		angle: number;

		/** Rotation randomness ratio. */
		angle_random: number;

		/** Each particle's rotation will be animated along this `Curve`. */
		angle_curve: Curve;

		/** Initial scale applied to each particle. */
		scale_amount: number;

		/** Scale randomness ratio. */
		scale_amount_random: number;

		/** Each particle's scale will vary along this `Curve`. */
		scale_amount_curve: Curve;

		/** Unused for 3D particles. */
		color: Color;

		/** Unused for 3D particles. */
		color_ramp: Gradient;

		/** Initial hue variation applied to each particle. */
		hue_variation: number;

		/** Hue variation randomness ratio. */
		hue_variation_random: number;

		/** Each particle's hue will vary along this `Curve`. */
		hue_variation_curve: Curve;

		/** Particle animation speed. */
		anim_speed: number;

		/** Animation speed randomness ratio. */
		anim_speed_random: number;

		/** Each particle's animation speed will vary along this `Curve`. */
		anim_speed_curve: Curve;

		/** Particle animation offset. */
		anim_offset: number;

		/** Animation offset randomness ratio. */
		anim_offset_random: number;

		/** Each particle's animation offset will vary along this `Curve`. */
		anim_offset_curve: Curve;

		/** Restarts the particle emitter. */
		restart() : void;

		/** Sets the base value of the parameter specified by `Parameter`. */
		set_param(param: CPUParticles.Parameter, value: number) : void;

		/** Returns the base value of the parameter specified by `Parameter`. */
		get_param(param: CPUParticles.Parameter) : number;

		/** Sets the randomness factor of the parameter specified by `Parameter`. */
		set_param_randomness(param: CPUParticles.Parameter, randomness: number) : void;

		/** Returns the randomness factor of the parameter specified by `Parameter`. */
		get_param_randomness(param: CPUParticles.Parameter) : number;

		/** Sets the `Curve` of the parameter specified by `Parameter`. */
		set_param_curve(param: CPUParticles.Parameter, curve: Curve) : void;

		/** Returns the `Curve` of the parameter specified by `Parameter`. */
		get_param_curve(param: CPUParticles.Parameter) : Curve;

		/** Enables or disables the given flag (see `Flags` for options). */
		set_particle_flag(flag: CPUParticles.Flags, enable: boolean) : void;

		/** Returns the enabled state of the given flag (see `Flags` for options). */
		get_particle_flag(flag: CPUParticles.Flags) : boolean;

		/** Sets this node's properties to match a given `Particles` node with an assigned `ParticlesMaterial`. */
		convert_from_particles(particles: Node) : void;

		/** Getter of `emitting` property */
		is_emitting() : boolean;

		/** Setter of `emitting` property */
		set_emitting(p_value: boolean) : void;

		/** Getter of `amount` property */
		get_amount() : number;

		/** Setter of `amount` property */
		set_amount(p_value: number) : void;

		/** Getter of `lifetime` property */
		get_lifetime() : number;

		/** Setter of `lifetime` property */
		set_lifetime(p_value: number) : void;

		/** Getter of `one_shot` property */
		get_one_shot() : boolean;

		/** Setter of `one_shot` property */
		set_one_shot(p_value: boolean) : void;

		/** Getter of `preprocess` property */
		get_pre_process_time() : number;

		/** Setter of `preprocess` property */
		set_pre_process_time(p_value: number) : void;

		/** Getter of `speed_scale` property */
		get_speed_scale() : number;

		/** Setter of `speed_scale` property */
		set_speed_scale(p_value: number) : void;

		/** Getter of `explosiveness` property */
		get_explosiveness_ratio() : number;

		/** Setter of `explosiveness` property */
		set_explosiveness_ratio(p_value: number) : void;

		/** Getter of `randomness` property */
		get_randomness_ratio() : number;

		/** Setter of `randomness` property */
		set_randomness_ratio(p_value: number) : void;

		/** Getter of `lifetime_randomness` property */
		get_lifetime_randomness() : number;

		/** Setter of `lifetime_randomness` property */
		set_lifetime_randomness(p_value: number) : void;

		/** Getter of `fixed_fps` property */
		get_fixed_fps() : number;

		/** Setter of `fixed_fps` property */
		set_fixed_fps(p_value: number) : void;

		/** Getter of `fract_delta` property */
		get_fractional_delta() : boolean;

		/** Setter of `fract_delta` property */
		set_fractional_delta(p_value: boolean) : void;

		/** Getter of `local_coords` property */
		get_use_local_coordinates() : boolean;

		/** Setter of `local_coords` property */
		set_use_local_coordinates(p_value: boolean) : void;

		/** Getter of `draw_order` property */
		get_draw_order() : number;

		/** Setter of `draw_order` property */
		set_draw_order(p_value: number) : void;

		/** Getter of `mesh` property */
		get_mesh() : Mesh;

		/** Setter of `mesh` property */
		set_mesh(p_value: Mesh) : void;

		/** Getter of `emission_shape` property */
		get_emission_shape() : number;

		/** Setter of `emission_shape` property */
		set_emission_shape(p_value: number) : void;

		/** Getter of `emission_sphere_radius` property */
		get_emission_sphere_radius() : number;

		/** Setter of `emission_sphere_radius` property */
		set_emission_sphere_radius(p_value: number) : void;

		/** Getter of `emission_box_extents` property */
		get_emission_box_extents() : Vector3;

		/** Setter of `emission_box_extents` property */
		set_emission_box_extents(p_value: Vector3) : void;

		/** Getter of `emission_points` property */
		get_emission_points() : PoolVector3Array;

		/** Setter of `emission_points` property */
		set_emission_points(p_value: PoolVector3Array) : void;

		/** Getter of `emission_normals` property */
		get_emission_normals() : PoolVector3Array;

		/** Setter of `emission_normals` property */
		set_emission_normals(p_value: PoolVector3Array) : void;

		/** Getter of `emission_colors` property */
		get_emission_colors() : PoolColorArray;

		/** Setter of `emission_colors` property */
		set_emission_colors(p_value: PoolColorArray) : void;

		/** Getter of `flag_align_y` property */
		get_particle_flag() : boolean;

		/** Setter of `flag_align_y` property */
		set_particle_flag(p_value: boolean) : void;

		/** Getter of `flag_rotate_y` property */
		get_particle_flag() : boolean;

		/** Setter of `flag_rotate_y` property */
		set_particle_flag(p_value: boolean) : void;

		/** Getter of `flag_disable_z` property */
		get_particle_flag() : boolean;

		/** Setter of `flag_disable_z` property */
		set_particle_flag(p_value: boolean) : void;

		/** Getter of `direction` property */
		get_direction() : Vector3;

		/** Setter of `direction` property */
		set_direction(p_value: Vector3) : void;

		/** Getter of `spread` property */
		get_spread() : number;

		/** Setter of `spread` property */
		set_spread(p_value: number) : void;

		/** Getter of `flatness` property */
		get_flatness() : number;

		/** Setter of `flatness` property */
		set_flatness(p_value: number) : void;

		/** Getter of `gravity` property */
		get_gravity() : Vector3;

		/** Setter of `gravity` property */
		set_gravity(p_value: Vector3) : void;

		/** Getter of `initial_velocity` property */
		get_param() : number;

		/** Setter of `initial_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `initial_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `initial_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angular_velocity` property */
		get_param() : number;

		/** Setter of `angular_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `angular_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angular_velocity_curve` property */
		get_param_curve() : Curve;

		/** Setter of `angular_velocity_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `orbit_velocity` property */
		get_param() : number;

		/** Setter of `orbit_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `orbit_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `orbit_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `orbit_velocity_curve` property */
		get_param_curve() : Curve;

		/** Setter of `orbit_velocity_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `linear_accel` property */
		get_param() : number;

		/** Setter of `linear_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `linear_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `linear_accel_curve` property */
		get_param_curve() : Curve;

		/** Setter of `linear_accel_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `radial_accel` property */
		get_param() : number;

		/** Setter of `radial_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `radial_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `radial_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `radial_accel_curve` property */
		get_param_curve() : Curve;

		/** Setter of `radial_accel_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `tangential_accel` property */
		get_param() : number;

		/** Setter of `tangential_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `tangential_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `tangential_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `tangential_accel_curve` property */
		get_param_curve() : Curve;

		/** Setter of `tangential_accel_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `damping` property */
		get_param() : number;

		/** Setter of `damping` property */
		set_param(p_value: number) : void;

		/** Getter of `damping_random` property */
		get_param_randomness() : number;

		/** Setter of `damping_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `damping_curve` property */
		get_param_curve() : Curve;

		/** Setter of `damping_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `angle` property */
		get_param() : number;

		/** Setter of `angle` property */
		set_param(p_value: number) : void;

		/** Getter of `angle_random` property */
		get_param_randomness() : number;

		/** Setter of `angle_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angle_curve` property */
		get_param_curve() : Curve;

		/** Setter of `angle_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `scale_amount` property */
		get_param() : number;

		/** Setter of `scale_amount` property */
		set_param(p_value: number) : void;

		/** Getter of `scale_amount_random` property */
		get_param_randomness() : number;

		/** Setter of `scale_amount_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `scale_amount_curve` property */
		get_param_curve() : Curve;

		/** Setter of `scale_amount_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `color_ramp` property */
		get_color_ramp() : Gradient;

		/** Setter of `color_ramp` property */
		set_color_ramp(p_value: Gradient) : void;

		/** Getter of `hue_variation` property */
		get_param() : number;

		/** Setter of `hue_variation` property */
		set_param(p_value: number) : void;

		/** Getter of `hue_variation_random` property */
		get_param_randomness() : number;

		/** Setter of `hue_variation_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `hue_variation_curve` property */
		get_param_curve() : Curve;

		/** Setter of `hue_variation_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `anim_speed` property */
		get_param() : number;

		/** Setter of `anim_speed` property */
		set_param(p_value: number) : void;

		/** Getter of `anim_speed_random` property */
		get_param_randomness() : number;

		/** Setter of `anim_speed_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `anim_speed_curve` property */
		get_param_curve() : Curve;

		/** Setter of `anim_speed_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `anim_offset` property */
		get_param() : number;

		/** Setter of `anim_offset` property */
		set_param(p_value: number) : void;

		/** Getter of `anim_offset_random` property */
		get_param_randomness() : number;

		/** Setter of `anim_offset_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `anim_offset_curve` property */
		get_param_curve() : Curve;

		/** Setter of `anim_offset_curve` property */
		set_param_curve(p_value: Curve) : void;
	}
	namespace CPUParticles {
		enum DrawOrder {
			/** Particles are drawn in the order emitted. */
			DRAW_ORDER_INDEX = 0,
			/** Particles are drawn in order of remaining lifetime. */
			DRAW_ORDER_LIFETIME = 1,
			/** Particles are drawn in order of depth. */
			DRAW_ORDER_VIEW_DEPTH = 2,
		}
		enum EmissionShape {
			/** All particles will be emitted from a single point. */
			EMISSION_SHAPE_POINT = 0,
			/** Particles will be emitted in the volume of a sphere. */
			EMISSION_SHAPE_SPHERE = 1,
			/** Particles will be emitted in the volume of a box. */
			EMISSION_SHAPE_BOX = 2,
			/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle color will be modulated by `emission_colors`. */
			EMISSION_SHAPE_POINTS = 3,
			/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle velocity and rotation will be set based on `emission_normals`. Particle color will be modulated by `emission_colors`. */
			EMISSION_SHAPE_DIRECTED_POINTS = 4,
			/** Represents the size of the `EmissionShape` enum. */
			EMISSION_SHAPE_MAX = 5,
		}
		enum Flags {
			/** Use with `set_particle_flag` to set `flag_align_y`. */
			FLAG_ALIGN_Y_TO_VELOCITY = 0,
			/** Use with `set_particle_flag` to set `flag_rotate_y`. */
			FLAG_ROTATE_Y = 1,
			/** Use with `set_particle_flag` to set `flag_disable_z`. */
			FLAG_DISABLE_Z = 2,
			/** Represents the size of the `Flags` enum. */
			FLAG_MAX = 3,
		}
		enum Parameter {
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set initial velocity properties. */
			PARAM_INITIAL_LINEAR_VELOCITY = 0,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angular velocity properties. */
			PARAM_ANGULAR_VELOCITY = 1,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set orbital velocity properties. */
			PARAM_ORBIT_VELOCITY = 2,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set linear acceleration properties. */
			PARAM_LINEAR_ACCEL = 3,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set radial acceleration properties. */
			PARAM_RADIAL_ACCEL = 4,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set tangential acceleration properties. */
			PARAM_TANGENTIAL_ACCEL = 5,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set damping properties. */
			PARAM_DAMPING = 6,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angle properties. */
			PARAM_ANGLE = 7,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set scale properties. */
			PARAM_SCALE = 8,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set hue variation properties. */
			PARAM_HUE_VARIATION = 9,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation speed properties. */
			PARAM_ANIM_SPEED = 10,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation offset properties. */
			PARAM_ANIM_OFFSET = 11,
			/** Represents the size of the `Parameter` enum. */
			PARAM_MAX = 12,
		}

		/** Particles are drawn in the order emitted. */
		const DRAW_ORDER_INDEX: DrawOrder.DRAW_ORDER_INDEX;

		/** Particles are drawn in order of remaining lifetime. */
		const DRAW_ORDER_LIFETIME: DrawOrder.DRAW_ORDER_LIFETIME;

		/** Particles are drawn in order of depth. */
		const DRAW_ORDER_VIEW_DEPTH: DrawOrder.DRAW_ORDER_VIEW_DEPTH;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set initial velocity properties. */
		const PARAM_INITIAL_LINEAR_VELOCITY: Parameter.PARAM_INITIAL_LINEAR_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angular velocity properties. */
		const PARAM_ANGULAR_VELOCITY: Parameter.PARAM_ANGULAR_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set orbital velocity properties. */
		const PARAM_ORBIT_VELOCITY: Parameter.PARAM_ORBIT_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set linear acceleration properties. */
		const PARAM_LINEAR_ACCEL: Parameter.PARAM_LINEAR_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set radial acceleration properties. */
		const PARAM_RADIAL_ACCEL: Parameter.PARAM_RADIAL_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set tangential acceleration properties. */
		const PARAM_TANGENTIAL_ACCEL: Parameter.PARAM_TANGENTIAL_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set damping properties. */
		const PARAM_DAMPING: Parameter.PARAM_DAMPING;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angle properties. */
		const PARAM_ANGLE: Parameter.PARAM_ANGLE;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set scale properties. */
		const PARAM_SCALE: Parameter.PARAM_SCALE;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set hue variation properties. */
		const PARAM_HUE_VARIATION: Parameter.PARAM_HUE_VARIATION;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation speed properties. */
		const PARAM_ANIM_SPEED: Parameter.PARAM_ANIM_SPEED;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation offset properties. */
		const PARAM_ANIM_OFFSET: Parameter.PARAM_ANIM_OFFSET;

		/** Represents the size of the `Parameter` enum. */
		const PARAM_MAX: Parameter.PARAM_MAX;

		/** Use with `set_particle_flag` to set `flag_align_y`. */
		const FLAG_ALIGN_Y_TO_VELOCITY: Flags.FLAG_ALIGN_Y_TO_VELOCITY;

		/** Use with `set_particle_flag` to set `flag_rotate_y`. */
		const FLAG_ROTATE_Y: Flags.FLAG_ROTATE_Y;

		/** Use with `set_particle_flag` to set `flag_disable_z`. */
		const FLAG_DISABLE_Z: Flags.FLAG_DISABLE_Z;

		/** Represents the size of the `Flags` enum. */
		//@ts-ignore
		const FLAG_MAX: Flags.FLAG_MAX;

		/** All particles will be emitted from a single point. */
		const EMISSION_SHAPE_POINT: EmissionShape.EMISSION_SHAPE_POINT;

		/** Particles will be emitted in the volume of a sphere. */
		const EMISSION_SHAPE_SPHERE: EmissionShape.EMISSION_SHAPE_SPHERE;

		/** Particles will be emitted in the volume of a box. */
		const EMISSION_SHAPE_BOX: EmissionShape.EMISSION_SHAPE_BOX;

		/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle color will be modulated by `emission_colors`. */
		const EMISSION_SHAPE_POINTS: EmissionShape.EMISSION_SHAPE_POINTS;

		/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle velocity and rotation will be set based on `emission_normals`. Particle color will be modulated by `emission_colors`. */
		const EMISSION_SHAPE_DIRECTED_POINTS: EmissionShape.EMISSION_SHAPE_DIRECTED_POINTS;

		/** Represents the size of the `EmissionShape` enum. */
		const EMISSION_SHAPE_MAX: EmissionShape.EMISSION_SHAPE_MAX;
	}

	/** CPU-based 2D particle emitter.
	 CPU-based 2D particle node used to create a variety of particle systems and effects.

	 See also `Particles2D`, which provides the same functionality with hardware acceleration, but may not run on older devices. */
	class CPUParticles2D extends Node2D {

		/** If `true`, particles are being emitted. */
		emitting: boolean;

		/** Number of particles emitted in one emission cycle. */
		amount: number;

		/** Amount of time each particle will exist. */
		lifetime: number;

		/** If `true`, only one emission cycle occurs. If set `true` during a cycle, emission will stop at the cycle's end. */
		one_shot: boolean;

		/** Particle system starts as if it had already run for this many seconds. */
		preprocess: number;

		/** Particle system's running speed scaling ratio. A value of `0` can be used to pause the particles. */
		speed_scale: number;

		/** How rapidly particles in an emission cycle are emitted. If greater than `0`, there will be a gap in emissions before the next cycle begins. */
		explosiveness: number;

		/** Emission lifetime randomness ratio. */
		randomness: number;

		/** Particle lifetime randomness ratio. */
		lifetime_randomness: number;

		/** The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself. */
		fixed_fps: number;

		/** If `true`, results in fractional delta calculation which has a smoother particles display effect. */
		fract_delta: boolean;

		/** If `true`, particles use the parent node's coordinate space. If `false`, they use global coordinates. */
		local_coords: boolean;

		/** Particle draw order. Uses `DrawOrder` values. */
		draw_order: number;

		/** Particle texture. If `null`, particles will be squares. */
		texture: Texture;

		/** Normal map to be used for the `texture` property.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normalmap: Texture;

		/** Particles will be emitted inside this region. See `EmissionShape` for possible values. */
		emission_shape: number;

		/** The sphere's radius if `emission_shape` is set to `EMISSION_SHAPE_SPHERE`. */
		emission_sphere_radius: number;

		/** The rectangle's extents if `emission_shape` is set to `EMISSION_SHAPE_RECTANGLE`. */
		emission_rect_extents: Vector2;

		/** Sets the initial positions to spawn particles when using `EMISSION_SHAPE_POINTS` or `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_points: PoolVector2Array;

		/** Sets the direction the particles will be emitted in when using `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_normals: PoolVector2Array;

		/** Sets the `Color`s to modulate particles by when using `EMISSION_SHAPE_POINTS` or `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_colors: PoolColorArray;

		/** Align Y axis of particle with the direction of its velocity. */
		flag_align_y: boolean;

		/** Unit vector specifying the particles' emission direction. */
		direction: Vector2;

		/** Each particle's initial direction range from `+spread` to `-spread` degrees. */
		spread: number;

		/** Gravity applied to every particle. */
		gravity: Vector2;

		/** Initial velocity magnitude for each particle. Direction comes from `spread` and the node's orientation. */
		initial_velocity: number;

		/** Initial velocity randomness ratio. */
		initial_velocity_random: number;

		/** Initial angular velocity applied to each particle. Sets the speed of rotation of the particle. */
		angular_velocity: number;

		/** Angular velocity randomness ratio. */
		angular_velocity_random: number;

		/** Each particle's angular velocity will vary along this `Curve`. */
		angular_velocity_curve: Curve;

		/** Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second. */
		orbit_velocity: number;

		/** Orbital velocity randomness ratio. */
		orbit_velocity_random: number;

		/** Each particle's orbital velocity will vary along this `Curve`. */
		orbit_velocity_curve: Curve;

		/** Linear acceleration applied to each particle in the direction of motion. */
		linear_accel: number;

		/** Linear acceleration randomness ratio. */
		linear_accel_random: number;

		/** Each particle's linear acceleration will vary along this `Curve`. */
		linear_accel_curve: Curve;

		/** Radial acceleration applied to each particle. Makes particle accelerate away from origin. */
		radial_accel: number;

		/** Radial acceleration randomness ratio. */
		radial_accel_random: number;

		/** Each particle's radial acceleration will vary along this `Curve`. */
		radial_accel_curve: Curve;

		/** Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion. */
		tangential_accel: number;

		/** Tangential acceleration randomness ratio. */
		tangential_accel_random: number;

		/** Each particle's tangential acceleration will vary along this `Curve`. */
		tangential_accel_curve: Curve;

		/** The rate at which particles lose velocity. */
		damping: number;

		/** Damping randomness ratio. */
		damping_random: number;

		/** Damping will vary along this `Curve`. */
		damping_curve: Curve;

		/** Initial rotation applied to each particle, in degrees. */
		angle: number;

		/** Rotation randomness ratio. */
		angle_random: number;

		/** Each particle's rotation will be animated along this `Curve`. */
		angle_curve: Curve;

		/** Initial scale applied to each particle. */
		scale_amount: number;

		/** Scale randomness ratio. */
		scale_amount_random: number;

		/** Each particle's scale will vary along this `Curve`. */
		scale_amount_curve: Curve;

		/** Each particle's initial color. If `texture` is defined, it will be multiplied by this color. */
		color: Color;

		/** Each particle's color will vary along this `Gradient`. */
		color_ramp: Gradient;

		/** Initial hue variation applied to each particle. */
		hue_variation: number;

		/** Hue variation randomness ratio. */
		hue_variation_random: number;

		/** Each particle's hue will vary along this `Curve`. */
		hue_variation_curve: Curve;

		/** Particle animation speed. */
		anim_speed: number;

		/** Animation speed randomness ratio. */
		anim_speed_random: number;

		/** Each particle's animation speed will vary along this `Curve`. */
		anim_speed_curve: Curve;

		/** Particle animation offset. */
		anim_offset: number;

		/** Animation offset randomness ratio. */
		anim_offset_random: number;

		/** Each particle's animation offset will vary along this `Curve`. */
		anim_offset_curve: Curve;

		/** Restarts the particle emitter. */
		restart() : void;

		/** Sets the base value of the parameter specified by `Parameter`. */
		set_param(param: CPUParticles2D.Parameter, value: number) : void;

		/** Returns the base value of the parameter specified by `Parameter`. */
		get_param(param: CPUParticles2D.Parameter) : number;

		/** Sets the randomness factor of the parameter specified by `Parameter`. */
		set_param_randomness(param: CPUParticles2D.Parameter, randomness: number) : void;

		/** Returns the randomness factor of the parameter specified by `Parameter`. */
		get_param_randomness(param: CPUParticles2D.Parameter) : number;

		/** Sets the `Curve` of the parameter specified by `Parameter`. */
		set_param_curve(param: CPUParticles2D.Parameter, curve: Curve) : void;

		/** Returns the `Curve` of the parameter specified by `Parameter`. */
		get_param_curve(param: CPUParticles2D.Parameter) : Curve;

		/** Enables or disables the given flag (see `Flags` for options). */
		set_particle_flag(flag: CPUParticles2D.Flags, enable: boolean) : void;

		/** Returns the enabled state of the given flag (see `Flags` for options). */
		get_particle_flag(flag: CPUParticles2D.Flags) : boolean;

		/** Sets this node's properties to match a given `Particles2D` node with an assigned `ParticlesMaterial`. */
		convert_from_particles(particles: Node) : void;

		/** Getter of `emitting` property */
		is_emitting() : boolean;

		/** Setter of `emitting` property */
		set_emitting(p_value: boolean) : void;

		/** Getter of `amount` property */
		get_amount() : number;

		/** Setter of `amount` property */
		set_amount(p_value: number) : void;

		/** Getter of `lifetime` property */
		get_lifetime() : number;

		/** Setter of `lifetime` property */
		set_lifetime(p_value: number) : void;

		/** Getter of `one_shot` property */
		get_one_shot() : boolean;

		/** Setter of `one_shot` property */
		set_one_shot(p_value: boolean) : void;

		/** Getter of `preprocess` property */
		get_pre_process_time() : number;

		/** Setter of `preprocess` property */
		set_pre_process_time(p_value: number) : void;

		/** Getter of `speed_scale` property */
		get_speed_scale() : number;

		/** Setter of `speed_scale` property */
		set_speed_scale(p_value: number) : void;

		/** Getter of `explosiveness` property */
		get_explosiveness_ratio() : number;

		/** Setter of `explosiveness` property */
		set_explosiveness_ratio(p_value: number) : void;

		/** Getter of `randomness` property */
		get_randomness_ratio() : number;

		/** Setter of `randomness` property */
		set_randomness_ratio(p_value: number) : void;

		/** Getter of `lifetime_randomness` property */
		get_lifetime_randomness() : number;

		/** Setter of `lifetime_randomness` property */
		set_lifetime_randomness(p_value: number) : void;

		/** Getter of `fixed_fps` property */
		get_fixed_fps() : number;

		/** Setter of `fixed_fps` property */
		set_fixed_fps(p_value: number) : void;

		/** Getter of `fract_delta` property */
		get_fractional_delta() : boolean;

		/** Setter of `fract_delta` property */
		set_fractional_delta(p_value: boolean) : void;

		/** Getter of `local_coords` property */
		get_use_local_coordinates() : boolean;

		/** Setter of `local_coords` property */
		set_use_local_coordinates(p_value: boolean) : void;

		/** Getter of `draw_order` property */
		get_draw_order() : number;

		/** Setter of `draw_order` property */
		set_draw_order(p_value: number) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normalmap` property */
		get_normalmap() : Texture;

		/** Setter of `normalmap` property */
		set_normalmap(p_value: Texture) : void;

		/** Getter of `emission_shape` property */
		get_emission_shape() : number;

		/** Setter of `emission_shape` property */
		set_emission_shape(p_value: number) : void;

		/** Getter of `emission_sphere_radius` property */
		get_emission_sphere_radius() : number;

		/** Setter of `emission_sphere_radius` property */
		set_emission_sphere_radius(p_value: number) : void;

		/** Getter of `emission_rect_extents` property */
		get_emission_rect_extents() : Vector2;

		/** Setter of `emission_rect_extents` property */
		set_emission_rect_extents(p_value: Vector2) : void;

		/** Getter of `emission_points` property */
		get_emission_points() : PoolVector2Array;

		/** Setter of `emission_points` property */
		set_emission_points(p_value: PoolVector2Array) : void;

		/** Getter of `emission_normals` property */
		get_emission_normals() : PoolVector2Array;

		/** Setter of `emission_normals` property */
		set_emission_normals(p_value: PoolVector2Array) : void;

		/** Getter of `emission_colors` property */
		get_emission_colors() : PoolColorArray;

		/** Setter of `emission_colors` property */
		set_emission_colors(p_value: PoolColorArray) : void;

		/** Getter of `flag_align_y` property */
		get_particle_flag() : boolean;

		/** Setter of `flag_align_y` property */
		set_particle_flag(p_value: boolean) : void;

		/** Getter of `direction` property */
		get_direction() : Vector2;

		/** Setter of `direction` property */
		set_direction(p_value: Vector2) : void;

		/** Getter of `spread` property */
		get_spread() : number;

		/** Setter of `spread` property */
		set_spread(p_value: number) : void;

		/** Getter of `gravity` property */
		get_gravity() : Vector2;

		/** Setter of `gravity` property */
		set_gravity(p_value: Vector2) : void;

		/** Getter of `initial_velocity` property */
		get_param() : number;

		/** Setter of `initial_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `initial_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `initial_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angular_velocity` property */
		get_param() : number;

		/** Setter of `angular_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `angular_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angular_velocity_curve` property */
		get_param_curve() : Curve;

		/** Setter of `angular_velocity_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `orbit_velocity` property */
		get_param() : number;

		/** Setter of `orbit_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `orbit_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `orbit_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `orbit_velocity_curve` property */
		get_param_curve() : Curve;

		/** Setter of `orbit_velocity_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `linear_accel` property */
		get_param() : number;

		/** Setter of `linear_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `linear_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `linear_accel_curve` property */
		get_param_curve() : Curve;

		/** Setter of `linear_accel_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `radial_accel` property */
		get_param() : number;

		/** Setter of `radial_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `radial_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `radial_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `radial_accel_curve` property */
		get_param_curve() : Curve;

		/** Setter of `radial_accel_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `tangential_accel` property */
		get_param() : number;

		/** Setter of `tangential_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `tangential_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `tangential_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `tangential_accel_curve` property */
		get_param_curve() : Curve;

		/** Setter of `tangential_accel_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `damping` property */
		get_param() : number;

		/** Setter of `damping` property */
		set_param(p_value: number) : void;

		/** Getter of `damping_random` property */
		get_param_randomness() : number;

		/** Setter of `damping_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `damping_curve` property */
		get_param_curve() : Curve;

		/** Setter of `damping_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `angle` property */
		get_param() : number;

		/** Setter of `angle` property */
		set_param(p_value: number) : void;

		/** Getter of `angle_random` property */
		get_param_randomness() : number;

		/** Setter of `angle_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angle_curve` property */
		get_param_curve() : Curve;

		/** Setter of `angle_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `scale_amount` property */
		get_param() : number;

		/** Setter of `scale_amount` property */
		set_param(p_value: number) : void;

		/** Getter of `scale_amount_random` property */
		get_param_randomness() : number;

		/** Setter of `scale_amount_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `scale_amount_curve` property */
		get_param_curve() : Curve;

		/** Setter of `scale_amount_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `color_ramp` property */
		get_color_ramp() : Gradient;

		/** Setter of `color_ramp` property */
		set_color_ramp(p_value: Gradient) : void;

		/** Getter of `hue_variation` property */
		get_param() : number;

		/** Setter of `hue_variation` property */
		set_param(p_value: number) : void;

		/** Getter of `hue_variation_random` property */
		get_param_randomness() : number;

		/** Setter of `hue_variation_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `hue_variation_curve` property */
		get_param_curve() : Curve;

		/** Setter of `hue_variation_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `anim_speed` property */
		get_param() : number;

		/** Setter of `anim_speed` property */
		set_param(p_value: number) : void;

		/** Getter of `anim_speed_random` property */
		get_param_randomness() : number;

		/** Setter of `anim_speed_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `anim_speed_curve` property */
		get_param_curve() : Curve;

		/** Setter of `anim_speed_curve` property */
		set_param_curve(p_value: Curve) : void;

		/** Getter of `anim_offset` property */
		get_param() : number;

		/** Setter of `anim_offset` property */
		set_param(p_value: number) : void;

		/** Getter of `anim_offset_random` property */
		get_param_randomness() : number;

		/** Setter of `anim_offset_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `anim_offset_curve` property */
		get_param_curve() : Curve;

		/** Setter of `anim_offset_curve` property */
		set_param_curve(p_value: Curve) : void;
	}
	namespace CPUParticles2D {
		enum DrawOrder {
			/** Particles are drawn in the order emitted. */
			DRAW_ORDER_INDEX = 0,
			/** Particles are drawn in order of remaining lifetime. */
			DRAW_ORDER_LIFETIME = 1,
		}
		enum EmissionShape {
			/** All particles will be emitted from a single point. */
			EMISSION_SHAPE_POINT = 0,
			/** Particles will be emitted on the surface of a sphere flattened to two dimensions. */
			EMISSION_SHAPE_SPHERE = 1,
			/** Particles will be emitted in the area of a rectangle. */
			EMISSION_SHAPE_RECTANGLE = 2,
			/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle color will be modulated by `emission_colors`. */
			EMISSION_SHAPE_POINTS = 3,
			/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle velocity and rotation will be set based on `emission_normals`. Particle color will be modulated by `emission_colors`. */
			EMISSION_SHAPE_DIRECTED_POINTS = 4,
			/** Represents the size of the `EmissionShape` enum. */
			EMISSION_SHAPE_MAX = 5,
		}
		enum Flags {
			/** Use with `set_particle_flag` to set `flag_align_y`. */
			FLAG_ALIGN_Y_TO_VELOCITY = 0,
			/** Present for consistency with 3D particle nodes, not used in 2D. */
			FLAG_ROTATE_Y = 1,
			/** Present for consistency with 3D particle nodes, not used in 2D. */
			FLAG_DISABLE_Z = 2,
			/** Represents the size of the `Flags` enum. */
			FLAG_MAX = 3,
		}
		enum Parameter {
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set initial velocity properties. */
			PARAM_INITIAL_LINEAR_VELOCITY = 0,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angular velocity properties. */
			PARAM_ANGULAR_VELOCITY = 1,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set orbital velocity properties. */
			PARAM_ORBIT_VELOCITY = 2,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set linear acceleration properties. */
			PARAM_LINEAR_ACCEL = 3,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set radial acceleration properties. */
			PARAM_RADIAL_ACCEL = 4,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set tangential acceleration properties. */
			PARAM_TANGENTIAL_ACCEL = 5,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set damping properties. */
			PARAM_DAMPING = 6,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angle properties. */
			PARAM_ANGLE = 7,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set scale properties. */
			PARAM_SCALE = 8,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set hue variation properties. */
			PARAM_HUE_VARIATION = 9,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation speed properties. */
			PARAM_ANIM_SPEED = 10,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation offset properties. */
			PARAM_ANIM_OFFSET = 11,
			/** Represents the size of the `Parameter` enum. */
			PARAM_MAX = 12,
		}

		/** Particles are drawn in the order emitted. */
		const DRAW_ORDER_INDEX: DrawOrder.DRAW_ORDER_INDEX;

		/** Particles are drawn in order of remaining lifetime. */
		const DRAW_ORDER_LIFETIME: DrawOrder.DRAW_ORDER_LIFETIME;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set initial velocity properties. */
		const PARAM_INITIAL_LINEAR_VELOCITY: Parameter.PARAM_INITIAL_LINEAR_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angular velocity properties. */
		const PARAM_ANGULAR_VELOCITY: Parameter.PARAM_ANGULAR_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set orbital velocity properties. */
		const PARAM_ORBIT_VELOCITY: Parameter.PARAM_ORBIT_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set linear acceleration properties. */
		const PARAM_LINEAR_ACCEL: Parameter.PARAM_LINEAR_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set radial acceleration properties. */
		const PARAM_RADIAL_ACCEL: Parameter.PARAM_RADIAL_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set tangential acceleration properties. */
		const PARAM_TANGENTIAL_ACCEL: Parameter.PARAM_TANGENTIAL_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set damping properties. */
		const PARAM_DAMPING: Parameter.PARAM_DAMPING;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set angle properties. */
		const PARAM_ANGLE: Parameter.PARAM_ANGLE;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set scale properties. */
		const PARAM_SCALE: Parameter.PARAM_SCALE;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set hue variation properties. */
		const PARAM_HUE_VARIATION: Parameter.PARAM_HUE_VARIATION;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation speed properties. */
		const PARAM_ANIM_SPEED: Parameter.PARAM_ANIM_SPEED;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_curve` to set animation offset properties. */
		const PARAM_ANIM_OFFSET: Parameter.PARAM_ANIM_OFFSET;

		/** Represents the size of the `Parameter` enum. */
		const PARAM_MAX: Parameter.PARAM_MAX;

		/** Use with `set_particle_flag` to set `flag_align_y`. */
		const FLAG_ALIGN_Y_TO_VELOCITY: Flags.FLAG_ALIGN_Y_TO_VELOCITY;

		/** Present for consistency with 3D particle nodes, not used in 2D. */
		const FLAG_ROTATE_Y: Flags.FLAG_ROTATE_Y;

		/** Present for consistency with 3D particle nodes, not used in 2D. */
		const FLAG_DISABLE_Z: Flags.FLAG_DISABLE_Z;

		/** Represents the size of the `Flags` enum. */
		const FLAG_MAX: Flags.FLAG_MAX;

		/** All particles will be emitted from a single point. */
		const EMISSION_SHAPE_POINT: EmissionShape.EMISSION_SHAPE_POINT;

		/** Particles will be emitted on the surface of a sphere flattened to two dimensions. */
		const EMISSION_SHAPE_SPHERE: EmissionShape.EMISSION_SHAPE_SPHERE;

		/** Particles will be emitted in the area of a rectangle. */
		const EMISSION_SHAPE_RECTANGLE: EmissionShape.EMISSION_SHAPE_RECTANGLE;

		/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle color will be modulated by `emission_colors`. */
		const EMISSION_SHAPE_POINTS: EmissionShape.EMISSION_SHAPE_POINTS;

		/** Particles will be emitted at a position chosen randomly among `emission_points`. Particle velocity and rotation will be set based on `emission_normals`. Particle color will be modulated by `emission_colors`. */
		const EMISSION_SHAPE_DIRECTED_POINTS: EmissionShape.EMISSION_SHAPE_DIRECTED_POINTS;

		/** Represents the size of the `EmissionShape` enum. */
		const EMISSION_SHAPE_MAX: EmissionShape.EMISSION_SHAPE_MAX;
	}

	/** A CSG Box shape.
	 This node allows you to create a box for use with the CSG system. */
	class CSGBox extends CSGPrimitive {

		/** Width of the box measured from the center of the box. */
		width: number;

		/** Height of the box measured from the center of the box. */
		height: number;

		/** Depth of the box measured from the center of the box. */
		depth: number;

		/** The material used to render the box. */
		material: Material;

		/** Getter of `width` property */
		get_width() : number;

		/** Setter of `width` property */
		set_width(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;

		/** Getter of `depth` property */
		get_depth() : number;

		/** Setter of `depth` property */
		set_depth(p_value: number) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;
	}
	namespace CSGBox {
	}

	/** A CSG node that allows you to combine other CSG modifiers.
	 For complex arrangements of shapes, it is sometimes needed to add structure to your CSG nodes. The CSGCombiner node allows you to create this structure. The node encapsulates the result of the CSG operations of its children. In this way, it is possible to do operations on one set of shapes that are children of one CSGCombiner node, and a set of separate operations on a second set of shapes that are children of a second CSGCombiner node, and then do an operation that takes the two end results as its input to create the final shape. */
	class CSGCombiner extends CSGShape {
	}
	namespace CSGCombiner {
	}

	/** A CSG Cylinder shape.
	 This node allows you to create a cylinder (or cone) for use with the CSG system. */
	class CSGCylinder extends CSGPrimitive {

		/** The radius of the cylinder. */
		radius: number;

		/** The height of the cylinder. */
		height: number;

		/** The number of sides of the cylinder, the higher this number the more detail there will be in the cylinder. */
		sides: number;

		/** If `true` a cone is created, the `radius` will only apply to one side. */
		cone: boolean;

		/** If `true` the normals of the cylinder are set to give a smooth effect making the cylinder seem rounded. If `false` the cylinder will have a flat shaded look. */
		smooth_faces: boolean;

		/** The material used to render the cylinder. */
		material: Material;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;

		/** Getter of `sides` property */
		get_sides() : number;

		/** Setter of `sides` property */
		set_sides(p_value: number) : void;

		/** Getter of `cone` property */
		is_cone() : boolean;

		/** Setter of `cone` property */
		set_cone(p_value: boolean) : void;

		/** Getter of `smooth_faces` property */
		get_smooth_faces() : boolean;

		/** Setter of `smooth_faces` property */
		set_smooth_faces(p_value: boolean) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;
	}
	namespace CSGCylinder {
	}

	/** A CSG Mesh shape that uses a mesh resource.
	 This CSG node allows you to use any mesh resource as a CSG shape, provided it is closed, does not self-intersect, does not contain internal faces and has no edges that connect to more then two faces. */
	class CSGMesh extends CSGPrimitive {

		/** The `Mesh` resource to use as a CSG shape. */
		mesh: Mesh;

		/** The `Material` used in drawing the CSG shape. */
		material: Material;

		/** Getter of `mesh` property */
		get_mesh() : Mesh;

		/** Setter of `mesh` property */
		set_mesh(p_value: Mesh) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;
	}
	namespace CSGMesh {
	}

	/** Extrudes a 2D polygon shape to create a 3D mesh.
	 This node takes a 2D polygon shape and extrudes it to create a 3D mesh. */
	class CSGPolygon extends CSGPrimitive {

		/** Point array that defines the shape that we'll extrude. */
		polygon: PoolVector2Array;

		/** Extrusion mode. */
		mode: number;

		/** Extrusion depth when `mode` is `MODE_DEPTH`. */
		depth: number;

		/** Degrees to rotate our extrusion for each slice when `mode` is `MODE_SPIN`. */
		spin_degrees: number;

		/** Number of extrusion when `mode` is `MODE_SPIN`. */
		spin_sides: number;

		/** The `Shape` object containing the path along which we extrude when `mode` is `MODE_PATH`. */
		path_node: string;

		/** Interval at which a new extrusion slice is added along the path when `mode` is `MODE_PATH`. */
		path_interval: number;

		/** The method by which each slice is rotated along the path when `mode` is `MODE_PATH`. */
		path_rotation: number;

		/** If `false` we extrude centered on our path, if `true` we extrude in relation to the position of our CSGPolygon when `mode` is `MODE_PATH`. */
		path_local: boolean;

		/** If `true` the u component of our uv will continuously increase in unison with the distance traveled along our path when `mode` is `MODE_PATH`. */
		path_continuous_u: boolean;

		/** If `true` the start and end of our path are joined together ensuring there is no seam when `mode` is `MODE_PATH`. */
		path_joined: boolean;

		/** Generates smooth normals so smooth shading is applied to our mesh. */
		smooth_faces: boolean;

		/** Material to use for the resulting mesh. */
		material: Material;

		/** Getter of `polygon` property */
		get_polygon() : PoolVector2Array;

		/** Setter of `polygon` property */
		set_polygon(p_value: PoolVector2Array) : void;

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `depth` property */
		get_depth() : number;

		/** Setter of `depth` property */
		set_depth(p_value: number) : void;

		/** Getter of `spin_degrees` property */
		get_spin_degrees() : number;

		/** Setter of `spin_degrees` property */
		set_spin_degrees(p_value: number) : void;

		/** Getter of `spin_sides` property */
		get_spin_sides() : number;

		/** Setter of `spin_sides` property */
		set_spin_sides(p_value: number) : void;

		/** Getter of `path_node` property */
		get_path_node() : string;

		/** Setter of `path_node` property */
		set_path_node(p_value: string) : void;

		/** Getter of `path_interval` property */
		get_path_interval() : number;

		/** Setter of `path_interval` property */
		set_path_interval(p_value: number) : void;

		/** Getter of `path_rotation` property */
		get_path_rotation() : number;

		/** Setter of `path_rotation` property */
		set_path_rotation(p_value: number) : void;

		/** Getter of `path_local` property */
		is_path_local() : boolean;

		/** Setter of `path_local` property */
		set_path_local(p_value: boolean) : void;

		/** Getter of `path_continuous_u` property */
		is_path_continuous_u() : boolean;

		/** Setter of `path_continuous_u` property */
		set_path_continuous_u(p_value: boolean) : void;

		/** Getter of `path_joined` property */
		is_path_joined() : boolean;

		/** Setter of `path_joined` property */
		set_path_joined(p_value: boolean) : void;

		/** Getter of `smooth_faces` property */
		get_smooth_faces() : boolean;

		/** Setter of `smooth_faces` property */
		set_smooth_faces(p_value: boolean) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;
	}
	namespace CSGPolygon {
		enum Mode {
			/** Shape is extruded to `depth`. */
			MODE_DEPTH = 0,
			/** Shape is extruded by rotating it around an axis. */
			MODE_SPIN = 1,
			/** Shape is extruded along a path set by a `Shape` set in `path_node`. */
			MODE_PATH = 2,
		}
		enum PathRotation {
			/** Slice is not rotated. */
			PATH_ROTATION_POLYGON = 0,
			/** Slice is rotated around the up vector of the path. */
			PATH_ROTATION_PATH = 1,
			/** Slice is rotate to match the path exactly. */
			PATH_ROTATION_PATH_FOLLOW = 2,
		}

		/** Shape is extruded to `depth`. */
		const MODE_DEPTH: Mode.MODE_DEPTH;

		/** Shape is extruded by rotating it around an axis. */
		const MODE_SPIN: Mode.MODE_SPIN;

		/** Shape is extruded along a path set by a `Shape` set in `path_node`. */
		const MODE_PATH: Mode.MODE_PATH;

		/** Slice is not rotated. */
		const PATH_ROTATION_POLYGON: PathRotation.PATH_ROTATION_POLYGON;

		/** Slice is rotated around the up vector of the path. */
		const PATH_ROTATION_PATH: PathRotation.PATH_ROTATION_PATH;

		/** Slice is rotate to match the path exactly. */
		const PATH_ROTATION_PATH_FOLLOW: PathRotation.PATH_ROTATION_PATH_FOLLOW;
	}

	/** Base class for CSG primitives.
	 Parent class for various CSG primitives. It contains code and functionality that is common between them. It cannot be used directly. Instead use one of the various classes that inherit from it. */
	class CSGPrimitive extends CSGShape {

		/** Invert the faces of the mesh. */
		invert_faces: boolean;

		/** Getter of `invert_faces` property */
		is_inverting_faces() : boolean;

		/** Setter of `invert_faces` property */
		set_invert_faces(p_value: boolean) : void;
	}
	namespace CSGPrimitive {
	}

	/** The CSG base class.
	 This is the CSG base class that provides CSG operation support to the various CSG nodes in Godot. */
	class CSGShape extends GeometryInstance {

		/** The operation that is performed on this shape. This is ignored for the first CSG child node as the operation is between this node and the previous child of this nodes parent. */
		operation: number;

		/** Snap makes the mesh snap to a given distance so that the faces of two meshes can be perfectly aligned. A lower value results in greater precision but may be harder to adjust. */
		snap: number;

		/** Calculate tangents for the CSG shape which allows the use of normal maps. This is only applied on the root shape, this setting is ignored on any child. */
		calculate_tangents: boolean;

		/** Adds a collision shape to the physics engine for our CSG shape. This will always act like a static body. Note that the collision shape is still active even if the CSG shape itself is hidden. */
		use_collision: boolean;

		/** The physics layers this area is in.

		 Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.

		 A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. */
		collision_layer: number;

		/** The physics layers this CSG shape scans for collisions. */
		collision_mask: number;

		/** Returns `true` if this is a root shape and is thus the object that is rendered. */
		is_root_shape() : boolean;

		/** Sets individual bits on the collision mask. Use this if you only need to change one layer's value. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Sets individual bits on the layer mask. Use this if you only need to change one layer's value. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Returns an `Array` with two elements, the first is the `Transform` of this node and the second is the root `Mesh` of this node. Only works when this node is the root shape. */
		get_meshes() : any[];

		/** Getter of `operation` property */
		get_operation() : number;

		/** Setter of `operation` property */
		set_operation(p_value: number) : void;

		/** Getter of `snap` property */
		get_snap() : number;

		/** Setter of `snap` property */
		set_snap(p_value: number) : void;

		/** Getter of `calculate_tangents` property */
		is_calculating_tangents() : boolean;

		/** Setter of `calculate_tangents` property */
		set_calculate_tangents(p_value: boolean) : void;

		/** Getter of `use_collision` property */
		is_using_collision() : boolean;

		/** Setter of `use_collision` property */
		set_use_collision(p_value: boolean) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;
	}
	namespace CSGShape {
		enum Operation {
			/** Geometry of both primitives is merged, intersecting geometry is removed. */
			OPERATION_UNION = 0,
			/** Only intersecting geometry remains, the rest is removed. */
			OPERATION_INTERSECTION = 1,
			/** The second shape is subtracted from the first, leaving a dent with its shape. */
			OPERATION_SUBTRACTION = 2,
		}

		/** Geometry of both primitives is merged, intersecting geometry is removed. */
		const OPERATION_UNION: Operation.OPERATION_UNION;

		/** Only intersecting geometry remains, the rest is removed. */
		const OPERATION_INTERSECTION: Operation.OPERATION_INTERSECTION;

		/** The second shape is subtracted from the first, leaving a dent with its shape. */
		const OPERATION_SUBTRACTION: Operation.OPERATION_SUBTRACTION;
	}

	/** A CSG Sphere shape.
	 This node allows you to create a sphere for use with the CSG system. */
	class CSGSphere extends CSGPrimitive {

		/** Radius of the sphere. */
		radius: number;

		/** Number of vertical slices for the sphere. */
		radial_segments: number;

		/** Number of horizontal slices for the sphere. */
		rings: number;

		/** If `true` the normals of the sphere are set to give a smooth effect making the sphere seem rounded. If `false` the sphere will have a flat shaded look. */
		smooth_faces: boolean;

		/** The material used to render the sphere. */
		material: Material;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `radial_segments` property */
		get_radial_segments() : number;

		/** Setter of `radial_segments` property */
		set_radial_segments(p_value: number) : void;

		/** Getter of `rings` property */
		get_rings() : number;

		/** Setter of `rings` property */
		set_rings(p_value: number) : void;

		/** Getter of `smooth_faces` property */
		get_smooth_faces() : boolean;

		/** Setter of `smooth_faces` property */
		set_smooth_faces(p_value: boolean) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;
	}
	namespace CSGSphere {
	}

	/** A CSG Torus shape.
	 This node allows you to create a torus for use with the CSG system. */
	class CSGTorus extends CSGPrimitive {

		/** The inner radius of the torus. */
		inner_radius: number;

		/** The outer radius of the torus. */
		outer_radius: number;

		/** The number of slices the torus is constructed of. */
		sides: number;

		/** The number of edges each ring of the torus is constructed of. */
		ring_sides: number;

		/** If `true` the normals of the torus are set to give a smooth effect making the torus seem rounded. If `false` the torus will have a flat shaded look. */
		smooth_faces: boolean;

		/** The material used to render the torus. */
		material: Material;

		/** Getter of `inner_radius` property */
		get_inner_radius() : number;

		/** Setter of `inner_radius` property */
		set_inner_radius(p_value: number) : void;

		/** Getter of `outer_radius` property */
		get_outer_radius() : number;

		/** Setter of `outer_radius` property */
		set_outer_radius(p_value: number) : void;

		/** Getter of `sides` property */
		get_sides() : number;

		/** Setter of `sides` property */
		set_sides(p_value: number) : void;

		/** Getter of `ring_sides` property */
		get_ring_sides() : number;

		/** Setter of `ring_sides` property */
		set_ring_sides(p_value: number) : void;

		/** Getter of `smooth_faces` property */
		get_smooth_faces() : boolean;

		/** Setter of `smooth_faces` property */
		set_smooth_faces(p_value: boolean) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;
	}
	namespace CSGTorus {
	}

	/** Camera node, displays from a point of view.
	 Camera is a special node that displays what is visible from its current location. Cameras register themselves in the nearest `Viewport` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a `Viewport`, and, without one, a scene registered in that `Viewport` (or higher viewports) can't be displayed. */
	class Camera extends Spatial {

		/** The axis to lock during `fov`/`size` adjustments. Can be either `KEEP_WIDTH` or `KEEP_HEIGHT`. */
		keep_aspect: number;

		/** The culling mask that describes which 3D render layers are rendered by this camera. */
		cull_mask: number;

		/** The `Environment` to use for this camera. */
		environment: Environment;

		/** The horizontal (X) offset of the camera viewport. */
		h_offset: number;

		/** The vertical (Y) offset of the camera viewport. */
		v_offset: number;

		/** If not `DOPPLER_TRACKING_DISABLED`, this camera will simulate the `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` for objects changed in particular `_process` methods. See `DopplerTracking` for possible values. */
		doppler_tracking: number;

		/** The camera's projection mode. In `PROJECTION_PERSPECTIVE` mode, objects' Z distance from the camera's local space scales their perceived size. */
		projection: number;

		/** If `true`, the ancestor `Viewport` is currently using this camera. */
		current: boolean;

		/** The camera's field of view angle (in degrees). Only applicable in perspective mode. Since `keep_aspect` locks one axis, `fov` sets the other axis' field of view angle. */
		fov: number;

		/** The camera's size measured as 1/2 the width or height. Only applicable in orthogonal mode. Since `keep_aspect` locks on axis, `size` sets the other axis' size length. */
		size: number;

		/** The camera's frustum offset. This can be changed from the default to create "tilted frustum" effects such as `url=https://zdoom.org/wiki/Y-shearing`Y-shearing`/url`. */
		frustum_offset: Vector2;

		/** The distance to the near culling boundary for this camera relative to its local Z axis. */
		near: number;

		/** The distance to the far culling boundary for this camera relative to its local Z axis. */
		far: number;

		/** Returns a normal vector in worldspace, that is the result of projecting a point on the `Viewport` rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking. */
		project_ray_normal(screen_point: Vector2) : Vector3;

		/** Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc. */
		project_local_ray_normal(screen_point: Vector2) : Vector3;

		/** Returns a 3D position in worldspace, that is the result of projecting a point on the `Viewport` rectangle by the camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking. */
		project_ray_origin(screen_point: Vector2) : Vector3;

		/** Returns the 2D coordinate in the `Viewport` rectangle that maps to the given 3D point in worldspace. */
		unproject_position(world_point: Vector3) : Vector2;

		/** Returns `true` if the given position is behind the camera.

		 **Note:** A position which returns `false` may still be outside the camera's field of view. */
		is_position_behind(world_point: Vector3) : boolean;

		/** Returns the 3D point in worldspace that maps to the given 2D coordinate in the `Viewport` rectangle on a plane that is the given `z_depth` distance into the scene away from the camera. */
		project_position(screen_point: Vector2, z_depth: number) : Vector3;

		/** Sets the camera projection to perspective mode (see `PROJECTION_PERSPECTIVE`), by specifying a `fov` (field of view) angle in degrees, and the `z_near` and `z_far` clip planes in world-space units. */
		set_perspective(fov: number, z_near: number, z_far: number) : void;

		/** Sets the camera projection to orthogonal mode (see `PROJECTION_ORTHOGONAL`), by specifying a `size`, and the `z_near` and `z_far` clip planes in world-space units. (As a hint, 2D games often use this projection, with values specified in pixels.) */
		set_orthogonal(size: number, z_near: number, z_far: number) : void;

		/** Sets the camera projection to frustum mode (see `PROJECTION_FRUSTUM`), by specifying a `size`, an `offset`, and the `z_near` and `z_far` clip planes in world-space units. */
		set_frustum(size: number, offset: Vector2, z_near: number, z_far: number) : void;

		/** Makes this camera the current camera for the `Viewport` (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added. */
		make_current() : void;

		/** If this is the current camera, remove it from being current. If `enable_next` is `true`, request to make the next camera current, if any. */
		//@ts-ignore
		clear_current(enable_next: boolean = true) : void;

		/** Gets the camera transform. Subclassed cameras such as `InterpolatedCamera` may provide different transforms than the `Node` transform. */
		get_camera_transform() : Transform;

		/** Returns the camera's frustum planes in world-space units as an array of `Plane`s in the following order: near, far, left, top, right, bottom. Not to be confused with `frustum_offset`. */
		get_frustum() : any[];

		/** Returns the camera's RID from the `VisualServer`. */
		get_camera_rid() : RID;

		/** Enables or disables the given `layer` in the `cull_mask`. */
		set_cull_mask_bit(layer: number, enable: boolean) : void;

		/** Returns `true` if the given `layer` in the `cull_mask` is enabled, `false` otherwise. */
		get_cull_mask_bit(layer: number) : boolean;

		/** Getter of `keep_aspect` property */
		get_keep_aspect_mode() : number;

		/** Setter of `keep_aspect` property */
		set_keep_aspect_mode(p_value: number) : void;

		/** Getter of `cull_mask` property */
		get_cull_mask() : number;

		/** Setter of `cull_mask` property */
		set_cull_mask(p_value: number) : void;

		/** Getter of `environment` property */
		get_environment() : Environment;

		/** Setter of `environment` property */
		set_environment(p_value: Environment) : void;

		/** Getter of `h_offset` property */
		get_h_offset() : number;

		/** Setter of `h_offset` property */
		set_h_offset(p_value: number) : void;

		/** Getter of `v_offset` property */
		get_v_offset() : number;

		/** Setter of `v_offset` property */
		set_v_offset(p_value: number) : void;

		/** Getter of `doppler_tracking` property */
		get_doppler_tracking() : number;

		/** Setter of `doppler_tracking` property */
		set_doppler_tracking(p_value: number) : void;

		/** Getter of `projection` property */
		get_projection() : number;

		/** Setter of `projection` property */
		set_projection(p_value: number) : void;

		/** Getter of `current` property */
		is_current() : boolean;

		/** Setter of `current` property */
		set_current(p_value: boolean) : void;

		/** Getter of `fov` property */
		get_fov() : number;

		/** Setter of `fov` property */
		set_fov(p_value: number) : void;

		/** Getter of `size` property */
		get_size() : number;

		/** Setter of `size` property */
		set_size(p_value: number) : void;

		/** Getter of `frustum_offset` property */
		get_frustum_offset() : Vector2;

		/** Setter of `frustum_offset` property */
		set_frustum_offset(p_value: Vector2) : void;

		/** Getter of `near` property */
		get_znear() : number;

		/** Setter of `near` property */
		set_znear(p_value: number) : void;

		/** Getter of `far` property */
		get_zfar() : number;

		/** Setter of `far` property */
		set_zfar(p_value: number) : void;
	}
	namespace Camera {
		enum DopplerTracking {
			/** Disables `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` simulation (default). */
			DOPPLER_TRACKING_DISABLED = 0,
			/** Simulate `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` by tracking positions of objects that are changed in `_process`. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's `pitch shift`). */
			DOPPLER_TRACKING_IDLE_STEP = 1,
			/** Simulate `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` by tracking positions of objects that are changed in `_physics_process`. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's `pitch shift`). */
			DOPPLER_TRACKING_PHYSICS_STEP = 2,
		}
		enum KeepAspect {
			/** Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV. */
			KEEP_WIDTH = 0,
			/** Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV. */
			KEEP_HEIGHT = 1,
		}
		enum Projection {
			/** Perspective projection. Objects on the screen becomes smaller when they are far away. */
			PROJECTION_PERSPECTIVE = 0,
			/** Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are. */
			PROJECTION_ORTHOGONAL = 1,
			/** Frustum projection. This mode allows adjusting `frustum_offset` to create "tilted frustum" effects. */
			PROJECTION_FRUSTUM = 2,
		}

		/** Perspective projection. Objects on the screen becomes smaller when they are far away. */
		const PROJECTION_PERSPECTIVE: Projection.PROJECTION_PERSPECTIVE;

		/** Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are. */
		const PROJECTION_ORTHOGONAL: Projection.PROJECTION_ORTHOGONAL;

		/** Frustum projection. This mode allows adjusting `frustum_offset` to create "tilted frustum" effects. */
		const PROJECTION_FRUSTUM: Projection.PROJECTION_FRUSTUM;

		/** Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV. */
		const KEEP_WIDTH: KeepAspect.KEEP_WIDTH;

		/** Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV. */
		const KEEP_HEIGHT: KeepAspect.KEEP_HEIGHT;

		/** Disables `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` simulation (default). */
		const DOPPLER_TRACKING_DISABLED: DopplerTracking.DOPPLER_TRACKING_DISABLED;

		/** Simulate `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` by tracking positions of objects that are changed in `_process`. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's `pitch shift`). */
		const DOPPLER_TRACKING_IDLE_STEP: DopplerTracking.DOPPLER_TRACKING_IDLE_STEP;

		/** Simulate `url=https://en.wikipedia.org/wiki/Doppler_effect`Doppler effect`/url` by tracking positions of objects that are changed in `_physics_process`. Changes in the relative velocity of this camera compared to those objects affect how Audio is perceived (changing the Audio's `pitch shift`). */
		const DOPPLER_TRACKING_PHYSICS_STEP: DopplerTracking.DOPPLER_TRACKING_PHYSICS_STEP;
	}

	/** Camera node for 2D scenes.
	 Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of `CanvasItem`-based nodes.

	 This node is intended to be a simple helper to get things going quickly and it may happen that more functionality is desired to change how the camera works. To make your own custom camera node, inherit from `Node2D` and change the transform of the canvas by setting `Viewport.canvas_transform` in `Viewport` (you can obtain the current `Viewport` by using `Node.get_viewport`).

	 Note that the `Camera2D` node's `position` doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use `get_camera_screen_center` to get the real position. */
	class Camera2D extends Node2D {

		/** The camera's offset, useful for looking around or camera shake animations. */
		offset: Vector2;

		/** The Camera2D's anchor point. See `AnchorMode` constants. */
		anchor_mode: number;

		/** If `true`, the camera rotates with the target. */
		rotating: boolean;

		/** If `true`, the camera is the active camera for the current scene. Only one camera can be current, so setting a different camera `current` will disable this one. */
		current: boolean;

		/** The camera's zoom relative to the viewport. Values larger than `Vector2(1, 1)` zoom out and smaller values zoom in. For an example, use `Vector2(0.5, 0.5)` for a 2× zoom-in, and `Vector2(4, 4)` for a 4× zoom-out. */
		zoom: Vector2;

		/** The custom `Viewport` node attached to the `Camera2D`. If `null` or not a `Viewport`, uses the default viewport instead. */
		custom_viewport: Node;

		/** The camera's process callback. See `Camera2DProcessMode`. */
		process_mode: number;

		/** Left scroll limit in pixels. The camera stops moving when reaching this value. */
		limit_left: number;

		/** Top scroll limit in pixels. The camera stops moving when reaching this value. */
		limit_top: number;

		/** Right scroll limit in pixels. The camera stops moving when reaching this value. */
		limit_right: number;

		/** Bottom scroll limit in pixels. The camera stops moving when reaching this value. */
		limit_bottom: number;

		/** If `true`, the camera smoothly stops when reaches its limits. */
		limit_smoothed: boolean;

		/** If `true`, the camera only moves when reaching the horizontal drag margins. If `false`, the camera moves horizontally regardless of margins. */
		drag_margin_h_enabled: boolean;

		/** If `true`, the camera only moves when reaching the vertical drag margins. If `false`, the camera moves vertically regardless of margins. */
		drag_margin_v_enabled: boolean;

		/** If `true`, the camera smoothly moves towards the target at `smoothing_speed`. */
		smoothing_enabled: boolean;

		/** Speed in pixels per second of the camera's smoothing effect when `smoothing_enabled` is `true`. */
		smoothing_speed: number;

		/** The horizontal offset of the camera, relative to the drag margins.

		 **Note:** Offset H is used only to force offset relative to margins. It's not updated in any way if drag margins are enabled and can be used to set initial offset. */
		offset_h: number;

		/** The vertical offset of the camera, relative to the drag margins.

		 **Note:** Used the same as `offset_h`. */
		offset_v: number;

		/** Left margin needed to drag the camera. A value of `1` makes the camera move only when reaching the edge of the screen. */
		drag_margin_left: number;

		/** Top margin needed to drag the camera. A value of `1` makes the camera move only when reaching the edge of the screen. */
		drag_margin_top: number;

		/** Right margin needed to drag the camera. A value of `1` makes the camera move only when reaching the edge of the screen. */
		drag_margin_right: number;

		/** Bottom margin needed to drag the camera. A value of `1` makes the camera move only when reaching the edge of the screen. */
		drag_margin_bottom: number;

		/** If `true`, draws the camera's screen rectangle in the editor. */
		editor_draw_screen: boolean;

		/** If `true`, draws the camera's limits rectangle in the editor. */
		editor_draw_limits: boolean;

		/** If `true`, draws the camera's drag margin rectangle in the editor. */
		editor_draw_drag_margin: boolean;

		/** Make this the current 2D camera for the scene (viewport and layer), in case there are many cameras in the scene. */
		make_current() : void;

		/** Removes any `Camera2D` from the ancestor `Viewport`'s internal currently-assigned camera. */
		clear_current() : void;

		/** Sets the specified camera limit. See also `limit_bottom`, `limit_top`, `limit_left`, and `limit_right`. */
		set_limit(margin: Margin, limit: number) : void;

		/** Returns the specified camera limit. See also `limit_bottom`, `limit_top`, `limit_left`, and `limit_right`. */
		get_limit(margin: Margin) : number;

		/** Sets the specified margin. See also `drag_margin_bottom`, `drag_margin_top`, `drag_margin_left`, and `drag_margin_right`. */
		set_drag_margin(margin: Margin, drag_margin: number) : void;

		/** Returns the specified margin. See also `drag_margin_bottom`, `drag_margin_top`, `drag_margin_left`, and `drag_margin_right`. */
		get_drag_margin(margin: Margin) : number;

		/** Returns the camera position. */
		get_camera_position() : Vector2;

		/** Returns the location of the `Camera2D`'s screen-center, relative to the origin. */
		get_camera_screen_center() : Vector2;

		/** Forces the camera to update scroll immediately. */
		force_update_scroll() : void;

		/** Sets the camera's position immediately to its current smoothing destination.

		 This has no effect if smoothing is disabled. */
		reset_smoothing() : void;

		/** Aligns the camera to the tracked node. */
		align() : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `anchor_mode` property */
		get_anchor_mode() : number;

		/** Setter of `anchor_mode` property */
		set_anchor_mode(p_value: number) : void;

		/** Getter of `rotating` property */
		is_rotating() : boolean;

		/** Setter of `rotating` property */
		set_rotating(p_value: boolean) : void;

		/** Getter of `current` property */
		is_current() : boolean;

		/** Setter of `current` property */
		_set_current(p_value: boolean) : void;

		/** Getter of `zoom` property */
		get_zoom() : Vector2;

		/** Setter of `zoom` property */
		set_zoom(p_value: Vector2) : void;

		/** Getter of `custom_viewport` property */
		get_custom_viewport() : Node;

		/** Setter of `custom_viewport` property */
		set_custom_viewport(p_value: Node) : void;

		/** Getter of `process_mode` property */
		get_process_mode() : number;

		/** Setter of `process_mode` property */
		set_process_mode(p_value: number) : void;

		/** Getter of `limit_left` property */
		get_limit() : number;

		/** Setter of `limit_left` property */
		set_limit(p_value: number) : void;

		/** Getter of `limit_top` property */
		get_limit() : number;

		/** Setter of `limit_top` property */
		set_limit(p_value: number) : void;

		/** Getter of `limit_right` property */
		get_limit() : number;

		/** Setter of `limit_right` property */
		set_limit(p_value: number) : void;

		/** Getter of `limit_bottom` property */
		get_limit() : number;

		/** Setter of `limit_bottom` property */
		set_limit(p_value: number) : void;

		/** Getter of `limit_smoothed` property */
		is_limit_smoothing_enabled() : boolean;

		/** Setter of `limit_smoothed` property */
		set_limit_smoothing_enabled(p_value: boolean) : void;

		/** Getter of `drag_margin_h_enabled` property */
		is_h_drag_enabled() : boolean;

		/** Setter of `drag_margin_h_enabled` property */
		set_h_drag_enabled(p_value: boolean) : void;

		/** Getter of `drag_margin_v_enabled` property */
		is_v_drag_enabled() : boolean;

		/** Setter of `drag_margin_v_enabled` property */
		set_v_drag_enabled(p_value: boolean) : void;

		/** Getter of `smoothing_enabled` property */
		is_follow_smoothing_enabled() : boolean;

		/** Setter of `smoothing_enabled` property */
		set_enable_follow_smoothing(p_value: boolean) : void;

		/** Getter of `smoothing_speed` property */
		get_follow_smoothing() : number;

		/** Setter of `smoothing_speed` property */
		set_follow_smoothing(p_value: number) : void;

		/** Getter of `offset_h` property */
		get_h_offset() : number;

		/** Setter of `offset_h` property */
		set_h_offset(p_value: number) : void;

		/** Getter of `offset_v` property */
		get_v_offset() : number;

		/** Setter of `offset_v` property */
		set_v_offset(p_value: number) : void;

		/** Getter of `drag_margin_left` property */
		get_drag_margin() : number;

		/** Setter of `drag_margin_left` property */
		set_drag_margin(p_value: number) : void;

		/** Getter of `drag_margin_top` property */
		get_drag_margin() : number;

		/** Setter of `drag_margin_top` property */
		set_drag_margin(p_value: number) : void;

		/** Getter of `drag_margin_right` property */
		get_drag_margin() : number;

		/** Setter of `drag_margin_right` property */
		set_drag_margin(p_value: number) : void;

		/** Getter of `drag_margin_bottom` property */
		get_drag_margin() : number;

		/** Setter of `drag_margin_bottom` property */
		set_drag_margin(p_value: number) : void;

		/** Getter of `editor_draw_screen` property */
		is_screen_drawing_enabled() : boolean;

		/** Setter of `editor_draw_screen` property */
		set_screen_drawing_enabled(p_value: boolean) : void;

		/** Getter of `editor_draw_limits` property */
		is_limit_drawing_enabled() : boolean;

		/** Setter of `editor_draw_limits` property */
		set_limit_drawing_enabled(p_value: boolean) : void;

		/** Getter of `editor_draw_drag_margin` property */
		is_margin_drawing_enabled() : boolean;

		/** Setter of `editor_draw_drag_margin` property */
		set_margin_drawing_enabled(p_value: boolean) : void;
	}
	namespace Camera2D {
		enum AnchorMode {
			/** The camera's position is fixed so that the top-left corner is always at the origin. */
			ANCHOR_MODE_FIXED_TOP_LEFT = 0,
			/** The camera's position takes into account vertical/horizontal offsets and the screen size. */
			ANCHOR_MODE_DRAG_CENTER = 1,
		}
		enum Camera2DProcessMode {
			/** The camera updates with the `_physics_process` callback. */
			CAMERA2D_PROCESS_PHYSICS = 0,
			/** The camera updates with the `_process` callback. */
			CAMERA2D_PROCESS_IDLE = 1,
		}

		/** The camera's position is fixed so that the top-left corner is always at the origin. */
		const ANCHOR_MODE_FIXED_TOP_LEFT: AnchorMode.ANCHOR_MODE_FIXED_TOP_LEFT;

		/** The camera's position takes into account vertical/horizontal offsets and the screen size. */
		const ANCHOR_MODE_DRAG_CENTER: AnchorMode.ANCHOR_MODE_DRAG_CENTER;

		/** The camera updates with the `_physics_process` callback. */
		const CAMERA2D_PROCESS_PHYSICS: Camera2DProcessMode.CAMERA2D_PROCESS_PHYSICS;

		/** The camera updates with the `_process` callback. */
		const CAMERA2D_PROCESS_IDLE: Camera2DProcessMode.CAMERA2D_PROCESS_IDLE;
	}

	/** A camera feed gives you access to a single physical camera attached to your device.
	 A camera feed gives you access to a single physical camera attached to your device. When enabled, Godot will start capturing frames from the camera which can then be used.

	 **Note:** Many cameras will return YCbCr images which are split into two textures and need to be combined in a shader. Godot does this automatically for you if you set the environment to show the camera image in the background. */
	class CameraFeed extends Reference {

		/** If `true`, the feed is active. */
		feed_is_active: boolean;

		/** The transform applied to the camera's image. */
		feed_transform: Transform2D;

		/** Returns the unique ID for this feed. */
		get_id() : number;

		/** Returns the camera's name. */
		get_name() : string;

		/** Returns the position of camera on the device. */
		get_position() : number;

		/** Getter of `feed_is_active` property */
		is_active() : boolean;

		/** Setter of `feed_is_active` property */
		set_active(p_value: boolean) : void;

		/** Getter of `feed_transform` property */
		get_transform() : Transform2D;

		/** Setter of `feed_transform` property */
		set_transform(p_value: Transform2D) : void;
	}
	namespace CameraFeed {
		enum FeedDataType {
			/** No image set for the feed. */
			FEED_NOIMAGE = 0,
			/** Feed supplies RGB images. */
			FEED_RGB = 1,
			/** Feed supplies YCbCr images that need to be converted to RGB. */
			FEED_YCBCR = 2,
			/** Feed supplies separate Y and CbCr images that need to be combined and converted to RGB. */
			FEED_YCBCR_SEP = 3,
		}
		enum FeedPosition {
			/** Unspecified position. */
			FEED_UNSPECIFIED = 0,
			/** Camera is mounted at the front of the device. */
			FEED_FRONT = 1,
			/** Camera is mounted at the back of the device. */
			FEED_BACK = 2,
		}

		/** No image set for the feed. */
		const FEED_NOIMAGE: FeedDataType.FEED_NOIMAGE;

		/** Feed supplies RGB images. */
		const FEED_RGB: FeedDataType.FEED_RGB;

		/** Feed supplies YCbCr images that need to be converted to RGB. */
		const FEED_YCBCR: FeedDataType.FEED_YCBCR;

		/** Feed supplies separate Y and CbCr images that need to be combined and converted to RGB. */
		const FEED_YCBCR_SEP: FeedDataType.FEED_YCBCR_SEP;

		/** Unspecified position. */
		const FEED_UNSPECIFIED: FeedPosition.FEED_UNSPECIFIED;

		/** Camera is mounted at the front of the device. */
		const FEED_FRONT: FeedPosition.FEED_FRONT;

		/** Camera is mounted at the back of the device. */
		const FEED_BACK: FeedPosition.FEED_BACK;
	}

	/** Server keeping track of different cameras accessible in Godot.
	 The `CameraServer` keeps track of different cameras accessible in Godot. These are external cameras such as webcams or the cameras on your phone.

	 It is notably used to provide AR modules with a video feed from the camera. */
	class CameraServer extends Object {

		/** Returns the `CameraFeed` with this id. */
		static get_feed(index: number) : CameraFeed;

		/** Returns the number of `CameraFeed`s registered. */
		static get_feed_count() : number;

		/** Returns an array of `CameraFeed`s. */
		static feeds() : any[];

		/** Adds a camera feed to the camera server. */
		static add_feed(feed: CameraFeed) : void;

		/** Removes a `CameraFeed`. */
		static remove_feed(feed: CameraFeed) : void;
	}
	namespace CameraServer {

		/** Emitted when a `CameraFeed` is removed (e.g. webcam is unplugged). */
		const camera_feed_removed: 'camera_feed_removed';

		/** Emitted when a `CameraFeed` is added (e.g. webcam is plugged in). */
		const camera_feed_added: 'camera_feed_added';
		enum FeedImage {
			/** The RGBA camera image. */
			FEED_RGBA_IMAGE = 0,
			/** The YCbCr camera image. */
			FEED_YCBCR_IMAGE = 0,
			/** The Y component camera image. */
			FEED_Y_IMAGE = 0,
			/** The CbCr component camera image. */
			FEED_CBCR_IMAGE = 1,
		}

		/** The RGBA camera image. */
		const FEED_RGBA_IMAGE: FeedImage.FEED_RGBA_IMAGE;

		/** The YCbCr camera image. */
		const FEED_YCBCR_IMAGE: FeedImage.FEED_YCBCR_IMAGE;

		/** The Y component camera image. */
		const FEED_Y_IMAGE: FeedImage.FEED_Y_IMAGE;

		/** The CbCr component camera image. */
		const FEED_CBCR_IMAGE: FeedImage.FEED_CBCR_IMAGE;
	}

	/** Texture provided by a `CameraFeed`.
	 This texture gives access to the camera texture provided by a `CameraFeed`.

	 **Note:** Many cameras supply YCbCr images which need to be converted in a shader. */
	class CameraTexture extends Texture {

		/** The ID of the `CameraFeed` for which we want to display the image. */
		camera_feed_id: number;

		/** Which image within the `CameraFeed` we want access to, important if the camera image is split in a Y and CbCr component. */
		which_feed: number;

		/** Convenience property that gives access to the active property of the `CameraFeed`. */
		camera_is_active: boolean;

		/**  */
		flags: number;

		/** Getter of `camera_feed_id` property */
		get_camera_feed_id() : number;

		/** Setter of `camera_feed_id` property */
		set_camera_feed_id(p_value: number) : void;

		/** Getter of `which_feed` property */
		get_which_feed() : number;

		/** Setter of `which_feed` property */
		set_which_feed(p_value: number) : void;

		/** Getter of `camera_is_active` property */
		get_camera_active() : boolean;

		/** Setter of `camera_is_active` property */
		set_camera_active(p_value: boolean) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace CameraTexture {
	}

	/** Base class of anything 2D.
	 Base class of anything 2D. Canvas items are laid out in a tree; children inherit and extend their parent's transform. `CanvasItem` is extended by `Control` for anything GUI-related, and by `Node2D` for anything related to the 2D engine.

	 Any `CanvasItem` can draw. For this, `update` must be called, then `NOTIFICATION_DRAW` will be received on idle time to request redraw. Because of this, canvas items don't need to be redrawn on every frame, improving the performance significantly. Several functions for drawing on the `CanvasItem` are provided (see `draw_*` functions). However, they can only be used inside the `Object._notification`, signal or `_draw` virtual functions.

	 Canvas items are drawn in tree order. By default, children are on top of their parents so a root `CanvasItem` will be drawn behind everything. This behavior can be changed on a per-item basis.

	 A `CanvasItem` can also be hidden, which will also hide its children. It provides many ways to change parameters such as modulation (for itself and its children) and self modulation (only for itself), as well as its blend mode.

	 Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.

	 **Note:** Unless otherwise specified, all methods that have angle parameters must have angles specified as *radians*. To convert degrees to radians, use `@GDScript.deg2rad`. */
	class CanvasItem extends Node {

		/** If `true`, this `CanvasItem` is drawn. For controls that inherit `Popup`, the correct way to make them visible is to call one of the multiple `popup*()` functions instead. */
		visible: boolean;

		/** The color applied to textures on this `CanvasItem`. */
		modulate: Color;

		/** The color applied to textures on this `CanvasItem`. This is not inherited by children `CanvasItem`s. */
		self_modulate: Color;

		/** If `true`, the object draws behind its parent. */
		show_behind_parent: boolean;

		/** If `true`, the object draws on top of its parent. */
		show_on_top: boolean;

		/** The rendering layers in which this `CanvasItem` responds to `Light2D` nodes. */
		light_mask: number;

		/** The material applied to textures on this `CanvasItem`. */
		material: Material;

		/** If `true`, the parent `CanvasItem`'s `material` property is used as this one's material. */
		use_parent_material: boolean;

		/** Overridable function called by the engine (if defined) to draw the canvas item. */
		_draw() : void;

		/** Returns the canvas item RID used by `VisualServer` for this item. */
		get_canvas_item() : RID;

		/** Returns `true` if the node is present in the `SceneTree`, its `visible` property is `true` and its inherited visibility is also `true`. */
		is_visible_in_tree() : boolean;

		/** Show the `CanvasItem` if it's currently hidden. For controls that inherit `Popup`, the correct way to make them visible is to call one of the multiple `popup*()` functions instead. */
		show() : void;

		/** Hide the `CanvasItem` if it's currently visible. */
		hide() : void;

		/** Queue the `CanvasItem` for update. `NOTIFICATION_DRAW` will be called on idle time to request redraw. */
		update() : void;

		/** If `enable` is `true`, the node won't inherit its transform from parent canvas items. */
		set_as_toplevel(enable: boolean) : void;

		/** Returns `true` if the node is set as top-level. See `set_as_toplevel`. */
		is_set_as_toplevel() : boolean;

		/** Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased. */
		//@ts-ignore
		draw_line(p_from: Vector2, to: Vector2, color: Color, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws interconnected line segments with a uniform `color` and `width` and optional antialiasing. */
		//@ts-ignore
		draw_polyline(points: PoolVector2Array, color: Color, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws interconnected line segments with a uniform `width`, segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between `points` and `colors`. */
		//@ts-ignore
		draw_polyline_colors(points: PoolVector2Array, colors: PoolColorArray, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws an arc between the given angles. The larger the value of `point_count`, the smoother the curve. */
		//@ts-ignore
		draw_arc(center: Vector2, radius: number, start_angle: number, end_angle: number, point_count: number, color: Color, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws multiple, parallel lines with a uniform `color`. `width` and `antialiased` are currently not implemented and have no effect. */
		//@ts-ignore
		draw_multiline(points: PoolVector2Array, color: Color, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws multiple, parallel lines with a uniform `width`, segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between `points` and `colors`. */
		//@ts-ignore
		draw_multiline_colors(points: PoolVector2Array, colors: PoolColorArray, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws a rectangle. If `filled` is `true`, the rectangle will be filled with the `color` specified. If `filled` is `false`, the rectangle will be drawn as a stroke with the `color` and `width` specified. If `antialiased` is `true`, the lines will be antialiased.

		 **Note:** `width` and `antialiased` are only effective if `filled` is `false`. */
		//@ts-ignore
		draw_rect(rect: Rect2, color: Color, filled: boolean = true, width: number = 1.0, antialiased: boolean = false) : void;

		/** Draws a colored circle. */
		draw_circle(position: Vector2, radius: number, color: Color) : void;

		/** Draws a texture at a given position. */
		//@ts-ignore
		draw_texture(texture: Texture, position: Vector2, modulate: Color = Color( 1, 1, 1, 1 ), normal_map: Texture = null) : void;

		/** Draws a textured rectangle at a given position, optionally modulated by a color. If `transpose` is `true`, the texture will have its X and Y coordinates swapped. */
		//@ts-ignore
		draw_texture_rect(texture: Texture, rect: Rect2, tile: boolean, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: Texture = null) : void;

		/** Draws a textured rectangle region at a given position, optionally modulated by a color. If `transpose` is `true`, the texture will have its X and Y coordinates swapped. */
		//@ts-ignore
		draw_texture_rect_region(texture: Texture, rect: Rect2, src_rect: Rect2, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: Texture = null, clip_uv: boolean = true) : void;

		/** Draws a styled rectangle. */
		draw_style_box(style_box: StyleBox, rect: Rect2) : void;

		/** Draws a custom primitive. 1 point for a point, 2 points for a line, 3 points for a triangle and 4 points for a quad. */
		//@ts-ignore
		draw_primitive(points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array, texture: Texture = null, width: number = 1.0, normal_map: Texture = null) : void;

		/** Draws a polygon of any amount of points, convex or concave. */
		//@ts-ignore
		draw_polygon(points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array = PoolVector2Array(  ), texture: Texture = null, normal_map: Texture = null, antialiased: boolean = false) : void;

		/** Draws a colored polygon of any amount of points, convex or concave. */
		//@ts-ignore
		draw_colored_polygon(points: PoolVector2Array, color: Color, uvs: PoolVector2Array = PoolVector2Array(  ), texture: Texture = null, normal_map: Texture = null, antialiased: boolean = false) : void;

		/** Draws a string using a custom font. */
		//@ts-ignore
		draw_string(font: Font, position: Vector2, text: string, modulate: Color = Color( 1, 1, 1, 1 ), clip_w: number = -1) : void;

		/** Draws a string character using a custom font. Returns the advance, depending on the character width and kerning with an optional next character. */
		//@ts-ignore
		draw_char(font: Font, position: Vector2, char: string, next: string, modulate: Color = Color( 1, 1, 1, 1 )) : number;

		/** Draws a `Mesh` in 2D, using the provided texture. See `MeshInstance2D` for related documentation. */
		//@ts-ignore
		draw_mesh(mesh: Mesh, texture: Texture, normal_map: Texture = null, transform: Transform2D = Transform2D( 1, 0, 0, 1, 0, 0 ), modulate: Color = Color( 1, 1, 1, 1 )) : void;

		/** Draws a `MultiMesh` in 2D with the provided texture. See `MultiMeshInstance2D` for related documentation. */
		//@ts-ignore
		draw_multimesh(multimesh: MultiMesh, texture: Texture, normal_map: Texture = null) : void;

		/** Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this. */
		draw_set_transform(position: Vector2, rotation: number, scale: Vector2) : void;

		/** Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this. */
		draw_set_transform_matrix(xform: Transform2D) : void;

		/** Returns the transform matrix of this item. */
		get_transform() : Transform2D;

		/** Returns the global transform matrix of this item. */
		get_global_transform() : Transform2D;

		/** Returns the global transform matrix of this item in relation to the canvas. */
		get_global_transform_with_canvas() : Transform2D;

		/** Returns this item's transform in relation to the viewport. */
		get_viewport_transform() : Transform2D;

		/** Returns the viewport's boundaries as a `Rect2`. */
		get_viewport_rect() : Rect2;

		/** Returns the transform matrix of this item's canvas. */
		get_canvas_transform() : Transform2D;

		/** Returns the mouse position relative to this item's position. */
		get_local_mouse_position() : Vector2;

		/** Returns the global position of the mouse. */
		get_global_mouse_position() : Vector2;

		/** Returns the `RID` of the `World2D` canvas where this item is in. */
		get_canvas() : RID;

		/** Returns the `World2D` where this item is in. */
		get_world_2d() : World2D;

		/** If `enable` is `true`, children will be updated with local transform data. */
		set_notify_local_transform(enable: boolean) : void;

		/** Returns `true` if local transform notifications are communicated to children. */
		is_local_transform_notification_enabled() : boolean;

		/** If `enable` is `true`, children will be updated with global transform data. */
		set_notify_transform(enable: boolean) : void;

		/** Returns `true` if global transform notifications are communicated to children. */
		is_transform_notification_enabled() : boolean;

		/** Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations. */
		force_update_transform() : void;

		/** Assigns `screen_point` as this node's new local transform. */
		make_canvas_position_local(screen_point: Vector2) : Vector2;

		/** Transformations issued by `event`'s inputs are applied in local space instead of global space. */
		make_input_local(event: InputEvent) : InputEvent;

		/** Getter of `visible` property */
		is_visible() : boolean;

		/** Setter of `visible` property */
		set_visible(p_value: boolean) : void;

		/** Getter of `modulate` property */
		get_modulate() : Color;

		/** Setter of `modulate` property */
		set_modulate(p_value: Color) : void;

		/** Getter of `self_modulate` property */
		get_self_modulate() : Color;

		/** Setter of `self_modulate` property */
		set_self_modulate(p_value: Color) : void;

		/** Getter of `show_behind_parent` property */
		is_draw_behind_parent_enabled() : boolean;

		/** Setter of `show_behind_parent` property */
		set_draw_behind_parent(p_value: boolean) : void;

		/** Getter of `show_on_top` property */
		_is_on_top() : boolean;

		/** Setter of `show_on_top` property */
		_set_on_top(p_value: boolean) : void;

		/** Getter of `light_mask` property */
		get_light_mask() : number;

		/** Setter of `light_mask` property */
		set_light_mask(p_value: number) : void;

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;

		/** Getter of `use_parent_material` property */
		get_use_parent_material() : boolean;

		/** Setter of `use_parent_material` property */
		set_use_parent_material(p_value: boolean) : void;
	}
	namespace CanvasItem {

		/** Emitted when the item rect has changed. */
		const item_rect_changed: 'item_rect_changed';

		/** Emitted when the `CanvasItem` must redraw. This can only be connected realtime, as deferred will not allow drawing. */
		const draw: 'draw';

		/** Emitted when the visibility (hidden/visible) changes. */
		const visibility_changed: 'visibility_changed';

		/** Emitted when becoming hidden. */
		const hide: 'hide';
		enum BlendMode {
			/** Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value. */
			BLEND_MODE_MIX = 0,
			/** Additive blending mode. */
			BLEND_MODE_ADD = 1,
			/** Subtractive blending mode. */
			BLEND_MODE_SUB = 2,
			/** Multiplicative blending mode. */
			BLEND_MODE_MUL = 3,
			/** Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value. */
			BLEND_MODE_PREMULT_ALPHA = 4,
			/** Disables blending mode. Colors including alpha are written as-is. Only applicable for render targets with a transparent background. No lighting will be applied. */
			BLEND_MODE_DISABLED = 5,
		}

		/** Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value. */
		const BLEND_MODE_MIX: BlendMode.BLEND_MODE_MIX;

		/** Additive blending mode. */
		const BLEND_MODE_ADD: BlendMode.BLEND_MODE_ADD;

		/** Subtractive blending mode. */
		const BLEND_MODE_SUB: BlendMode.BLEND_MODE_SUB;

		/** Multiplicative blending mode. */
		const BLEND_MODE_MUL: BlendMode.BLEND_MODE_MUL;

		/** Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value. */
		const BLEND_MODE_PREMULT_ALPHA: BlendMode.BLEND_MODE_PREMULT_ALPHA;

		/** Disables blending mode. Colors including alpha are written as-is. Only applicable for render targets with a transparent background. No lighting will be applied. */
		const BLEND_MODE_DISABLED: BlendMode.BLEND_MODE_DISABLED;

		/** The `CanvasItem`'s transform has changed. This notification is only received if enabled by `set_notify_transform` or `set_notify_local_transform`. */
		const NOTIFICATION_TRANSFORM_CHANGED: 2000;

		/** The `CanvasItem` is requested to draw. */
		const NOTIFICATION_DRAW: 30;

		/** The `CanvasItem`'s visibility has changed. */
		const NOTIFICATION_VISIBILITY_CHANGED: 31;

		/** The `CanvasItem` has entered the canvas. */
		const NOTIFICATION_ENTER_CANVAS: 32;

		/** The `CanvasItem` has exited the canvas. */
		const NOTIFICATION_EXIT_CANVAS: 33;
	}

	/** A material for `CanvasItem`s.
	 `CanvasItemMaterial`s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a `ShaderMaterial` to more fully customize a material's interactions with a `CanvasItem`. */
	class CanvasItemMaterial extends Material {

		/** The manner in which a material's rendering is applied to underlying textures. */
		blend_mode: number;

		/** The manner in which material reacts to lighting. */
		light_mode: number;

		/** If `true`, enable spritesheet-based animation features when assigned to `Particles2D` and `CPUParticles2D` nodes. The `ParticlesMaterial.anim_speed` or `CPUParticles2D.anim_speed` should also be set to a positive value for the animation to play.

		 This property (and other `particles_anim_*` properties that depend on it) has no effect on other types of nodes. */
		particles_animation: boolean;

		/** The number of columns in the spritesheet assigned as `Texture` for a `Particles2D` or `CPUParticles2D`.

		 **Note:** This property is only used and visible in the editor if `particles_animation` is `true`. */
		particles_anim_h_frames: number;

		/** The number of rows in the spritesheet assigned as `Texture` for a `Particles2D` or `CPUParticles2D`.

		 **Note:** This property is only used and visible in the editor if `particles_animation` is `true`. */
		particles_anim_v_frames: number;

		/** If `true`, the particles animation will loop.

		 **Note:** This property is only used and visible in the editor if `particles_animation` is `true`. */
		particles_anim_loop: boolean;

		/** Getter of `blend_mode` property */
		get_blend_mode() : number;

		/** Setter of `blend_mode` property */
		set_blend_mode(p_value: number) : void;

		/** Getter of `light_mode` property */
		get_light_mode() : number;

		/** Setter of `light_mode` property */
		set_light_mode(p_value: number) : void;

		/** Getter of `particles_animation` property */
		get_particles_animation() : boolean;

		/** Setter of `particles_animation` property */
		set_particles_animation(p_value: boolean) : void;

		/** Getter of `particles_anim_h_frames` property */
		get_particles_anim_h_frames() : number;

		/** Setter of `particles_anim_h_frames` property */
		set_particles_anim_h_frames(p_value: number) : void;

		/** Getter of `particles_anim_v_frames` property */
		get_particles_anim_v_frames() : number;

		/** Setter of `particles_anim_v_frames` property */
		set_particles_anim_v_frames(p_value: number) : void;

		/** Getter of `particles_anim_loop` property */
		get_particles_anim_loop() : boolean;

		/** Setter of `particles_anim_loop` property */
		set_particles_anim_loop(p_value: boolean) : void;
	}
	namespace CanvasItemMaterial {
		enum BlendMode {
			/** Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value. */
			BLEND_MODE_MIX = 0,
			/** Additive blending mode. */
			BLEND_MODE_ADD = 1,
			/** Subtractive blending mode. */
			BLEND_MODE_SUB = 2,
			/** Multiplicative blending mode. */
			BLEND_MODE_MUL = 3,
			/** Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value. */
			BLEND_MODE_PREMULT_ALPHA = 4,
		}
		enum LightMode {
			/** Render the material using both light and non-light sensitive material properties. */
			LIGHT_MODE_NORMAL = 0,
			/** Render the material as if there were no light. */
			LIGHT_MODE_UNSHADED = 1,
			/** Render the material as if there were only light. */
			LIGHT_MODE_LIGHT_ONLY = 2,
		}

		/** Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value. */
		const BLEND_MODE_MIX: BlendMode.BLEND_MODE_MIX;

		/** Additive blending mode. */
		const BLEND_MODE_ADD: BlendMode.BLEND_MODE_ADD;

		/** Subtractive blending mode. */
		const BLEND_MODE_SUB: BlendMode.BLEND_MODE_SUB;

		/** Multiplicative blending mode. */
		const BLEND_MODE_MUL: BlendMode.BLEND_MODE_MUL;

		/** Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value. */
		const BLEND_MODE_PREMULT_ALPHA: BlendMode.BLEND_MODE_PREMULT_ALPHA;

		/** Render the material using both light and non-light sensitive material properties. */
		const LIGHT_MODE_NORMAL: LightMode.LIGHT_MODE_NORMAL;

		/** Render the material as if there were no light. */
		const LIGHT_MODE_UNSHADED: LightMode.LIGHT_MODE_UNSHADED;

		/** Render the material as if there were only light. */
		const LIGHT_MODE_LIGHT_ONLY: LightMode.LIGHT_MODE_LIGHT_ONLY;
	}

	/** Canvas drawing layer.
	 Canvas drawing layer. `CanvasItem` nodes that are direct or indirect children of a `CanvasLayer` will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a `CanvasLayer` with index -1 will be drawn below, and one with index 1 will be drawn above. This is very useful for HUDs (in layer 1+ or above), or backgrounds (in layer -1 or below). */
	class CanvasLayer extends Node {

		/** Layer index for draw order. Lower values are drawn first. */
		layer: number;

		/** The layer's base offset. */
		offset: Vector2;

		/** The layer's rotation in degrees. */
		rotation_degrees: number;

		/** The layer's rotation in radians. */
		rotation: number;

		/** The layer's scale. */
		scale: Vector2;

		/** The layer's transform. */
		transform: Transform2D;

		/** The custom `Viewport` node assigned to the `CanvasLayer`. If `null`, uses the default viewport instead. */
		custom_viewport: Node;

		/** Sets the layer to follow the viewport in order to simulate a pseudo 3D effect. */
		follow_viewport_enable: boolean;

		/** Scales the layer when using `follow_viewport_enable`. Layers moving into the foreground should have increasing scales, while layers moving into the background should have decreasing scales. */
		follow_viewport_scale: number;

		/** Returns the RID of the canvas used by this layer. */
		get_canvas() : RID;

		/** Getter of `layer` property */
		get_layer() : number;

		/** Setter of `layer` property */
		set_layer(p_value: number) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `rotation_degrees` property */
		get_rotation_degrees() : number;

		/** Setter of `rotation_degrees` property */
		set_rotation_degrees(p_value: number) : void;

		/** Getter of `rotation` property */
		get_rotation() : number;

		/** Setter of `rotation` property */
		set_rotation(p_value: number) : void;

		/** Getter of `scale` property */
		get_scale() : Vector2;

		/** Setter of `scale` property */
		set_scale(p_value: Vector2) : void;

		/** Getter of `transform` property */
		get_transform() : Transform2D;

		/** Setter of `transform` property */
		set_transform(p_value: Transform2D) : void;

		/** Getter of `custom_viewport` property */
		get_custom_viewport() : Node;

		/** Setter of `custom_viewport` property */
		set_custom_viewport(p_value: Node) : void;

		/** Getter of `follow_viewport_enable` property */
		is_following_viewport() : boolean;

		/** Setter of `follow_viewport_enable` property */
		set_follow_viewport(p_value: boolean) : void;

		/** Getter of `follow_viewport_scale` property */
		get_follow_viewport_scale() : number;

		/** Setter of `follow_viewport_scale` property */
		set_follow_viewport_scale(p_value: number) : void;
	}
	namespace CanvasLayer {
	}

	/** Tint the entire canvas.
	 `CanvasModulate` tints the canvas elements using its assigned `color`. */
	class CanvasModulate extends Node2D {

		/** The tint color to apply. */
		color: Color;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;
	}
	namespace CanvasModulate {
	}

	/** Class representing a capsule-shaped `PrimitiveMesh`.
	  */
	class CapsuleMesh extends PrimitiveMesh {

		/** Radius of the capsule mesh. */
		radius: number;

		/** Height of the capsule mesh from the center point. */
		mid_height: number;

		/** Number of radial segments on the capsule mesh. */
		radial_segments: number;

		/** Number of rings along the height of the capsule. */
		rings: number;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `mid_height` property */
		get_mid_height() : number;

		/** Setter of `mid_height` property */
		set_mid_height(p_value: number) : void;

		/** Getter of `radial_segments` property */
		get_radial_segments() : number;

		/** Setter of `radial_segments` property */
		set_radial_segments(p_value: number) : void;

		/** Getter of `rings` property */
		get_rings() : number;

		/** Setter of `rings` property */
		set_rings(p_value: number) : void;
	}
	namespace CapsuleMesh {
	}

	/** Capsule shape for collisions.
	  */
	class CapsuleShape extends Shape {

		/** The capsule's radius. */
		radius: number;

		/** The capsule's height. */
		height: number;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;
	}
	namespace CapsuleShape {
	}

	/** Capsule shape for 2D collisions.
	  */
	class CapsuleShape2D extends Shape2D {

		/** The capsule's radius. */
		radius: number;

		/** The capsule's height. */
		height: number;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;
	}
	namespace CapsuleShape2D {
	}

	/** Keeps children controls centered.
	 CenterContainer keeps children controls centered. This container keeps all children to their minimum size, in the center. */
	class CenterContainer extends Container {

		/** If `true`, centers children relative to the `CenterContainer`'s top left corner. */
		use_top_left: boolean;

		/** Getter of `use_top_left` property */
		is_using_top_left() : boolean;

		/** Setter of `use_top_left` property */
		set_use_top_left(p_value: boolean) : void;
	}
	namespace CenterContainer {
	}

	/** Controls how an individual character will be displayed in a `RichTextEffect`.
	 By setting various properties on this object, you can control how individual characters will be displayed in a `RichTextEffect`. */
	class CharFXTransform extends Reference {

		/** The index of the current character (starting from 0). Setting this property won't affect drawing. */
		relative_index: number;

		/** The index of the current character (starting from 0). Setting this property won't affect drawing. */
		absolute_index: number;

		/** The time elapsed since the `RichTextLabel` was added to the scene tree (in seconds). Time stops when the project is paused, unless the `RichTextLabel`'s `Node.pause_mode` is set to `Node.PAUSE_MODE_PROCESS`.

		 **Note:** Time still passes while the `RichTextLabel` is hidden. */
		elapsed_time: number;

		/** If `true`, the character will be drawn. If `false`, the character will be hidden. Characters around hidden characters will reflow to take the space of hidden characters. If this is not desired, set their `color` to `Color(1, 1, 1, 0)` instead. */
		visible: boolean;

		/** The position offset the character will be drawn with (in pixels). */
		offset: Vector2;

		/** The color the character will be drawn with. */
		color: Color;

		/** Contains the arguments passed in the opening BBCode tag. By default, arguments are strings; if their contents match a type such as `bool`, `int` or `float`, they will be converted automatically. Color codes in the form `#rrggbb` or `#rgb` will be converted to an opaque `Color`. String arguments may not contain spaces, even if they're quoted. If present, quotes will also be present in the final string.

		 For example, the opening BBCode tag ``example foo=hello bar=true baz=42 color=#ffffff`` will map to the following `Dictionary`:

		 ```gdscript
		 {"foo": "hello", "bar": true, "baz": 42, "color": Color(1, 1, 1, 1)}
		 ``` */
		env: object;

		/** The Unicode codepoint the character will use. This only affects non-whitespace characters. `@GDScript.ord` can be useful here. For example, the following will replace all characters with asterisks:

		 ```gdscript
		 # `char_fx` is the CharFXTransform parameter from `_process_custom_fx()`.
		 # See the RichTextEffect documentation for details.
		 char_fx.character = ord("*")
		 ``` */
		character: number;

		/** Getter of `relative_index` property */
		get_relative_index() : number;

		/** Setter of `relative_index` property */
		set_relative_index(p_value: number) : void;

		/** Getter of `absolute_index` property */
		get_absolute_index() : number;

		/** Setter of `absolute_index` property */
		set_absolute_index(p_value: number) : void;

		/** Getter of `elapsed_time` property */
		get_elapsed_time() : number;

		/** Setter of `elapsed_time` property */
		set_elapsed_time(p_value: number) : void;

		/** Getter of `visible` property */
		is_visible() : boolean;

		/** Setter of `visible` property */
		set_visibility(p_value: boolean) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `env` property */
		get_environment() : object;

		/** Setter of `env` property */
		set_environment(p_value: object) : void;

		/** Getter of `character` property */
		get_character() : number;

		/** Setter of `character` property */
		set_character(p_value: number) : void;
	}
	namespace CharFXTransform {
	}

	/** Binary choice user interface widget. See also `CheckButton`.
	 A checkbox allows the user to make a binary choice (choosing only one of two possible options). It's similar to `CheckButton` in functionality, but it has a different apperance. To follow established UX patterns, it's recommended to use CheckBox when toggling it has **no** immediate effect on something. For instance, it should be used when toggling it will only do something once a confirmation button is pressed. */
	class CheckBox extends Button {

		/**  */
		align: number;

		/**  */
		toggle_mode: boolean;

		/** Getter of `align` property */
		get_text_align() : number;

		/** Setter of `align` property */
		set_text_align(p_value: number) : void;

		/** Getter of `toggle_mode` property */
		is_toggle_mode() : boolean;

		/** Setter of `toggle_mode` property */
		set_toggle_mode(p_value: boolean) : void;
	}
	namespace CheckBox {
	}

	/** Checkable button. See also `CheckBox`.
	 CheckButton is a toggle button displayed as a check field. It's similar to `CheckBox` in functionality, but it has a different apperance. To follow established UX patterns, it's recommended to use CheckButton when toggling it has an **immediate** effect on something. For instance, it should be used if toggling it enables/disables a setting without requiring the user to press a confirmation button. */
	class CheckButton extends Button {

		/**  */
		align: number;

		/**  */
		toggle_mode: boolean;

		/** Getter of `align` property */
		get_text_align() : number;

		/** Setter of `align` property */
		set_text_align(p_value: number) : void;

		/** Getter of `toggle_mode` property */
		is_toggle_mode() : boolean;

		/** Setter of `toggle_mode` property */
		set_toggle_mode(p_value: boolean) : void;
	}
	namespace CheckButton {
	}

	/** Circular shape for 2D collisions.
	 Circular shape for 2D collisions. This shape is useful for modeling balls or small characters and its collision detection with everything else is very fast. */
	class CircleShape2D extends Shape2D {

		/** The circle's radius. */
		radius: number;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;
	}
	namespace CircleShape2D {
	}

	/** Class information repository.
	 Provides access to metadata stored for every available class. */
	class ClassDB extends Object {

		/** Returns the names of all the classes available. */
		static get_class_list() : PoolStringArray;

		/** Returns the names of all the classes that directly or indirectly inherit from `class`. */
		static get_inheriters_from_class(p_class: string) : PoolStringArray;

		/** Returns the parent class of `class`. */
		static get_parent_class(p_class: string) : string;

		/** Returns whether the specified `class` is available or not. */
		static class_exists(p_class: string) : boolean;

		/** Returns whether `inherits` is an ancestor of `class` or not. */
		static is_parent_class(p_class: string, inherits: string) : boolean;

		/** Returns `true` if you can instance objects from the specified `class`, `false` in other case. */
		static can_instance(p_class: string) : boolean;

		/** Creates an instance of `class`. */
		static instance(p_class: string) : any;

		/** Returns whether `class` or its ancestry has a signal called `signal` or not. */
		static class_has_signal(p_class: string, signal: string) : boolean;

		/** Returns the `signal` data of `class` or its ancestry. The returned value is a `Dictionary` with the following keys: `args`, `default_args`, `flags`, `id`, `name`, `return: (class_name, hint, hint_string, name, type, usage)`. */
		static class_get_signal(p_class: string, signal: string) : object;

		/** Returns an array with all the signals of `class` or its ancestry if `no_inheritance` is `false`. Every element of the array is a `Dictionary` as described in `class_get_signal`. */
		//@ts-ignore
		static class_get_signal_list(p_class: string, no_inheritance: boolean = false) : any[];

		/** Returns an array with all the properties of `class` or its ancestry if `no_inheritance` is `false`. */
		//@ts-ignore
		static class_get_property_list(p_class: string, no_inheritance: boolean = false) : any[];

		/** Returns the value of `property` of `class` or its ancestry. */
		static class_get_property(p_object: Object, property: string) : any;

		/** Sets `property` value of `class` to `value`. */
		static class_set_property(p_object: Object, property: string, value: any) : number;

		/** Returns whether `class` (or its ancestry if `no_inheritance` is `false`) has a method called `method` or not. */
		//@ts-ignore
		static class_has_method(p_class: string, method: string, no_inheritance: boolean = false) : boolean;

		/** Returns an array with all the methods of `class` or its ancestry if `no_inheritance` is `false`. Every element of the array is a `Dictionary` with the following keys: `args`, `default_args`, `flags`, `id`, `name`, `return: (class_name, hint, hint_string, name, type, usage)`. */
		//@ts-ignore
		static class_get_method_list(p_class: string, no_inheritance: boolean = false) : any[];

		/** Returns an array with the names all the integer constants of `class` or its ancestry. */
		//@ts-ignore
		static class_get_integer_constant_list(p_class: string, no_inheritance: boolean = false) : PoolStringArray;

		/** Returns whether `class` or its ancestry has an integer constant called `name` or not. */
		static class_has_integer_constant(p_class: string, name: string) : boolean;

		/** Returns the value of the integer constant `name` of `class` or its ancestry. Always returns 0 when the constant could not be found. */
		static class_get_integer_constant(p_class: string, name: string) : number;

		/** Returns a category associated with the class for use in documentation and the Asset Library. Debug mode required. */
		static class_get_category(p_class: string) : string;

		/** Returns whether this `class` is enabled or not. */
		static is_class_enabled(p_class: string) : boolean;
	}
	namespace ClassDB {
	}

	/** A `Camera` that includes collision.
	 This node extends `Camera` to add collisions with `Area` and/or `PhysicsBody` nodes. The camera cannot move through colliding objects. */
	class ClippedCamera extends Camera {

		/** The camera's collision margin. The camera can't get closer than this distance to a colliding object. */
		margin: number;

		/** The camera's process callback. See `ProcessMode`. */
		process_mode: number;

		/** The camera's collision mask. Only objects in at least one collision layer matching the mask will be detected. */
		collision_mask: number;

		/** If `true`, the camera stops on contact with `Area`s. */
		clip_to_areas: boolean;

		/** If `true`, the camera stops on contact with `PhysicsBody`s. */
		clip_to_bodies: boolean;

		/** Sets the specified bit index to the `value`.

		 **Note:** Bit indices range from 0-19. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns `true` if the specified bit index is on.

		 **Note:** Bit indices range from 0-19. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Adds a collision exception so the camera does not collide with the specified `RID`. */
		add_exception_rid(rid: RID) : void;

		/** Adds a collision exception so the camera does not collide with the specified node. */
		add_exception(node: Object) : void;

		/** Removes a collision exception with the specified `RID`. */
		remove_exception_rid(rid: RID) : void;

		/** Removes a collision exception with the specified node. */
		remove_exception(node: Object) : void;

		/** Returns the distance the camera has been offset due to a collision. */
		get_clip_offset() : number;

		/** Removes all collision exceptions. */
		clear_exceptions() : void;

		/** Getter of `margin` property */
		get_margin() : number;

		/** Setter of `margin` property */
		set_margin(p_value: number) : void;

		/** Getter of `process_mode` property */
		get_process_mode() : number;

		/** Setter of `process_mode` property */
		set_process_mode(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `clip_to_areas` property */
		is_clip_to_areas_enabled() : boolean;

		/** Setter of `clip_to_areas` property */
		set_clip_to_areas(p_value: boolean) : void;

		/** Getter of `clip_to_bodies` property */
		is_clip_to_bodies_enabled() : boolean;

		/** Setter of `clip_to_bodies` property */
		set_clip_to_bodies(p_value: boolean) : void;
	}
	namespace ClippedCamera {
		enum ProcessMode {
			/** The camera updates with the `_physics_process` callback. */
			CLIP_PROCESS_PHYSICS = 0,
			/** The camera updates with the `_process` callback. */
			CLIP_PROCESS_IDLE = 1,
		}

		/** The camera updates with the `_physics_process` callback. */
		const CLIP_PROCESS_PHYSICS: ProcessMode.CLIP_PROCESS_PHYSICS;

		/** The camera updates with the `_process` callback. */
		const CLIP_PROCESS_IDLE: ProcessMode.CLIP_PROCESS_IDLE;
	}

	/** Base node for collision objects.
	 CollisionObject is the base class for physics objects. It can hold any number of collision `Shape`s. Each shape must be assigned to a *shape owner*. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the `shape_owner_*` methods. */
	class CollisionObject extends Spatial {

		/** If `true`, the `CollisionObject`'s shapes will respond to `RayCast`s. */
		input_ray_pickable: boolean;

		/** If `true`, the `CollisionObject` will continue to receive input events as the mouse is dragged across its shapes. */
		input_capture_on_drag: boolean;

		/** Accepts unhandled `InputEvent`s. `click_position` is the clicked location in world space and `click_normal` is the normal vector extending from the clicked surface of the `Shape` at `shape_idx`. Connect to the `input_event` signal to easily pick up these events. */
		_input_event(camera: Object, event: InputEvent, click_position: Vector3, click_normal: Vector3, shape_idx: number) : void;

		/** Returns the object's `RID`. */
		get_rid() : RID;

		/** Creates a new shape owner for the given object. Returns `owner_id` of the new owner for future reference. */
		create_shape_owner(owner: Object) : number;

		/** Removes the given shape owner. */
		remove_shape_owner(owner_id: number) : void;

		/** Returns an `Array` of `owner_id` identifiers. You can use these ids in other methods that take `owner_id` as an argument. */
		get_shape_owners() : any[];

		/** Sets the `Transform` of the given shape owner. */
		shape_owner_set_transform(owner_id: number, transform: Transform) : void;

		/** Returns the shape owner's `Transform`. */
		shape_owner_get_transform(owner_id: number) : Transform;

		/** Returns the parent object of the given shape owner. */
		shape_owner_get_owner(owner_id: number) : Object;

		/** If `true`, disables the given shape owner. */
		shape_owner_set_disabled(owner_id: number, disabled: boolean) : void;

		/** If `true`, the shape owner and its shapes are disabled. */
		is_shape_owner_disabled(owner_id: number) : boolean;

		/** Adds a `Shape` to the shape owner. */
		shape_owner_add_shape(owner_id: number, shape: Shape) : void;

		/** Returns the number of shapes the given shape owner contains. */
		shape_owner_get_shape_count(owner_id: number) : number;

		/** Returns the `Shape` with the given id from the given shape owner. */
		shape_owner_get_shape(owner_id: number, shape_id: number) : Shape;

		/** Returns the child index of the `Shape` with the given id from the given shape owner. */
		shape_owner_get_shape_index(owner_id: number, shape_id: number) : number;

		/** Removes a shape from the given shape owner. */
		shape_owner_remove_shape(owner_id: number, shape_id: number) : void;

		/** Removes all shapes from the shape owner. */
		shape_owner_clear_shapes(owner_id: number) : void;

		/** Returns the `owner_id` of the given shape. */
		shape_find_owner(shape_index: number) : number;

		/** Getter of `input_ray_pickable` property */
		is_ray_pickable() : boolean;

		/** Setter of `input_ray_pickable` property */
		set_ray_pickable(p_value: boolean) : void;

		/** Getter of `input_capture_on_drag` property */
		get_capture_input_on_drag() : boolean;

		/** Setter of `input_capture_on_drag` property */
		set_capture_input_on_drag(p_value: boolean) : void;
	}
	namespace CollisionObject {

		/** Emitted when the mouse pointer exits all this object's shapes. */
		const mouse_exited: 'mouse_exited';

		/** Emitted when the mouse pointer enters any of this object's shapes. */
		const mouse_entered: 'mouse_entered';

		/** Emitted when `_input_event` receives an event. See its description for details. */
		const input_event: 'input_event';
	}

	/** Base node for 2D collision objects.
	 CollisionObject2D is the base class for 2D physics objects. It can hold any number of 2D collision `Shape2D`s. Each shape must be assigned to a *shape owner*. The CollisionObject2D can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the `shape_owner_*` methods. */
	class CollisionObject2D extends Node2D {

		/** If `true`, this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events. Requires at least one `collision_layer` bit to be set. */
		input_pickable: boolean;

		/** Accepts unhandled `InputEvent`s. Requires `input_pickable` to be `true`. `shape_idx` is the child index of the clicked `Shape2D`. Connect to the `input_event` signal to easily pick up these events. */
		_input_event(viewport: Object, event: InputEvent, shape_idx: number) : void;

		/** Returns the object's `RID`. */
		get_rid() : RID;

		/** Creates a new shape owner for the given object. Returns `owner_id` of the new owner for future reference. */
		create_shape_owner(owner: Object) : number;

		/** Removes the given shape owner. */
		remove_shape_owner(owner_id: number) : void;

		/** Returns an `Array` of `owner_id` identifiers. You can use these ids in other methods that take `owner_id` as an argument. */
		get_shape_owners() : any[];

		/** Sets the `Transform2D` of the given shape owner. */
		shape_owner_set_transform(owner_id: number, transform: Transform2D) : void;

		/** Returns the shape owner's `Transform2D`. */
		shape_owner_get_transform(owner_id: number) : Transform2D;

		/** Returns the parent object of the given shape owner. */
		shape_owner_get_owner(owner_id: number) : Object;

		/** If `true`, disables the given shape owner. */
		shape_owner_set_disabled(owner_id: number, disabled: boolean) : void;

		/** If `true`, the shape owner and its shapes are disabled. */
		is_shape_owner_disabled(owner_id: number) : boolean;

		/** If `enable` is `true`, collisions for the shape owner originating from this `CollisionObject2D` will not be reported to collided with `CollisionObject2D`s. */
		shape_owner_set_one_way_collision(owner_id: number, enable: boolean) : void;

		/** Returns `true` if collisions for the shape owner originating from this `CollisionObject2D` will not be reported to collided with `CollisionObject2D`s. */
		is_shape_owner_one_way_collision_enabled(owner_id: number) : boolean;

		/** Sets the `one_way_collision_margin` of the shape owner identified by given `owner_id` to `margin` pixels. */
		shape_owner_set_one_way_collision_margin(owner_id: number, margin: number) : void;

		/** Returns the `one_way_collision_margin` of the shape owner identified by given `owner_id`. */
		get_shape_owner_one_way_collision_margin(owner_id: number) : number;

		/** Adds a `Shape2D` to the shape owner. */
		shape_owner_add_shape(owner_id: number, shape: Shape2D) : void;

		/** Returns the number of shapes the given shape owner contains. */
		shape_owner_get_shape_count(owner_id: number) : number;

		/** Returns the `Shape2D` with the given id from the given shape owner. */
		shape_owner_get_shape(owner_id: number, shape_id: number) : Shape2D;

		/** Returns the child index of the `Shape2D` with the given id from the given shape owner. */
		shape_owner_get_shape_index(owner_id: number, shape_id: number) : number;

		/** Removes a shape from the given shape owner. */
		shape_owner_remove_shape(owner_id: number, shape_id: number) : void;

		/** Removes all shapes from the shape owner. */
		shape_owner_clear_shapes(owner_id: number) : void;

		/** Returns the `owner_id` of the given shape. */
		shape_find_owner(shape_index: number) : number;

		/** Getter of `input_pickable` property */
		is_pickable() : boolean;

		/** Setter of `input_pickable` property */
		set_pickable(p_value: boolean) : void;
	}
	namespace CollisionObject2D {

		/** Emitted when the mouse pointer exits all this object's shapes. Requires `input_pickable` to be `true` and at least one `collision_layer` bit to be set. */
		const mouse_exited: 'mouse_exited';

		/** Emitted when the mouse pointer enters any of this object's shapes. Requires `input_pickable` to be `true` and at least one `collision_layer` bit to be set. */
		const mouse_entered: 'mouse_entered';

		/** Emitted when an input event occurs. Requires `input_pickable` to be `true` and at least one `collision_layer` bit to be set. See `_input_event` for details. */
		const input_event: 'input_event';
	}

	/** Editor-only class for defining a collision polygon in 3D space.
	 Allows editing a collision polygon's vertices on a selected plane. Can also set a depth perpendicular to that plane. This class is only available in the editor. It will not appear in the scene tree at run-time. Creates a `Shape` for gameplay. Properties modified during gameplay will have no effect. */
	class CollisionPolygon extends Spatial {

		/** Length that the resulting collision extends in either direction perpendicular to its polygon. */
		depth: number;

		/** If `true`, no collision will be produced. */
		disabled: boolean;

		/** Array of vertices which define the polygon.

		 **Note:** The returned value is a copy of the original. Methods which mutate the size or properties of the return value will not impact the original polygon. To change properties of the polygon, assign it to a temporary variable and make changes before reassigning the `polygon` member. */
		polygon: PoolVector2Array;

		/** Getter of `depth` property */
		get_depth() : number;

		/** Setter of `depth` property */
		set_depth(p_value: number) : void;

		/** Getter of `disabled` property */
		is_disabled() : boolean;

		/** Setter of `disabled` property */
		set_disabled(p_value: boolean) : void;

		/** Getter of `polygon` property */
		get_polygon() : PoolVector2Array;

		/** Setter of `polygon` property */
		set_polygon(p_value: PoolVector2Array) : void;
	}
	namespace CollisionPolygon {
	}

	/** Defines a 2D collision polygon.
	 Provides a 2D collision polygon to a `CollisionObject2D` parent. Polygons can be drawn in the editor or specified by a list of vertices. */
	class CollisionPolygon2D extends Node2D {

		/** Collision build mode. Use one of the `BuildMode` constants. */
		build_mode: number;

		/** The polygon's list of vertices. The final point will be connected to the first. The returned value is a clone of the `PoolVector2Array`, not a reference. */
		polygon: PoolVector2Array;

		/** If `true`, no collisions will be detected. */
		disabled: boolean;

		/** If `true`, only edges that face up, relative to `CollisionPolygon2D`'s rotation, will collide with other objects. */
		one_way_collision: boolean;

		/** The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the polygon at a high velocity. */
		one_way_collision_margin: number;

		/** Getter of `build_mode` property */
		get_build_mode() : number;

		/** Setter of `build_mode` property */
		set_build_mode(p_value: number) : void;

		/** Getter of `polygon` property */
		get_polygon() : PoolVector2Array;

		/** Setter of `polygon` property */
		set_polygon(p_value: PoolVector2Array) : void;

		/** Getter of `disabled` property */
		is_disabled() : boolean;

		/** Setter of `disabled` property */
		set_disabled(p_value: boolean) : void;

		/** Getter of `one_way_collision` property */
		is_one_way_collision_enabled() : boolean;

		/** Setter of `one_way_collision` property */
		set_one_way_collision(p_value: boolean) : void;

		/** Getter of `one_way_collision_margin` property */
		get_one_way_collision_margin() : number;

		/** Setter of `one_way_collision_margin` property */
		set_one_way_collision_margin(p_value: number) : void;
	}
	namespace CollisionPolygon2D {
		enum BuildMode {
			/** Collisions will include the polygon and its contained area. */
			BUILD_SOLIDS = 0,
			/** Collisions will only include the polygon edges. */
			BUILD_SEGMENTS = 1,
		}

		/** Collisions will include the polygon and its contained area. */
		const BUILD_SOLIDS: BuildMode.BUILD_SOLIDS;

		/** Collisions will only include the polygon edges. */
		const BUILD_SEGMENTS: BuildMode.BUILD_SEGMENTS;
	}

	/** Node that represents collision shape data in 3D space.
	 Editor facility for creating and editing collision shapes in 3D space. You can use this node to represent all sorts of collision shapes, for example, add this to an `Area` to give it a detection shape, or add it to a `PhysicsBody` to create a solid object. **IMPORTANT**: this is an Editor-only helper to create shapes, use `CollisionObject.shape_owner_get_shape` to get the actual shape. */
	class CollisionShape extends Spatial {

		/** The actual shape owned by this collision shape. */
		shape: Shape;

		/** A disabled collision shape has no effect in the world. */
		disabled: boolean;

		/** If this method exists within a script it will be called whenever the shape resource has been modified. */
		resource_changed(resource: Resource) : void;

		/** Sets the collision shape's shape to the addition of all its convexed `MeshInstance` siblings geometry. */
		make_convex_from_brothers() : void;

		/** Getter of `shape` property */
		get_shape() : Shape;

		/** Setter of `shape` property */
		set_shape(p_value: Shape) : void;

		/** Getter of `disabled` property */
		is_disabled() : boolean;

		/** Setter of `disabled` property */
		set_disabled(p_value: boolean) : void;
	}
	namespace CollisionShape {
	}

	/** Node that represents collision shape data in 2D space.
	 Editor facility for creating and editing collision shapes in 2D space. You can use this node to represent all sorts of collision shapes, for example, add this to an `Area2D` to give it a detection shape, or add it to a `PhysicsBody2D` to create a solid object. **IMPORTANT**: this is an Editor-only helper to create shapes, use `CollisionObject2D.shape_owner_get_shape` to get the actual shape. */
	class CollisionShape2D extends Node2D {

		/** The actual shape owned by this collision shape. */
		shape: Shape2D;

		/** A disabled collision shape has no effect in the world. */
		disabled: boolean;

		/** Sets whether this collision shape should only detect collision on one side (top or bottom). */
		one_way_collision: boolean;

		/** The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the shape at a high velocity. */
		one_way_collision_margin: number;

		/** Getter of `shape` property */
		get_shape() : Shape2D;

		/** Setter of `shape` property */
		set_shape(p_value: Shape2D) : void;

		/** Getter of `disabled` property */
		is_disabled() : boolean;

		/** Setter of `disabled` property */
		set_disabled(p_value: boolean) : void;

		/** Getter of `one_way_collision` property */
		is_one_way_collision_enabled() : boolean;

		/** Setter of `one_way_collision` property */
		set_one_way_collision(p_value: boolean) : void;

		/** Getter of `one_way_collision_margin` property */
		get_one_way_collision_margin() : number;

		/** Setter of `one_way_collision_margin` property */
		set_one_way_collision_margin(p_value: number) : void;
	}
	namespace CollisionShape2D {
	}

	/** Color picker control.
	 `Control` node displaying a color picker widget. It's useful for selecting a color from an RGB/RGBA colorspace. */
	class ColorPicker extends BoxContainer {

		/** The currently selected color. */
		color: Color;

		/** If `true`, shows an alpha channel slider (transparency). */
		edit_alpha: boolean;

		/** If `true`, allows editing the color with Hue/Saturation/Value sliders.

		 **Note:** Cannot be enabled if raw mode is on. */
		hsv_mode: boolean;

		/** If `true`, allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR).

		 **Note:** Cannot be enabled if HSV mode is on. */
		raw_mode: boolean;

		/** If `true`, the color will apply only after the user releases the mouse button, otherwise it will apply immediately even in mouse motion event (which can cause performance issues). */
		deferred_mode: boolean;

		/** If `true`, the "add preset" button is enabled. */
		presets_enabled: boolean;

		/** If `true`, saved color presets are visible. */
		presets_visible: boolean;

		/** Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them.

		 **Note:** the presets list is only for *this* color picker. */
		add_preset(color: Color) : void;

		/** Removes the given color from the list of color presets of this color picker. */
		erase_preset(color: Color) : void;

		/** Returns the list of colors in the presets of the color picker. */
		get_presets() : PoolColorArray;

		/** Getter of `color` property */
		get_pick_color() : Color;

		/** Setter of `color` property */
		set_pick_color(p_value: Color) : void;

		/** Getter of `edit_alpha` property */
		is_editing_alpha() : boolean;

		/** Setter of `edit_alpha` property */
		set_edit_alpha(p_value: boolean) : void;

		/** Getter of `hsv_mode` property */
		is_hsv_mode() : boolean;

		/** Setter of `hsv_mode` property */
		set_hsv_mode(p_value: boolean) : void;

		/** Getter of `raw_mode` property */
		is_raw_mode() : boolean;

		/** Setter of `raw_mode` property */
		set_raw_mode(p_value: boolean) : void;

		/** Getter of `deferred_mode` property */
		is_deferred_mode() : boolean;

		/** Setter of `deferred_mode` property */
		set_deferred_mode(p_value: boolean) : void;

		/** Getter of `presets_enabled` property */
		are_presets_enabled() : boolean;

		/** Setter of `presets_enabled` property */
		set_presets_enabled(p_value: boolean) : void;

		/** Getter of `presets_visible` property */
		are_presets_visible() : boolean;

		/** Setter of `presets_visible` property */
		set_presets_visible(p_value: boolean) : void;
	}
	namespace ColorPicker {

		/** Emitted when a preset is removed. */
		const preset_removed: 'preset_removed';

		/** Emitted when a preset is added. */
		const preset_added: 'preset_added';

		/** Emitted when the color is changed. */
		const color_changed: 'color_changed';
	}

	/** Button that pops out a `ColorPicker`.
	 Encapsulates a `ColorPicker` making it accessible by pressing a button. Pressing the button will toggle the `ColorPicker` visibility. */
	class ColorPickerButton extends Button {

		/** The currently selected color. */
		color: Color;

		/** If `true`, the alpha channel in the displayed `ColorPicker` will be visible. */
		edit_alpha: boolean;

		/**  */
		toggle_mode: boolean;

		/** Returns the `ColorPicker` that this node toggles. */
		get_picker() : ColorPicker;

		/** Returns the control's `PopupPanel` which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden. */
		get_popup() : PopupPanel;

		/** Getter of `color` property */
		get_pick_color() : Color;

		/** Setter of `color` property */
		set_pick_color(p_value: Color) : void;

		/** Getter of `edit_alpha` property */
		is_editing_alpha() : boolean;

		/** Setter of `edit_alpha` property */
		set_edit_alpha(p_value: boolean) : void;

		/** Getter of `toggle_mode` property */
		is_toggle_mode() : boolean;

		/** Setter of `toggle_mode` property */
		set_toggle_mode(p_value: boolean) : void;
	}
	namespace ColorPickerButton {

		/** Emitted when the `ColorPicker` is created (the button is pressed for the first time). */
		const picker_created: 'picker_created';

		/** Emitted when the `ColorPicker` is closed. */
		const popup_closed: 'popup_closed';

		/** Emitted when the color changes. */
		const color_changed: 'color_changed';
	}

	/** Colored rectangle.
	 Displays a colored rectangle. */
	class ColorRect extends Control {

		/** The fill color.

		 ```gdscript
		 $ColorRect.color = Color(1, 0, 0, 1) # Set ColorRect's color to red.
		 ``` */
		color: Color;

		/** Getter of `color` property */
		get_frame_color() : Color;

		/** Setter of `color` property */
		set_frame_color(p_value: Color) : void;
	}
	namespace ColorRect {
	}

	/** Concave polygon shape.
	 Concave polygon shape resource, which can be set into a `PhysicsBody` or area. This shape is created by feeding a list of triangles.

	 Note: when used for collision, `ConcavePolygonShape` is intended to work with static `PhysicsBody` nodes like `StaticBody` and will not work with `KinematicBody` or `RigidBody` with a mode other than Static. */
	class ConcavePolygonShape extends Shape {

		/** Sets the faces (an array of triangles). */
		set_faces(faces: PoolVector3Array) : void;

		/** Returns the faces (an array of triangles). */
		get_faces() : PoolVector3Array;
	}
	namespace ConcavePolygonShape {
	}

	/** Concave polygon 2D shape resource for physics.
	 Concave polygon 2D shape resource for physics. It is made out of segments and is optimal for complex polygonal concave collisions. However, it is not advised to use for `RigidBody2D` nodes. A CollisionPolygon2D in convex decomposition mode (solids) or several convex objects are advised for that instead. Otherwise, a concave polygon 2D shape is better for static collisions.

	 The main difference between a `ConvexPolygonShape2D` and a `ConcavePolygonShape2D` is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection. */
	class ConcavePolygonShape2D extends Shape2D {

		/** The array of points that make up the `ConcavePolygonShape2D`'s line segments. */
		segments: PoolVector2Array;

		/** Getter of `segments` property */
		get_segments() : PoolVector2Array;

		/** Setter of `segments` property */
		set_segments(p_value: PoolVector2Array) : void;
	}
	namespace ConcavePolygonShape2D {
	}

	/** A twist joint between two 3D bodies.
	 The joint can rotate the bodies across an axis defined by the local x-axes of the `Joint`.

	 The twist axis is initiated as the X axis of the `Joint`.

	 Once the Bodies swing, the twist axis is calculated as the middle of the x-axes of the Joint in the local space of the two Bodies. */
	class ConeTwistJoint extends Joint {

		/** Swing is rotation from side to side, around the axis perpendicular to the twist axis.

		 The swing span defines, how much rotation will not get corrected along the swing axis.

		 Could be defined as looseness in the `ConeTwistJoint`.

		 If below 0.05, this behavior is locked. */
		swing_span: number;

		/** Twist is the rotation around the twist axis, this value defined how far the joint can twist.

		 Twist is locked if below 0.05. */
		twist_span: number;

		/** The speed with which the swing or twist will take place.

		 The higher, the faster. */
		bias: number;

		/** The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint. */
		softness: number;

		/** Defines, how fast the swing- and twist-speed-difference on both sides gets synced. */
		relaxation: number;

		/**  */
		set_param(param: ConeTwistJoint.Param, value: number) : void;

		/**  */
		get_param(param: ConeTwistJoint.Param) : number;

		/** Getter of `swing_span` property */
		_get_swing_span() : number;

		/** Setter of `swing_span` property */
		_set_swing_span(p_value: number) : void;

		/** Getter of `twist_span` property */
		_get_twist_span() : number;

		/** Setter of `twist_span` property */
		_set_twist_span(p_value: number) : void;

		/** Getter of `bias` property */
		get_param() : number;

		/** Setter of `bias` property */
		set_param(p_value: number) : void;

		/** Getter of `softness` property */
		get_param() : number;

		/** Setter of `softness` property */
		set_param(p_value: number) : void;

		/** Getter of `relaxation` property */
		get_param() : number;

		/** Setter of `relaxation` property */
		set_param(p_value: number) : void;
	}
	namespace ConeTwistJoint {
		enum Param {
			/** Swing is rotation from side to side, around the axis perpendicular to the twist axis.

			 The swing span defines, how much rotation will not get corrected along the swing axis.

			 Could be defined as looseness in the `ConeTwistJoint`.

			 If below 0.05, this behavior is locked. */
			PARAM_SWING_SPAN = 0,
			/** Twist is the rotation around the twist axis, this value defined how far the joint can twist.

			 Twist is locked if below 0.05. */
			PARAM_TWIST_SPAN = 1,
			/** The speed with which the swing or twist will take place.

			 The higher, the faster. */
			PARAM_BIAS = 2,
			/** The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint. */
			PARAM_SOFTNESS = 3,
			/** Defines, how fast the swing- and twist-speed-difference on both sides gets synced. */
			PARAM_RELAXATION = 4,
			/** Represents the size of the `Param` enum. */
			PARAM_MAX = 5,
		}

		/** Swing is rotation from side to side, around the axis perpendicular to the twist axis.

		 The swing span defines, how much rotation will not get corrected along the swing axis.

		 Could be defined as looseness in the `ConeTwistJoint`.

		 If below 0.05, this behavior is locked. */
		const PARAM_SWING_SPAN: Param.PARAM_SWING_SPAN;

		/** Twist is the rotation around the twist axis, this value defined how far the joint can twist.

		 Twist is locked if below 0.05. */
		const PARAM_TWIST_SPAN: Param.PARAM_TWIST_SPAN;

		/** The speed with which the swing or twist will take place.

		 The higher, the faster. */
		const PARAM_BIAS: Param.PARAM_BIAS;

		/** The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint. */
		const PARAM_SOFTNESS: Param.PARAM_SOFTNESS;

		/** Defines, how fast the swing- and twist-speed-difference on both sides gets synced. */
		const PARAM_RELAXATION: Param.PARAM_RELAXATION;

		/** Represents the size of the `Param` enum. */
		const PARAM_MAX: Param.PARAM_MAX;
	}

	/** Helper class to handle INI-style files.
	 This helper class can be used to store `Variant` values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:

	 ```gdscript
	 [section]
	 some_key=42
	 string_example="Hello World!"
	 a_vector=Vector3( 1, 0, 2 )
	 ```

	 The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.

	 The following example shows how to parse an INI-style file from the system, read its contents and store new values in it:

	 ```gdscript
	 var config = ConfigFile.new()
	 var err = config.load("user://settings.cfg")
	 if err == OK: # If not, something went wrong with the file loading
	     # Look for the display/width pair, and default to 1024 if missing
	     var screen_width = config.get_value("display", "width", 1024)
	     # Store a variable if and only if it hasn't been defined yet
	     if not config.has_section_key("audio", "mute"):
	         config.set_value("audio", "mute", false)
	     # Save the changes by overwriting the previous file
	     config.save("user://settings.cfg")
	 ```

	 Keep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.

	 ConfigFiles can also contain manually written comment lines starting with a semicolon (`;`). Those lines will be ignored when parsing the file. Note that comments will be lost when saving the ConfigFile. This can still be useful for dedicated server configuration files, which are typically never overwritten without explicit user action. */
	class ConfigFile extends Reference {

		/** Assigns a value to the specified key of the specified section. If either the section or the key do not exist, they are created. Passing a `null` value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed. */
		set_value(section: string, key: string, value: any) : void;

		/** Returns the current value for the specified section and key. If either the section or the key do not exist, the method returns the fallback `default` value. If `default` is not specified or set to `null`, an error is also raised. */
		//@ts-ignore
		get_value(section: string, key: string, p_default: any = null) : any;

		/** Returns `true` if the specified section exists. */
		has_section(section: string) : boolean;

		/** Returns `true` if the specified section-key pair exists. */
		has_section_key(section: string, key: string) : boolean;

		/** Returns an array of all defined section identifiers. */
		get_sections() : PoolStringArray;

		/** Returns an array of all defined key identifiers in the specified section. Raises an error and returns an empty array if the section does not exist. */
		get_section_keys(section: string) : PoolStringArray;

		/** Deletes the specified section along with all the key-value pairs inside. Raises an error if the section does not exist. */
		erase_section(section: string) : void;

		/** Deletes the specified key in a section. Raises an error if either the section or the key do not exist. */
		erase_section_key(section: string, key: string) : void;

		/** Loads the config file specified as a parameter. The file's contents are parsed and loaded in the `ConfigFile` object which the method was called on.

		 Returns one of the `Error` code constants (`OK` on success). */
		load(path: string) : number;

		/** Parses the the passed string as the contents of a config file. The string is parsed and loaded in the ConfigFile object which the method was called on.

		 Returns one of the `Error` code constants (`OK` on success). */
		parse(data: string) : number;

		/** Saves the contents of the `ConfigFile` object to the file specified as a parameter. The output file uses an INI-style structure.

		 Returns one of the `Error` code constants (`OK` on success). */
		save(path: string) : number;

		/** Loads the encrypted config file specified as a parameter, using the provided `key` to decrypt it. The file's contents are parsed and loaded in the `ConfigFile` object which the method was called on.

		 Returns one of the `Error` code constants (`OK` on success). */
		load_encrypted(path: string, key: PoolByteArray) : number;

		/** Loads the encrypted config file specified as a parameter, using the provided `password` to decrypt it. The file's contents are parsed and loaded in the `ConfigFile` object which the method was called on.

		 Returns one of the `Error` code constants (`OK` on success). */
		load_encrypted_pass(path: string, password: string) : number;

		/** Saves the contents of the `ConfigFile` object to the AES-256 encrypted file specified as a parameter, using the provided `key` to encrypt it. The output file uses an INI-style structure.

		 Returns one of the `Error` code constants (`OK` on success). */
		save_encrypted(path: string, key: PoolByteArray) : number;

		/** Saves the contents of the `ConfigFile` object to the AES-256 encrypted file specified as a parameter, using the provided `password` to encrypt it. The output file uses an INI-style structure.

		 Returns one of the `Error` code constants (`OK` on success). */
		save_encrypted_pass(path: string, password: string) : number;
	}
	namespace ConfigFile {
	}

	/** Dialog for confirmation of actions.
	 Dialog for confirmation of actions. This dialog inherits from `AcceptDialog`, but has by default an OK and Cancel button (in host OS order).

	 To get cancel action, you can use:

	 ```gdscript
	 get_cancel().connect("pressed", self, "cancelled")
	 ``` */
	class ConfirmationDialog extends AcceptDialog {

		/**  */
		window_title: string;

		/**  */
		rect_min_size: Vector2;

		/** Returns the cancel button. */
		get_cancel() : Button;

		/** Getter of `window_title` property */
		get_title() : string;

		/** Setter of `window_title` property */
		set_title(p_value: string) : void;

		/** Getter of `rect_min_size` property */
		get_custom_minimum_size() : Vector2;

		/** Setter of `rect_min_size` property */
		set_custom_minimum_size(p_value: Vector2) : void;
	}
	namespace ConfirmationDialog {
	}

	/** Base node for containers.
	 Base node for containers. A `Container` contains other controls and automatically arranges them in a certain way.

	 A Control can inherit this to create custom container classes. */
	class Container extends Control {

		/** Queue resort of the contained children. This is called automatically anyway, but can be called upon request. */
		queue_sort() : void;

		/** Fit a child control in a given rect. This is mainly a helper for creating custom container classes. */
		fit_child_in_rect(child: Control, rect: Rect2) : void;
	}
	namespace Container {

		/** Emitted when sorting the children is needed. */
		const sort_children: 'sort_children';

		/** Notification for when sorting the children, it must be obeyed immediately. */
		const NOTIFICATION_SORT_CHILDREN: 50;
	}

	/** All user interface nodes inherit from Control. A control's anchors and margins adapt its position and size relative to its parent.
	 Base class for all UI-related nodes. `Control` features a bounding rectangle that defines its extents, an anchor position relative to its parent control or the current viewport, and margins that represent an offset to the anchor. The margins update automatically when the node, any of its parents, or the screen size change.

	 For more information on Godot's UI system, anchors, margins, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from `Control` and `Container` nodes.

	 **User Interface nodes and input**

	 Godot sends input events to the scene's root node first, by calling `Node._input`. `Node._input` forwards the event down the node tree to the nodes under the mouse cursor, or on keyboard focus. To do so, it calls `MainLoop._input_event`. Call `accept_event` so no other node receives the event. Once you accepted an input, it becomes handled so `Node._unhandled_input` will not process it.

	 Only one `Control` node can be in keyboard focus. Only the node in focus will receive keyboard events. To get the focus, call `grab_focus`. `Control` nodes lose focus when another node grabs it, or if you hide the node in focus.

	 Sets `mouse_filter` to `MOUSE_FILTER_IGNORE` to tell a `Control` node to ignore mouse or touch events. You'll need it if you place an icon on top of a button.

	 `Theme` resources change the Control's appearance. If you change the `Theme` on a `Control` node, it affects all of its children. To override some of the theme's parameters, call one of the `add_*_override` methods, like `add_font_override`. You can override the theme with the inspector. */
	class Control extends CanvasItem {

		/** Anchors the left edge of the node to the origin, the center or the end of its parent control. It changes how the left margin updates when the node moves or changes size. You can use one of the `Anchor` constants for convenience. */
		anchor_left: number;

		/** Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top margin updates when the node moves or changes size. You can use  one of the `Anchor` constants for convenience. */
		anchor_top: number;

		/** Anchors the right edge of the node to the origin, the center or the end of its parent control. It changes how the right margin updates when the node moves or changes size. You can use one of the `Anchor` constants for convenience. */
		anchor_right: number;

		/** Anchors the bottom edge of the node to the origin, the center, or the end of its parent control. It changes how the bottom margin updates when the node moves or changes size. You can use one of the `Anchor` constants for convenience. */
		anchor_bottom: number;

		/** Distance between the node's left edge and its parent control, based on `anchor_left`.

		 Margins are often controlled by one or multiple parent `Container` nodes, so you should not modify them manually if your node is a direct child of a `Container`. Margins update automatically when you move or resize the node. */
		margin_left: number;

		/** Distance between the node's top edge and its parent control, based on `anchor_top`.

		 Margins are often controlled by one or multiple parent `Container` nodes, so you should not modify them manually if your node is a direct child of a `Container`. Margins update automatically when you move or resize the node. */
		margin_top: number;

		/** Distance between the node's right edge and its parent control, based on `anchor_right`.

		 Margins are often controlled by one or multiple parent `Container` nodes, so you should not modify them manually if your node is a direct child of a `Container`. Margins update automatically when you move or resize the node. */
		margin_right: number;

		/** Distance between the node's bottom edge and its parent control, based on `anchor_bottom`.

		 Margins are often controlled by one or multiple parent `Container` nodes, so you should not modify them manually if your node is a direct child of a `Container`. Margins update automatically when you move or resize the node. */
		margin_bottom: number;

		/** Controls the direction on the horizontal axis in which the control should grow if its horizontal minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size. */
		grow_horizontal: number;

		/** Controls the direction on the vertical axis in which the control should grow if its vertical minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size. */
		grow_vertical: number;

		/** The node's position, relative to its parent. It corresponds to the rectangle's top-left corner. The property is not affected by `rect_pivot_offset`. */
		rect_position: Vector2;

		/** The node's global position, relative to the world (usually to the top-left corner of the window). */
		rect_global_position: Vector2;

		/** The size of the node's bounding rectangle, in pixels. `Container` nodes update this property automatically. */
		rect_size: Vector2;

		/** The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes. */
		rect_min_size: Vector2;

		/** The node's rotation around its pivot, in degrees. See `rect_pivot_offset` to change the pivot's position. */
		rect_rotation: number;

		/** The node's scale, relative to its `rect_size`. Change this property to scale the node around its `rect_pivot_offset`. */
		rect_scale: Vector2;

		/** By default, the node's pivot is its top-left corner. When you change its `rect_scale`, it will scale around this pivot. Set this property to `rect_size` / 2 to center the pivot in the node's rectangle. */
		rect_pivot_offset: Vector2;

		/** Enables whether rendering of `CanvasItem` based children should be clipped to this control's rectangle. If `true`, parts of a child which would be visibly outside of this control's rectangle will not be rendered. */
		rect_clip_content: boolean;

		/** Changes the tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the `mouse_filter` property is not `MOUSE_FILTER_IGNORE`. You can change the time required for the tooltip to appear with `gui/timers/tooltip_delay_sec` option in Project Settings. */
		hint_tooltip: string;

		/** Tells Godot which node it should give keyboard focus to if the user presses the left arrow on the keyboard or left on a gamepad by default. You can change the key by editing the `ui_left` input action. The node must be a `Control`. If this property is not set, Godot will give focus to the closest `Control` to the left of this one. */
		focus_neighbour_left: string;

		/** Tells Godot which node it should give keyboard focus to if the user presses the top arrow on the keyboard or top on a gamepad by default. You can change the key by editing the `ui_top` input action. The node must be a `Control`. If this property is not set, Godot will give focus to the closest `Control` to the bottom of this one. */
		focus_neighbour_top: string;

		/** Tells Godot which node it should give keyboard focus to if the user presses the right arrow on the keyboard or right on a gamepad  by default. You can change the key by editing the `ui_right` input action. The node must be a `Control`. If this property is not set, Godot will give focus to the closest `Control` to the bottom of this one. */
		focus_neighbour_right: string;

		/** Tells Godot which node it should give keyboard focus to if the user presses the down arrow on the keyboard or down on a gamepad by default. You can change the key by editing the `ui_down` input action. The node must be a `Control`. If this property is not set, Godot will give focus to the closest `Control` to the bottom of this one. */
		focus_neighbour_bottom: string;

		/** Tells Godot which node it should give keyboard focus to if the user presses Tab on a keyboard by default. You can change the key by editing the `ui_focus_next` input action.

		 If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree. */
		focus_next: string;

		/** Tells Godot which node it should give keyboard focus to if the user presses Shift+Tab on a keyboard by default. You can change the key by editing the `ui_focus_prev` input action.

		 If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree. */
		focus_previous: string;

		/** The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard signals. */
		focus_mode: number;

		/** Controls whether the control will be able to receive mouse button input events through `_gui_input` and how these events should be handled. Also controls whether the control can receive the `mouse_entered`, and `mouse_exited` signals. See the constants to learn what each does. */
		mouse_filter: number;

		/** The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors.

		 **Note:** On Linux, shapes may vary depending on the cursor theme of the system. */
		mouse_default_cursor_shape: number;

		/** Tells the parent `Container` nodes how they should resize and place the node on the X axis. Use one of the `SizeFlags` constants to change the flags. See the constants to learn what each does. */
		size_flags_horizontal: number;

		/** Tells the parent `Container` nodes how they should resize and place the node on the Y axis. Use one of the `SizeFlags` constants to change the flags. See the constants to learn what each does. */
		size_flags_vertical: number;

		/** If the node and at least one of its neighbours uses the `SIZE_EXPAND` size flag, the parent `Container` will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbour a ratio of 1, this node will take two thirds of the available space. */
		size_flags_stretch_ratio: number;

		/** Changing this property replaces the current `Theme` resource this node and all its `Control` children use. */
		theme: Theme;

		/** Virtual method to be implemented by the user. Returns whether `_gui_input` should not be called for children controls outside this control's rectangle. Input will be clipped to the Rect of this `Control`. Similar to `rect_clip_content`, but doesn't affect visibility.

		 If not overridden, defaults to `false`. */
		_clips_input() : boolean;

		/** Virtual method to be implemented by the user. Returns the minimum size for this control. Alternative to `rect_min_size` for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately).

		 If not overridden, defaults to `Vector2.ZERO`. */
		_get_minimum_size() : Vector2;

		/** Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See `accept_event`.

		 Example: clicking a control.

		 ```gdscript
		 func _gui_input(event):
		     if event is InputEventMouseButton:
		         if event.button_index == BUTTON_LEFT and event.pressed:
		             print("I've been clicked D:")
		 ```

		 The event won't trigger if:

		 * clicking outside the control (see `has_point`);

		 * control has `mouse_filter` set to `MOUSE_FILTER_IGNORE`;

		 * control is obstructed by another `Control` on top of it, which doesn't have `mouse_filter` set to `MOUSE_FILTER_IGNORE`;

		 * control's parent has `mouse_filter` set to `MOUSE_FILTER_STOP` or has accepted the event;

		 * it happens outside parent's rectangle and the parent has either `rect_clip_content` or `_clips_input` enabled. */
		_gui_input(event: InputEvent) : void;

		/** Virtual method to be implemented by the user. Returns a `Control` node that should be used as a tooltip instead of the default one. Use `for_text` parameter to determine what text the tooltip should contain (likely the contents of `hint_tooltip`).

		 The returned node must be of type `Control` or Control-derieved. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance, not e.g. a node from scene. When `null` or non-Control node is returned, the default tooltip will be used instead.

		 **Note:** The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its `rect_min_size` to some non-zero value.

		 Example of usage with custom-constructed node:

		 ```gdscript
		 func _make_custom_tooltip(for_text):
		     var label = Label.new()
		     label.text = for_text
		     return label
		 ```

		 Example of usage with custom scene instance:

		 ```gdscript
		 func _make_custom_tooltip(for_text):
		     var tooltip = preload("SomeTooltipScene.tscn").instance()
		     tooltip.get_node("Label").text = for_text
		     return tooltip
		 ``` */
		_make_custom_tooltip(for_text: string) : Object;

		/** Godot calls this method to test if `data` from a control's `get_drag_data` can be dropped at `position`. `position` is local to this control.

		 This method should only be used to test the data. Process the data in `drop_data`.

		 ```gdscript
		 func can_drop_data(position, data):
		     # Check position if it is relevant to you
		     # Otherwise, just check data
		     return typeof(data) == TYPE_DICTIONARY and data.has("expected")
		 ``` */
		can_drop_data(position: Vector2, data: any) : boolean;

		/** Godot calls this method to pass you the `data` from a control's `get_drag_data` result. Godot first calls `can_drop_data` to test if `data` is allowed to drop at `position` where `position` is local to this control.

		 ```gdscript
		 func can_drop_data(position, data):
		     return typeof(data) == TYPE_DICTIONARY and data.has("color")
		 
		 func drop_data(position, data):
		     color = data["color"]
		 ``` */
		drop_data(position: Vector2, data: any) : void;

		/** Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Returns `null` if there is no data to drag. Controls that want to receive drop data should implement `can_drop_data` and `drop_data`. `position` is local to this control. Drag may be forced with `force_drag`.

		 A preview that will follow the mouse that should represent the data can be set with `set_drag_preview`. A good time to set the preview is in this method.

		 ```gdscript
		 func get_drag_data(position):
		     var mydata = make_data()
		     set_drag_preview(make_preview(mydata))
		     return mydata
		 ``` */
		get_drag_data(position: Vector2) : any;

		/** Virtual method to be implemented by the user. Returns whether the given `point` is inside this control.

		 If not overridden, default behavior is checking if the point is within control's Rect.

		 **Note:** If you want to check if a point is inside the control, you can use `get_rect().has_point(point)`. */
		has_point(point: Vector2) : boolean;

		/** Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to `Node._unhandled_input` or `Node._unhandled_key_input`. */
		accept_event() : void;

		/** Returns the minimum size for this control. See `rect_min_size`. */
		get_minimum_size() : Vector2;

		/** Returns combined minimum size from `rect_min_size` and `get_minimum_size`. */
		get_combined_minimum_size() : Vector2;

		/** Sets the anchors to a `preset` from `Control.LayoutPreset` enum. This is code equivalent of using the Layout menu in 2D editor.

		 If `keep_margins` is `true`, control's position will also be updated. */
		//@ts-ignore
		set_anchors_preset(preset: Control.LayoutPreset, keep_margins: boolean = false) : void;

		/** Sets the margins to a `preset` from `Control.LayoutPreset` enum. This is code equivalent of using the Layout menu in 2D editor.

		 Use parameter `resize_mode` with constants from `Control.LayoutPresetMode` to better determine the resulting size of the `Control`. Constant size will be ignored if used with presets that change size, e.g. `PRESET_LEFT_WIDE`.

		 Use parameter `margin` to determine the gap between the `Control` and the edges. */
		//@ts-ignore
		set_margins_preset(preset: Control.LayoutPreset, resize_mode: Control.LayoutPresetMode = 0, margin: number = 0) : void;

		/** Sets both anchor preset and margin preset. See `set_anchors_preset` and `set_margins_preset`. */
		//@ts-ignore
		set_anchors_and_margins_preset(preset: Control.LayoutPreset, resize_mode: Control.LayoutPresetMode = 0, margin: number = 0) : void;

		/** Sets the anchor identified by `margin` constant from `Margin` enum to value `anchor`. A setter method for `anchor_bottom`, `anchor_left`, `anchor_right` and `anchor_top`.

		 If `keep_margin` is `true`, margins aren't updated after this operation.

		 If `push_opposite_anchor` is `true` and the opposite anchor overlaps this anchor, the opposite one will have its value overridden. For example, when setting left anchor to 1 and the right anchor has value of 0.5, the right anchor will also get value of 1. If `push_opposite_anchor` was `false`, the left anchor would get value 0.5. */
		//@ts-ignore
		set_anchor(margin: Margin, anchor: number, keep_margin: boolean = false, push_opposite_anchor: boolean = true) : void;

		/** Returns the anchor identified by `margin` constant from `Margin` enum. A getter method for `anchor_bottom`, `anchor_left`, `anchor_right` and `anchor_top`. */
		get_anchor(margin: Margin) : number;

		/** Sets the margin identified by `margin` constant from `Margin` enum to given `offset`. A setter method for `margin_bottom`, `margin_left`, `margin_right` and `margin_top`. */
		set_margin(margin: Margin, offset: number) : void;

		/** Works the same as `set_anchor`, but instead of `keep_margin` argument and automatic update of margin, it allows to set the margin offset yourself (see `set_margin`). */
		//@ts-ignore
		set_anchor_and_margin(margin: Margin, anchor: number, offset: number, push_opposite_anchor: boolean = false) : void;

		/** Sets `margin_left` and `margin_top` at the same time. Equivalent of changing `rect_position`. */
		set_begin(position: Vector2) : void;

		/** Sets `margin_right` and `margin_bottom` at the same time. */
		set_end(position: Vector2) : void;

		/** Sets the `rect_position` to given `position`.

		 If `keep_margins` is `true`, control's anchors will be updated instead of margins. */
		//@ts-ignore
		set_position(position: Vector2, keep_margins: boolean = false) : void;

		/** Sets the size (see `rect_size`).

		 If `keep_margins` is `true`, control's anchors will be updated instead of margins. */
		//@ts-ignore
		set_size(size: Vector2, keep_margins: boolean = false) : void;

		/** Sets the `rect_global_position` to given `position`.

		 If `keep_margins` is `true`, control's anchors will be updated instead of margins. */
		//@ts-ignore
		set_global_position(position: Vector2, keep_margins: boolean = false) : void;

		/** Sets the rotation (in radians). */
		set_rotation(radians: number) : void;

		/** Returns the anchor identified by `margin` constant from `Margin` enum. A getter method for `margin_bottom`, `margin_left`, `margin_right` and `margin_top`. */
		get_margin(margin: Margin) : number;

		/** Returns `margin_left` and `margin_top`. See also `rect_position`. */
		get_begin() : Vector2;

		/** Returns `margin_right` and `margin_bottom`. */
		get_end() : Vector2;

		/** Returns the rotation (in radians). */
		get_rotation() : number;

		/** Returns the width/height occupied in the parent control. */
		get_parent_area_size() : Vector2;

		/** Returns the position and size of the control relative to the top-left corner of the parent Control. See `rect_position` and `rect_size`. */
		get_rect() : Rect2;

		/** Returns the position and size of the control relative to the top-left corner of the screen. See `rect_position` and `rect_size`. */
		get_global_rect() : Rect2;

		/** Displays a control as modal. Control must be a subwindow. Modal controls capture the input signals until closed or the area outside them is accessed. When a modal control loses focus, or the ESC key is pressed, they automatically hide. Modal controls are used extensively for popup dialogs and menus.

		 If `exclusive` is `true`, other controls will not receive input and clicking outside this control will not close it. */
		//@ts-ignore
		show_modal(exclusive: boolean = false) : void;

		/** Returns `true` if this is the current focused control. See `focus_mode`. */
		has_focus() : boolean;

		/** Steal the focus from another control and become the focused control (see `focus_mode`). */
		grab_focus() : void;

		/** Give up the focus. No other control will be able to receive keyboard input. */
		release_focus() : void;

		/** Returns the control that has the keyboard focus or `null` if none. */
		get_focus_owner() : Control;

		/** Overrides the icon with given `name` in the `theme` resource the control uses. If `icon` is empty or invalid, the override is cleared and the icon from assigned `Theme` is used. */
		add_icon_override(name: string, texture: Texture) : void;

		/** Overrides the `Shader` with given `name` in the `theme` resource the control uses. If `shader` is empty or invalid, the override is cleared and the shader from assigned `Theme` is used. */
		add_shader_override(name: string, shader: Shader) : void;

		/** Overrides the `StyleBox` with given `name` in the `theme` resource the control uses. If `stylebox` is empty or invalid, the override is cleared and the `StyleBox` from assigned `Theme` is used. */
		add_stylebox_override(name: string, stylebox: StyleBox) : void;

		/** Overrides the font with given `name` in the `theme` resource the control uses. If `font` is empty or invalid, the override is cleared and the font from assigned `Theme` is used. */
		add_font_override(name: string, font: Font) : void;

		/** Overrides the `Color` with given `name` in the `theme` resource the control uses. If the `color` is empty or invalid, the override is cleared and the color from assigned `Theme` is used. */
		add_color_override(name: string, color: Color) : void;

		/** Overrides an integer constant with given `name` in the `theme` resource the control uses. If the `constant` is empty or invalid, the override is cleared and the constant from assigned `Theme` is used. */
		add_constant_override(name: string, constant: number) : void;

		/** Returns an icon from assigned `Theme` with given `name` and associated with `Control` of given `type`. */
		//@ts-ignore
		get_icon(name: string, type: string = "") : Texture;

		/** Returns a `StyleBox` from assigned `Theme` with given `name` and associated with `Control` of given `type`. */
		//@ts-ignore
		get_stylebox(name: string, type: string = "") : StyleBox;

		/** Returns a font from assigned `Theme` with given `name` and associated with `Control` of given `type`. */
		//@ts-ignore
		get_font(name: string, type: string = "") : Font;

		/** Returns a color from assigned `Theme` with given `name` and associated with `Control` of given `type`.

		 ```gdscript
		 func _ready():
		     modulate = get_color("font_color", "Button") #get the color defined for button fonts
		 ``` */
		//@ts-ignore
		get_color(name: string, type: string = "") : Color;

		/** Returns a constant from assigned `Theme` with given `name` and associated with `Control` of given `type`. */
		//@ts-ignore
		get_constant(name: string, type: string = "") : number;

		/** Returns `true` if icon with given `name` has a valid override in this `Control` node. */
		has_icon_override(name: string) : boolean;

		/** Returns `true` if `Shader` with given `name` has a valid override in this `Control` node. */
		has_shader_override(name: string) : boolean;

		/** Returns `true` if `StyleBox` with given `name` has a valid override in this `Control` node. */
		has_stylebox_override(name: string) : boolean;

		/** Returns `true` if font with given `name` has a valid override in this `Control` node. */
		has_font_override(name: string) : boolean;

		/** Returns `true` if `Color` with given `name` has a valid override in this `Control` node. */
		has_color_override(name: string) : boolean;

		/** Returns `true` if constant with given `name` has a valid override in this `Control` node. */
		has_constant_override(name: string) : boolean;

		/** Returns `true` if icon with given `name` and associated with `Control` of given `type` exists in assigned `Theme`. */
		//@ts-ignore
		has_icon(name: string, type: string = "") : boolean;

		/** Returns `true` if `StyleBox` with given `name` and associated with `Control` of given `type` exists in assigned `Theme`. */
		//@ts-ignore
		has_stylebox(name: string, type: string = "") : boolean;

		/** Returns `true` if font with given `name` and associated with `Control` of given `type` exists in assigned `Theme`. */
		//@ts-ignore
		has_font(name: string, type: string = "") : boolean;

		/** Returns `true` if `Color` with given `name` and associated with `Control` of given `type` exists in assigned `Theme`. */
		//@ts-ignore
		has_color(name: string, type: string = "") : boolean;

		/** Returns `true` if constant with given `name` and associated with `Control` of given `type` exists in assigned `Theme`. */
		//@ts-ignore
		has_constant(name: string, type: string = "") : boolean;

		/** Returns the parent control node. */
		get_parent_control() : Control;

		/** Returns the tooltip, which will appear when the cursor is resting over this control. See `hint_tooltip`. */
		//@ts-ignore
		get_tooltip(at_position: Vector2 = Vector2( 0, 0 )) : string;

		/** Returns the mouse cursor shape the control displays on mouse hover. See `CursorShape`. */
		//@ts-ignore
		get_cursor_shape(position: Vector2 = Vector2( 0, 0 )) : number;

		/** Sets the anchor identified by `margin` constant from `Margin` enum to `Control` at `neighbor` node path. A setter method for `focus_neighbour_bottom`, `focus_neighbour_left`, `focus_neighbour_right` and `focus_neighbour_top`. */
		set_focus_neighbour(margin: Margin, neighbour: string) : void;

		/** Returns the focus neighbour identified by `margin` constant from `Margin` enum. A getter method for `focus_neighbour_bottom`, `focus_neighbour_left`, `focus_neighbour_right` and `focus_neighbour_top`. */
		get_focus_neighbour(margin: Margin) : string;

		/** Forces drag and bypasses `get_drag_data` and `set_drag_preview` by passing `data` and `preview`. Drag will start even if the mouse is neither over nor pressed on this control.

		 The methods `can_drop_data` and `drop_data` must be implemented on controls that want to receive drop data. */
		force_drag(data: any, preview: Control) : void;

		/** Creates an `InputEventMouseButton` that attempts to click the control. If the event is received, the control acquires focus.

		 ```gdscript
		 func _process(delta):
		     grab_click_focus() #when clicking another Control node, this node will be clicked instead
		 ``` */
		grab_click_focus() : void;

		/** Forwards the handling of this control's drag and drop to `target` control.

		 Forwarding can be implemented in the target control similar to the methods `get_drag_data`, `can_drop_data`, and `drop_data` but with two differences:

		 1. The function name must be suffixed with **_fw**

		 2. The function must take an extra argument that is the control doing the forwarding

		 ```gdscript
		 # ThisControl.gd
		 extends Control
		 func _ready():
		     set_drag_forwarding(target_control)
		 
		 # TargetControl.gd
		 extends Control
		 func can_drop_data_fw(position, data, from_control):
		     return true
		 
		 func drop_data_fw(position, data, from_control):
		     my_handle_data(data)
		 
		 func get_drag_data_fw(position, from_control):
		     set_drag_preview(my_preview)
		     return my_data()
		 ``` */
		set_drag_forwarding(target: Control) : void;

		/** Shows the given control at the mouse pointer. A good time to call this method is in `get_drag_data`. The control must not be in the scene tree.

		 ```gdscript
		 export (Color, RGBA) var color = Color(1, 0, 0, 1)
		 
		 func get_drag_data(position):
		     # Use a control that is not in the tree
		     var cpb = ColorPickerButton.new()
		     cpb.color = color
		     cpb.rect_size = Vector2(50, 50)
		     set_drag_preview(cpb)
		     return color
		 ``` */
		set_drag_preview(control: Control) : void;

		/** Moves the mouse cursor to `to_position`, relative to `rect_position` of this `Control`. */
		warp_mouse(to_position: Vector2) : void;

		/** Invalidates the size cache in this node and in parent nodes up to toplevel. Intended to be used with `get_minimum_size` when the return value is changed. Setting `rect_min_size` directly calls this method automatically. */
		minimum_size_changed() : void;

		/** Getter of `anchor_left` property */
		get_anchor() : number;

		/** Setter of `anchor_left` property */
		_set_anchor(p_value: number) : void;

		/** Getter of `anchor_top` property */
		get_anchor() : number;

		/** Setter of `anchor_top` property */
		_set_anchor(p_value: number) : void;

		/** Getter of `anchor_right` property */
		get_anchor() : number;

		/** Setter of `anchor_right` property */
		_set_anchor(p_value: number) : void;

		/** Getter of `anchor_bottom` property */
		get_anchor() : number;

		/** Setter of `anchor_bottom` property */
		_set_anchor(p_value: number) : void;

		/** Getter of `margin_left` property */
		get_margin() : number;

		/** Setter of `margin_left` property */
		set_margin(p_value: number) : void;

		/** Getter of `margin_top` property */
		get_margin() : number;

		/** Setter of `margin_top` property */
		set_margin(p_value: number) : void;

		/** Getter of `margin_right` property */
		get_margin() : number;

		/** Setter of `margin_right` property */
		set_margin(p_value: number) : void;

		/** Getter of `margin_bottom` property */
		get_margin() : number;

		/** Setter of `margin_bottom` property */
		set_margin(p_value: number) : void;

		/** Getter of `grow_horizontal` property */
		get_h_grow_direction() : number;

		/** Setter of `grow_horizontal` property */
		set_h_grow_direction(p_value: number) : void;

		/** Getter of `grow_vertical` property */
		get_v_grow_direction() : number;

		/** Setter of `grow_vertical` property */
		set_v_grow_direction(p_value: number) : void;

		/** Getter of `rect_position` property */
		get_position() : Vector2;

		/** Setter of `rect_position` property */
		_set_position(p_value: Vector2) : void;

		/** Getter of `rect_global_position` property */
		get_global_position() : Vector2;

		/** Setter of `rect_global_position` property */
		_set_global_position(p_value: Vector2) : void;

		/** Getter of `rect_size` property */
		get_size() : Vector2;

		/** Setter of `rect_size` property */
		_set_size(p_value: Vector2) : void;

		/** Getter of `rect_min_size` property */
		get_custom_minimum_size() : Vector2;

		/** Setter of `rect_min_size` property */
		set_custom_minimum_size(p_value: Vector2) : void;

		/** Getter of `rect_rotation` property */
		get_rotation_degrees() : number;

		/** Setter of `rect_rotation` property */
		set_rotation_degrees(p_value: number) : void;

		/** Getter of `rect_scale` property */
		get_scale() : Vector2;

		/** Setter of `rect_scale` property */
		set_scale(p_value: Vector2) : void;

		/** Getter of `rect_pivot_offset` property */
		get_pivot_offset() : Vector2;

		/** Setter of `rect_pivot_offset` property */
		set_pivot_offset(p_value: Vector2) : void;

		/** Getter of `rect_clip_content` property */
		is_clipping_contents() : boolean;

		/** Setter of `rect_clip_content` property */
		set_clip_contents(p_value: boolean) : void;

		/** Getter of `hint_tooltip` property */
		_get_tooltip() : string;

		/** Setter of `hint_tooltip` property */
		set_tooltip(p_value: string) : void;

		/** Getter of `focus_neighbour_left` property */
		get_focus_neighbour() : string;

		/** Setter of `focus_neighbour_left` property */
		set_focus_neighbour(p_value: string) : void;

		/** Getter of `focus_neighbour_top` property */
		get_focus_neighbour() : string;

		/** Setter of `focus_neighbour_top` property */
		set_focus_neighbour(p_value: string) : void;

		/** Getter of `focus_neighbour_right` property */
		get_focus_neighbour() : string;

		/** Setter of `focus_neighbour_right` property */
		set_focus_neighbour(p_value: string) : void;

		/** Getter of `focus_neighbour_bottom` property */
		get_focus_neighbour() : string;

		/** Setter of `focus_neighbour_bottom` property */
		set_focus_neighbour(p_value: string) : void;

		/** Getter of `focus_next` property */
		get_focus_next() : string;

		/** Setter of `focus_next` property */
		set_focus_next(p_value: string) : void;

		/** Getter of `focus_previous` property */
		get_focus_previous() : string;

		/** Setter of `focus_previous` property */
		set_focus_previous(p_value: string) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;

		/** Getter of `mouse_default_cursor_shape` property */
		get_default_cursor_shape() : number;

		/** Setter of `mouse_default_cursor_shape` property */
		set_default_cursor_shape(p_value: number) : void;

		/** Getter of `size_flags_horizontal` property */
		get_h_size_flags() : number;

		/** Setter of `size_flags_horizontal` property */
		set_h_size_flags(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;

		/** Getter of `size_flags_stretch_ratio` property */
		get_stretch_ratio() : number;

		/** Setter of `size_flags_stretch_ratio` property */
		set_stretch_ratio(p_value: number) : void;

		/** Getter of `theme` property */
		get_theme() : Theme;

		/** Setter of `theme` property */
		set_theme(p_value: Theme) : void;
	}
	namespace Control {

		/** Emitted when the mouse leaves the control's `Rect` area, provided its `mouse_filter` lets the event reach it. */
		const mouse_exited: 'mouse_exited';

		/** Emitted when the node receives an `InputEvent`. */
		const gui_input: 'gui_input';

		/** Emitted when a modal `Control` is closed. See `show_modal`. */
		const modal_closed: 'modal_closed';

		/** Emitted when the node gains keyboard focus. */
		const focus_entered: 'focus_entered';

		/** Emitted when the control changes size. */
		const resized: 'resized';

		/** Emitted when the node's minimum size changes. */
		const minimum_size_changed: 'minimum_size_changed';

		/** Emitted when the mouse enters the control's `Rect` area, provided its `mouse_filter` lets the event reach it. */
		const mouse_entered: 'mouse_entered';

		/** Emitted when one of the size flags changes. See `size_flags_horizontal` and `size_flags_vertical`. */
		const size_flags_changed: 'size_flags_changed';

		/** Emitted when the node loses keyboard focus. */
		const focus_exited: 'focus_exited';
		enum Anchor {
			/** Snaps one of the 4 anchor's sides to the origin of the node's `Rect`, in the top left. Use it with one of the `anchor_*` member variables, like `anchor_left`. To change all 4 anchors at once, use `set_anchors_preset`. */
			ANCHOR_BEGIN = 0,
			/** Snaps one of the 4 anchor's sides to the end of the node's `Rect`, in the bottom right. Use it with one of the `anchor_*` member variables, like `anchor_left`. To change all 4 anchors at once, use `set_anchors_preset`. */
			ANCHOR_END = 1,
		}
		enum CursorShape {
			/** Show the system's arrow mouse cursor when the user hovers the node. Use with `mouse_default_cursor_shape`. */
			CURSOR_ARROW = 0,
			/** Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text. */
			CURSOR_IBEAM = 1,
			/** Show the system's pointing hand mouse cursor when the user hovers the node. */
			CURSOR_POINTING_HAND = 2,
			/** Show the system's cross mouse cursor when the user hovers the node. */
			CURSOR_CROSS = 3,
			/** Show the system's wait mouse cursor, often an hourglass, when the user hovers the node. */
			CURSOR_WAIT = 4,
			/** Show the system's busy mouse cursor when the user hovers the node. Often an hourglass. */
			CURSOR_BUSY = 5,
			/** Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock. */
			CURSOR_DRAG = 6,
			/** Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock. */
			CURSOR_CAN_DROP = 7,
			/** Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle. */
			CURSOR_FORBIDDEN = 8,
			/** Show the system's vertical resize mouse cursor when the user hovers the node. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically. */
			CURSOR_VSIZE = 9,
			/** Show the system's horizontal resize mouse cursor when the user hovers the node. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally. */
			CURSOR_HSIZE = 10,
			/** Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically. */
			CURSOR_BDIAGSIZE = 11,
			/** Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of `CURSOR_BDIAGSIZE`. It tells the user they can resize the window or the panel both horizontally and vertically. */
			CURSOR_FDIAGSIZE = 12,
			/** Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely. */
			CURSOR_MOVE = 13,
			/** Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as `CURSOR_VSIZE`. */
			CURSOR_VSPLIT = 14,
			/** Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as `CURSOR_HSIZE`. */
			CURSOR_HSPLIT = 15,
			/** Show the system's help mouse cursor when the user hovers the node, a question mark. */
			CURSOR_HELP = 16,
		}
		enum FocusMode {
			/** The node cannot grab focus. Use with `focus_mode`. */
			FOCUS_NONE = 0,
			/** The node can only grab focus on mouse clicks. Use with `focus_mode`. */
			FOCUS_CLICK = 1,
			/** The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with `focus_mode`. */
			FOCUS_ALL = 2,
		}
		enum GrowDirection {
			/** The control will grow to the left or top to make up if its minimum size is changed to be greater than its current size on the respective axis. */
			GROW_DIRECTION_BEGIN = 0,
			/** The control will grow to the right or bottom to make up if its minimum size is changed to be greater than its current size on the respective axis. */
			GROW_DIRECTION_END = 1,
			/** The control will grow in both directions equally to make up if its minimum size is changed to be greater than its current size. */
			GROW_DIRECTION_BOTH = 2,
		}
		enum LayoutPreset {
			/** Snap all 4 anchors to the top-left of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_TOP_LEFT = 0,
			/** Snap all 4 anchors to the top-right of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_TOP_RIGHT = 1,
			/** Snap all 4 anchors to the bottom-left of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_BOTTOM_LEFT = 2,
			/** Snap all 4 anchors to the bottom-right of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_BOTTOM_RIGHT = 3,
			/** Snap all 4 anchors to the center of the left edge of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_CENTER_LEFT = 4,
			/** Snap all 4 anchors to the center of the top edge of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_CENTER_TOP = 5,
			/** Snap all 4 anchors to the center of the right edge of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_CENTER_RIGHT = 6,
			/** Snap all 4 anchors to the center of the bottom edge of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_CENTER_BOTTOM = 7,
			/** Snap all 4 anchors to the center of the parent control's bounds. Use with `set_anchors_preset`. */
			PRESET_CENTER = 8,
			/** Snap all 4 anchors to the left edge of the parent control. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with `set_anchors_preset`. */
			PRESET_LEFT_WIDE = 9,
			/** Snap all 4 anchors to the top edge of the parent control. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with `set_anchors_preset`. */
			PRESET_TOP_WIDE = 10,
			/** Snap all 4 anchors to the right edge of the parent control. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with `set_anchors_preset`. */
			PRESET_RIGHT_WIDE = 11,
			/** Snap all 4 anchors to the bottom edge of the parent control. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with `set_anchors_preset`. */
			PRESET_BOTTOM_WIDE = 12,
			/** Snap all 4 anchors to a vertical line that cuts the parent control in half. Use with `set_anchors_preset`. */
			PRESET_VCENTER_WIDE = 13,
			/** Snap all 4 anchors to a horizontal line that cuts the parent control in half. Use with `set_anchors_preset`. */
			PRESET_HCENTER_WIDE = 14,
			/** Snap all 4 anchors to the respective corners of the parent control. Set all 4 margins to 0 after you applied this preset and the `Control` will fit its parent control. This is equivalent to the "Full Rect" layout option in the editor. Use with `set_anchors_preset`. */
			PRESET_WIDE = 15,
		}
		enum LayoutPresetMode {
			/** The control will be resized to its minimum size. */
			PRESET_MODE_MINSIZE = 0,
			/** The control's width will not change. */
			PRESET_MODE_KEEP_WIDTH = 1,
			/** The control's height will not change. */
			PRESET_MODE_KEEP_HEIGHT = 2,
			/** The control's size will not change. */
			PRESET_MODE_KEEP_SIZE = 3,
		}
		enum MouseFilter {
			/** The control will receive mouse button input events through `_gui_input` if clicked on. And the control will receive the `mouse_entered` and `mouse_exited` signals. These events are automatically marked as handled, and they will not propagate further to other controls. This also results in blocking signals in other controls. */
			MOUSE_FILTER_STOP = 0,
			/** The control will receive mouse button input events through `_gui_input` if clicked on. And the control will receive the `mouse_entered` and `mouse_exited` signals. If this control does not handle the event, the parent control (if any) will be considered, and so on until there is no more parent control to potentially handle it. This also allows signals to fire in other controls. Even if no control handled it at all, the event will still be handled automatically, so unhandled input will not be fired. */
			MOUSE_FILTER_PASS = 1,
			/** The control will not receive mouse button input events through `_gui_input`. The control will also not receive the `mouse_entered` nor `mouse_exited` signals. This will not block other controls from receiving these events or firing the signals. Ignored events will not be handled automatically. */
			MOUSE_FILTER_IGNORE = 2,
		}
		enum SizeFlags {
			/** Tells the parent `Container` to expand the bounds of this node to fill all the available space without pushing any other node. Use with `size_flags_horizontal` and `size_flags_vertical`. */
			SIZE_FILL = 1,
			/** Tells the parent `Container` to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See `size_flags_stretch_ratio`. Use with `size_flags_horizontal` and `size_flags_vertical`. */
			SIZE_EXPAND = 2,
			/** Sets the node's size flags to both fill and expand. See the 2 constants above for more information. */
			SIZE_EXPAND_FILL = 3,
			/** Tells the parent `Container` to center the node in itself. It centers the control based on its bounding box, so it doesn't work with the fill or expand size flags. Use with `size_flags_horizontal` and `size_flags_vertical`. */
			SIZE_SHRINK_CENTER = 4,
			/** Tells the parent `Container` to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with `size_flags_horizontal` and `size_flags_vertical`. */
			SIZE_SHRINK_END = 8,
		}

		/** The node cannot grab focus. Use with `focus_mode`. */
		const FOCUS_NONE: FocusMode.FOCUS_NONE;

		/** The node can only grab focus on mouse clicks. Use with `focus_mode`. */
		const FOCUS_CLICK: FocusMode.FOCUS_CLICK;

		/** The node can grab focus on mouse click or using the arrows and the Tab keys on the keyboard. Use with `focus_mode`. */
		const FOCUS_ALL: FocusMode.FOCUS_ALL;

		/** Sent when the node changes size. Use `rect_size` to get the new size. */
		const NOTIFICATION_RESIZED: 40;

		/** Sent when the mouse pointer enters the node. */
		const NOTIFICATION_MOUSE_ENTER: 41;

		/** Sent when the mouse pointer exits the node. */
		const NOTIFICATION_MOUSE_EXIT: 42;

		/** Sent when the node grabs focus. */
		const NOTIFICATION_FOCUS_ENTER: 43;

		/** Sent when the node loses focus. */
		const NOTIFICATION_FOCUS_EXIT: 44;

		/** Sent when the node's `theme` changes, right before Godot redraws the control. Happens when you call one of the `add_*_override` methods. */
		const NOTIFICATION_THEME_CHANGED: 45;

		/** Sent when an open modal dialog closes. See `show_modal`. */
		const NOTIFICATION_MODAL_CLOSE: 46;

		/** Sent when this node is inside a `ScrollContainer` which has begun being scrolled. */
		const NOTIFICATION_SCROLL_BEGIN: 47;

		/** Sent when this node is inside a `ScrollContainer` which has stopped being scrolled. */
		const NOTIFICATION_SCROLL_END: 48;

		/** Show the system's arrow mouse cursor when the user hovers the node. Use with `mouse_default_cursor_shape`. */
		const CURSOR_ARROW: CursorShape.CURSOR_ARROW;

		/** Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text. */
		const CURSOR_IBEAM: CursorShape.CURSOR_IBEAM;

		/** Show the system's pointing hand mouse cursor when the user hovers the node. */
		const CURSOR_POINTING_HAND: CursorShape.CURSOR_POINTING_HAND;

		/** Show the system's cross mouse cursor when the user hovers the node. */
		const CURSOR_CROSS: CursorShape.CURSOR_CROSS;

		/** Show the system's wait mouse cursor, often an hourglass, when the user hovers the node. */
		const CURSOR_WAIT: CursorShape.CURSOR_WAIT;

		/** Show the system's busy mouse cursor when the user hovers the node. Often an hourglass. */
		const CURSOR_BUSY: CursorShape.CURSOR_BUSY;

		/** Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock. */
		const CURSOR_DRAG: CursorShape.CURSOR_DRAG;

		/** Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock. */
		const CURSOR_CAN_DROP: CursorShape.CURSOR_CAN_DROP;

		/** Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle. */
		const CURSOR_FORBIDDEN: CursorShape.CURSOR_FORBIDDEN;

		/** Show the system's vertical resize mouse cursor when the user hovers the node. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically. */
		const CURSOR_VSIZE: CursorShape.CURSOR_VSIZE;

		/** Show the system's horizontal resize mouse cursor when the user hovers the node. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally. */
		const CURSOR_HSIZE: CursorShape.CURSOR_HSIZE;

		/** Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically. */
		const CURSOR_BDIAGSIZE: CursorShape.CURSOR_BDIAGSIZE;

		/** Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of `CURSOR_BDIAGSIZE`. It tells the user they can resize the window or the panel both horizontally and vertically. */
		const CURSOR_FDIAGSIZE: CursorShape.CURSOR_FDIAGSIZE;

		/** Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely. */
		const CURSOR_MOVE: CursorShape.CURSOR_MOVE;

		/** Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as `CURSOR_VSIZE`. */
		const CURSOR_VSPLIT: CursorShape.CURSOR_VSPLIT;

		/** Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as `CURSOR_HSIZE`. */
		const CURSOR_HSPLIT: CursorShape.CURSOR_HSPLIT;

		/** Show the system's help mouse cursor when the user hovers the node, a question mark. */
		const CURSOR_HELP: CursorShape.CURSOR_HELP;

		/** Snap all 4 anchors to the top-left of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_TOP_LEFT: LayoutPreset.PRESET_TOP_LEFT;

		/** Snap all 4 anchors to the top-right of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_TOP_RIGHT: LayoutPreset.PRESET_TOP_RIGHT;

		/** Snap all 4 anchors to the bottom-left of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_BOTTOM_LEFT: LayoutPreset.PRESET_BOTTOM_LEFT;

		/** Snap all 4 anchors to the bottom-right of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_BOTTOM_RIGHT: LayoutPreset.PRESET_BOTTOM_RIGHT;

		/** Snap all 4 anchors to the center of the left edge of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_CENTER_LEFT: LayoutPreset.PRESET_CENTER_LEFT;

		/** Snap all 4 anchors to the center of the top edge of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_CENTER_TOP: LayoutPreset.PRESET_CENTER_TOP;

		/** Snap all 4 anchors to the center of the right edge of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_CENTER_RIGHT: LayoutPreset.PRESET_CENTER_RIGHT;

		/** Snap all 4 anchors to the center of the bottom edge of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_CENTER_BOTTOM: LayoutPreset.PRESET_CENTER_BOTTOM;

		/** Snap all 4 anchors to the center of the parent control's bounds. Use with `set_anchors_preset`. */
		const PRESET_CENTER: LayoutPreset.PRESET_CENTER;

		/** Snap all 4 anchors to the left edge of the parent control. The left margin becomes relative to the left edge and the top margin relative to the top left corner of the node's parent. Use with `set_anchors_preset`. */
		const PRESET_LEFT_WIDE: LayoutPreset.PRESET_LEFT_WIDE;

		/** Snap all 4 anchors to the top edge of the parent control. The left margin becomes relative to the top left corner, the top margin relative to the top edge, and the right margin relative to the top right corner of the node's parent. Use with `set_anchors_preset`. */
		const PRESET_TOP_WIDE: LayoutPreset.PRESET_TOP_WIDE;

		/** Snap all 4 anchors to the right edge of the parent control. The right margin becomes relative to the right edge and the top margin relative to the top right corner of the node's parent. Use with `set_anchors_preset`. */
		const PRESET_RIGHT_WIDE: LayoutPreset.PRESET_RIGHT_WIDE;

		/** Snap all 4 anchors to the bottom edge of the parent control. The left margin becomes relative to the bottom left corner, the bottom margin relative to the bottom edge, and the right margin relative to the bottom right corner of the node's parent. Use with `set_anchors_preset`. */
		const PRESET_BOTTOM_WIDE: LayoutPreset.PRESET_BOTTOM_WIDE;

		/** Snap all 4 anchors to a vertical line that cuts the parent control in half. Use with `set_anchors_preset`. */
		const PRESET_VCENTER_WIDE: LayoutPreset.PRESET_VCENTER_WIDE;

		/** Snap all 4 anchors to a horizontal line that cuts the parent control in half. Use with `set_anchors_preset`. */
		const PRESET_HCENTER_WIDE: LayoutPreset.PRESET_HCENTER_WIDE;

		/** Snap all 4 anchors to the respective corners of the parent control. Set all 4 margins to 0 after you applied this preset and the `Control` will fit its parent control. This is equivalent to the "Full Rect" layout option in the editor. Use with `set_anchors_preset`. */
		const PRESET_WIDE: LayoutPreset.PRESET_WIDE;

		/** The control will be resized to its minimum size. */
		const PRESET_MODE_MINSIZE: LayoutPresetMode.PRESET_MODE_MINSIZE;

		/** The control's width will not change. */
		const PRESET_MODE_KEEP_WIDTH: LayoutPresetMode.PRESET_MODE_KEEP_WIDTH;

		/** The control's height will not change. */
		const PRESET_MODE_KEEP_HEIGHT: LayoutPresetMode.PRESET_MODE_KEEP_HEIGHT;

		/** The control's size will not change. */
		const PRESET_MODE_KEEP_SIZE: LayoutPresetMode.PRESET_MODE_KEEP_SIZE;

		/** Tells the parent `Container` to expand the bounds of this node to fill all the available space without pushing any other node. Use with `size_flags_horizontal` and `size_flags_vertical`. */
		const SIZE_FILL: SizeFlags.SIZE_FILL;

		/** Tells the parent `Container` to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See `size_flags_stretch_ratio`. Use with `size_flags_horizontal` and `size_flags_vertical`. */
		const SIZE_EXPAND: SizeFlags.SIZE_EXPAND;

		/** Sets the node's size flags to both fill and expand. See the 2 constants above for more information. */
		const SIZE_EXPAND_FILL: SizeFlags.SIZE_EXPAND_FILL;

		/** Tells the parent `Container` to center the node in itself. It centers the control based on its bounding box, so it doesn't work with the fill or expand size flags. Use with `size_flags_horizontal` and `size_flags_vertical`. */
		const SIZE_SHRINK_CENTER: SizeFlags.SIZE_SHRINK_CENTER;

		/** Tells the parent `Container` to align the node with its end, either the bottom or the right edge. It doesn't work with the fill or expand size flags. Use with `size_flags_horizontal` and `size_flags_vertical`. */
		const SIZE_SHRINK_END: SizeFlags.SIZE_SHRINK_END;

		/** The control will receive mouse button input events through `_gui_input` if clicked on. And the control will receive the `mouse_entered` and `mouse_exited` signals. These events are automatically marked as handled, and they will not propagate further to other controls. This also results in blocking signals in other controls. */
		const MOUSE_FILTER_STOP: MouseFilter.MOUSE_FILTER_STOP;

		/** The control will receive mouse button input events through `_gui_input` if clicked on. And the control will receive the `mouse_entered` and `mouse_exited` signals. If this control does not handle the event, the parent control (if any) will be considered, and so on until there is no more parent control to potentially handle it. This also allows signals to fire in other controls. Even if no control handled it at all, the event will still be handled automatically, so unhandled input will not be fired. */
		const MOUSE_FILTER_PASS: MouseFilter.MOUSE_FILTER_PASS;

		/** The control will not receive mouse button input events through `_gui_input`. The control will also not receive the `mouse_entered` nor `mouse_exited` signals. This will not block other controls from receiving these events or firing the signals. Ignored events will not be handled automatically. */
		const MOUSE_FILTER_IGNORE: MouseFilter.MOUSE_FILTER_IGNORE;

		/** The control will grow to the left or top to make up if its minimum size is changed to be greater than its current size on the respective axis. */
		const GROW_DIRECTION_BEGIN: GrowDirection.GROW_DIRECTION_BEGIN;

		/** The control will grow to the right or bottom to make up if its minimum size is changed to be greater than its current size on the respective axis. */
		const GROW_DIRECTION_END: GrowDirection.GROW_DIRECTION_END;

		/** The control will grow in both directions equally to make up if its minimum size is changed to be greater than its current size. */
		const GROW_DIRECTION_BOTH: GrowDirection.GROW_DIRECTION_BOTH;

		/** Snaps one of the 4 anchor's sides to the origin of the node's `Rect`, in the top left. Use it with one of the `anchor_*` member variables, like `anchor_left`. To change all 4 anchors at once, use `set_anchors_preset`. */
		const ANCHOR_BEGIN: Anchor.ANCHOR_BEGIN;

		/** Snaps one of the 4 anchor's sides to the end of the node's `Rect`, in the bottom right. Use it with one of the `anchor_*` member variables, like `anchor_left`. To change all 4 anchors at once, use `set_anchors_preset`. */
		const ANCHOR_END: Anchor.ANCHOR_END;
	}

	/** Convex polygon shape for 3D physics.
	 Convex polygon shape resource, which can be added to a `PhysicsBody` or area. */
	class ConvexPolygonShape extends Shape {

		/** The list of 3D points forming the convex polygon shape. */
		points: PoolVector3Array;

		/** Getter of `points` property */
		get_points() : PoolVector3Array;

		/** Setter of `points` property */
		set_points(p_value: PoolVector3Array) : void;
	}
	namespace ConvexPolygonShape {
	}

	/** Convex polygon shape for 2D physics.
	 Convex polygon shape for 2D physics. A convex polygon, whatever its shape, is internally decomposed into as many convex polygons as needed to ensure all collision checks against it are always done on convex polygons (which are faster to check).

	 The main difference between a `ConvexPolygonShape2D` and a `ConcavePolygonShape2D` is that a concave polygon assumes it is concave and uses a more complex method of collision detection, and a convex one forces itself to be convex in order to speed up collision detection. */
	class ConvexPolygonShape2D extends Shape2D {

		/** The polygon's list of vertices. Can be in either clockwise or counterclockwise order. */
		points: PoolVector2Array;

		/** Based on the set of points provided, this creates and assigns the `points` property using the convex hull algorithm. Removing all unneeded points. See `Geometry.convex_hull_2d` for details. */
		set_point_cloud(point_cloud: PoolVector2Array) : void;

		/** Getter of `points` property */
		get_points() : PoolVector2Array;

		/** Setter of `points` property */
		set_points(p_value: PoolVector2Array) : void;
	}
	namespace ConvexPolygonShape2D {
	}

	/** Access to advanced cryptographic functionalities.
	 The Crypto class allows you to access some more advanced cryptographic functionalities in Godot.

	 For now, this includes generating cryptographically secure random bytes, and RSA keys and self-signed X509 certificates generation. More functionalities are planned for future releases.

	 ```gdscript
	 extends Node
	 
	 var crypto = Crypto.new()
	 var key = CryptoKey.new()
	 var cert = X509Certificate.new()
	 
	 func _ready():
	     # Generate new RSA key.
	     key = crypto.generate_rsa(4096)
	     # Generate new self-signed certificate with the given key.
	     cert = crypto.generate_self_signed_certificate(key, "CN=mydomain.com,O=My Game Company,C=IT")
	     # Save key and certificate in the user folder.
	     key.save("user://generated.key")
	     cert.save("user://generated.crt")
	 ```

	 **Note:** Not available in HTML5 exports. */
	class Crypto extends Reference {

		/** Generates a `PoolByteArray` of cryptographically secure random bytes with given `size`. */
		generate_random_bytes(size: number) : PoolByteArray;

		/** Generates an RSA `CryptoKey` that can be used for creating self-signed certificates and passed to `StreamPeerSSL.accept_stream`. */
		generate_rsa(size: number) : CryptoKey;

		/** Generates a self-signed `X509Certificate` from the given `CryptoKey` and `issuer_name`. The certificate validity will be defined by `not_before` and `not_after` (first valid date and last valid date). The `issuer_name` must contain at least "CN=" (common name, i.e. the domain name), "O=" (organization, i.e. your company name), "C=" (country, i.e. 2 lettered ISO-3166 code of the country the organization is based in).

		 A small example to generate an RSA key and a X509 self-signed certificate.

		 ```gdscript
		 var crypto = Crypto.new()
		 # Generate 4096 bits RSA key.
		 var key = crypto.generate_rsa(4096)
		 # Generate self-signed certificate using the given key.
		 var cert = crypto.generate_self_signed_certificate(key, "CN=example.com,O=A Game Company,C=IT")
		 ``` */
		//@ts-ignore
		generate_self_signed_certificate(key: CryptoKey, issuer_name: string = "CN=myserver,O=myorganisation,C=IT", not_before: string = "20140101000000", not_after: string = "20340101000000") : X509Certificate;
	}
	namespace Crypto {
	}

	/** A cryptographic key (RSA).
	 The CryptoKey class represents a cryptographic key. Keys can be loaded and saved like any other `Resource`.

	 They can be used to generate a self-signed `X509Certificate` via `Crypto.generate_self_signed_certificate` and as private key in `StreamPeerSSL.accept_stream` along with the appropriate certificate.

	 **Note:** Not available in HTML5 exports. */
	class CryptoKey extends Resource {

		/** Saves a key to the given `path` (should be a "*.key" file). */
		save(path: string) : number;

		/** Loads a key from `path` ("*.key" file). */
		load(path: string) : number;
	}
	namespace CryptoKey {
	}

	/** A CubeMap is a 6-sided 3D texture.
	 A 6-sided 3D texture typically used for faking reflections. It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods. */
	class CubeMap extends Resource {

		/** The render flags for the `CubeMap`. See the `Flags` constants for details. */
		flags: number;

		/** The `CubeMap`'s storage mode. See `Storage` constants. */
		storage_mode: number;

		/** The lossy storage quality of the `CubeMap` if the storage mode is set to `STORAGE_COMPRESS_LOSSY`. */
		lossy_storage_quality: number;

		/** Returns the `CubeMap`'s width. */
		get_width() : number;

		/** Returns the `CubeMap`'s height. */
		get_height() : number;

		/** Sets an `Image` for a side of the `CubeMap` using one of the `Side` constants. */
		set_side(side: CubeMap.Side, image: Image) : void;

		/** Returns an `Image` for a side of the `CubeMap` using one of the `Side` constants. */
		get_side(side: CubeMap.Side) : Image;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;

		/** Getter of `storage_mode` property */
		get_storage() : number;

		/** Setter of `storage_mode` property */
		set_storage(p_value: number) : void;

		/** Getter of `lossy_storage_quality` property */
		get_lossy_storage_quality() : number;

		/** Setter of `lossy_storage_quality` property */
		set_lossy_storage_quality(p_value: number) : void;
	}
	namespace CubeMap {
		enum Flags {
			/** Generate mipmaps, to enable smooth zooming out of the texture. */
			FLAG_MIPMAPS = 1,
			/** Repeat (instead of clamp to edge). */
			FLAG_REPEAT = 2,
			/** Turn on magnifying filter, to enable smooth zooming in of the texture. */
			FLAG_FILTER = 4,
			/** Default flags. Generate mipmaps, repeat, and filter are enabled. */
			FLAGS_DEFAULT = 7,
		}
		enum Side {
			/** Identifier for the left face of the `CubeMap`. */
			SIDE_LEFT = 0,
			/** Identifier for the right face of the `CubeMap`. */
			SIDE_RIGHT = 1,
			/** Identifier for the bottom face of the `CubeMap`. */
			SIDE_BOTTOM = 2,
			/** Identifier for the top face of the `CubeMap`. */
			SIDE_TOP = 3,
			/** Identifier for the front face of the `CubeMap`. */
			SIDE_FRONT = 4,
			/** Identifier for the back face of the `CubeMap`. */
			SIDE_BACK = 5,
		}
		enum Storage {
			/** Store the `CubeMap` without any compression. */
			STORAGE_RAW = 0,
			/** Store the `CubeMap` with strong compression that reduces image quality. */
			STORAGE_COMPRESS_LOSSY = 1,
			/** Store the `CubeMap` with moderate compression that doesn't reduce image quality. */
			STORAGE_COMPRESS_LOSSLESS = 2,
		}

		/** Store the `CubeMap` without any compression. */
		const STORAGE_RAW: Storage.STORAGE_RAW;

		/** Store the `CubeMap` with strong compression that reduces image quality. */
		const STORAGE_COMPRESS_LOSSY: Storage.STORAGE_COMPRESS_LOSSY;

		/** Store the `CubeMap` with moderate compression that doesn't reduce image quality. */
		const STORAGE_COMPRESS_LOSSLESS: Storage.STORAGE_COMPRESS_LOSSLESS;

		/** Identifier for the left face of the `CubeMap`. */
		const SIDE_LEFT: Side.SIDE_LEFT;

		/** Identifier for the right face of the `CubeMap`. */
		const SIDE_RIGHT: Side.SIDE_RIGHT;

		/** Identifier for the bottom face of the `CubeMap`. */
		const SIDE_BOTTOM: Side.SIDE_BOTTOM;

		/** Identifier for the top face of the `CubeMap`. */
		const SIDE_TOP: Side.SIDE_TOP;

		/** Identifier for the front face of the `CubeMap`. */
		const SIDE_FRONT: Side.SIDE_FRONT;

		/** Identifier for the back face of the `CubeMap`. */
		const SIDE_BACK: Side.SIDE_BACK;

		/** Generate mipmaps, to enable smooth zooming out of the texture. */
		const FLAG_MIPMAPS: Flags.FLAG_MIPMAPS;

		/** Repeat (instead of clamp to edge). */
		const FLAG_REPEAT: Flags.FLAG_REPEAT;

		/** Turn on magnifying filter, to enable smooth zooming in of the texture. */
		const FLAG_FILTER: Flags.FLAG_FILTER;

		/** Default flags. Generate mipmaps, repeat, and filter are enabled. */
		const FLAGS_DEFAULT: Flags.FLAGS_DEFAULT;
	}

	/** Generate an axis-aligned cuboid `PrimitiveMesh`.
	 Generate an axis-aligned cuboid `PrimitiveMesh`.

	 The cube's UV layout is arranged in a 3×2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to `Vector3(3, 2, 1)`. */
	class CubeMesh extends PrimitiveMesh {

		/** Size of the cuboid mesh. */
		size: Vector3;

		/** Number of extra edge loops inserted along the X axis. */
		subdivide_width: number;

		/** Number of extra edge loops inserted along the Y axis. */
		subdivide_height: number;

		/** Number of extra edge loops inserted along the Z axis. */
		subdivide_depth: number;

		/** Getter of `size` property */
		get_size() : Vector3;

		/** Setter of `size` property */
		set_size(p_value: Vector3) : void;

		/** Getter of `subdivide_width` property */
		get_subdivide_width() : number;

		/** Setter of `subdivide_width` property */
		set_subdivide_width(p_value: number) : void;

		/** Getter of `subdivide_height` property */
		get_subdivide_height() : number;

		/** Setter of `subdivide_height` property */
		set_subdivide_height(p_value: number) : void;

		/** Getter of `subdivide_depth` property */
		get_subdivide_depth() : number;

		/** Setter of `subdivide_depth` property */
		set_subdivide_depth(p_value: number) : void;
	}
	namespace CubeMesh {
	}

	/** A mathematic curve.
	 A curve that can be saved and re-used for other objects. By default, it ranges between `0` and `1` on the Y axis and positions points relative to the `0.5` Y position. */
	class Curve extends Resource {

		/** The minimum value the curve can reach. */
		min_value: number;

		/** The maximum value the curve can reach. */
		max_value: number;

		/** The number of points to include in the baked (i.e. cached) curve data. */
		bake_resolution: number;

		/** Returns the number of points describing the curve. */
		get_point_count() : number;

		/** Adds a point to the curve. For each side, if the `*_mode` is `TANGENT_LINEAR`, the `*_tangent` angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the `*_tangent` angle if `*_mode` is set to `TANGENT_FREE`. */
		//@ts-ignore
		add_point(position: Vector2, left_tangent: number = 0, right_tangent: number = 0, left_mode: Curve.TangentMode = 0, right_mode: Curve.TangentMode = 0) : number;

		/** Removes the point at `index` from the curve. */
		remove_point(index: number) : void;

		/** Removes all points from the curve. */
		clear_points() : void;

		/** Returns the curve coordinates for the point at `index`. */
		get_point_position(index: number) : Vector2;

		/** Assigns the vertical position `y` to the point at `index`. */
		set_point_value(index: number, y: number) : void;

		/** Sets the offset from `0.5`. */
		set_point_offset(index: number, offset: number) : number;

		/** Returns the Y value for the point that would exist at the X position `offset` along the curve. */
		interpolate(offset: number) : number;

		/** Returns the Y value for the point that would exist at the X position `offset` along the curve using the baked cache. Bakes the curve's points if not already baked. */
		interpolate_baked(offset: number) : number;

		/** Returns the left tangent angle (in degrees) for the point at `index`. */
		get_point_left_tangent(index: number) : number;

		/** Returns the right tangent angle (in degrees) for the point at `index`. */
		get_point_right_tangent(index: number) : number;

		/** Returns the left `TangentMode` for the point at `index`. */
		get_point_left_mode(index: number) : number;

		/** Returns the right `TangentMode` for the point at `index`. */
		get_point_right_mode(index: number) : number;

		/** Sets the left tangent angle for the point at `index` to `tangent`. */
		set_point_left_tangent(index: number, tangent: number) : void;

		/** Sets the right tangent angle for the point at `index` to `tangent`. */
		set_point_right_tangent(index: number, tangent: number) : void;

		/** Sets the left `TangentMode` for the point at `index` to `mode`. */
		set_point_left_mode(index: number, mode: Curve.TangentMode) : void;

		/** Sets the right `TangentMode` for the point at `index` to `mode`. */
		set_point_right_mode(index: number, mode: Curve.TangentMode) : void;

		/** Removes points that are closer than `CMP_EPSILON` (0.00001) units to their neighbor on the curve. */
		clean_dupes() : void;

		/** Recomputes the baked cache of points for the curve. */
		bake() : void;

		/** Getter of `min_value` property */
		get_min_value() : number;

		/** Setter of `min_value` property */
		set_min_value(p_value: number) : void;

		/** Getter of `max_value` property */
		get_max_value() : number;

		/** Setter of `max_value` property */
		set_max_value(p_value: number) : void;

		/** Getter of `bake_resolution` property */
		get_bake_resolution() : number;

		/** Setter of `bake_resolution` property */
		set_bake_resolution(p_value: number) : void;
	}
	namespace Curve {

		/** Emitted when `max_value` or `min_value` is changed. */
		const range_changed: 'range_changed';
		enum TangentMode {
			/** The tangent on this side of the point is user-defined. */
			TANGENT_FREE = 0,
			/** The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point. */
			TANGENT_LINEAR = 1,
			/** The total number of available tangent modes. */
			TANGENT_MODE_COUNT = 2,
		}

		/** The tangent on this side of the point is user-defined. */
		const TANGENT_FREE: TangentMode.TANGENT_FREE;

		/** The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point. */
		const TANGENT_LINEAR: TangentMode.TANGENT_LINEAR;

		/** The total number of available tangent modes. */
		const TANGENT_MODE_COUNT: TangentMode.TANGENT_MODE_COUNT;
	}

	/** Describes a Bézier curve in 2D space.
	 This class describes a Bézier curve in 2D space. It is mainly used to give a shape to a `Path2D`, but can be manually sampled for other purposes.

	 It keeps a cache of precalculated points along the curve, to speed up further calculations. */
	class Curve2D extends Resource {

		/** The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the `get_baked_points` or `get_baked_length` function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care. */
		bake_interval: number;

		/** Returns the number of points describing the curve. */
		get_point_count() : number;

		/** Adds a point to a curve at `position`, with control points `in` and `out`.

		 If `at_position` is given, the point is inserted before the point number `at_position`, moving that point (and every point after) after the inserted point. If `at_position` is not given, or is an illegal value (`at_position <0` or `at_position >= `get_point_count``), the point will be appended at the end of the point list. */
		//@ts-ignore
		add_point(position: Vector2, p_in: Vector2 = Vector2( 0, 0 ), out: Vector2 = Vector2( 0, 0 ), at_position: number = -1) : void;

		/** Sets the position for the vertex `idx`. If the index is out of bounds, the function sends an error to the console. */
		set_point_position(idx: number, position: Vector2) : void;

		/** Returns the position of the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0)`. */
		get_point_position(idx: number) : Vector2;

		/** Sets the position of the control point leading to the vertex `idx`. If the index is out of bounds, the function sends an error to the console. */
		set_point_in(idx: number, position: Vector2) : void;

		/** Returns the position of the control point leading to the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0)`. */
		get_point_in(idx: number) : Vector2;

		/** Sets the position of the control point leading out of the vertex `idx`. If the index is out of bounds, the function sends an error to the console. */
		set_point_out(idx: number, position: Vector2) : void;

		/** Returns the position of the control point leading out of the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0)`. */
		get_point_out(idx: number) : Vector2;

		/** Deletes the point `idx` from the curve. Sends an error to the console if `idx` is out of bounds. */
		remove_point(idx: number) : void;

		/** Removes all points from the curve. */
		clear_points() : void;

		/** Returns the position between the vertex `idx` and the vertex `idx + 1`, where `t` controls if the point is the first vertex (`t = 0.0`), the last vertex (`t = 1.0`), or in between. Values of `t` outside the range (`0.0 >= t <=1`) give strange, but predictable results.

		 If `idx` is out of bounds it is truncated to the first or last vertex, and `t` is ignored. If the curve has no points, the function sends an error to the console, and returns `(0, 0)`. */
		interpolate(idx: number, t: number) : Vector2;

		/** Returns the position at the vertex `fofs`. It calls `interpolate` using the integer part of `fofs` as `idx`, and its fractional part as `t`. */
		interpolatef(fofs: number) : Vector2;

		/** Returns the total length of the curve, based on the cached points. Given enough density (see `bake_interval`), it should be approximate enough. */
		get_baked_length() : number;

		/** Returns a point within the curve at position `offset`, where `offset` is measured as a pixel distance along the curve.

		 To do that, it finds the two cached points where the `offset` lies between, then interpolates the values. This interpolation is cubic if `cubic` is set to `true`, or linear if set to `false`.

		 Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough). */
		//@ts-ignore
		interpolate_baked(offset: number, cubic: boolean = false) : Vector2;

		/** Returns the cache of points as a `PoolVector2Array`. */
		get_baked_points() : PoolVector2Array;

		/** Returns the closest point (in curve's local space) to `to_point`.

		 `to_point` must be in this curve's local space. */
		get_closest_point(to_point: Vector2) : Vector2;

		/** Returns the closest offset to `to_point`. This offset is meant to be used in `interpolate_baked`.

		 `to_point` must be in this curve's local space. */
		get_closest_offset(to_point: Vector2) : number;

		/** Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.

		 This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.

		 `max_stages` controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!

		 `tolerance_degrees` controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided. */
		//@ts-ignore
		tessellate(max_stages: number = 5, tolerance_degrees: number = 4) : PoolVector2Array;

		/** Getter of `bake_interval` property */
		get_bake_interval() : number;

		/** Setter of `bake_interval` property */
		set_bake_interval(p_value: number) : void;
	}
	namespace Curve2D {
	}

	/** Describes a Bézier curve in 3D space.
	 This class describes a Bézier curve in 3D space. It is mainly used to give a shape to a `Path`, but can be manually sampled for other purposes.

	 It keeps a cache of precalculated points along the curve, to speed up further calculations. */
	class Curve3D extends Resource {

		/** The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the `get_baked_points` or `get_baked_length` function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care. */
		bake_interval: number;

		/** If `true`, the curve will bake up vectors used for orientation. This is used when `PathFollow.rotation_mode` is set to `PathFollow.ROTATION_ORIENTED`. Changing it forces the cache to be recomputed. */
		up_vector_enabled: boolean;

		/** Returns the number of points describing the curve. */
		get_point_count() : number;

		/** Adds a point to a curve at `position`, with control points `in` and `out`.

		 If `at_position` is given, the point is inserted before the point number `at_position`, moving that point (and every point after) after the inserted point. If `at_position` is not given, or is an illegal value (`at_position <0` or `at_position >= `get_point_count``), the point will be appended at the end of the point list. */
		//@ts-ignore
		add_point(position: Vector3, p_in: Vector3 = Vector3( 0, 0, 0 ), out: Vector3 = Vector3( 0, 0, 0 ), at_position: number = -1) : void;

		/** Sets the position for the vertex `idx`. If the index is out of bounds, the function sends an error to the console. */
		set_point_position(idx: number, position: Vector3) : void;

		/** Returns the position of the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`. */
		get_point_position(idx: number) : Vector3;

		/** Sets the tilt angle in radians for the point `idx`. If the index is out of bounds, the function sends an error to the console.

		 The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a `PathFollow`, this tilt is an offset over the natural tilt the `PathFollow` calculates. */
		set_point_tilt(idx: number, tilt: number) : void;

		/** Returns the tilt angle in radians for the point `idx`. If the index is out of bounds, the function sends an error to the console, and returns `0`. */
		get_point_tilt(idx: number) : number;

		/** Sets the position of the control point leading to the vertex `idx`. If the index is out of bounds, the function sends an error to the console. */
		set_point_in(idx: number, position: Vector3) : void;

		/** Returns the position of the control point leading to the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`. */
		get_point_in(idx: number) : Vector3;

		/** Sets the position of the control point leading out of the vertex `idx`. If the index is out of bounds, the function sends an error to the console. */
		set_point_out(idx: number, position: Vector3) : void;

		/** Returns the position of the control point leading out of the vertex `idx`. If the index is out of bounds, the function sends an error to the console, and returns `(0, 0, 0)`. */
		get_point_out(idx: number) : Vector3;

		/** Deletes the point `idx` from the curve. Sends an error to the console if `idx` is out of bounds. */
		remove_point(idx: number) : void;

		/** Removes all points from the curve. */
		clear_points() : void;

		/** Returns the position between the vertex `idx` and the vertex `idx + 1`, where `t` controls if the point is the first vertex (`t = 0.0`), the last vertex (`t = 1.0`), or in between. Values of `t` outside the range (`0.0 >= t <=1`) give strange, but predictable results.

		 If `idx` is out of bounds it is truncated to the first or last vertex, and `t` is ignored. If the curve has no points, the function sends an error to the console, and returns `(0, 0, 0)`. */
		interpolate(idx: number, t: number) : Vector3;

		/** Returns the position at the vertex `fofs`. It calls `interpolate` using the integer part of `fofs` as `idx`, and its fractional part as `t`. */
		interpolatef(fofs: number) : Vector3;

		/** Returns the total length of the curve, based on the cached points. Given enough density (see `bake_interval`), it should be approximate enough. */
		get_baked_length() : number;

		/** Returns a point within the curve at position `offset`, where `offset` is measured as a pixel distance along the curve.

		 To do that, it finds the two cached points where the `offset` lies between, then interpolates the values. This interpolation is cubic if `cubic` is set to `true`, or linear if set to `false`.

		 Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough). */
		//@ts-ignore
		interpolate_baked(offset: number, cubic: boolean = false) : Vector3;

		/** Returns an up vector within the curve at position `offset`, where `offset` is measured as a distance in 3D units along the curve.

		 To do that, it finds the two cached up vectors where the `offset` lies between, then interpolates the values. If `apply_tilt` is `true`, an interpolated tilt is applied to the interpolated up vector.

		 If the curve has no up vectors, the function sends an error to the console, and returns `(0, 1, 0)`. */
		//@ts-ignore
		interpolate_baked_up_vector(offset: number, apply_tilt: boolean = false) : Vector3;

		/** Returns the cache of points as a `PoolVector3Array`. */
		get_baked_points() : PoolVector3Array;

		/** Returns the cache of tilts as a `PoolRealArray`. */
		get_baked_tilts() : PoolRealArray;

		/** Returns the cache of up vectors as a `PoolVector3Array`.

		 If `up_vector_enabled` is `false`, the cache will be empty. */
		get_baked_up_vectors() : PoolVector3Array;

		/** Returns the closest point (in curve's local space) to `to_point`.

		 `to_point` must be in this curve's local space. */
		get_closest_point(to_point: Vector3) : Vector3;

		/** Returns the closest offset to `to_point`. This offset is meant to be used in `interpolate_baked` or `interpolate_baked_up_vector`.

		 `to_point` must be in this curve's local space. */
		get_closest_offset(to_point: Vector3) : number;

		/** Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts.

		 This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough.

		 `max_stages` controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care!

		 `tolerance_degrees` controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided. */
		//@ts-ignore
		tessellate(max_stages: number = 5, tolerance_degrees: number = 4) : PoolVector3Array;

		/** Getter of `bake_interval` property */
		get_bake_interval() : number;

		/** Setter of `bake_interval` property */
		set_bake_interval(p_value: number) : void;

		/** Getter of `up_vector_enabled` property */
		is_up_vector_enabled() : boolean;

		/** Setter of `up_vector_enabled` property */
		set_up_vector_enabled(p_value: boolean) : void;
	}
	namespace Curve3D {
	}

	/** A texture that shows a curve.
	 Renders a given `Curve` provided to it. Simplifies the task of drawing curves and/or saving them as image files. */
	class CurveTexture extends Texture {

		/** The width of the texture. */
		width: number;

		/** The `curve` rendered onto the texture. */
		curve: Curve;

		/** Getter of `width` property */
		get_width() : number;

		/** Setter of `width` property */
		set_width(p_value: number) : void;

		/** Getter of `curve` property */
		get_curve() : Curve;

		/** Setter of `curve` property */
		set_curve(p_value: Curve) : void;
	}
	namespace CurveTexture {
	}

	/** Class representing a cylindrical `PrimitiveMesh`.
	 Class representing a cylindrical `PrimitiveMesh`. This class can be used to create cones by setting either the `top_radius` or `bottom_radius` properties to 0.0. */
	class CylinderMesh extends PrimitiveMesh {

		/** Top radius of the cylinder. */
		top_radius: number;

		/** Bottom radius of the cylinder. */
		bottom_radius: number;

		/** Full height of the cylinder. */
		height: number;

		/** Number of radial segments on the cylinder. */
		radial_segments: number;

		/** Number of edge rings along the height of the cylinder. */
		rings: number;

		/** Getter of `top_radius` property */
		get_top_radius() : number;

		/** Setter of `top_radius` property */
		set_top_radius(p_value: number) : void;

		/** Getter of `bottom_radius` property */
		get_bottom_radius() : number;

		/** Setter of `bottom_radius` property */
		set_bottom_radius(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;

		/** Getter of `radial_segments` property */
		get_radial_segments() : number;

		/** Setter of `radial_segments` property */
		set_radial_segments(p_value: number) : void;

		/** Getter of `rings` property */
		get_rings() : number;

		/** Setter of `rings` property */
		set_rings(p_value: number) : void;
	}
	namespace CylinderMesh {
	}

	/** Cylinder shape for collisions.
	  */
	class CylinderShape extends Shape {

		/** The cylinder's radius. */
		radius: number;

		/** The cylinder's height. */
		height: number;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;
	}
	namespace CylinderShape {
	}

	/** Helper class to implement a DTLS server.
	 This class is used to store the state of a DTLS server. Upon `setup` it converts connected `PacketPeerUDP` to `PacketPeerDTLS` accepting them via `take_connection` as DTLS clients. Under the hood, this class is used to store the DTLS state and cookies of the server. The reason of why the state and cookies are needed is outside of the scope of this documentation.

	 Below a small example of how to use it:

	 ```gdscript
	 # server.gd
	 extends Node
	 
	 var dtls := DTLSServer.new()
	 var server := UDPServer.new()
	 var peers = []
	 
	 func _ready():
	     server.listen(4242)
	     var key = load("key.key") # Your private key.
	     var cert = load("cert.crt") # Your X509 certificate.
	     dtls.setup(key, cert)
	 
	 func _process(delta):
	     while server.is_connection_available():
	         var peer : PacketPeerUDP = server.take_connection()
	         var dtls_peer : PacketPeerDTLS = dtls.take_connection(peer)
	         if dtls_peer.get_status() != PacketPeerDTLS.STATUS_HANDSHAKING:
	             continue # It is normal that 50% of the connections fails due to cookie exchange.
	         print("Peer connected!")
	         peers.append(dtls_peer)
	     for p in peers:
	         p.poll() # Must poll to update the state.
	         if p.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
	             while p.get_available_packet_count() > 0:
	                 print("Received message from client: %s" % p.get_packet().get_string_from_utf8())
	                 p.put_packet("Hello DTLS client".to_utf8())
	 ```

	 ```gdscript
	 # client.gd
	 extends Node
	 
	 var dtls := PacketPeerDTLS.new()
	 var udp := PacketPeerUDP.new()
	 var connected = false
	 
	 func _ready():
	     udp.connect_to_host("127.0.0.1", 4242)
	     dtls.connect_to_peer(udp, false) # Use true in production for certificate validation!
	 
	 func _process(delta):
	     dtls.poll()
	     if dtls.get_status() == PacketPeerDTLS.STATUS_CONNECTED:
	         if !connected:
	             # Try to contact server
	             dtls.put_packet("The answer is... 42!".to_utf8())
	         while dtls.get_available_packet_count() > 0:
	             print("Connected: %s" % dtls.get_packet().get_string_from_utf8())
	             connected = true
	 ``` */
	class DTLSServer extends Reference {

		/** Setup the DTLS server to use the given `private_key` and provide the given `certificate` to clients. You can pass the optional `chain` parameter to provide additional CA chain information along with the certificate. */
		//@ts-ignore
		setup(key: CryptoKey, certificate: X509Certificate, chain: X509Certificate = null) : number;

		/** Try to initiate the DTLS handshake with the given `udp_peer` which must be already connected (see `PacketPeerUDP.connect_to_host`).

		 **Note**: You must check that the state of the return PacketPeerUDP is `PacketPeerDTLS.STATUS_HANDSHAKING`, as it is normal that 50% of the new connections will be invalid due to cookie exchange. */
		take_connection(udp_peer: PacketPeerUDP) : PacketPeerDTLS;
	}
	namespace DTLSServer {
	}

	/** Damped spring constraint for 2D physics.
	 Damped spring constraint for 2D physics. This resembles a spring joint that always wants to go back to a given length. */
	class DampedSpringJoint2D extends Joint2D {

		/** The spring joint's maximum length. The two attached bodies cannot stretch it past this value. */
		length: number;

		/** When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length. */
		rest_length: number;

		/** The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length. */
		stiffness: number;

		/** The spring joint's damping ratio. A value between `0` and `1`. When the two bodies move into different directions the system tries to align them to the spring axis again. A high `damping` value forces the attached bodies to align faster. */
		damping: number;

		/** Getter of `length` property */
		get_length() : number;

		/** Setter of `length` property */
		set_length(p_value: number) : void;

		/** Getter of `rest_length` property */
		get_rest_length() : number;

		/** Setter of `rest_length` property */
		set_rest_length(p_value: number) : void;

		/** Getter of `stiffness` property */
		get_stiffness() : number;

		/** Setter of `stiffness` property */
		set_stiffness(p_value: number) : void;

		/** Getter of `damping` property */
		get_damping() : number;

		/** Setter of `damping` property */
		set_damping(p_value: number) : void;
	}
	namespace DampedSpringJoint2D {
	}

	/** Directional light from a distance, as from the Sun.
	 A directional light is a type of `Light` node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight transform (origin) is ignored. Only the basis is used to determine light direction. */
	class DirectionalLight extends Light {

		/** The light's shadow rendering algorithm. See `ShadowMode`. */
		directional_shadow_mode: number;

		/** The distance from camera to shadow split 1. Relative to `directional_shadow_max_distance`. Only used when `directional_shadow_mode` is `SHADOW_PARALLEL_2_SPLITS` or `SHADOW_PARALLEL_4_SPLITS`. */
		directional_shadow_split_1: number;

		/** The distance from shadow split 1 to split 2. Relative to `directional_shadow_max_distance`. Only used when `directional_shadow_mode` is `SHADOW_PARALLEL_2_SPLITS` or `SHADOW_PARALLEL_4_SPLITS`. */
		directional_shadow_split_2: number;

		/** The distance from shadow split 2 to split 3. Relative to `directional_shadow_max_distance`. Only used when `directional_shadow_mode` is `SHADOW_PARALLEL_4_SPLITS`. */
		directional_shadow_split_3: number;

		/** If `true`, shadow detail is sacrificed in exchange for smoother transitions between splits. */
		directional_shadow_blend_splits: boolean;

		/** Can be used to fix special cases of self shadowing when objects are perpendicular to the light. */
		directional_shadow_normal_bias: number;

		/** Amount of extra bias for shadow splits that are far away. If self-shadowing occurs only on the splits far away, increasing this value can fix them. */
		directional_shadow_bias_split_scale: number;

		/** Optimizes shadow rendering for detail versus movement. See `ShadowDepthRange`. */
		directional_shadow_depth_range: number;

		/** The maximum distance for shadow splits. */
		directional_shadow_max_distance: number;

		/**  */
		shadow_bias: number;

		/** Getter of `directional_shadow_mode` property */
		get_shadow_mode() : number;

		/** Setter of `directional_shadow_mode` property */
		set_shadow_mode(p_value: number) : void;

		/** Getter of `directional_shadow_split_1` property */
		get_param() : number;

		/** Setter of `directional_shadow_split_1` property */
		set_param(p_value: number) : void;

		/** Getter of `directional_shadow_split_2` property */
		get_param() : number;

		/** Setter of `directional_shadow_split_2` property */
		set_param(p_value: number) : void;

		/** Getter of `directional_shadow_split_3` property */
		get_param() : number;

		/** Setter of `directional_shadow_split_3` property */
		set_param(p_value: number) : void;

		/** Getter of `directional_shadow_blend_splits` property */
		is_blend_splits_enabled() : boolean;

		/** Setter of `directional_shadow_blend_splits` property */
		set_blend_splits(p_value: boolean) : void;

		/** Getter of `directional_shadow_normal_bias` property */
		get_param() : number;

		/** Setter of `directional_shadow_normal_bias` property */
		set_param(p_value: number) : void;

		/** Getter of `directional_shadow_bias_split_scale` property */
		get_param() : number;

		/** Setter of `directional_shadow_bias_split_scale` property */
		set_param(p_value: number) : void;

		/** Getter of `directional_shadow_depth_range` property */
		get_shadow_depth_range() : number;

		/** Setter of `directional_shadow_depth_range` property */
		set_shadow_depth_range(p_value: number) : void;

		/** Getter of `directional_shadow_max_distance` property */
		get_param() : number;

		/** Setter of `directional_shadow_max_distance` property */
		set_param(p_value: number) : void;

		/** Getter of `shadow_bias` property */
		get_param() : number;

		/** Setter of `shadow_bias` property */
		set_param(p_value: number) : void;
	}
	namespace DirectionalLight {
		enum ShadowDepthRange {
			/** Keeps the shadow stable when the camera moves, at the cost of lower effective shadow resolution. */
			SHADOW_DEPTH_RANGE_STABLE = 0,
			/** Tries to achieve maximum shadow resolution. May result in saw effect on shadow edges. This mode typically works best in games where the camera will often move at high speeds, such as most racing games. */
			SHADOW_DEPTH_RANGE_OPTIMIZED = 1,
		}
		enum ShadowMode {
			/** Renders the entire scene's shadow map from an orthogonal point of view. This is the fastest directional shadow mode. May result in blurrier shadows on close objects. */
			SHADOW_ORTHOGONAL = 0,
			/** Splits the view frustum in 2 areas, each with its own shadow map. This shadow mode is a compromise between `SHADOW_ORTHOGONAL` and `SHADOW_PARALLEL_4_SPLITS` in terms of performance. */
			SHADOW_PARALLEL_2_SPLITS = 1,
			/** Splits the view frustum in 4 areas, each with its own shadow map. This is the slowest directional shadow mode. */
			SHADOW_PARALLEL_4_SPLITS = 2,
		}

		/** Renders the entire scene's shadow map from an orthogonal point of view. This is the fastest directional shadow mode. May result in blurrier shadows on close objects. */
		const SHADOW_ORTHOGONAL: ShadowMode.SHADOW_ORTHOGONAL;

		/** Splits the view frustum in 2 areas, each with its own shadow map. This shadow mode is a compromise between `SHADOW_ORTHOGONAL` and `SHADOW_PARALLEL_4_SPLITS` in terms of performance. */
		const SHADOW_PARALLEL_2_SPLITS: ShadowMode.SHADOW_PARALLEL_2_SPLITS;

		/** Splits the view frustum in 4 areas, each with its own shadow map. This is the slowest directional shadow mode. */
		const SHADOW_PARALLEL_4_SPLITS: ShadowMode.SHADOW_PARALLEL_4_SPLITS;

		/** Keeps the shadow stable when the camera moves, at the cost of lower effective shadow resolution. */
		const SHADOW_DEPTH_RANGE_STABLE: ShadowDepthRange.SHADOW_DEPTH_RANGE_STABLE;

		/** Tries to achieve maximum shadow resolution. May result in saw effect on shadow edges. This mode typically works best in games where the camera will often move at high speeds, such as most racing games. */
		const SHADOW_DEPTH_RANGE_OPTIMIZED: ShadowDepthRange.SHADOW_DEPTH_RANGE_OPTIMIZED;
	}

	/** Type used to handle the filesystem.
	 Directory type. It is used to manage directories and their content (not restricted to the project folder).

	 When creating a new `Directory`, it must be explicitly opened using `open` before most methods can be used. However, `file_exists` and `dir_exists` can be used without opening a directory. If so, they use a path relative to `res://`.

	 Here is an example on how to iterate through the files of a directory:

	 ```gdscript
	 func dir_contents(path):
	     var dir = Directory.new()
	     if dir.open(path) == OK:
	         dir.list_dir_begin()
	         var file_name = dir.get_next()
	         while file_name != "":
	             if dir.current_is_dir():
	                 print("Found directory: " + file_name)
	             else:
	                 print("Found file: " + file_name)
	             file_name = dir.get_next()
	     else:
	         print("An error occurred when trying to access the path.")
	 ``` */
	class Directory extends Reference {

		/** Opens an existing directory of the filesystem. The `path` argument can be within the project tree (`res://folder`), the user directory (`user://folder`) or an absolute path of the user filesystem (e.g. `/tmp/folder` or `C:\tmp\folder`).

		 Returns one of the `Error` code constants (`OK` on success). */
		open(path: string) : number;

		/** Initializes the stream used to list all files and directories using the `get_next` function, closing the current opened stream if needed. Once the stream has been processed, it should typically be closed with `list_dir_end`.

		 If `skip_navigational` is `true`, `.` and `..` are filtered out.

		 If `skip_hidden` is `true`, hidden files are filtered out. */
		//@ts-ignore
		list_dir_begin(skip_navigational: boolean = false, skip_hidden: boolean = false) : number;

		/** Returns the next element (file or directory) in the current directory (including `.` and `..`, unless `skip_navigational` was given to `list_dir_begin`).

		 The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty String and closes the stream automatically (i.e. `list_dir_end` would not be mandatory in such a case). */
		get_next() : string;

		/** Returns whether the current item processed with the last `get_next` call is a directory (`.` and `..` are considered directories). */
		current_is_dir() : boolean;

		/** Closes the current stream opened with `list_dir_begin` (whether it has been fully processed with `get_next` or not does not matter). */
		list_dir_end() : void;

		/** On Windows, returns the number of drives (partitions) mounted on the current filesystem. On other platforms, the method returns 0. */
		get_drive_count() : number;

		/** On Windows, returns the name of the drive (partition) passed as an argument (e.g. `C:`). On other platforms, or if the requested drive does not existed, the method returns an empty String. */
		get_drive(idx: number) : string;

		/** Returns the currently opened directory's drive index. See `get_drive` to convert returned index to the name of the drive. */
		get_current_drive() : number;

		/** Changes the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. `newdir` or `../newdir`), or an absolute path (e.g. `/tmp/newdir` or `res://somedir/newdir`).

		 Returns one of the `Error` code constants (`OK` on success). */
		change_dir(todir: string) : number;

		/** Returns the absolute path to the currently opened directory (e.g. `res://folder` or `C:\tmp\folder`). */
		get_current_dir() : string;

		/** Creates a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see `make_dir_recursive`).

		 Returns one of the `Error` code constants (`OK` on success). */
		make_dir(path: string) : number;

		/** Creates a target directory and all necessary intermediate directories in its path, by calling `make_dir` recursively. The argument can be relative to the current directory, or an absolute path.

		 Returns one of the `Error` code constants (`OK` on success). */
		make_dir_recursive(path: string) : number;

		/** Returns whether the target file exists. The argument can be relative to the current directory, or an absolute path.

		 If the `Directory` is not open, the path is relative to `res://`. */
		file_exists(path: string) : boolean;

		/** Returns whether the target directory exists. The argument can be relative to the current directory, or an absolute path.

		 If the `Directory` is not open, the path is relative to `res://`. */
		dir_exists(path: string) : boolean;

		/** On UNIX desktop systems, returns the available space on the current directory's disk. On other platforms, this information is not available and the method returns 0 or -1. */
		get_space_left() : number;

		/** Copies the `from` file to the `to` destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.

		 Returns one of the `Error` code constants (`OK` on success). */
		copy(p_from: string, to: string) : number;

		/** Renames (move) the `from` file to the `to` destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.

		 Returns one of the `Error` code constants (`OK` on success). */
		rename(p_from: string, to: string) : number;

		/** Deletes the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.

		 Returns one of the `Error` code constants (`OK` on success). */
		remove(path: string) : number;
	}
	namespace Directory {
	}

	/** DynamicFont renders vector font files at runtime.
	 DynamicFont renders vector font files (such as TTF or OTF) dynamically at runtime instead of using a prerendered texture atlas like `BitmapFont`. This trades the faster loading time of `BitmapFont`s for the ability to change font parameters like size and spacing during runtime. `DynamicFontData` is used for referencing the font file paths. DynamicFont also supports defining one or more fallbacks fonts, which will be used when displaying a character not supported by the main font.

	 DynamicFont uses the `url=https://www.freetype.org/`FreeType`/url` library for rasterization.

	 ```gdscript
	 var dynamic_font = DynamicFont.new()
	 dynamic_font.font_data = load("res://BarlowCondensed-Bold.ttf")
	 dynamic_font.size = 64
	 $"Label".set("custom_fonts/font", dynamic_font)
	 ```

	 **Note:** DynamicFont doesn't support features such as right-to-left typesetting, ligatures, text shaping, variable fonts and optional font features yet. If you wish to "bake" an optional font feature into a TTF font file, you can use `url=https://fontforge.org/`FontForge`/url` to do so. In FontForge, use **File > Generate Fonts**, click **Options**, choose the desired features then generate the font. */
	class DynamicFont extends Font {

		/** The font size in pixels. */
		size: number;

		/** The font outline's thickness in pixels (not relative to the font size). */
		outline_size: number;

		/** The font outline's color.

		 **Note:** It's recommended to leave this at the default value so that you can adjust it in individual controls. For example, if the outline is made black here, it won't be possible to change its color using a Label's font outline modulate theme item. */
		outline_color: Color;

		/** If `true`, mipmapping is used. This improves the font's appearance when downscaling it if font oversampling is disabled or ineffective. */
		use_mipmaps: boolean;

		/** If `true`, filtering is used. This makes the font blurry instead of pixelated when scaling it if font oversampling is disabled or ineffective. It's recommended to enable this when using the font in a control whose size changes over time, unless a pixel art aesthetic is desired. */
		use_filter: boolean;

		/** Extra spacing at the top in pixels. */
		extra_spacing_top: number;

		/** Extra spacing at the bottom in pixels. */
		extra_spacing_bottom: number;

		/** Extra character spacing in pixels. */
		extra_spacing_char: number;

		/** Extra space spacing in pixels. */
		extra_spacing_space: number;

		/** The font data. */
		font_data: DynamicFontData;

		/** Sets the spacing for `type` (see `SpacingType`) to `value` in pixels (not relative to the font size). */
		set_spacing(type: number, value: number) : void;

		/** Returns the spacing for the given `type` (see `SpacingType`). */
		get_spacing(type: number) : number;

		/** Adds a fallback font. */
		add_fallback(data: DynamicFontData) : void;

		/** Sets the fallback font at index `idx`. */
		set_fallback(idx: number, data: DynamicFontData) : void;

		/** Returns the fallback font at index `idx`. */
		get_fallback(idx: number) : DynamicFontData;

		/** Removes the fallback font at index `idx`. */
		remove_fallback(idx: number) : void;

		/** Returns the number of fallback fonts. */
		get_fallback_count() : number;

		/** Getter of `size` property */
		get_size() : number;

		/** Setter of `size` property */
		set_size(p_value: number) : void;

		/** Getter of `outline_size` property */
		get_outline_size() : number;

		/** Setter of `outline_size` property */
		set_outline_size(p_value: number) : void;

		/** Getter of `outline_color` property */
		get_outline_color() : Color;

		/** Setter of `outline_color` property */
		set_outline_color(p_value: Color) : void;

		/** Getter of `use_mipmaps` property */
		get_use_mipmaps() : boolean;

		/** Setter of `use_mipmaps` property */
		set_use_mipmaps(p_value: boolean) : void;

		/** Getter of `use_filter` property */
		get_use_filter() : boolean;

		/** Setter of `use_filter` property */
		set_use_filter(p_value: boolean) : void;

		/** Getter of `extra_spacing_top` property */
		get_spacing() : number;

		/** Setter of `extra_spacing_top` property */
		set_spacing(p_value: number) : void;

		/** Getter of `extra_spacing_bottom` property */
		get_spacing() : number;

		/** Setter of `extra_spacing_bottom` property */
		set_spacing(p_value: number) : void;

		/** Getter of `extra_spacing_char` property */
		get_spacing() : number;

		/** Setter of `extra_spacing_char` property */
		set_spacing(p_value: number) : void;

		/** Getter of `extra_spacing_space` property */
		get_spacing() : number;

		/** Setter of `extra_spacing_space` property */
		set_spacing(p_value: number) : void;

		/** Getter of `font_data` property */
		get_font_data() : DynamicFontData;

		/** Setter of `font_data` property */
		set_font_data(p_value: DynamicFontData) : void;
	}
	namespace DynamicFont {
		enum SpacingType {
			/** Spacing at the top. */
			SPACING_TOP = 0,
			/** Spacing at the bottom. */
			SPACING_BOTTOM = 1,
			/** Character spacing. */
			SPACING_CHAR = 2,
			/** Space spacing. */
			SPACING_SPACE = 3,
		}

		/** Spacing at the top. */
		const SPACING_TOP: SpacingType.SPACING_TOP;

		/** Spacing at the bottom. */
		const SPACING_BOTTOM: SpacingType.SPACING_BOTTOM;

		/** Character spacing. */
		const SPACING_CHAR: SpacingType.SPACING_CHAR;

		/** Space spacing. */
		const SPACING_SPACE: SpacingType.SPACING_SPACE;
	}

	/** Used with `DynamicFont` to describe the location of a font file.
	 Used with `DynamicFont` to describe the location of a vector font file for dynamic rendering at runtime. */
	class DynamicFontData extends Resource {

		/** If `true`, the font is rendered with anti-aliasing. This property applies both to the main font and its outline (if it has one). */
		antialiased: boolean;

		/** The font hinting mode used by FreeType. See `Hinting` for options. */
		hinting: number;

		/** The path to the vector font file. */
		font_path: string;

		/** Getter of `antialiased` property */
		is_antialiased() : boolean;

		/** Setter of `antialiased` property */
		set_antialiased(p_value: boolean) : void;

		/** Getter of `hinting` property */
		get_hinting() : number;

		/** Setter of `hinting` property */
		set_hinting(p_value: number) : void;

		/** Getter of `font_path` property */
		get_font_path() : string;

		/** Setter of `font_path` property */
		set_font_path(p_value: string) : void;
	}
	namespace DynamicFontData {
		enum Hinting {
			/** Disables font hinting (smoother but less crisp). */
			HINTING_NONE = 0,
			/** Use the light font hinting mode. */
			HINTING_LIGHT = 1,
			/** Use the default font hinting mode (crisper but less smooth). */
			HINTING_NORMAL = 2,
		}

		/** Disables font hinting (smoother but less crisp). */
		const HINTING_NONE: Hinting.HINTING_NONE;

		/** Use the light font hinting mode. */
		const HINTING_LIGHT: Hinting.HINTING_LIGHT;

		/** Use the default font hinting mode (crisper but less smooth). */
		const HINTING_NORMAL: Hinting.HINTING_NORMAL;
	}

	/** 
	  */
	class ECMAScript extends Script {
	}
	namespace ECMAScript {
	}

	/** 
	  */
	class ECMAScriptModule extends Resource {

		/**  */
		script_path: string;

		/**  */
		set_source_code(source_code: string) : void;

		/**  */
		get_source_code() : string;

		/**  */
		set_bytecode(bytecode: PoolByteArray) : void;

		/**  */
		get_bytecode() : PoolByteArray;

		/** Getter of `script_path` property */
		get_script_path() : string;

		/** Setter of `script_path` property */
		set_script_path(p_value: string) : void;
	}
	namespace ECMAScriptModule {
	}

	/** A script that is executed when exporting projects.
	  */
	class EditorExportPlugin extends Reference {

		/** Virtual method to be overridden by the user. It is called when the export starts and provides all information about the export. */
		_export_begin(features: PoolStringArray, is_debug: boolean, path: string, flags: number) : void;

		/** Virtual method to be overridden by the user. Called when the export is finished. */
		_export_end() : void;

		/**  */
		_export_file(path: string, type: string, features: PoolStringArray) : void;

		/**  */
		add_shared_object(path: string, tags: PoolStringArray) : void;

		/**  */
		add_ios_project_static_lib(path: string) : void;

		/**  */
		add_file(path: string, file: PoolByteArray, remap: boolean) : void;

		/**  */
		add_ios_framework(path: string) : void;

		/**  */
		add_ios_plist_content(plist_content: string) : void;

		/**  */
		add_ios_linker_flags(flags: string) : void;

		/**  */
		add_ios_bundle_file(path: string) : void;

		/**  */
		add_ios_cpp_code(code: string) : void;

		/**  */
		skip() : void;
	}
	namespace EditorExportPlugin {
	}

	/** An editor feature profile which can be used to disable specific features.
	 An editor feature profile can be used to disable specific features of the Godot editor. When disabled, the features won't appear in the editor, which makes the editor less cluttered. This is useful in education settings to reduce confusion or when working in a team. For example, artists and level designers could use a feature profile that disables the script editor to avoid accidentally making changes to files they aren't supposed to edit.

	 To manage editor feature profiles visually, use **Editor > Manage Feature Profiles...** at the top of the editor window. */
	class EditorFeatureProfile extends Reference {

		/** If `disable` is `true`, disables the class specified by `class_name`. When disabled, the class won't appear in the Create New Node dialog. */
		set_disable_class(class_name: string, disable: boolean) : void;

		/** Returns `true` if the class specified by `class_name` is disabled. When disabled, the class won't appear in the Create New Node dialog. */
		is_class_disabled(class_name: string) : boolean;

		/** If `disable` is `true`, disables editing for the class specified by `class_name`. When disabled, the class will still appear in the Create New Node dialog but the inspector will be read-only when selecting a node that extends the class. */
		set_disable_class_editor(class_name: string, disable: boolean) : void;

		/** Returns `true` if editing for the class specified by `class_name` is disabled. When disabled, the class will still appear in the Create New Node dialog but the inspector will be read-only when selecting a node that extends the class. */
		is_class_editor_disabled(class_name: string) : boolean;

		/** If `disable` is `true`, disables editing for `property` in the class specified by `class_name`. When a property is disabled, it won't appear in the inspector when selecting a node that extends the class specified by `class_name`. */
		set_disable_class_property(class_name: string, property: string, disable: boolean) : void;

		/** Returns `true` if `property` is disabled in the class specified by `class_name`. When a property is disabled, it won't appear in the inspector when selecting a node that extends the class specified by `class_name`. */
		is_class_property_disabled(class_name: string, property: string) : boolean;

		/** If `disable` is `true`, disables the editor feature specified in `feature`. When a feature is disabled, it will disappear from the editor entirely. */
		set_disable_feature(feature: EditorFeatureProfile.Feature, disable: boolean) : void;

		/** Returns `true` if the `feature` is disabled. When a feature is disabled, it will disappear from the editor entirely. */
		is_feature_disabled(feature: EditorFeatureProfile.Feature) : boolean;

		/** Returns the specified `feature`'s human-readable name. */
		get_feature_name(feature: EditorFeatureProfile.Feature) : string;

		/** Saves the editor feature profile to a file in JSON format. It can then be imported using the feature profile manager's **Import** button or the `load_from_file` button. */
		save_to_file(path: string) : number;

		/** Loads an editor feature profile from a file. The file must follow the JSON format obtained by using the feature profile manager's **Export** button or the `save_to_file` method. */
		load_from_file(path: string) : number;
	}
	namespace EditorFeatureProfile {
		enum Feature {
			/** The 3D editor. If this feature is disabled, the 3D editor won't display but 3D nodes will still display in the Create New Node dialog. */
			FEATURE_3D = 0,
			/** The Script tab, which contains the script editor and class reference browser. If this feature is disabled, the Script tab won't display. */
			FEATURE_SCRIPT = 1,
			/** The AssetLib tab. If this feature is disabled, the AssetLib tab won't display. */
			FEATURE_ASSET_LIB = 2,
			/** Scene tree editing. If this feature is disabled, the Scene tree dock will still be visible but will be read-only. */
			FEATURE_SCENE_TREE = 3,
			/** The Import dock. If this feature is disabled, the Import dock won't be visible. */
			FEATURE_IMPORT_DOCK = 4,
			/** The Node dock. If this feature is disabled, signals and groups won't be visible and modifiable from the editor. */
			FEATURE_NODE_DOCK = 5,
			/** The FileSystem dock. If this feature is disabled, the FileSystem dock won't be visible. */
			FEATURE_FILESYSTEM_DOCK = 6,
			/** Represents the size of the `Feature` enum. */
			FEATURE_MAX = 7,
		}

		/** The 3D editor. If this feature is disabled, the 3D editor won't display but 3D nodes will still display in the Create New Node dialog. */
		const FEATURE_3D: Feature.FEATURE_3D;

		/** The Script tab, which contains the script editor and class reference browser. If this feature is disabled, the Script tab won't display. */
		const FEATURE_SCRIPT: Feature.FEATURE_SCRIPT;

		/** The AssetLib tab. If this feature is disabled, the AssetLib tab won't display. */
		const FEATURE_ASSET_LIB: Feature.FEATURE_ASSET_LIB;

		/** Scene tree editing. If this feature is disabled, the Scene tree dock will still be visible but will be read-only. */
		const FEATURE_SCENE_TREE: Feature.FEATURE_SCENE_TREE;

		/** The Import dock. If this feature is disabled, the Import dock won't be visible. */
		const FEATURE_IMPORT_DOCK: Feature.FEATURE_IMPORT_DOCK;

		/** The Node dock. If this feature is disabled, signals and groups won't be visible and modifiable from the editor. */
		const FEATURE_NODE_DOCK: Feature.FEATURE_NODE_DOCK;

		/** The FileSystem dock. If this feature is disabled, the FileSystem dock won't be visible. */
		const FEATURE_FILESYSTEM_DOCK: Feature.FEATURE_FILESYSTEM_DOCK;

		/** Represents the size of the `Feature` enum. */
		const FEATURE_MAX: Feature.FEATURE_MAX;
	}

	/** A modified version of `FileDialog` used by the editor.
	  */
	class EditorFileDialog extends ConfirmationDialog {

		/** The location from which the user may select a file, including `res://`, `user://`, and the local file system. */
		access: number;

		/** The view format in which the `EditorFileDialog` displays resources to the user. */
		display_mode: number;

		/** The purpose of the `EditorFileDialog`, which defines the allowed behaviors. */
		mode: number;

		/** The currently occupied directory. */
		current_dir: string;

		/** The currently selected file. */
		current_file: string;

		/** The file system path in the address bar. */
		current_path: string;

		/** If `true`, hidden files and directories will be visible in the `EditorFileDialog`. */
		show_hidden_files: boolean;

		/** If `true`, the `EditorFileDialog` will not warn the user before overwriting files. */
		disable_overwrite_warning: boolean;

		/**  */
		dialog_hide_on_ok: boolean;

		/**  */
		window_title: string;

		/**  */
		resizable: boolean;

		/** Removes all filters except for "All Files (*)". */
		clear_filters() : void;

		/** Adds a comma-delimited file extension filter option to the `EditorFileDialog` with an optional semi-colon-delimited label.

		 For example, `"*.tscn, *.scn; Scenes"` results in filter text "Scenes (*.tscn, *.scn)". */
		add_filter(filter: string) : void;

		/** Returns the `VBoxContainer` used to display the file system. */
		get_vbox() : VBoxContainer;

		/** Notify the `EditorFileDialog` that its view of the data is no longer accurate. Updates the view contents on next view update. */
		invalidate() : void;

		/** Getter of `access` property */
		get_access() : number;

		/** Setter of `access` property */
		set_access(p_value: number) : void;

		/** Getter of `display_mode` property */
		get_display_mode() : number;

		/** Setter of `display_mode` property */
		set_display_mode(p_value: number) : void;

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `current_dir` property */
		get_current_dir() : string;

		/** Setter of `current_dir` property */
		set_current_dir(p_value: string) : void;

		/** Getter of `current_file` property */
		get_current_file() : string;

		/** Setter of `current_file` property */
		set_current_file(p_value: string) : void;

		/** Getter of `current_path` property */
		get_current_path() : string;

		/** Setter of `current_path` property */
		set_current_path(p_value: string) : void;

		/** Getter of `show_hidden_files` property */
		is_showing_hidden_files() : boolean;

		/** Setter of `show_hidden_files` property */
		set_show_hidden_files(p_value: boolean) : void;

		/** Getter of `disable_overwrite_warning` property */
		is_overwrite_warning_disabled() : boolean;

		/** Setter of `disable_overwrite_warning` property */
		set_disable_overwrite_warning(p_value: boolean) : void;

		/** Getter of `dialog_hide_on_ok` property */
		get_hide_on_ok() : boolean;

		/** Setter of `dialog_hide_on_ok` property */
		set_hide_on_ok(p_value: boolean) : void;

		/** Getter of `window_title` property */
		get_title() : string;

		/** Setter of `window_title` property */
		set_title(p_value: string) : void;

		/** Getter of `resizable` property */
		get_resizable() : boolean;

		/** Setter of `resizable` property */
		set_resizable(p_value: boolean) : void;
	}
	namespace EditorFileDialog {

		/** Emitted when multiple files are selected. */
		const files_selected: 'files_selected';

		/** Emitted when a directory is selected. */
		const dir_selected: 'dir_selected';

		/** Emitted when a file is selected. */
		const file_selected: 'file_selected';
		enum Access {
			/** The `EditorFileDialog` can only view `res://` directory contents. */
			ACCESS_RESOURCES = 0,
			/** The `EditorFileDialog` can only view `user://` directory contents. */
			ACCESS_USERDATA = 1,
			/** The `EditorFileDialog` can view the entire local file system. */
			ACCESS_FILESYSTEM = 2,
		}
		enum DisplayMode {
			/** The `EditorFileDialog` displays resources as thumbnails. */
			DISPLAY_THUMBNAILS = 0,
			/** The `EditorFileDialog` displays resources as a list of filenames. */
			DISPLAY_LIST = 1,
		}
		enum Mode {
			/** The `EditorFileDialog` can select only one file. Accepting the window will open the file. */
			MODE_OPEN_FILE = 0,
			/** The `EditorFileDialog` can select multiple files. Accepting the window will open all files. */
			MODE_OPEN_FILES = 1,
			/** The `EditorFileDialog` can select only one directory. Accepting the window will open the directory. */
			MODE_OPEN_DIR = 2,
			/** The `EditorFileDialog` can select a file or directory. Accepting the window will open it. */
			MODE_OPEN_ANY = 3,
			/** The `EditorFileDialog` can select only one file. Accepting the window will save the file. */
			MODE_SAVE_FILE = 4,
		}

		/** The `EditorFileDialog` can select only one file. Accepting the window will open the file. */
		const MODE_OPEN_FILE: Mode.MODE_OPEN_FILE;

		/** The `EditorFileDialog` can select multiple files. Accepting the window will open all files. */
		const MODE_OPEN_FILES: Mode.MODE_OPEN_FILES;

		/** The `EditorFileDialog` can select only one directory. Accepting the window will open the directory. */
		const MODE_OPEN_DIR: Mode.MODE_OPEN_DIR;

		/** The `EditorFileDialog` can select a file or directory. Accepting the window will open it. */
		const MODE_OPEN_ANY: Mode.MODE_OPEN_ANY;

		/** The `EditorFileDialog` can select only one file. Accepting the window will save the file. */
		const MODE_SAVE_FILE: Mode.MODE_SAVE_FILE;

		/** The `EditorFileDialog` can only view `res://` directory contents. */
		const ACCESS_RESOURCES: Access.ACCESS_RESOURCES;

		/** The `EditorFileDialog` can only view `user://` directory contents. */
		const ACCESS_USERDATA: Access.ACCESS_USERDATA;

		/** The `EditorFileDialog` can view the entire local file system. */
		const ACCESS_FILESYSTEM: Access.ACCESS_FILESYSTEM;

		/** The `EditorFileDialog` displays resources as thumbnails. */
		const DISPLAY_THUMBNAILS: DisplayMode.DISPLAY_THUMBNAILS;

		/** The `EditorFileDialog` displays resources as a list of filenames. */
		const DISPLAY_LIST: DisplayMode.DISPLAY_LIST;
	}

	/** Resource filesystem, as the editor sees it.
	 This object holds information of all resources in the filesystem, their types, etc.

	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_resource_filesystem`. */
	class EditorFileSystem extends Node {

		/** Gets the root directory object. */
		get_filesystem() : EditorFileSystemDirectory;

		/** Returns `true` of the filesystem is being scanned. */
		is_scanning() : boolean;

		/** Returns the scan progress for 0 to 1 if the FS is being scanned. */
		get_scanning_progress() : number;

		/** Scan the filesystem for changes. */
		scan() : void;

		/** Check if the source of any imported resource changed. */
		scan_sources() : void;

		/** Update a file information. Call this if an external program (not Godot) modified the file. */
		update_file(path: string) : void;

		/** Returns a view into the filesystem at `path`. */
		get_filesystem_path(path: string) : EditorFileSystemDirectory;

		/** Gets the type of the file, given the full path. */
		get_file_type(path: string) : string;

		/** Scans the script files and updates the list of custom class names. */
		update_script_classes() : void;
	}
	namespace EditorFileSystem {

		/** Remitted if a resource is reimported. */
		const resources_reimported: 'resources_reimported';

		/** Emitted if the source of any imported file changed. */
		const sources_changed: 'sources_changed';

		/** Emitted if the filesystem changed. */
		const filesystem_changed: 'filesystem_changed';

		/**  */
		const resources_reload: 'resources_reload';
	}

	/** A directory for the resource filesystem.
	 A more generalized, low-level variation of the directory concept. */
	class EditorFileSystemDirectory extends Object {

		/** Returns the number of subdirectories in this directory. */
		get_subdir_count() : number;

		/** Returns the subdirectory at index `idx`. */
		get_subdir(idx: number) : EditorFileSystemDirectory;

		/** Returns the number of files in this directory. */
		get_file_count() : number;

		/** Returns the name of the file at index `idx`. */
		get_file(idx: number) : string;

		/** Returns the path to the file at index `idx`. */
		get_file_path(idx: number) : string;

		/** Returns the file extension of the file at index `idx`. */
		get_file_type(idx: number) : string;

		/**  */
		get_file_script_class_name(idx: number) : string;

		/**  */
		get_file_script_class_extends(idx: number) : string;

		/** Returns `true` if the file at index `idx` imported properly. */
		get_file_import_is_valid(idx: number) : boolean;

		/** Returns the name of this directory. */
		get_name() : string;

		/** Returns the path to this directory. */
		get_path() : string;

		/** Returns the parent directory for this directory or `null` if called on a directory at `res://` or `user://`. */
		get_parent() : EditorFileSystemDirectory;

		/** Returns the index of the file with name `name` or `-1` if not found. */
		find_file_index(name: string) : number;

		/** Returns the index of the directory with name `name` or `-1` if not found. */
		find_dir_index(name: string) : number;
	}
	namespace EditorFileSystemDirectory {
	}

	/** Registers a custom resource importer in the editor. Use the class to parse any file and import it as a new resource type.
	 EditorImportPlugins provide a way to extend the editor's resource import functionality. Use them to import resources from custom files or to provide alternatives to the editor's existing importers. Register your `EditorPlugin` with `EditorPlugin.add_import_plugin`.

	 EditorImportPlugins work by associating with specific file extensions and a resource type. See `get_recognized_extensions` and `get_resource_type`. They may optionally specify some import presets that affect the import process. EditorImportPlugins are responsible for creating the resources and saving them in the `.import` directory.

	 Below is an example EditorImportPlugin that imports a `Mesh` from a file with the extension ".special" or ".spec":

	 ```gdscript
	 tool
	 extends EditorImportPlugin
	 
	 func get_importer_name():
	     return "my.special.plugin"
	 
	 func get_visible_name():
	     return "Special Mesh Importer"
	 
	 func get_recognized_extensions():
	     return ["special", "spec"]
	 
	 func get_save_extension():
	     return "mesh"
	 
	 func get_resource_type():
	     return "Mesh"
	 
	 func get_preset_count():
	     return 1
	 
	 func get_preset_name(i):
	     return "Default"
	 
	 func get_import_options(i):
	     return [{"name": "my_option", "default_value": false}]
	 
	 func import(source_file, save_path, options, platform_variants, gen_files):
	     var file = File.new()
	     if file.open(source_file, File.READ) != OK:
	         return FAILED
	 
	     var mesh = Mesh.new()
	     # Fill the Mesh with data read in "file", left as an exercise to the reader
	 
	     var filename = save_path + "." + get_save_extension()
	     ResourceSaver.save(filename, mesh)
	     return OK
	 ``` */
	class EditorImportPlugin extends ResourceImporter {

		/** Gets the options and default values for the preset at this index. Returns an Array of Dictionaries with the following keys: `name`, `default_value`, `property_hint` (optional), `hint_string` (optional), `usage` (optional). */
		get_import_options(preset: number) : any[];

		/** Gets the order of this importer to be run when importing resources. Higher values will be called later. Use this to ensure the importer runs after the dependencies are already imported. */
		get_import_order() : number;

		/** Gets the unique name of the importer. */
		get_importer_name() : string;

		/**  */
		get_option_visibility(option: string, options: object) : boolean;

		/** Gets the number of initial presets defined by the plugin. Use `get_import_options` to get the default options for the preset and `get_preset_name` to get the name of the preset. */
		get_preset_count() : number;

		/** Gets the name of the options preset at this index. */
		get_preset_name(preset: number) : string;

		/** Gets the priority of this plugin for the recognized extension. Higher priority plugins will be preferred. The default priority is `1.0`. */
		get_priority() : number;

		/** Gets the list of file extensions to associate with this loader (case-insensitive). e.g. ``"obj"``. */
		get_recognized_extensions() : any[];

		/** Gets the Godot resource type associated with this loader. e.g. `"Mesh"` or `"Animation"`. */
		get_resource_type() : string;

		/** Gets the extension used to save this resource in the `.import` directory. */
		get_save_extension() : string;

		/** Gets the name to display in the import window. */
		get_visible_name() : string;

		/**  */
		'import'(source_file: string, save_path: string, options: object, platform_variants: any[], gen_files: any[]) : number;
	}
	namespace EditorImportPlugin {
	}

	/** A tab used to edit properties of the selected node.
	 The editor inspector is by default located on the right-hand side of the editor. It's used to edit the properties of the selected node. For example, you can select a node such as `Sprite` then edit its transform through the inspector tool. The editor inspector is an essential tool in the game development workflow.

	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_inspector`. */
	class EditorInspector extends ScrollContainer {

		/**  */
		scroll_horizontal_enabled: boolean;

		/**  */
		refresh() : void;

		/** Getter of `scroll_horizontal_enabled` property */
		is_h_scroll_enabled() : boolean;

		/** Setter of `scroll_horizontal_enabled` property */
		set_enable_h_scroll(p_value: boolean) : void;
	}
	namespace EditorInspector {

		/**  */
		const property_edited: 'property_edited';

		/**  */
		const object_id_selected: 'object_id_selected';

		/**  */
		const property_selected: 'property_selected';

		/**  */
		const restart_requested: 'restart_requested';

		/**  */
		const property_keyed: 'property_keyed';

		/**  */
		const resource_selected: 'resource_selected';

		/**  */
		const property_toggled: 'property_toggled';
	}

	/** Plugin for adding custom property editors on inspector.
	 This plugins allows adding custom property editors to `EditorInspector`.

	 Plugins are registered via `EditorPlugin.add_inspector_plugin`.

	 When an object is edited, the `can_handle` function is called and must return `true` if the object type is supported.

	 If supported, the function `parse_begin` will be called, allowing to place custom controls at the beginning of the class.

	 Subsequently, the `parse_category` and `parse_property` are called for every category and property. They offer the ability to add custom controls to the inspector too.

	 Finally `parse_end` will be called.

	 On each of these calls, the "add" functions can be called. */
	class EditorInspectorPlugin extends Reference {

		/** Returns `true` if this object can be handled by this plugin. */
		can_handle(p_object: Object) : boolean;

		/** Called to allow adding controls at the beginning of the list. */
		parse_begin(p_object: Object) : void;

		/** Called to allow adding controls at the beginning of the category. */
		parse_category(p_object: Object, category: string) : void;

		/** Called to allow adding controls at the end of the list. */
		parse_end() : void;

		/** Called to allow adding property specific editors to the inspector. Usually these inherit `EditorProperty`. Returning `true` removes the built-in editor for this property, otherwise allows to insert a custom editor before the built-in one. */
		parse_property(p_object: Object, type: number, path: string, hint: number, hint_text: string, usage: number) : boolean;

		/** Adds a custom control, not necessarily a property editor. */
		add_custom_control(control: Control) : void;

		/** Adds a property editor, this must inherit `EditorProperty`. */
		add_property_editor(property: string, editor: Control) : void;

		/** Adds an editor that allows modifying multiple properties, this must inherit `EditorProperty`. */
		add_property_editor_for_multiple_properties(label: string, properties: PoolStringArray, editor: Control) : void;
	}
	namespace EditorInspectorPlugin {
	}

	/** Godot editor's interface.
	 EditorInterface gives you control over Godot editor's window. It allows customizing the window, saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects, and provides access to `EditorSettings`, `EditorFileSystem`, `EditorResourcePreview`, `ScriptEditor`, the editor viewport, and information about scenes.

	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorPlugin.get_editor_interface`. */
	class EditorInterface extends Node {

		/** If `true`, enables distraction-free mode which hides side docks to increase the space available for the main view. */
		distraction_free_mode: boolean;

		/** Shows the given property on the given `object` in the Editor's Inspector dock. */
		//@ts-ignore
		inspect_object(p_object: Object, for_property: string = "") : void;

		/** Returns the `EditorSelection`. */
		get_selection() : EditorSelection;

		/** Returns the `EditorSettings`. */
		get_editor_settings() : EditorSettings;

		/** Returns the `ScriptEditor`. */
		get_script_editor() : ScriptEditor;

		/** Returns the main container of Godot editor's window. You can use it, for example, to retrieve the size of the container and place your controls accordingly. */
		get_base_control() : Control;

		/** Edits the given `Resource`. */
		edit_resource(resource: Resource) : void;

		/** Opens the scene at the given path. */
		open_scene_from_path(scene_filepath: string) : void;

		/** Reloads the scene at the given path. */
		reload_scene_from_path(scene_filepath: string) : void;

		/** Plays the main scene. */
		play_main_scene() : void;

		/** Plays the currently active scene. */
		play_current_scene() : void;

		/** Plays the scene specified by its filepath. */
		play_custom_scene(scene_filepath: string) : void;

		/** Stops the scene that is currently playing. */
		stop_playing_scene() : void;

		/** Returns `true`, if a scene is currently being played; `false` otherwise. Paused scenes are considered as being played. */
		is_playing_scene() : boolean;

		/** Returns the name of the scene that is being played. If no scene is currently being played, returns an empty string. */
		get_playing_scene() : string;

		/** Returns an `Array` with the file paths of the currently opened scenes. */
		get_open_scenes() : any[];

		/** Returns the edited (current) scene's root `Node`. */
		get_edited_scene_root() : Node;

		/** Returns the `EditorResourcePreview`. */
		get_resource_previewer() : EditorResourcePreview;

		/** Returns the `EditorFileSystem`. */
		get_resource_filesystem() : EditorFileSystem;

		/** Returns the editor `Viewport`. */
		get_editor_viewport() : Control;

		/** Returns mesh previews rendered at the given size as an `Array` of `Texture`s. */
		make_mesh_previews(meshes: any[], preview_size: number) : any[];

		/** Selects the file, with the path provided by `file`, in the FileSystem dock. */
		select_file(file: string) : void;

		/**  */
		get_selected_path() : string;

		/**  */
		get_current_path() : string;

		/**  */
		get_file_system_dock() : FileSystemDock;

		/** Sets the enabled status of a plugin. The plugin name is the same as its directory name. */
		set_plugin_enabled(plugin: string, enabled: boolean) : void;

		/** Returns the enabled status of a plugin. The plugin name is the same as its directory name. */
		is_plugin_enabled(plugin: string) : boolean;

		/**  */
		get_inspector() : EditorInspector;

		/** Saves the scene. Returns either `OK` or `ERR_CANT_CREATE` (see `@GlobalScope` constants). */
		save_scene() : number;

		/** Saves the scene as a file at `path`. */
		//@ts-ignore
		save_scene_as(path: string, with_preview: boolean = true) : void;

		/**  */
		set_main_screen_editor(name: string) : void;

		/** Getter of `distraction_free_mode` property */
		is_distraction_free_mode_enabled() : boolean;

		/** Setter of `distraction_free_mode` property */
		set_distraction_free_mode(p_value: boolean) : void;
	}
	namespace EditorInterface {
	}

	/** 
	  */
	class EditorNavigationMeshGenerator extends Object {

		/**  */
		bake(nav_mesh: NavigationMesh, root_node: Node) : void;

		/**  */
		clear(nav_mesh: NavigationMesh) : void;
	}
	namespace EditorNavigationMeshGenerator {
	}

	/** Used by the editor to extend its functionality.
	 Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also `EditorScript` to add functions to the editor. */
	class EditorPlugin extends Node {

		/** This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.

		 This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object. */
		apply_changes() : void;

		/**  */
		build() : boolean;

		/** Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene. */
		clear() : void;

		/** Called by the engine when the user disables the `EditorPlugin` in the Plugin tab of the project settings window. */
		disable_plugin() : void;

		/** This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object. */
		edit(p_object: Object) : void;

		/** Called by the engine when the user enables the `EditorPlugin` in the Plugin tab of the project settings window. */
		enable_plugin() : void;

		/**  */
		forward_canvas_draw_over_viewport(overlay: Control) : void;

		/**  */
		forward_canvas_force_draw_over_viewport(overlay: Control) : void;

		/** Called when there is a root node in the current edited scene, `handles` is implemented and an `InputEvent` happens in the 2D viewport. Intercepts the `InputEvent`, if `return true` `EditorPlugin` consumes the `event`, otherwise forwards `event` to other Editor classes. Example:

		 ```gdscript
		 # Prevents the InputEvent to reach other Editor classes
		 func forward_canvas_gui_input(event):
		     var forward = true
		     return forward
		 ```

		 Must `return false` in order to forward the `InputEvent` to other Editor classes. Example:

		 ```gdscript
		 # Consumes InputEventMouseMotion and forwards other InputEvent types
		 func forward_canvas_gui_input(event):
		     var forward = false
		     if event is InputEventMouseMotion:
		         forward = true
		     return forward
		 ``` */
		forward_canvas_gui_input(event: InputEvent) : boolean;

		/** Called when there is a root node in the current edited scene, `handles` is implemented and an `InputEvent` happens in the 3D viewport. Intercepts the `InputEvent`, if `return true` `EditorPlugin` consumes the `event`, otherwise forwards `event` to other Editor classes. Example:

		 ```gdscript
		 # Prevents the InputEvent to reach other Editor classes
		 func forward_spatial_gui_input(camera, event):
		     var forward = true
		     return forward
		 ```

		 Must `return false` in order to forward the `InputEvent` to other Editor classes. Example:

		 ```gdscript
		 # Consumes InputEventMouseMotion and forwards other InputEvent types
		 func forward_spatial_gui_input(camera, event):
		     var forward = false
		     if event is InputEventMouseMotion:
		         forward = true
		     return forward
		 ``` */
		forward_spatial_gui_input(camera: Camera, event: InputEvent) : boolean;

		/** This is for editors that edit script-based objects. You can return a list of breakpoints in the format (`script:line`), for example: `res://path_to_script.gd:25`. */
		get_breakpoints() : PoolStringArray;

		/** Override this method in your plugin to return a `Texture` in order to give it an icon.

		 For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.

		 Ideally, the plugin icon should be white with a transparent background and 16x16 pixels in size.

		 ```gdscript
		 func get_plugin_icon():
		     # You can use a custom icon:
		     return preload("res://addons/my_plugin/my_plugin_icon.svg")
		     # Or use a built-in icon:
		     return get_editor_interface().get_base_control().get_icon("Node", "EditorIcons")
		 ``` */
		get_plugin_icon() : Texture;

		/** Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.

		 For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons. */
		get_plugin_name() : string;

		/** Gets the state of your plugin editor. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns). */
		get_state() : object;

		/** Gets the GUI layout of the plugin. This is used to save the project's editor layout when `queue_save_layout` is called or the editor layout was changed(For example changing the position of a dock). */
		get_window_layout(layout: ConfigFile) : void;

		/** Implement this function if your plugin edits a specific type of object (Resource or Node). If you return `true`, then you will get the functions `edit` and `make_visible` called when the editor requests them. If you have declared the methods `forward_canvas_gui_input` and `forward_spatial_gui_input` these will be called too. */
		handles(p_object: Object) : boolean;

		/** Returns `true` if this is a main screen editor plugin (it goes in the workspace selector together with **2D**, **3D**, **Script** and **AssetLib**). */
		has_main_screen() : boolean;

		/** This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.

		 Remember that you have to manage the visibility of all your editor controls manually. */
		make_visible(visible: boolean) : void;

		/** This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources. */
		save_external_data() : void;

		/** Restore the state saved by `get_state`. */
		set_state(state: object) : void;

		/** Restore the plugin GUI layout saved by `get_window_layout`. */
		set_window_layout(layout: ConfigFile) : void;

		/** Adds a custom control to a container (see `CustomControlContainer`). There are many locations where custom controls can be added in the editor UI.

		 Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).

		 When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_container` and free it with `Node.queue_free`. */
		add_control_to_container(container: EditorPlugin.CustomControlContainer, control: Control) : void;

		/** Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_bottom_panel` and free it with `Node.queue_free`. */
		add_control_to_bottom_panel(control: Control, title: string) : ToolButton;

		/** Adds the control to a specific dock slot (see `DockSlot` for options).

		 If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.

		 When your plugin is deactivated, make sure to remove your custom control with `remove_control_from_docks` and free it with `Node.queue_free`. */
		add_control_to_dock(slot: EditorPlugin.DockSlot, control: Control) : void;

		/** Removes the control from the dock. You have to manually `Node.queue_free` the control. */
		remove_control_from_docks(control: Control) : void;

		/** Removes the control from the bottom panel. You have to manually `Node.queue_free` the control. */
		remove_control_from_bottom_panel(control: Control) : void;

		/** Removes the control from the specified container. You have to manually `Node.queue_free` the control. */
		remove_control_from_container(container: EditorPlugin.CustomControlContainer, control: Control) : void;

		/** Adds a custom menu item to **Project > Tools** as `name` that calls `callback` on an instance of `handler` with a parameter `ud` when user activates it. */
		//@ts-ignore
		add_tool_menu_item(name: string, handler: Object, callback: string, ud: any = null) : void;

		/** Adds a custom submenu under **Project > Tools >** `name`. `submenu` should be an object of class `PopupMenu`. This submenu should be cleaned up using `remove_tool_menu_item(name)`. */
		add_tool_submenu_item(name: string, submenu: Object) : void;

		/** Removes a menu `name` from **Project > Tools**. */
		remove_tool_menu_item(name: string) : void;

		/** Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.

		 When given node or resource is selected, the base type will be instanced (ie, "Spatial", "Control", "Resource"), then the script will be loaded and set to this object.

		 You can use the virtual method `handles` to check if your custom object is being edited by checking the script or using the `is` keyword.

		 During run-time, this will be a simple object with a script so this function does not need to be called then. */
		add_custom_type(type: string, base: string, script: Script, icon: Texture) : void;

		/** Removes a custom type added by `add_custom_type`. */
		remove_custom_type(type: string) : void;

		/** Adds a script at `path` to the Autoload list as `name`. */
		add_autoload_singleton(name: string, path: string) : void;

		/** Removes an Autoload `name` from the list. */
		remove_autoload_singleton(name: string) : void;

		/** Updates the overlays of the editor (2D/3D) viewport. */
		update_overlays() : number;

		/**  */
		make_bottom_panel_item_visible(item: Control) : void;

		/**  */
		hide_bottom_panel() : void;

		/** Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it. */
		get_undo_redo() : UndoRedo;

		/** Queue save the project's editor layout. */
		queue_save_layout() : void;

		/**  */
		add_import_plugin(importer: EditorImportPlugin) : void;

		/**  */
		remove_import_plugin(importer: EditorImportPlugin) : void;

		/**  */
		add_scene_import_plugin(scene_importer: EditorSceneImporter) : void;

		/**  */
		remove_scene_import_plugin(scene_importer: EditorSceneImporter) : void;

		/**  */
		add_export_plugin(plugin: EditorExportPlugin) : void;

		/**  */
		remove_export_plugin(plugin: EditorExportPlugin) : void;

		/**  */
		add_spatial_gizmo_plugin(plugin: EditorSpatialGizmoPlugin) : void;

		/**  */
		remove_spatial_gizmo_plugin(plugin: EditorSpatialGizmoPlugin) : void;

		/**  */
		add_inspector_plugin(plugin: EditorInspectorPlugin) : void;

		/**  */
		remove_inspector_plugin(plugin: EditorInspectorPlugin) : void;

		/** Use this method if you always want to receive inputs from 3D view screen inside `forward_spatial_gui_input`. It might be especially usable if your plugin will want to use raycast in the scene. */
		set_input_event_forwarding_always_enabled() : void;

		/**  */
		set_force_draw_over_forwarding_enabled() : void;

		/** Returns the `EditorInterface` object that gives you control over Godot editor's window and its functionalities. */
		get_editor_interface() : EditorInterface;

		/** Gets the Editor's dialogue used for making scripts.

		 **Note:** Users can configure it before use. */
		get_script_create_dialog() : ScriptCreateDialog;
	}
	namespace EditorPlugin {

		/** Emitted when user changes the workspace (**2D**, **3D**, **Script**, **AssetLib**). Also works with custom screens defined by plugins. */
		const main_screen_changed: 'main_screen_changed';

		/** Emitted when user closes a scene. The argument is file path to a closed scene. */
		const scene_closed: 'scene_closed';

		/** Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be `null`. */
		const scene_changed: 'scene_changed';

		/**  */
		const resource_saved: 'resource_saved';
		enum CustomControlContainer {
			/**  */
			CONTAINER_TOOLBAR = 0,
			/**  */
			CONTAINER_SPATIAL_EDITOR_MENU = 1,
			/**  */
			CONTAINER_SPATIAL_EDITOR_SIDE_LEFT = 2,
			/**  */
			CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT = 3,
			/**  */
			CONTAINER_SPATIAL_EDITOR_BOTTOM = 4,
			/**  */
			CONTAINER_CANVAS_EDITOR_MENU = 5,
			/**  */
			CONTAINER_CANVAS_EDITOR_SIDE_LEFT = 6,
			/**  */
			CONTAINER_CANVAS_EDITOR_SIDE_RIGHT = 7,
			/**  */
			CONTAINER_CANVAS_EDITOR_BOTTOM = 8,
			/**  */
			CONTAINER_PROPERTY_EDITOR_BOTTOM = 9,
			/**  */
			CONTAINER_PROJECT_SETTING_TAB_LEFT = 10,
			/**  */
			CONTAINER_PROJECT_SETTING_TAB_RIGHT = 11,
		}
		enum DockSlot {
			/**  */
			DOCK_SLOT_LEFT_UL = 0,
			/**  */
			DOCK_SLOT_LEFT_BL = 1,
			/**  */
			DOCK_SLOT_LEFT_UR = 2,
			/**  */
			DOCK_SLOT_LEFT_BR = 3,
			/**  */
			DOCK_SLOT_RIGHT_UL = 4,
			/**  */
			DOCK_SLOT_RIGHT_BL = 5,
			/**  */
			DOCK_SLOT_RIGHT_UR = 6,
			/**  */
			DOCK_SLOT_RIGHT_BR = 7,
			/** Represents the size of the `DockSlot` enum. */
			DOCK_SLOT_MAX = 8,
		}

		/**  */
		const CONTAINER_TOOLBAR: CustomControlContainer.CONTAINER_TOOLBAR;

		/**  */
		const CONTAINER_SPATIAL_EDITOR_MENU: CustomControlContainer.CONTAINER_SPATIAL_EDITOR_MENU;

		/**  */
		const CONTAINER_SPATIAL_EDITOR_SIDE_LEFT: CustomControlContainer.CONTAINER_SPATIAL_EDITOR_SIDE_LEFT;

		/**  */
		const CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT: CustomControlContainer.CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT;

		/**  */
		const CONTAINER_SPATIAL_EDITOR_BOTTOM: CustomControlContainer.CONTAINER_SPATIAL_EDITOR_BOTTOM;

		/**  */
		const CONTAINER_CANVAS_EDITOR_MENU: CustomControlContainer.CONTAINER_CANVAS_EDITOR_MENU;

		/**  */
		const CONTAINER_CANVAS_EDITOR_SIDE_LEFT: CustomControlContainer.CONTAINER_CANVAS_EDITOR_SIDE_LEFT;

		/**  */
		const CONTAINER_CANVAS_EDITOR_SIDE_RIGHT: CustomControlContainer.CONTAINER_CANVAS_EDITOR_SIDE_RIGHT;

		/**  */
		const CONTAINER_CANVAS_EDITOR_BOTTOM: CustomControlContainer.CONTAINER_CANVAS_EDITOR_BOTTOM;

		/**  */
		const CONTAINER_PROPERTY_EDITOR_BOTTOM: CustomControlContainer.CONTAINER_PROPERTY_EDITOR_BOTTOM;

		/**  */
		const CONTAINER_PROJECT_SETTING_TAB_LEFT: CustomControlContainer.CONTAINER_PROJECT_SETTING_TAB_LEFT;

		/**  */
		const CONTAINER_PROJECT_SETTING_TAB_RIGHT: CustomControlContainer.CONTAINER_PROJECT_SETTING_TAB_RIGHT;

		/**  */
		const DOCK_SLOT_LEFT_UL: DockSlot.DOCK_SLOT_LEFT_UL;

		/**  */
		const DOCK_SLOT_LEFT_BL: DockSlot.DOCK_SLOT_LEFT_BL;

		/**  */
		const DOCK_SLOT_LEFT_UR: DockSlot.DOCK_SLOT_LEFT_UR;

		/**  */
		const DOCK_SLOT_LEFT_BR: DockSlot.DOCK_SLOT_LEFT_BR;

		/**  */
		const DOCK_SLOT_RIGHT_UL: DockSlot.DOCK_SLOT_RIGHT_UL;

		/**  */
		const DOCK_SLOT_RIGHT_BL: DockSlot.DOCK_SLOT_RIGHT_BL;

		/**  */
		const DOCK_SLOT_RIGHT_UR: DockSlot.DOCK_SLOT_RIGHT_UR;

		/**  */
		const DOCK_SLOT_RIGHT_BR: DockSlot.DOCK_SLOT_RIGHT_BR;

		/** Represents the size of the `DockSlot` enum. */
		const DOCK_SLOT_MAX: DockSlot.DOCK_SLOT_MAX;
	}

	/** Custom control to edit properties for adding into the inspector.
	 This control allows property editing for one or multiple properties into `EditorInspector`. It is added via `EditorInspectorPlugin`. */
	class EditorProperty extends Container {

		/** Sets this property to change the label (if you want to show one). */
		label: string;

		/** Used by the inspector, when the property is read-only. */
		read_only: boolean;

		/** Used by the inspector, set when property is checkable. */
		checkable: boolean;

		/** Used by the inspector, when the property is checked. */
		checked: boolean;

		/** Used by the inspector, when the property must draw with error color. */
		draw_red: boolean;

		/** Used by the inspector, when the property can add keys for animation. */
		keying: boolean;

		/** When this virtual function is called, you must update your editor. */
		update_property() : void;

		/** Gets the edited property. If your editor is for a single property (added via `EditorInspectorPlugin.parse_property`), then this will return the property. */
		get_edited_property() : string;

		/** Gets the edited object. */
		get_edited_object() : Object;

		/** Override if you want to allow a custom tooltip over your property. */
		get_tooltip_text() : string;

		/** If any of the controls added can gain keyboard focus, add it here. This ensures that focus will be restored if the inspector is refreshed. */
		add_focusable(control: Control) : void;

		/** Adds controls with this function if you want them on the bottom (below the label). */
		set_bottom_editor(editor: Control) : void;

		/** If one or several properties have changed, this must be called. `field` is used in case your editor can modify fields separately (as an example, Vector3.x). The `changing` argument avoids the editor requesting this property to be refreshed (leave as `false` if unsure). */
		//@ts-ignore
		emit_changed(property: string, value: any, field: string = "", changing: boolean = false) : void;

		/** Getter of `label` property */
		get_label() : string;

		/** Setter of `label` property */
		set_label(p_value: string) : void;

		/** Getter of `read_only` property */
		is_read_only() : boolean;

		/** Setter of `read_only` property */
		set_read_only(p_value: boolean) : void;

		/** Getter of `checkable` property */
		is_checkable() : boolean;

		/** Setter of `checkable` property */
		set_checkable(p_value: boolean) : void;

		/** Getter of `checked` property */
		is_checked() : boolean;

		/** Setter of `checked` property */
		set_checked(p_value: boolean) : void;

		/** Getter of `draw_red` property */
		is_draw_red() : boolean;

		/** Setter of `draw_red` property */
		set_draw_red(p_value: boolean) : void;

		/** Getter of `keying` property */
		is_keying() : boolean;

		/** Setter of `keying` property */
		set_keying(p_value: boolean) : void;
	}
	namespace EditorProperty {

		/** Used by sub-inspectors. Emit it if what was selected was an Object ID. */
		const object_id_selected: 'object_id_selected';

		/** Emitted when a property was checked. Used internally. */
		const property_checked: 'property_checked';

		/** Emit it if you want to key a property with a single value. */
		const property_keyed_with_value: 'property_keyed_with_value';

		/** Emit it if you want to add this value as an animation key (check for keying being enabled first). */
		const property_keyed: 'property_keyed';

		/** Do not emit this manually, use the `emit_changed` method instead. */
		const property_changed: 'property_changed';

		/** If you want a sub-resource to be edited, emit this signal with the resource. */
		const resource_selected: 'resource_selected';

		/** Emitted when selected. Used internally. */
		const selected: 'selected';

		/** Emit it if you want multiple properties modified at the same time. Do not use if added via `EditorInspectorPlugin.parse_property`. */
		const multiple_properties_changed: 'multiple_properties_changed';
	}

	/** 
	  */
	class EditorResourceConversionPlugin extends Reference {

		/**  */
		_convert(resource: Resource) : Resource;

		/**  */
		_converts_to() : string;
	}
	namespace EditorResourceConversionPlugin {
	}

	/** Helper to generate previews of resources or files.
	 This object is used to generate previews for resources of files.

	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_resource_previewer`. */
	class EditorResourcePreview extends Node {

		/** Queue a resource file for preview (using a path). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything. */
		queue_resource_preview(path: string, receiver: Object, receiver_func: string, userdata: any) : void;

		/** Queue a resource being edited for preview (using an instance). Once the preview is ready, your receiver.receiver_func will be called either containing the preview texture or an empty texture (if no preview was possible). Callback must have the format: (path,texture,userdata). Userdata can be anything. */
		queue_edited_resource_preview(resource: Resource, receiver: Object, receiver_func: string, userdata: any) : void;

		/** Create an own, custom preview generator. */
		add_preview_generator(generator: EditorResourcePreviewGenerator) : void;

		/** Removes a custom preview generator. */
		remove_preview_generator(generator: EditorResourcePreviewGenerator) : void;

		/** Check if the resource changed, if so, it will be invalidated and the corresponding signal emitted. */
		check_for_invalidation(path: string) : void;
	}
	namespace EditorResourcePreview {

		/** Emitted if a preview was invalidated (changed). `path` corresponds to the path of the preview. */
		const preview_invalidated: 'preview_invalidated';
	}

	/** Custom generator of previews.
	 Custom code to generate previews. Please check `file_dialog/thumbnail_size` in `EditorSettings` to find out the right size to do previews at. */
	class EditorResourcePreviewGenerator extends Reference {

		/** If this function returns `true`, the generator will call `generate` or `generate_from_path` for small previews as well.

		 By default, it returns `false`. */
		can_generate_small_preview() : boolean;

		/** Generate a preview from a given resource with the specified size. This must always be implemented.

		 Returning an empty texture is an OK way to fail and let another generator take care.

		 Care must be taken because this function is always called from a thread (not the main thread). */
		generate(p_from: Resource, size: Vector2) : Texture;

		/** Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call `generate`.

		 Returning an empty texture is an OK way to fail and let another generator take care.

		 Care must be taken because this function is always called from a thread (not the main thread). */
		generate_from_path(path: string, size: Vector2) : Texture;

		/** If this function returns `true`, the generator will automatically generate the small previews from the normal preview texture generated by the methods `generate` or `generate_from_path`.

		 By default, it returns `false`. */
		generate_small_preview_automatically() : boolean;

		/** Returns `true` if your generator supports the resource of type `type`. */
		handles(type: string) : boolean;
	}
	namespace EditorResourcePreviewGenerator {
	}

	/** Imports scenes from third-parties' 3D files.
	  */
	class EditorSceneImporter extends Reference {

		/**  */
		_get_extensions() : any[];

		/**  */
		_get_import_flags() : number;

		/**  */
		_import_animation(path: string, flags: number, bake_fps: number) : Animation;

		/**  */
		_import_scene(path: string, flags: number, bake_fps: number) : Node;

		/**  */
		import_scene_from_other_importer(path: string, flags: number, bake_fps: number) : Node;

		/**  */
		import_animation_from_other_importer(path: string, flags: number, bake_fps: number) : Animation;
	}
	namespace EditorSceneImporter {

		/**  */
		const IMPORT_SCENE: 1;

		/**  */
		const IMPORT_ANIMATION: 2;

		/**  */
		const IMPORT_ANIMATION_DETECT_LOOP: 4;

		/**  */
		const IMPORT_ANIMATION_OPTIMIZE: 8;

		/**  */
		const IMPORT_ANIMATION_FORCE_ALL_TRACKS_IN_ALL_CLIPS: 16;

		/**  */
		const IMPORT_ANIMATION_KEEP_VALUE_TRACKS: 32;

		/**  */
		const IMPORT_GENERATE_TANGENT_ARRAYS: 256;

		/**  */
		const IMPORT_FAIL_ON_MISSING_DEPENDENCIES: 512;

		/**  */
		const IMPORT_MATERIALS_IN_INSTANCES: 1024;

		/**  */
		const IMPORT_USE_COMPRESSION: 2048;
	}

	/** FBX 3D asset importer based on `url=http://assimp.org/`Assimp`/url`.
	 This is an FBX 3D asset importer based on `url=http://assimp.org/`Assimp`/url`. It currently has many known limitations and works best with static meshes. Most animated meshes won't import correctly.

	 If exporting a FBX scene from Autodesk Maya, use these FBX export settings:

	 ```gdscript
	 - Smoothing Groups
	 - Smooth Mesh
	 - Triangluate (for meshes with blend shapes)
	 - Bake Animation
	 - Resample All
	 - Deformed Models
	 - Skins
	 - Blend Shapes
	 - Curve Filters
	 - Constant Key Reducer
	 - Auto Tangents Only
	 - *Do not check* Constraints (as it will break the file)
	 - Can check Embed Media (embeds textures into the exported FBX file)
	   - Note that when importing embedded media, the texture and mesh will be a single immutable file.
	   - You will have to re-export then re-import the FBX if the texture has changed.
	 - Units: Centimeters
	 - Up Axis: Y
	 - Binary format in FBX 2017
	 ``` */
	class EditorSceneImporterAssimp extends EditorSceneImporter {
	}
	namespace EditorSceneImporterAssimp {
	}

	/** Post-processes scenes after import.
	 Imported scenes can be automatically modified right after import by setting their **Custom Script** Import property to a `tool` script that inherits from this class.

	 The `post_import` callback receives the imported scene's root node and returns the modified version of the scene. Usage example:

	 ```gdscript
	 tool # Needed so it runs in editor
	 extends EditorScenePostImport
	 
	 # This sample changes all node names
	 
	 # Called right after the scene is imported and gets the root node
	 func post_import(scene):
	     # Change all node names to "modified_[oldnodename]"
	     iterate(scene)
	     return scene # Remember to return the imported scene
	 
	 func iterate(node):
	     if node != null:
	         node.name = "modified_" + node.name
	         for child in node.get_children():
	             iterate(child)
	 ``` */
	class EditorScenePostImport extends Reference {

		/** Called after the scene was imported. This method must return the modified version of the scene. */
		post_import(scene: Object) : Object;

		/** Returns the resource folder the imported scene file is located in. */
		get_source_folder() : string;

		/** Returns the source file path which got imported (e.g. `res://scene.dae`). */
		get_source_file() : string;
	}
	namespace EditorScenePostImport {
	}

	/** Base script that can be used to add extension functions to the editor.
	 Scripts extending this class and implementing its `_run` method can be executed from the Script Editor's **File > Run** menu option (or by pressing `Ctrl+Shift+X`) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using `EditorPlugin`s instead.

	 **Note:** Extending scripts need to have `tool` mode enabled.

	 **Example script:**

	 ```gdscript
	 tool
	 extends EditorScript
	 
	 func _run():
	     print("Hello from the Godot Editor!")
	 ```

	 **Note:** The script is run in the Editor context, which means the output is visible in the console window started with the Editor (stdout) instead of the usual Godot **Output** dock. */
	class EditorScript extends Reference {

		/** This method is executed by the Editor when **File > Run** is used. */
		_run() : void;

		/** Adds `node` as a child of the root node in the editor context.

		 **Warning:** The implementation of this method is currently disabled. */
		add_root_node(node: Node) : void;

		/** Returns the Editor's currently active scene. */
		get_scene() : Node;

		/** Returns the `EditorInterface` singleton instance. */
		get_editor_interface() : EditorInterface;
	}
	namespace EditorScript {
	}

	/** Manages the SceneTree selection in the editor.
	 This object manages the SceneTree selection in the editor.

	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_selection`. */
	class EditorSelection extends Object {

		/** Clear the selection. */
		clear() : void;

		/** Adds a node to the selection. */
		add_node(node: Node) : void;

		/** Removes a node from the selection. */
		remove_node(node: Node) : void;

		/** Gets the list of selected nodes. */
		get_selected_nodes() : any[];

		/** Gets the list of selected nodes, optimized for transform operations (i.e. moving them, rotating, etc). This list avoids situations where a node is selected and also child/grandchild. */
		get_transformable_selected_nodes() : any[];
	}
	namespace EditorSelection {

		/** Emitted when the selection changes. */
		const selection_changed: 'selection_changed';
	}

	/** Object that holds the project-independent editor settings.
	 Object that holds the project-independent editor settings. These settings are generally visible in the **Editor > Editor Settings** menu.

	 Accessing the settings is done by using the regular `Object` API, such as:

	 ```gdscript
	 settings.set(prop,value)
	 settings.get(prop)
	 list_of_settings = settings.get_property_list()
	 ```

	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_editor_settings`. */
	class EditorSettings extends Resource {

		/**  */
		has_setting(name: string) : boolean;

		/**  */
		set_setting(name: string, value: any) : void;

		/**  */
		get_setting(name: string) : any;

		/** Erase a given setting (pass full property path). */
		erase(property: string) : void;

		/**  */
		set_initial_value(name: string, value: any, update_current: boolean) : void;

		/**  */
		property_can_revert(name: string) : boolean;

		/**  */
		property_get_revert(name: string) : any;

		/** Adds a custom property info to a property. The dictionary must contain:

		 - `name`: `String` (the name of the property)

		 - `type`: `int` (see `Variant.Type`)

		 - optionally `hint`: `int` (see `PropertyHint`) and `hint_string`: `String`

		 **Example:**

		 ```gdscript
		 editor_settings.set("category/property_name", 0)
		 
		 var property_info = {
		     "name": "category/property_name",
		     "type": TYPE_INT,
		     "hint": PROPERTY_HINT_ENUM,
		     "hint_string": "one,two,three"
		 }
		 
		 editor_settings.add_property_info(property_info)
		 ``` */
		add_property_info(info: object) : void;

		/** Gets the global settings path for the engine. Inside this path, you can find some standard paths such as:

		 `settings/tmp` - Used for temporary storage of files

		 `settings/templates` - Where export templates are located */
		get_settings_dir() : string;

		/** Gets the specific project settings path. Projects all have a unique sub-directory inside the settings path where project specific settings are saved. */
		get_project_settings_dir() : string;

		/**  */
		set_project_metadata(section: string, key: string, data: any) : void;

		/**  */
		//@ts-ignore
		get_project_metadata(section: string, key: string, p_default: any = null) : any;

		/** Sets the list of favorite files and directories for this project. */
		set_favorites(dirs: PoolStringArray) : void;

		/** Gets the list of favorite files and directories for this project. */
		get_favorites() : PoolStringArray;

		/** Sets the list of recently visited folders in the file dialog for this project. */
		set_recent_dirs(dirs: PoolStringArray) : void;

		/** Gets the list of recently visited folders in the file dialog for this project. */
		get_recent_dirs() : PoolStringArray;
	}
	namespace EditorSettings {

		/** Emitted when editor settings change. */
		const settings_changed: 'settings_changed';

		/** Emitted when editor settings change. It used by various editor plugins to update their visuals on theme changes or logic on configuration changes. */
		const NOTIFICATION_EDITOR_SETTINGS_CHANGED: 10000;
	}

	/** Custom gizmo for editing Spatial objects.
	 Custom gizmo that is used for providing custom visualization and editing (handles) for 3D Spatial objects. See `EditorSpatialGizmoPlugin` for more information. */
	class EditorSpatialGizmo extends SpatialGizmo {

		/** Commit a handle being edited (handles must have been previously added by `add_handles`).

		 If the `cancel` parameter is `true`, an option to restore the edited value to the original is provided. */
		//@ts-ignore
		commit_handle(index: number, restore: any, cancel: boolean = false) : void;

		/** Gets the name of an edited handle (handles must have been previously added by `add_handles`).

		 Handles can be named for reference to the user when editing. */
		get_handle_name(index: number) : string;

		/** Gets actual value of a handle. This value can be anything and used for eventually undoing the motion when calling `commit_handle`. */
		get_handle_value(index: number) : any;

		/** Gets whether a handle is highlighted or not. */
		is_handle_highlighted(index: number) : boolean;

		/** This function is called when the Spatial this gizmo refers to changes (the `Spatial.update_gizmo` is called). */
		redraw() : void;

		/** This function is used when the user drags a gizmo handle (previously added with `add_handles`) in screen coordinates.

		 The `Camera` is also provided so screen coordinates can be converted to raycasts. */
		set_handle(index: number, camera: Camera, point: Vector2) : void;

		/** Adds lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this function during `redraw`. */
		//@ts-ignore
		add_lines(lines: PoolVector3Array, material: Material, billboard: boolean = false, modulate: Color = Color( 1, 1, 1, 1 )) : void;

		/**  */
		//@ts-ignore
		add_mesh(mesh: ArrayMesh, billboard: boolean = false, skeleton: SkinReference = null, material: Material = null) : void;

		/**  */
		add_collision_segments(segments: PoolVector3Array) : void;

		/** Adds collision triangles to the gizmo for picking. A `TriangleMesh` can be generated from a regular `Mesh` too. Call this function during `redraw`. */
		add_collision_triangles(triangles: TriangleMesh) : void;

		/** Adds an unscaled billboard for visualization. Call this function during `redraw`. */
		//@ts-ignore
		add_unscaled_billboard(material: Material, default_scale: number = 1, modulate: Color = Color( 1, 1, 1, 1 )) : void;

		/** Adds a list of handles (points) which can be used to deform the object being edited.

		 There are virtual functions which will be called upon editing of these handles. Call this function during `redraw`. */
		//@ts-ignore
		add_handles(handles: PoolVector3Array, material: Material, billboard: boolean = false, secondary: boolean = false) : void;

		/**  */
		set_spatial_node(node: Node) : void;

		/** Returns the Spatial node associated with this gizmo. */
		get_spatial_node() : Spatial;

		/** Returns the `EditorSpatialGizmoPlugin` that owns this gizmo. It's useful to retrieve materials using `EditorSpatialGizmoPlugin.get_material`. */
		get_plugin() : EditorSpatialGizmoPlugin;

		/**  */
		clear() : void;

		/**  */
		set_hidden(hidden: boolean) : void;
	}
	namespace EditorSpatialGizmo {
	}

	/** Used by the editor to define Spatial gizmo types.
	 EditorSpatialGizmoPlugin allows you to define a new type of Gizmo. There are two main ways to do so: extending `EditorSpatialGizmoPlugin` for the simpler gizmos, or creating a new `EditorSpatialGizmo` type. See the tutorial in the documentation for more info. */
	class EditorSpatialGizmoPlugin extends Resource {

		/** Override this method to define whether the gizmo can be hidden or not. Returns `true` if not overridden. */
		can_be_hidden() : boolean;

		/** Override this method to commit gizmo handles. Called for this plugin's active gizmos. */
		//@ts-ignore
		commit_handle(gizmo: EditorSpatialGizmo, index: number, restore: any, cancel: boolean = false) : void;

		/** Override this method to return a custom `EditorSpatialGizmo` for the spatial nodes of your choice, return `null` for the rest of nodes. See also `has_gizmo`. */
		create_gizmo(spatial: Spatial) : EditorSpatialGizmo;

		/** Override this method to provide gizmo's handle names. Called for this plugin's active gizmos. */
		get_handle_name(gizmo: EditorSpatialGizmo, index: number) : string;

		/** Gets actual value of a handle from gizmo. Called for this plugin's active gizmos. */
		get_handle_value(gizmo: EditorSpatialGizmo, index: number) : any;

		/** Override this method to provide the name that will appear in the gizmo visibility menu. */
		get_name() : string;

		/**  */
		get_priority() : string;

		/** Override this method to define which Spatial nodes have a gizmo from this plugin. Whenever a `Spatial` node is added to a scene this method is called, if it returns `true` the node gets a generic `EditorSpatialGizmo` assigned and is added to this plugin's list of active gizmos. */
		has_gizmo(spatial: Spatial) : boolean;

		/** Gets whether a handle is highlighted or not. Called for this plugin's active gizmos. */
		is_handle_highlighted(gizmo: EditorSpatialGizmo, index: number) : boolean;

		/** Override this method to define whether Spatial with this gizmo should be selecteble even when the gizmo is hidden. */
		is_selectable_when_hidden() : boolean;

		/** Callback to redraw the provided gizmo. Called for this plugin's active gizmos. */
		redraw(gizmo: EditorSpatialGizmo) : void;

		/** Update the value of a handle after it has been updated. Called for this plugin's active gizmos. */
		set_handle(gizmo: EditorSpatialGizmo, index: number, camera: Camera, point: Vector2) : void;

		/** Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorSpatialGizmo.add_mesh` and `EditorSpatialGizmo.add_lines`. Should not be overridden. */
		//@ts-ignore
		create_material(name: string, color: Color, billboard: boolean = false, on_top: boolean = false, use_vertex_color: boolean = false) : void;

		/** Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorSpatialGizmo.add_unscaled_billboard`. Should not be overridden. */
		//@ts-ignore
		create_icon_material(name: string, texture: Texture, on_top: boolean = false, color: Color = Color( 1, 1, 1, 1 )) : void;

		/** Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with `get_material` and used in `EditorSpatialGizmo.add_handles`. Should not be overridden. */
		//@ts-ignore
		create_handle_material(name: string, billboard: boolean = false) : void;

		/** Adds a new material to the internal material list for the plugin. It can then be accessed with `get_material`. Should not be overridden. */
		add_material(name: string, material: SpatialMaterial) : void;

		/** Gets material from the internal list of materials. If an `EditorSpatialGizmo` is provided, it will try to get the corresponding variant (selected and/or editable). */
		get_material(name: string, gizmo: EditorSpatialGizmo) : SpatialMaterial;
	}
	namespace EditorSpatialGizmoPlugin {
	}

	/** 
	  */
	class EditorSpinSlider extends Range {

		/**  */
		label: string;

		/**  */
		read_only: boolean;

		/**  */
		flat: boolean;

		/**  */
		focus_mode: number;

		/** Getter of `label` property */
		get_label() : string;

		/** Setter of `label` property */
		set_label(p_value: string) : void;

		/** Getter of `read_only` property */
		is_read_only() : boolean;

		/** Setter of `read_only` property */
		set_read_only(p_value: boolean) : void;

		/** Getter of `flat` property */
		is_flat() : boolean;

		/** Setter of `flat` property */
		set_flat(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace EditorSpinSlider {
	}

	/** Version Control System (VCS) interface which reads and writes to the local VCS in use.
	 Used by the editor to display VCS extracted information in the editor. The implementation of this API is included in VCS addons, which are essentially GDNative plugins that need to be put into the project folder. These VCS addons are scripts which are attached (on demand) to the object instance of `EditorVCSInterface`. All the functions listed below, instead of performing the task themselves, they call the internally defined functions in the VCS addons to provide a plug-n-play experience. */
	class EditorVCSInterface extends Object {

		/** Returns `true` if the addon is ready to respond to function calls, else returns `false`. */
		is_addon_ready() : boolean;

		/** Initializes the VCS addon if not already. Uses the argument value as the path to the working directory of the project. Creates the initial commit if required. Returns `true` if no failure occurs, else returns `false`. */
		initialize(project_root_path: string) : boolean;

		/** Returns `true` if the VCS addon has been initialized, else returns `false`. */
		is_vcs_initialized() : boolean;

		/** Returns a `Dictionary` containing the path of the detected file change mapped to an integer signifying what kind of a change the corresponding file has experienced.

		 The following integer values are being used to signify that the detected file is:

		 - `0`: New to the VCS working directory

		 - `1`: Modified

		 - `2`: Renamed

		 - `3`: Deleted

		 - `4`: Typechanged */
		get_modified_files_data() : object;

		/** Stages the file which should be committed when `EditorVCSInterface.commit` is called. Argument should contain the absolute path. */
		stage_file(file_path: string) : void;

		/** Unstages the file which was staged previously to be committed, so that it is no longer committed when `EditorVCSInterface.commit` is called. Argument should contain the absolute path. */
		unstage_file(file_path: string) : void;

		/** Creates a version commit if the addon is initialized, else returns without doing anything. Uses the files which have been staged previously, with the commit message set to a value as provided as in the argument. */
		commit(msg: string) : void;

		/** Returns an `Array` of `Dictionary` objects containing the diff output from the VCS in use, if a VCS addon is initialized, else returns an empty `Array` object. The diff contents also consist of some contextual lines which provide context to the observed line change in the file.

		 Each `Dictionary` object has the line diff contents under the keys:

		 - `"content"` to store a `String` containing the line contents

		 - `"status"` to store a `String` which contains `"+"` in case the content is a line addition but it stores a `"-"` in case of deletion and an empty string in the case the line content is neither an addition nor a deletion.

		 - `"new_line_number"` to store an integer containing the new line number of the line content.

		 - `"line_count"` to store an integer containing the number of lines in the line content.

		 - `"old_line_number"` to store an integer containing the old line number of the line content.

		 - `"offset"` to store the offset of the line change since the first contextual line content. */
		get_file_diff(file_path: string) : any[];

		/** Shuts down the VCS addon to allow cleanup code to run on call. Returns `true` is no failure occurs, else returns `false`. */
		shut_down() : boolean;

		/** Returns the project name of the VCS working directory. */
		get_project_name() : string;

		/** Returns the name of the VCS if the VCS has been initialized, else return an empty string. */
		get_vcs_name() : string;
	}
	namespace EditorVCSInterface {
	}

	/** Holds a reference to an `Object`'s instance ID.
	 Utility class which holds a reference to the internal identifier of an `Object` instance, as given by `Object.get_instance_id`. This ID can then be used to retrieve the object instance with `@GDScript.instance_from_id`.

	 This class is used internally by the editor inspector and script debugger, but can also be used in plugins to pass and display objects as their IDs. */
	class EncodedObjectAsID extends Reference {

		/** The `Object` identifier stored in this `EncodedObjectAsID` instance. The object instance can be retrieved with `@GDScript.instance_from_id`. */
		object_id: number;

		/** Getter of `object_id` property */
		get_object_id() : number;

		/** Setter of `object_id` property */
		set_object_id(p_value: number) : void;
	}
	namespace EncodedObjectAsID {
	}

	/** Access to engine properties.
	 The `Engine` singleton allows you to query and modify the project's run-time parameters, such as frames per second, time scale, and others. */
	class Engine extends Object {

		/** If `true`, it is running inside the editor. Useful for tool scripts. */
		static editor_hint: boolean;

		/** The number of fixed iterations per second. This controls how often physics simulation and `Node._physics_process` methods are run. This value should generally always be set to `60` or above, as Godot doesn't interpolate the physics step. As a result, values lower than `60` will look stuttery. This value can be increased to make input more reactive or work around tunneling issues, but keep in mind doing so will increase CPU usage. */
		static iterations_per_second: number;

		/** The desired frames per second. If the hardware cannot keep up, this setting may not be respected. A value of 0 means no limit. */
		static target_fps: number;

		/** Controls how fast or slow the in-game clock ticks versus the real life one. It defaults to 1.0. A value of 2.0 means the game moves twice as fast as real life, whilst a value of 0.5 means the game moves at half the regular speed. */
		static time_scale: number;

		/** Controls how much physics ticks are synchronized with real time. For 0 or less, the ticks are synchronized. Such values are recommended for network games, where clock synchronization matters. Higher values cause higher deviation of in-game clock and real clock, but allows to smooth out framerate jitters. The default value of 0.5 should be fine for most; values above 2 could cause the game to react to dropped frames with a noticeable delay and are not recommended. */
		static physics_jitter_fix: number;

		/** Returns the fraction through the current physics tick we are at the time of rendering the frame. This can be used to implement fixed timestep interpolation. */
		static get_physics_interpolation_fraction() : number;

		/** Returns the total number of frames drawn. If the render loop is disabled with `--disable-render-loop` via command line, this returns `0`. See also `get_idle_frames`. */
		static get_frames_drawn() : number;

		/** Returns the frames per second of the running game. */
		static get_frames_per_second() : number;

		/** Returns the total number of frames passed since engine initialization which is advanced on each **physics frame**. */
		static get_physics_frames() : number;

		/** Returns the total number of frames passed since engine initialization which is advanced on each **idle frame**, regardless of whether the render loop is enabled. See also `get_frames_drawn`. */
		static get_idle_frames() : number;

		/** Returns the main loop object (see `MainLoop` and `SceneTree`). */
		static get_main_loop() : MainLoop;

		/** Returns the current engine version information in a Dictionary.

		 `major`    - Holds the major version number as an int

		 `minor`    - Holds the minor version number as an int

		 `patch`    - Holds the patch version number as an int

		 `hex`      - Holds the full version number encoded as a hexadecimal int with one byte (2 places) per number (see example below)

		 `status`   - Holds the status (e.g. "beta", "rc1", "rc2", ... "stable") as a String

		 `build`    - Holds the build name (e.g. "custom_build") as a String

		 `hash`     - Holds the full Git commit hash as a String

		 `year`     - Holds the year the version was released in as an int

		 `string`   - `major` + `minor` + `patch` + `status` + `build` in a single String

		 The `hex` value is encoded as follows, from left to right: one byte for the major, one byte for the minor, one byte for the patch version. For example, "3.1.12" would be `0x03010C`. **Note:** It's still an int internally, and printing it will give you its decimal representation, which is not particularly meaningful. Use hexadecimal literals for easy version comparisons from code:

		 ```gdscript
		 if Engine.get_version_info().hex >= 0x030200:
		     # Do things specific to version 3.2 or later
		 else:
		     # Do things specific to versions before 3.2
		 ``` */
		static get_version_info() : object;

		/** Returns engine author information in a Dictionary.

		 `lead_developers`    - Array of Strings, lead developer names

		 `founders`           - Array of Strings, founder names

		 `project_managers`   - Array of Strings, project manager names

		 `developers`         - Array of Strings, developer names */
		static get_author_info() : object;

		/** Returns an Array of copyright information Dictionaries.

		 `name`    - String, component name

		 `parts`   - Array of Dictionaries {`files`, `copyright`, `license`} describing subsections of the component */
		static get_copyright_info() : any[];

		/** Returns a Dictionary of Arrays of donor names.

		 {`platinum_sponsors`, `gold_sponsors`, `mini_sponsors`, `gold_donors`, `silver_donors`, `bronze_donors`} */
		static get_donor_info() : object;

		/** Returns Dictionary of licenses used by Godot and included third party components. */
		static get_license_info() : object;

		/** Returns Godot license text. */
		static get_license_text() : string;

		/** Returns `true` if the game is inside the fixed process and physics phase of the game loop. */
		static is_in_physics_frame() : boolean;

		/** Returns `true` if a singleton with given `name` exists in global scope. */
		static has_singleton(name: string) : boolean;

		/** Returns a global singleton with given `name`. Often used for plugins, e.g. `GodotPayment` on Android. */
		static get_singleton(name: string) : Object;

		/** Getter of `editor_hint` property */
		static is_editor_hint() : boolean;

		/** Setter of `editor_hint` property */
		static set_editor_hint(p_value: boolean) : void;

		/** Getter of `iterations_per_second` property */
		static get_iterations_per_second() : number;

		/** Setter of `iterations_per_second` property */
		static set_iterations_per_second(p_value: number) : void;

		/** Getter of `target_fps` property */
		static get_target_fps() : number;

		/** Setter of `target_fps` property */
		static set_target_fps(p_value: number) : void;

		/** Getter of `time_scale` property */
		static get_time_scale() : number;

		/** Setter of `time_scale` property */
		static set_time_scale(p_value: number) : void;

		/** Getter of `physics_jitter_fix` property */
		static get_physics_jitter_fix() : number;

		/** Setter of `physics_jitter_fix` property */
		static set_physics_jitter_fix(p_value: number) : void;
	}
	namespace Engine {
	}

	/** Resource for environment nodes (like `WorldEnvironment`) that define multiple rendering options.
	 Resource for environment nodes (like `WorldEnvironment`) that define multiple environment operations (such as background `Sky` or `Color`, ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:

	 - Depth of Field Blur

	 - Glow

	 - Tonemap (Auto Exposure)

	 - Adjustments

	 These effects will only apply when the `Viewport`'s intended usage is "3D" or "3D Without Effects". This can be configured for the root Viewport with `ProjectSettings.rendering/quality/intended_usage/framebuffer_allocation`, or for specific Viewports via the `Viewport.usage` property. */
	class Environment extends Resource {

		/** The background mode. See `BGMode` for possible values. */
		background_mode: number;

		/** The `Sky` resource defined as background. */
		background_sky: Sky;

		/** The `Sky` resource's custom field of view. */
		background_sky_custom_fov: number;

		/** The `Sky` resource's rotation expressed as a `Basis`. */
		background_sky_orientation: Basis;

		/** The `Sky` resource's rotation expressed as Euler angles in radians. */
		background_sky_rotation: Vector3;

		/** The `Sky` resource's rotation expressed as Euler angles in degrees. */
		background_sky_rotation_degrees: Vector3;

		/** The `Color` displayed for clear areas of the scene. Only effective when using the `BG_COLOR` or `BG_COLOR_SKY` background modes). */
		background_color: Color;

		/** The power of the light emitted by the background. */
		background_energy: number;

		/** The maximum layer ID to display. Only effective when using the `BG_CANVAS` background mode. */
		background_canvas_max_layer: number;

		/** The ID of the camera feed to show in the background. */
		background_camera_feed_id: number;

		/** The ambient light's `Color`. */
		ambient_light_color: Color;

		/** The ambient light's energy. The higher the value, the stronger the light. */
		ambient_light_energy: number;

		/** Defines the amount of light that the sky brings on the scene. A value of 0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene. */
		ambient_light_sky_contribution: number;

		/** If `true`, fog effects are enabled. `fog_height_enabled` and/or `fog_depth_enabled` must be set to `true` to actually display fog. */
		fog_enabled: boolean;

		/** The fog's `Color`. */
		fog_color: Color;

		/** The depth fog's `Color` when looking towards the sun. */
		fog_sun_color: Color;

		/** The intensity of the depth fog color transition when looking towards the sun. The sun's direction is determined automatically using the DirectionalLight node in the scene. */
		fog_sun_amount: number;

		/** If `true`, the depth fog effect is enabled. When enabled, fog will appear in the distance (relative to the camera). */
		fog_depth_enabled: boolean;

		/** The fog's depth starting distance from the camera. */
		fog_depth_begin: number;

		/** The fog's depth end distance from the camera. If this value is set to 0, it will be equal to the current camera's `Camera.far` value. */
		fog_depth_end: number;

		/** The fog depth's intensity curve. A number of presets are available in the **Inspector** by right-clicking the curve. */
		fog_depth_curve: number;

		/** Enables fog's light transmission effect. If `true`, light will be more visible in the fog to simulate light scattering as in real life. */
		fog_transmit_enabled: boolean;

		/** The intensity of the fog light transmittance effect. Amount of light that the fog transmits. */
		fog_transmit_curve: number;

		/** If `true`, the height fog effect is enabled. When enabled, fog will appear in a defined height range, regardless of the distance from the camera. This can be used to simulate "deep water" effects with a lower performance cost compared to a dedicated shader. */
		fog_height_enabled: boolean;

		/** The Y coordinate where the height fog will be the least intense. If this value is greater than `fog_height_max`, fog will be displayed from top to bottom. Otherwise, it will be displayed from bottom to top. */
		fog_height_min: number;

		/** The Y coordinate where the height fog will be the most intense. If this value is greater than `fog_height_min`, fog will be displayed from bottom to top. Otherwise, it will be displayed from top to bottom. */
		fog_height_max: number;

		/** The height fog's intensity. A number of presets are available in the **Inspector** by right-clicking the curve. */
		fog_height_curve: number;

		/** The tonemapping mode to use. Tonemapping is the process that "converts" HDR values to be suitable for rendering on a LDR display. (Godot doesn't support rendering on HDR displays yet.) */
		tonemap_mode: number;

		/** The default exposure used for tonemapping. */
		tonemap_exposure: number;

		/** The white reference value for tonemapping. Only effective if the `tonemap_mode` isn't set to `TONE_MAPPER_LINEAR`. */
		tonemap_white: number;

		/** If `true`, enables the tonemapping auto exposure mode of the scene renderer. If `true`, the renderer will automatically determine the exposure setting to adapt to the scene's illumination and the observed light. */
		auto_exposure_enabled: boolean;

		/** The scale of the auto exposure effect. Affects the intensity of auto exposure. */
		auto_exposure_scale: number;

		/** The minimum luminance value for the auto exposure. */
		auto_exposure_min_luma: number;

		/** The maximum luminance value for the auto exposure. */
		auto_exposure_max_luma: number;

		/** The speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure. */
		auto_exposure_speed: number;

		/** If `true`, screen-space reflections are enabled. Screen-space reflections are more accurate than reflections from `GIProbe`s or `ReflectionProbe`s, but are slower and can't reflect surfaces occluded by others. */
		ss_reflections_enabled: boolean;

		/** The maximum number of steps for screen-space reflections. Higher values are slower. */
		ss_reflections_max_steps: number;

		/** The fade-in distance for screen-space reflections. Affects the area from the reflected material to the screen-space reflection). */
		ss_reflections_fade_in: number;

		/** The fade-out distance for screen-space reflections. Affects the area from the screen-space reflection to the "global" reflection. */
		ss_reflections_fade_out: number;

		/** The depth tolerance for screen-space reflections. */
		ss_reflections_depth_tolerance: number;

		/** If `true`, screen-space reflections will take the material roughness into account. */
		ss_reflections_roughness: boolean;

		/** If `true`, the screen-space ambient occlusion effect is enabled. This darkens objects' corners and cavities to simulate ambient light not reaching the entire object as in real life. This works well for small, dynamic objects, but baked lighting or ambient occlusion textures will do a better job at displaying ambient occlusion on large static objects. This is a costly effect and should be disabled first when running into performance issues. */
		ssao_enabled: boolean;

		/** The primary screen-space ambient occlusion radius. */
		ssao_radius: number;

		/** The primary screen-space ambient occlusion intensity. See also `ssao_radius`. */
		ssao_intensity: number;

		/** The secondary screen-space ambient occlusion radius. If set to a value higher than `0`, enables the secondary screen-space ambient occlusion effect which can be used to improve the effect's appearance (at the cost of performance). */
		ssao_radius2: number;

		/** The secondary screen-space ambient occlusion intensity. See also `ssao_radius2`. */
		ssao_intensity2: number;

		/** The screen-space ambient occlusion bias. This should be kept high enough to prevent "smooth" curves from being affected by ambient occlusion. */
		ssao_bias: number;

		/** The screen-space ambient occlusion intensity in direct light. In real life, ambient occlusion only applies to indirect light, which means its effects can't be seen in direct light. Values higher than `0` will make the SSAO effect visible in direct light. */
		ssao_light_affect: number;

		/** The screen-space ambient occlusion intensity on materials that have an AO texture defined. Values higher than `0` will make the SSAO effect visible in areas darkened by AO textures. */
		ssao_ao_channel_affect: number;

		/** The screen-space ambient occlusion color. */
		ssao_color: Color;

		/** The screen-space ambient occlusion quality. Higher qualities will make better use of small objects for ambient occlusion, but are slower. */
		ssao_quality: number;

		/** The screen-space ambient occlusion blur quality. See `SSAOBlur` for possible values. */
		ssao_blur: number;

		/** The screen-space ambient occlusion edge sharpness. */
		ssao_edge_sharpness: number;

		/** If `true`, enables the depth-of-field far blur effect. */
		dof_blur_far_enabled: boolean;

		/** The distance from the camera where the far blur effect affects the rendering. */
		dof_blur_far_distance: number;

		/** The length of the transition between the no-blur area and far blur. */
		dof_blur_far_transition: number;

		/** The amount of far blur for the depth-of-field effect. */
		dof_blur_far_amount: number;

		/** The depth-of-field far blur's quality. Higher values can mitigate the visible banding effect seen at higher strengths, but are much slower. */
		dof_blur_far_quality: number;

		/** If `true`, enables the depth-of-field near blur effect. */
		dof_blur_near_enabled: boolean;

		/** Distance from the camera where the near blur effect affects the rendering. */
		dof_blur_near_distance: number;

		/** The length of the transition between the near blur and no-blur area. */
		dof_blur_near_transition: number;

		/** The amount of near blur for the depth-of-field effect. */
		dof_blur_near_amount: number;

		/** The depth-of-field near blur's quality. Higher values can mitigate the visible banding effect seen at higher strengths, but are much slower. */
		dof_blur_near_quality: number;

		/** If `true`, the glow effect is enabled. */
		glow_enabled: boolean;

		/** If `true`, the 1st level of glow is enabled. This is the most "local" level (least blurry). */
		'glow_levels/1': boolean;

		/** If `true`, the 2th level of glow is enabled. */
		'glow_levels/2': boolean;

		/** If `true`, the 3th level of glow is enabled. */
		'glow_levels/3': boolean;

		/** If `true`, the 4th level of glow is enabled. */
		'glow_levels/4': boolean;

		/** If `true`, the 5th level of glow is enabled. */
		'glow_levels/5': boolean;

		/** If `true`, the 6th level of glow is enabled. */
		'glow_levels/6': boolean;

		/** If `true`, the 7th level of glow is enabled. This is the most "global" level (blurriest). */
		'glow_levels/7': boolean;

		/** The glow intensity. When using the GLES2 renderer, this should be increased to 1.5 to compensate for the lack of HDR rendering. */
		glow_intensity: number;

		/** The glow strength. When using the GLES2 renderer, this should be increased to 1.3 to compensate for the lack of HDR rendering. */
		glow_strength: number;

		/** The bloom's intensity. If set to a value higher than `0`, this will make glow visible in areas darker than the `glow_hdr_threshold`. */
		glow_bloom: number;

		/** The glow blending mode. */
		glow_blend_mode: number;

		/** The lower threshold of the HDR glow. When using the GLES2 renderer (which doesn't support HDR), this needs to be below `1.0` for glow to be visible. A value of `0.9` works well in this case. */
		glow_hdr_threshold: number;

		/** The higher threshold of the HDR glow. Areas brighter than this threshold will be clamped for the purposes of the glow effect. */
		glow_hdr_luminance_cap: number;

		/** The bleed scale of the HDR glow. */
		glow_hdr_scale: number;

		/** Smooths out the blockiness created by sampling higher levels, at the cost of performance.

		 **Note:** When using the GLES2 renderer, this is only available if the GPU supports the `GL_EXT_gpu_shader4` extension. */
		glow_bicubic_upscale: boolean;

		/** If `true`, enables the `adjustment_*` properties provided by this resource. If `false`, modifications to the `adjustment_*` properties will have no effect on the rendered scene. */
		adjustment_enabled: boolean;

		/** The global brightness value of the rendered scene. Effective only if `adjustment_enabled` is `true`. */
		adjustment_brightness: number;

		/** The global contrast value of the rendered scene (default value is 1). Effective only if `adjustment_enabled` is `true`. */
		adjustment_contrast: number;

		/** The global color saturation value of the rendered scene (default value is 1). Effective only if `adjustment_enabled` is `true`. */
		adjustment_saturation: number;

		/** Applies the provided `Texture` resource to affect the global color aspect of the rendered scene. Effective only if `adjustment_enabled` is `true`. */
		adjustment_color_correction: Texture;

		/** Enables or disables the glow level at index `idx`. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled. */
		set_glow_level(idx: number, enabled: boolean) : void;

		/** Returns `true` if the glow level `idx` is specified, `false` otherwise. */
		is_glow_level_enabled(idx: number) : boolean;

		/** Getter of `background_mode` property */
		get_background() : number;

		/** Setter of `background_mode` property */
		set_background(p_value: number) : void;

		/** Getter of `background_sky` property */
		get_sky() : Sky;

		/** Setter of `background_sky` property */
		set_sky(p_value: Sky) : void;

		/** Getter of `background_sky_custom_fov` property */
		get_sky_custom_fov() : number;

		/** Setter of `background_sky_custom_fov` property */
		set_sky_custom_fov(p_value: number) : void;

		/** Getter of `background_sky_orientation` property */
		get_sky_orientation() : Basis;

		/** Setter of `background_sky_orientation` property */
		set_sky_orientation(p_value: Basis) : void;

		/** Getter of `background_sky_rotation` property */
		get_sky_rotation() : Vector3;

		/** Setter of `background_sky_rotation` property */
		set_sky_rotation(p_value: Vector3) : void;

		/** Getter of `background_sky_rotation_degrees` property */
		get_sky_rotation_degrees() : Vector3;

		/** Setter of `background_sky_rotation_degrees` property */
		set_sky_rotation_degrees(p_value: Vector3) : void;

		/** Getter of `background_color` property */
		get_bg_color() : Color;

		/** Setter of `background_color` property */
		set_bg_color(p_value: Color) : void;

		/** Getter of `background_energy` property */
		get_bg_energy() : number;

		/** Setter of `background_energy` property */
		set_bg_energy(p_value: number) : void;

		/** Getter of `background_canvas_max_layer` property */
		get_canvas_max_layer() : number;

		/** Setter of `background_canvas_max_layer` property */
		set_canvas_max_layer(p_value: number) : void;

		/** Getter of `background_camera_feed_id` property */
		get_camera_feed_id() : number;

		/** Setter of `background_camera_feed_id` property */
		set_camera_feed_id(p_value: number) : void;

		/** Getter of `ambient_light_color` property */
		get_ambient_light_color() : Color;

		/** Setter of `ambient_light_color` property */
		set_ambient_light_color(p_value: Color) : void;

		/** Getter of `ambient_light_energy` property */
		get_ambient_light_energy() : number;

		/** Setter of `ambient_light_energy` property */
		set_ambient_light_energy(p_value: number) : void;

		/** Getter of `ambient_light_sky_contribution` property */
		get_ambient_light_sky_contribution() : number;

		/** Setter of `ambient_light_sky_contribution` property */
		set_ambient_light_sky_contribution(p_value: number) : void;

		/** Getter of `fog_enabled` property */
		is_fog_enabled() : boolean;

		/** Setter of `fog_enabled` property */
		set_fog_enabled(p_value: boolean) : void;

		/** Getter of `fog_color` property */
		get_fog_color() : Color;

		/** Setter of `fog_color` property */
		set_fog_color(p_value: Color) : void;

		/** Getter of `fog_sun_color` property */
		get_fog_sun_color() : Color;

		/** Setter of `fog_sun_color` property */
		set_fog_sun_color(p_value: Color) : void;

		/** Getter of `fog_sun_amount` property */
		get_fog_sun_amount() : number;

		/** Setter of `fog_sun_amount` property */
		set_fog_sun_amount(p_value: number) : void;

		/** Getter of `fog_depth_enabled` property */
		is_fog_depth_enabled() : boolean;

		/** Setter of `fog_depth_enabled` property */
		set_fog_depth_enabled(p_value: boolean) : void;

		/** Getter of `fog_depth_begin` property */
		get_fog_depth_begin() : number;

		/** Setter of `fog_depth_begin` property */
		set_fog_depth_begin(p_value: number) : void;

		/** Getter of `fog_depth_end` property */
		get_fog_depth_end() : number;

		/** Setter of `fog_depth_end` property */
		set_fog_depth_end(p_value: number) : void;

		/** Getter of `fog_depth_curve` property */
		get_fog_depth_curve() : number;

		/** Setter of `fog_depth_curve` property */
		set_fog_depth_curve(p_value: number) : void;

		/** Getter of `fog_transmit_enabled` property */
		is_fog_transmit_enabled() : boolean;

		/** Setter of `fog_transmit_enabled` property */
		set_fog_transmit_enabled(p_value: boolean) : void;

		/** Getter of `fog_transmit_curve` property */
		get_fog_transmit_curve() : number;

		/** Setter of `fog_transmit_curve` property */
		set_fog_transmit_curve(p_value: number) : void;

		/** Getter of `fog_height_enabled` property */
		is_fog_height_enabled() : boolean;

		/** Setter of `fog_height_enabled` property */
		set_fog_height_enabled(p_value: boolean) : void;

		/** Getter of `fog_height_min` property */
		get_fog_height_min() : number;

		/** Setter of `fog_height_min` property */
		set_fog_height_min(p_value: number) : void;

		/** Getter of `fog_height_max` property */
		get_fog_height_max() : number;

		/** Setter of `fog_height_max` property */
		set_fog_height_max(p_value: number) : void;

		/** Getter of `fog_height_curve` property */
		get_fog_height_curve() : number;

		/** Setter of `fog_height_curve` property */
		set_fog_height_curve(p_value: number) : void;

		/** Getter of `tonemap_mode` property */
		get_tonemapper() : number;

		/** Setter of `tonemap_mode` property */
		set_tonemapper(p_value: number) : void;

		/** Getter of `tonemap_exposure` property */
		get_tonemap_exposure() : number;

		/** Setter of `tonemap_exposure` property */
		set_tonemap_exposure(p_value: number) : void;

		/** Getter of `tonemap_white` property */
		get_tonemap_white() : number;

		/** Setter of `tonemap_white` property */
		set_tonemap_white(p_value: number) : void;

		/** Getter of `auto_exposure_enabled` property */
		get_tonemap_auto_exposure() : boolean;

		/** Setter of `auto_exposure_enabled` property */
		set_tonemap_auto_exposure(p_value: boolean) : void;

		/** Getter of `auto_exposure_scale` property */
		get_tonemap_auto_exposure_grey() : number;

		/** Setter of `auto_exposure_scale` property */
		set_tonemap_auto_exposure_grey(p_value: number) : void;

		/** Getter of `auto_exposure_min_luma` property */
		get_tonemap_auto_exposure_min() : number;

		/** Setter of `auto_exposure_min_luma` property */
		set_tonemap_auto_exposure_min(p_value: number) : void;

		/** Getter of `auto_exposure_max_luma` property */
		get_tonemap_auto_exposure_max() : number;

		/** Setter of `auto_exposure_max_luma` property */
		set_tonemap_auto_exposure_max(p_value: number) : void;

		/** Getter of `auto_exposure_speed` property */
		get_tonemap_auto_exposure_speed() : number;

		/** Setter of `auto_exposure_speed` property */
		set_tonemap_auto_exposure_speed(p_value: number) : void;

		/** Getter of `ss_reflections_enabled` property */
		is_ssr_enabled() : boolean;

		/** Setter of `ss_reflections_enabled` property */
		set_ssr_enabled(p_value: boolean) : void;

		/** Getter of `ss_reflections_max_steps` property */
		get_ssr_max_steps() : number;

		/** Setter of `ss_reflections_max_steps` property */
		set_ssr_max_steps(p_value: number) : void;

		/** Getter of `ss_reflections_fade_in` property */
		get_ssr_fade_in() : number;

		/** Setter of `ss_reflections_fade_in` property */
		set_ssr_fade_in(p_value: number) : void;

		/** Getter of `ss_reflections_fade_out` property */
		get_ssr_fade_out() : number;

		/** Setter of `ss_reflections_fade_out` property */
		set_ssr_fade_out(p_value: number) : void;

		/** Getter of `ss_reflections_depth_tolerance` property */
		get_ssr_depth_tolerance() : number;

		/** Setter of `ss_reflections_depth_tolerance` property */
		set_ssr_depth_tolerance(p_value: number) : void;

		/** Getter of `ss_reflections_roughness` property */
		is_ssr_rough() : boolean;

		/** Setter of `ss_reflections_roughness` property */
		set_ssr_rough(p_value: boolean) : void;

		/** Getter of `ssao_enabled` property */
		is_ssao_enabled() : boolean;

		/** Setter of `ssao_enabled` property */
		set_ssao_enabled(p_value: boolean) : void;

		/** Getter of `ssao_radius` property */
		get_ssao_radius() : number;

		/** Setter of `ssao_radius` property */
		set_ssao_radius(p_value: number) : void;

		/** Getter of `ssao_intensity` property */
		get_ssao_intensity() : number;

		/** Setter of `ssao_intensity` property */
		set_ssao_intensity(p_value: number) : void;

		/** Getter of `ssao_radius2` property */
		get_ssao_radius2() : number;

		/** Setter of `ssao_radius2` property */
		set_ssao_radius2(p_value: number) : void;

		/** Getter of `ssao_intensity2` property */
		get_ssao_intensity2() : number;

		/** Setter of `ssao_intensity2` property */
		set_ssao_intensity2(p_value: number) : void;

		/** Getter of `ssao_bias` property */
		get_ssao_bias() : number;

		/** Setter of `ssao_bias` property */
		set_ssao_bias(p_value: number) : void;

		/** Getter of `ssao_light_affect` property */
		get_ssao_direct_light_affect() : number;

		/** Setter of `ssao_light_affect` property */
		set_ssao_direct_light_affect(p_value: number) : void;

		/** Getter of `ssao_ao_channel_affect` property */
		get_ssao_ao_channel_affect() : number;

		/** Setter of `ssao_ao_channel_affect` property */
		set_ssao_ao_channel_affect(p_value: number) : void;

		/** Getter of `ssao_color` property */
		get_ssao_color() : Color;

		/** Setter of `ssao_color` property */
		set_ssao_color(p_value: Color) : void;

		/** Getter of `ssao_quality` property */
		get_ssao_quality() : number;

		/** Setter of `ssao_quality` property */
		set_ssao_quality(p_value: number) : void;

		/** Getter of `ssao_blur` property */
		get_ssao_blur() : number;

		/** Setter of `ssao_blur` property */
		set_ssao_blur(p_value: number) : void;

		/** Getter of `ssao_edge_sharpness` property */
		get_ssao_edge_sharpness() : number;

		/** Setter of `ssao_edge_sharpness` property */
		set_ssao_edge_sharpness(p_value: number) : void;

		/** Getter of `dof_blur_far_enabled` property */
		is_dof_blur_far_enabled() : boolean;

		/** Setter of `dof_blur_far_enabled` property */
		set_dof_blur_far_enabled(p_value: boolean) : void;

		/** Getter of `dof_blur_far_distance` property */
		get_dof_blur_far_distance() : number;

		/** Setter of `dof_blur_far_distance` property */
		set_dof_blur_far_distance(p_value: number) : void;

		/** Getter of `dof_blur_far_transition` property */
		get_dof_blur_far_transition() : number;

		/** Setter of `dof_blur_far_transition` property */
		set_dof_blur_far_transition(p_value: number) : void;

		/** Getter of `dof_blur_far_amount` property */
		get_dof_blur_far_amount() : number;

		/** Setter of `dof_blur_far_amount` property */
		set_dof_blur_far_amount(p_value: number) : void;

		/** Getter of `dof_blur_far_quality` property */
		get_dof_blur_far_quality() : number;

		/** Setter of `dof_blur_far_quality` property */
		set_dof_blur_far_quality(p_value: number) : void;

		/** Getter of `dof_blur_near_enabled` property */
		is_dof_blur_near_enabled() : boolean;

		/** Setter of `dof_blur_near_enabled` property */
		set_dof_blur_near_enabled(p_value: boolean) : void;

		/** Getter of `dof_blur_near_distance` property */
		get_dof_blur_near_distance() : number;

		/** Setter of `dof_blur_near_distance` property */
		set_dof_blur_near_distance(p_value: number) : void;

		/** Getter of `dof_blur_near_transition` property */
		get_dof_blur_near_transition() : number;

		/** Setter of `dof_blur_near_transition` property */
		set_dof_blur_near_transition(p_value: number) : void;

		/** Getter of `dof_blur_near_amount` property */
		get_dof_blur_near_amount() : number;

		/** Setter of `dof_blur_near_amount` property */
		set_dof_blur_near_amount(p_value: number) : void;

		/** Getter of `dof_blur_near_quality` property */
		get_dof_blur_near_quality() : number;

		/** Setter of `dof_blur_near_quality` property */
		set_dof_blur_near_quality(p_value: number) : void;

		/** Getter of `glow_enabled` property */
		is_glow_enabled() : boolean;

		/** Setter of `glow_enabled` property */
		set_glow_enabled(p_value: boolean) : void;

		/** Getter of `glow_levels/1` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/1` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_levels/2` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/2` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_levels/3` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/3` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_levels/4` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/4` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_levels/5` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/5` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_levels/6` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/6` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_levels/7` property */
		is_glow_level_enabled() : boolean;

		/** Setter of `glow_levels/7` property */
		set_glow_level(p_value: boolean) : void;

		/** Getter of `glow_intensity` property */
		get_glow_intensity() : number;

		/** Setter of `glow_intensity` property */
		set_glow_intensity(p_value: number) : void;

		/** Getter of `glow_strength` property */
		get_glow_strength() : number;

		/** Setter of `glow_strength` property */
		set_glow_strength(p_value: number) : void;

		/** Getter of `glow_bloom` property */
		get_glow_bloom() : number;

		/** Setter of `glow_bloom` property */
		set_glow_bloom(p_value: number) : void;

		/** Getter of `glow_blend_mode` property */
		get_glow_blend_mode() : number;

		/** Setter of `glow_blend_mode` property */
		set_glow_blend_mode(p_value: number) : void;

		/** Getter of `glow_hdr_threshold` property */
		get_glow_hdr_bleed_threshold() : number;

		/** Setter of `glow_hdr_threshold` property */
		set_glow_hdr_bleed_threshold(p_value: number) : void;

		/** Getter of `glow_hdr_luminance_cap` property */
		get_glow_hdr_luminance_cap() : number;

		/** Setter of `glow_hdr_luminance_cap` property */
		set_glow_hdr_luminance_cap(p_value: number) : void;

		/** Getter of `glow_hdr_scale` property */
		get_glow_hdr_bleed_scale() : number;

		/** Setter of `glow_hdr_scale` property */
		set_glow_hdr_bleed_scale(p_value: number) : void;

		/** Getter of `glow_bicubic_upscale` property */
		is_glow_bicubic_upscale_enabled() : boolean;

		/** Setter of `glow_bicubic_upscale` property */
		set_glow_bicubic_upscale(p_value: boolean) : void;

		/** Getter of `adjustment_enabled` property */
		is_adjustment_enabled() : boolean;

		/** Setter of `adjustment_enabled` property */
		set_adjustment_enable(p_value: boolean) : void;

		/** Getter of `adjustment_brightness` property */
		get_adjustment_brightness() : number;

		/** Setter of `adjustment_brightness` property */
		set_adjustment_brightness(p_value: number) : void;

		/** Getter of `adjustment_contrast` property */
		get_adjustment_contrast() : number;

		/** Setter of `adjustment_contrast` property */
		set_adjustment_contrast(p_value: number) : void;

		/** Getter of `adjustment_saturation` property */
		get_adjustment_saturation() : number;

		/** Setter of `adjustment_saturation` property */
		set_adjustment_saturation(p_value: number) : void;

		/** Getter of `adjustment_color_correction` property */
		get_adjustment_color_correction() : Texture;

		/** Setter of `adjustment_color_correction` property */
		set_adjustment_color_correction(p_value: Texture) : void;
	}
	namespace Environment {
		enum BGMode {
			/** Keeps on screen every pixel drawn in the background. This is the fastest background mode, but it can only be safely used in fully-interior scenes (no visible sky or sky reflections). If enabled in a scene where the background is visible, "ghost trail" artifacts will be visible when moving the camera. */
			BG_KEEP = 5,
			/** Clears the background using the clear color defined in `ProjectSettings.rendering/environment/default_clear_color`. */
			BG_CLEAR_COLOR = 0,
			/** Clears the background using a custom clear color. */
			BG_COLOR = 1,
			/** Displays a user-defined sky in the background. */
			BG_SKY = 2,
			/** Clears the background using a custom clear color and allows defining a sky for shading and reflection. This mode is slightly faster than `BG_SKY` and should be preferred in scenes where reflections can be visible, but the sky itself never is (e.g. top-down camera). */
			BG_COLOR_SKY = 3,
			/** Displays a `CanvasLayer` in the background. */
			BG_CANVAS = 4,
			/** Displays a camera feed in the background. */
			BG_CAMERA_FEED = 6,
			/** Represents the size of the `BGMode` enum. */
			BG_MAX = 7,
		}
		enum DOFBlurQuality {
			/** Low depth-of-field blur quality (fastest). */
			DOF_BLUR_QUALITY_LOW = 0,
			/** Medium depth-of-field blur quality. */
			DOF_BLUR_QUALITY_MEDIUM = 1,
			/** High depth-of-field blur quality (slowest). */
			DOF_BLUR_QUALITY_HIGH = 2,
		}
		enum GlowBlendMode {
			/** Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources. */
			GLOW_BLEND_MODE_ADDITIVE = 0,
			/** Screen glow blending mode. Increases brightness, used frequently with bloom. */
			GLOW_BLEND_MODE_SCREEN = 1,
			/** Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom). */
			GLOW_BLEND_MODE_SOFTLIGHT = 2,
			/** Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness. */
			GLOW_BLEND_MODE_REPLACE = 3,
		}
		enum SSAOBlur {
			/** No blur for the screen-space ambient occlusion effect (fastest). */
			SSAO_BLUR_DISABLED = 0,
			/** 1×1 blur for the screen-space ambient occlusion effect. */
			SSAO_BLUR_1x1 = 1,
			/** 2×2 blur for the screen-space ambient occlusion effect. */
			SSAO_BLUR_2x2 = 2,
			/** 3×3 blur for the screen-space ambient occlusion effect (slowest). */
			SSAO_BLUR_3x3 = 3,
		}
		enum SSAOQuality {
			/** Low quality for the screen-space ambient occlusion effect (fastest). */
			SSAO_QUALITY_LOW = 0,
			/** Low quality for the screen-space ambient occlusion effect. */
			SSAO_QUALITY_MEDIUM = 1,
			/** Low quality for the screen-space ambient occlusion effect (slowest). */
			SSAO_QUALITY_HIGH = 2,
		}
		enum ToneMapper {
			/** Linear tonemapper operator. Reads the linear data and passes it on unmodified. */
			TONE_MAPPER_LINEAR = 0,
			/** Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: `color = color / (1 + color)`. */
			TONE_MAPPER_REINHARDT = 1,
			/** Filmic tonemapper operator. */
			TONE_MAPPER_FILMIC = 2,
			/** Academy Color Encoding System tonemapper operator. */
			TONE_MAPPER_ACES = 3,
		}

		/** Keeps on screen every pixel drawn in the background. This is the fastest background mode, but it can only be safely used in fully-interior scenes (no visible sky or sky reflections). If enabled in a scene where the background is visible, "ghost trail" artifacts will be visible when moving the camera. */
		const BG_KEEP: BGMode.BG_KEEP;

		/** Clears the background using the clear color defined in `ProjectSettings.rendering/environment/default_clear_color`. */
		const BG_CLEAR_COLOR: BGMode.BG_CLEAR_COLOR;

		/** Clears the background using a custom clear color. */
		const BG_COLOR: BGMode.BG_COLOR;

		/** Displays a user-defined sky in the background. */
		const BG_SKY: BGMode.BG_SKY;

		/** Clears the background using a custom clear color and allows defining a sky for shading and reflection. This mode is slightly faster than `BG_SKY` and should be preferred in scenes where reflections can be visible, but the sky itself never is (e.g. top-down camera). */
		const BG_COLOR_SKY: BGMode.BG_COLOR_SKY;

		/** Displays a `CanvasLayer` in the background. */
		const BG_CANVAS: BGMode.BG_CANVAS;

		/** Displays a camera feed in the background. */
		const BG_CAMERA_FEED: BGMode.BG_CAMERA_FEED;

		/** Represents the size of the `BGMode` enum. */
		const BG_MAX: BGMode.BG_MAX;

		/** Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources. */
		const GLOW_BLEND_MODE_ADDITIVE: GlowBlendMode.GLOW_BLEND_MODE_ADDITIVE;

		/** Screen glow blending mode. Increases brightness, used frequently with bloom. */
		const GLOW_BLEND_MODE_SCREEN: GlowBlendMode.GLOW_BLEND_MODE_SCREEN;

		/** Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom). */
		const GLOW_BLEND_MODE_SOFTLIGHT: GlowBlendMode.GLOW_BLEND_MODE_SOFTLIGHT;

		/** Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness. */
		const GLOW_BLEND_MODE_REPLACE: GlowBlendMode.GLOW_BLEND_MODE_REPLACE;

		/** Linear tonemapper operator. Reads the linear data and passes it on unmodified. */
		const TONE_MAPPER_LINEAR: ToneMapper.TONE_MAPPER_LINEAR;

		/** Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: `color = color / (1 + color)`. */
		const TONE_MAPPER_REINHARDT: ToneMapper.TONE_MAPPER_REINHARDT;

		/** Filmic tonemapper operator. */
		const TONE_MAPPER_FILMIC: ToneMapper.TONE_MAPPER_FILMIC;

		/** Academy Color Encoding System tonemapper operator. */
		const TONE_MAPPER_ACES: ToneMapper.TONE_MAPPER_ACES;

		/** Low depth-of-field blur quality (fastest). */
		const DOF_BLUR_QUALITY_LOW: DOFBlurQuality.DOF_BLUR_QUALITY_LOW;

		/** Medium depth-of-field blur quality. */
		const DOF_BLUR_QUALITY_MEDIUM: DOFBlurQuality.DOF_BLUR_QUALITY_MEDIUM;

		/** High depth-of-field blur quality (slowest). */
		const DOF_BLUR_QUALITY_HIGH: DOFBlurQuality.DOF_BLUR_QUALITY_HIGH;

		/** No blur for the screen-space ambient occlusion effect (fastest). */
		const SSAO_BLUR_DISABLED: SSAOBlur.SSAO_BLUR_DISABLED;

		/** 1×1 blur for the screen-space ambient occlusion effect. */
		const SSAO_BLUR_1x1: SSAOBlur.SSAO_BLUR_1x1;

		/** 2×2 blur for the screen-space ambient occlusion effect. */
		const SSAO_BLUR_2x2: SSAOBlur.SSAO_BLUR_2x2;

		/** 3×3 blur for the screen-space ambient occlusion effect (slowest). */
		const SSAO_BLUR_3x3: SSAOBlur.SSAO_BLUR_3x3;

		/** Low quality for the screen-space ambient occlusion effect (fastest). */
		const SSAO_QUALITY_LOW: SSAOQuality.SSAO_QUALITY_LOW;

		/** Low quality for the screen-space ambient occlusion effect. */
		const SSAO_QUALITY_MEDIUM: SSAOQuality.SSAO_QUALITY_MEDIUM;

		/** Low quality for the screen-space ambient occlusion effect (slowest). */
		const SSAO_QUALITY_HIGH: SSAOQuality.SSAO_QUALITY_HIGH;
	}

	/** A class that stores an expression you can execute.
	 An expression can be made of any arithmetic operation, built-in math function call, method call of a passed instance, or built-in type construction call.

	 An example expression text using the built-in math functions could be `sqrt(pow(3,2) + pow(4,2))`.

	 In the following example we use a `LineEdit` node to write our expression and show the result.

	 ```gdscript
	 onready var expression = Expression.new()
	 
	 func _ready():
	     $LineEdit.connect("text_entered", self, "_on_text_entered")
	 
	 func _on_text_entered(command):
	     var error = expression.parse(command, [])
	     if error != OK:
	         print(expression.get_error_text())
	         return
	     var result = expression.execute([], null, true)
	     if not expression.has_execute_failed():
	         $LineEdit.text = str(result)
	 ``` */
	class Expression extends Reference {

		/** Parses the expression and returns an `Error` code.

		 You can optionally specify names of variables that may appear in the expression with `input_names`, so that you can bind them when it gets executed. */
		//@ts-ignore
		parse(expression: string, input_names: PoolStringArray = PoolStringArray(  )) : number;

		/** Executes the expression that was previously parsed by `parse` and returns the result. Before you use the returned object, you should check if the method failed by calling `has_execute_failed`.

		 If you defined input variables in `parse`, you can specify their values in the inputs array, in the same order. */
		//@ts-ignore
		execute(inputs: any[] = [  ], base_instance: Object = null, show_error: boolean = true) : any;

		/** Returns `true` if `execute` has failed. */
		has_execute_failed() : boolean;

		/** Returns the error text if `parse` has failed. */
		get_error_text() : string;
	}
	namespace Expression {
	}

	/** Enable OpenGL ES external texture extension.
	 Enable support for the OpenGL ES external texture extension as defined by `url=https://www.khronos.org/registry/OpenGL/extensions/OES/OES_EGL_image_external.txt`OES_EGL_image_external`/url`.

	 **Note:** This is only supported for Android platforms. */
	class ExternalTexture extends Texture {

		/** External texture size. */
		size: Vector2;

		/**  */
		flags: number;

		/** Returns the external texture name. */
		get_external_texture_id() : number;

		/** Getter of `size` property */
		get_size() : Vector2;

		/** Setter of `size` property */
		set_size(p_value: Vector2) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace ExternalTexture {
	}

	/** Type to handle file reading and writing operations.
	 File type. This is used to permanently store data into the user device's file system and to read from it. This can be used to store game save data or player configuration files, for example.

	 Here's a sample on how to write and read from a file:

	 ```gdscript
	 func save(content):
	     var file = File.new()
	     file.open("user://save_game.dat", File.WRITE)
	     file.store_string(content)
	     file.close()
	 
	 func load():
	     var file = File.new()
	     file.open("user://save_game.dat", File.READ)
	     var content = file.get_as_text()
	     file.close()
	     return content
	 ``` */
	class File extends Reference {

		/** If `true`, the file's endianness is swapped. Use this if you're dealing with files written on big-endian machines.

		 **Note:** This is about the file format, not CPU type. This is always reset to `false` whenever you open the file. */
		endian_swap: boolean;

		/** Opens an encrypted file in write or read mode. You need to pass a binary key to encrypt/decrypt it. */
		open_encrypted(path: string, mode_flags: File.ModeFlags, key: PoolByteArray) : number;

		/** Opens an encrypted file in write or read mode. You need to pass a password to encrypt/decrypt it. */
		open_encrypted_with_pass(path: string, mode_flags: File.ModeFlags, pass: string) : number;

		/** Opens a compressed file for reading or writing. */
		//@ts-ignore
		open_compressed(path: string, mode_flags: File.ModeFlags, compression_mode: File.CompressionMode = 0) : number;

		/** Opens the file for writing or reading, depending on the flags. */
		open(path: string, flags: File.ModeFlags) : number;

		/** Closes the currently opened file. */
		close() : void;

		/** Returns the path as a `String` for the current open file. */
		get_path() : string;

		/** Returns the absolute path as a `String` for the current open file. */
		get_path_absolute() : string;

		/** Returns `true` if the file is currently opened. */
		is_open() : boolean;

		/** Changes the file reading/writing cursor to the specified position (in bytes from the beginning of the file). */
		seek(position: number) : void;

		/** Changes the file reading/writing cursor to the specified position (in bytes from the end of the file).

		 **Note:** This is an offset, so you should use negative numbers or the cursor will be at the end of the file. */
		//@ts-ignore
		seek_end(position: number = 0) : void;

		/** Returns the file cursor's position. */
		get_position() : number;

		/** Returns the size of the file in bytes. */
		get_len() : number;

		/** Returns `true` if the file cursor has read past the end of the file.

		 **Note:** This function will still return `false` while at the end of the file and only activates when reading past it. This can be confusing but it conforms to how low-level file access works in all operating systems. There is always `get_len` and `get_position` to implement a custom logic. */
		eof_reached() : boolean;

		/** Returns the next 8 bits from the file as an integer. See `store_8` for details on what values can be stored and retrieved this way. */
		get_8() : number;

		/** Returns the next 16 bits from the file as an integer. See `store_16` for details on what values can be stored and retrieved this way. */
		get_16() : number;

		/** Returns the next 32 bits from the file as an integer. See `store_32` for details on what values can be stored and retrieved this way. */
		get_32() : number;

		/** Returns the next 64 bits from the file as an integer. See `store_64` for details on what values can be stored and retrieved this way. */
		get_64() : number;

		/** Returns the next 32 bits from the file as a floating-point number. */
		get_float() : number;

		/** Returns the next 64 bits from the file as a floating-point number. */
		get_double() : number;

		/** Returns the next bits from the file as a floating-point number. */
		get_real() : number;

		/** Returns next `len` bytes of the file as a `PoolByteArray`. */
		get_buffer(len: number) : PoolByteArray;

		/** Returns the next line of the file as a `String`.

		 Text is interpreted as being UTF-8 encoded. */
		get_line() : string;

		/** Returns the next value of the file in CSV (Comma-Separated Values) format. You can pass a different delimiter `delim` to use other than the default `","` (comma). This delimiter must be one-character long.

		 Text is interpreted as being UTF-8 encoded. */
		//@ts-ignore
		get_csv_line(delim: string = ",") : PoolStringArray;

		/** Returns the whole file as a `String`.

		 Text is interpreted as being UTF-8 encoded. */
		get_as_text() : string;

		/** Returns an MD5 String representing the file at the given path or an empty `String` on failure. */
		get_md5(path: string) : string;

		/** Returns a SHA-256 `String` representing the file at the given path or an empty `String` on failure. */
		get_sha256(path: string) : string;

		/** Returns the last error that happened when trying to perform operations. Compare with the `ERR_FILE_*` constants from `Error`. */
		get_error() : number;

		/** Returns the next `Variant` value from the file. If `allow_objects` is `true`, decoding objects is allowed.

		 **Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution. */
		//@ts-ignore
		get_var(allow_objects: boolean = false) : any;

		/** Stores an integer as 8 bits in the file.

		 **Note:** The `value` should lie in the interval ``0, 255``. Any other value will overflow and wrap around.

		 To store a signed integer, use `store_64`, or convert it manually (see `store_16` for an example). */
		store_8(value: number) : void;

		/** Stores an integer as 16 bits in the file.

		 **Note:** The `value` should lie in the interval ``0, 2^16 - 1``. Any other value will overflow and wrap around.

		 To store a signed integer, use `store_64` or store a signed integer from the interval ``-2^15, 2^15 - 1`` (i.e. keeping one bit for the signedness) and compute its sign manually when reading. For example:

		 ```gdscript
		 const MAX_15B = 1 << 15
		 const MAX_16B = 1 << 16
		 
		 func unsigned16_to_signed(unsigned):
		     return (unsigned + MAX_15B) % MAX_16B - MAX_15B
		 
		 func _ready():
		     var f = File.new()
		     f.open("user://file.dat", File.WRITE_READ)
		     f.store_16(-42) # This wraps around and stores 65494 (2^16 - 42).
		     f.store_16(121) # In bounds, will store 121.
		     f.seek(0) # Go back to start to read the stored value.
		     var read1 = f.get_16() # 65494
		     var read2 = f.get_16() # 121
		     var converted1 = unsigned16_to_signed(read1) # -42
		     var converted2 = unsigned16_to_signed(read2) # 121
		 ``` */
		store_16(value: number) : void;

		/** Stores an integer as 32 bits in the file.

		 **Note:** The `value` should lie in the interval ``0, 2^32 - 1``. Any other value will overflow and wrap around.

		 To store a signed integer, use `store_64`, or convert it manually (see `store_16` for an example). */
		store_32(value: number) : void;

		/** Stores an integer as 64 bits in the file.

		 **Note:** The `value` must lie in the interval ``-2^63, 2^63 - 1`` (i.e. be a valid `int` value). */
		store_64(value: number) : void;

		/** Stores a floating-point number as 32 bits in the file. */
		store_float(value: number) : void;

		/** Stores a floating-point number as 64 bits in the file. */
		store_double(value: number) : void;

		/** Stores a floating-point number in the file. */
		store_real(value: number) : void;

		/** Stores the given array of bytes in the file. */
		store_buffer(buffer: PoolByteArray) : void;

		/** Stores the given `String` as a line in the file.

		 Text will be encoded as UTF-8. */
		store_line(line: string) : void;

		/** Store the given `PoolStringArray` in the file as a line formatted in the CSV (Comma-Separated Values) format. You can pass a different delimiter `delim` to use other than the default `","` (comma). This delimiter must be one-character long.

		 Text will be encoded as UTF-8. */
		//@ts-ignore
		store_csv_line(values: PoolStringArray, delim: string = ",") : void;

		/** Stores the given `String` in the file.

		 Text will be encoded as UTF-8. */
		store_string(p_string: string) : void;

		/** Stores any Variant value in the file. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code). */
		//@ts-ignore
		store_var(value: any, full_objects: boolean = false) : void;

		/** Stores the given `String` as a line in the file in Pascal format (i.e. also store the length of the string).

		 Text will be encoded as UTF-8. */
		store_pascal_string(p_string: string) : void;

		/** Returns a `String` saved in Pascal format from the file.

		 Text is interpreted as being UTF-8 encoded. */
		get_pascal_string() : string;

		/** Returns `true` if the file exists in the given path.

		 **Note:** Many resources types are imported (e.g. textures or sound files), and that their source asset will not be included in the exported game, as only the imported version is used (in the `res://.import` folder). To check for the existence of such resources while taking into account the remapping to their imported location, use `ResourceLoader.exists`. Typically, using `File.file_exists` on an imported resource would work while you are developing in the editor (the source asset is present in `res://`, but fail when exported). */
		file_exists(path: string) : boolean;

		/** Returns the last time the `file` was modified in unix timestamp format or returns a `String` "ERROR IN `file`". This unix timestamp can be converted to datetime by using `OS.get_datetime_from_unix_time`. */
		get_modified_time(file: string) : number;

		/** Getter of `endian_swap` property */
		get_endian_swap() : boolean;

		/** Setter of `endian_swap` property */
		set_endian_swap(p_value: boolean) : void;
	}
	namespace File {
		enum CompressionMode {
			/** Uses the `url=http://fastlz.org/`FastLZ`/url` compression method. */
			COMPRESSION_FASTLZ = 0,
			/** Uses the `url=https://en.wikipedia.org/wiki/DEFLATE`DEFLATE`/url` compression method. */
			COMPRESSION_DEFLATE = 1,
			/** Uses the `url=https://facebook.github.io/zstd/`Zstandard`/url` compression method. */
			COMPRESSION_ZSTD = 2,
			/** Uses the `url=https://www.gzip.org/`gzip`/url` compression method. */
			COMPRESSION_GZIP = 3,
		}
		enum ModeFlags {
			/** Opens the file for read operations. */
			READ = 1,
			/** Opens the file for write operations. Create it if the file does not exist and truncate if it exists. */
			WRITE = 2,
			/** Opens the file for read and write operations. Does not truncate the file. */
			READ_WRITE = 3,
			/** Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists. */
			WRITE_READ = 7,
		}

		/** Opens the file for read operations. */
		const READ: ModeFlags.READ;

		/** Opens the file for write operations. Create it if the file does not exist and truncate if it exists. */
		const WRITE: ModeFlags.WRITE;

		/** Opens the file for read and write operations. Does not truncate the file. */
		const READ_WRITE: ModeFlags.READ_WRITE;

		/** Opens the file for read and write operations. Create it if the file does not exist and truncate if it exists. */
		const WRITE_READ: ModeFlags.WRITE_READ;

		/** Uses the `url=http://fastlz.org/`FastLZ`/url` compression method. */
		const COMPRESSION_FASTLZ: CompressionMode.COMPRESSION_FASTLZ;

		/** Uses the `url=https://en.wikipedia.org/wiki/DEFLATE`DEFLATE`/url` compression method. */
		const COMPRESSION_DEFLATE: CompressionMode.COMPRESSION_DEFLATE;

		/** Uses the `url=https://facebook.github.io/zstd/`Zstandard`/url` compression method. */
		const COMPRESSION_ZSTD: CompressionMode.COMPRESSION_ZSTD;

		/** Uses the `url=https://www.gzip.org/`gzip`/url` compression method. */
		const COMPRESSION_GZIP: CompressionMode.COMPRESSION_GZIP;
	}

	/** Dialog for selecting files or directories in the filesystem.
	 FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks. The FileDialog automatically sets its window title according to the `mode`. If you want to use a custom title, disable this by setting `mode_overrides_title` to `false`. */
	class FileDialog extends ConfirmationDialog {

		/** If `true`, changing the `Mode` property will set the window title accordingly (e.g. setting mode to `MODE_OPEN_FILE` will change the window title to "Open a File"). */
		mode_overrides_title: boolean;

		/** The dialog's open or save mode, which affects the selection behavior. See enum `Mode` constants. */
		mode: number;

		/** The file system access scope. See enum `Access` constants. */
		access: number;

		/** The available file type filters. For example, this shows only `.png` and `.gd` files: `set_filters(PoolStringArray(`"*.png ; PNG Images","*.gd ; GDScript Files"`))`. */
		filters: PoolStringArray;

		/** If `true`, the dialog will show hidden files. */
		show_hidden_files: boolean;

		/** The current working directory of the file dialog. */
		current_dir: string;

		/** The currently selected file of the file dialog. */
		current_file: string;

		/** The currently selected file path of the file dialog. */
		current_path: string;

		/**  */
		dialog_hide_on_ok: boolean;

		/**  */
		window_title: string;

		/** Clear all the added filters in the dialog. */
		clear_filters() : void;

		/** Adds `filter` as a custom filter; `filter` should be of the form `"filename.extension ; Description"`. For example, `"*.png ; PNG Images"`. */
		add_filter(filter: string) : void;

		/** Returns the vertical box container of the dialog, custom controls can be added to it. */
		get_vbox() : VBoxContainer;

		/** Returns the LineEdit for the selected file. */
		get_line_edit() : LineEdit;

		/** Clear currently selected items in the dialog. */
		deselect_items() : void;

		/** Invalidate and update the current dialog content list. */
		invalidate() : void;

		/** Getter of `mode_overrides_title` property */
		is_mode_overriding_title() : boolean;

		/** Setter of `mode_overrides_title` property */
		set_mode_overrides_title(p_value: boolean) : void;

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `access` property */
		get_access() : number;

		/** Setter of `access` property */
		set_access(p_value: number) : void;

		/** Getter of `filters` property */
		get_filters() : PoolStringArray;

		/** Setter of `filters` property */
		set_filters(p_value: PoolStringArray) : void;

		/** Getter of `show_hidden_files` property */
		is_showing_hidden_files() : boolean;

		/** Setter of `show_hidden_files` property */
		set_show_hidden_files(p_value: boolean) : void;

		/** Getter of `current_dir` property */
		get_current_dir() : string;

		/** Setter of `current_dir` property */
		set_current_dir(p_value: string) : void;

		/** Getter of `current_file` property */
		get_current_file() : string;

		/** Setter of `current_file` property */
		set_current_file(p_value: string) : void;

		/** Getter of `current_path` property */
		get_current_path() : string;

		/** Setter of `current_path` property */
		set_current_path(p_value: string) : void;

		/** Getter of `dialog_hide_on_ok` property */
		get_hide_on_ok() : boolean;

		/** Setter of `dialog_hide_on_ok` property */
		set_hide_on_ok(p_value: boolean) : void;

		/** Getter of `window_title` property */
		get_title() : string;

		/** Setter of `window_title` property */
		set_title(p_value: string) : void;
	}
	namespace FileDialog {

		/** Emitted when the user selects multiple files. */
		const files_selected: 'files_selected';

		/** Emitted when the user selects a directory. */
		const dir_selected: 'dir_selected';

		/** Emitted when the user selects a file by double-clicking it or pressing the **OK** button. */
		const file_selected: 'file_selected';
		enum Access {
			/** The dialog only allows accessing files under the `Resource` path (`res://`). */
			ACCESS_RESOURCES = 0,
			/** The dialog only allows accessing files under user data path (`user://`). */
			ACCESS_USERDATA = 1,
			/** The dialog allows accessing files on the whole file system. */
			ACCESS_FILESYSTEM = 2,
		}
		enum Mode {
			/** The dialog allows selecting one, and only one file. */
			MODE_OPEN_FILE = 0,
			/** The dialog allows selecting multiple files. */
			MODE_OPEN_FILES = 1,
			/** The dialog only allows selecting a directory, disallowing the selection of any file. */
			MODE_OPEN_DIR = 2,
			/** The dialog allows selecting one file or directory. */
			MODE_OPEN_ANY = 3,
			/** The dialog will warn when a file exists. */
			MODE_SAVE_FILE = 4,
		}

		/** The dialog allows selecting one, and only one file. */
		const MODE_OPEN_FILE: Mode.MODE_OPEN_FILE;

		/** The dialog allows selecting multiple files. */
		const MODE_OPEN_FILES: Mode.MODE_OPEN_FILES;

		/** The dialog only allows selecting a directory, disallowing the selection of any file. */
		const MODE_OPEN_DIR: Mode.MODE_OPEN_DIR;

		/** The dialog allows selecting one file or directory. */
		const MODE_OPEN_ANY: Mode.MODE_OPEN_ANY;

		/** The dialog will warn when a file exists. */
		const MODE_SAVE_FILE: Mode.MODE_SAVE_FILE;

		/** The dialog only allows accessing files under the `Resource` path (`res://`). */
		const ACCESS_RESOURCES: Access.ACCESS_RESOURCES;

		/** The dialog only allows accessing files under user data path (`user://`). */
		const ACCESS_USERDATA: Access.ACCESS_USERDATA;

		/** The dialog allows accessing files on the whole file system. */
		const ACCESS_FILESYSTEM: Access.ACCESS_FILESYSTEM;
	}

	/** 
	  */
	class FileSystemDock extends VBoxContainer {

		/**  */
		get_drag_data_fw(arg0: Vector2, arg1: Control) : any;

		/**  */
		can_drop_data_fw(arg0: Vector2, arg1: any, arg2: Control) : boolean;

		/**  */
		drop_data_fw(arg0: Vector2, arg1: any, arg2: Control) : void;

		/**  */
		navigate_to_path(arg0: string) : void;
	}
	namespace FileSystemDock {

		/**  */
		const display_mode_changed: 'display_mode_changed';

		/**  */
		const inherit: 'inherit';

		/**  */
		const files_moved: 'files_moved';

		/**  */
		const folder_removed: 'folder_removed';

		/**  */
		const instance: 'instance';

		/**  */
		const folder_moved: 'folder_moved';

		/**  */
		const file_removed: 'file_removed';
	}

	/** Internationalized font and text drawing support.
	 Font contains a Unicode-compatible character set, as well as the ability to draw it with variable width, ascent, descent and kerning. For creating fonts from TTF files (or other font formats), see the editor support for fonts. */
	class Font extends Resource {

		/** Draw `string` into a canvas item using the font at a given position, with `modulate` color, and optionally clipping the width. `position` specifies the baseline, not the top. To draw from the top, *ascent* must be added to the Y axis. */
		//@ts-ignore
		draw(canvas_item: RID, position: Vector2, p_string: string, modulate: Color = Color( 1, 1, 1, 1 ), clip_w: number = -1, outline_modulate: Color = Color( 1, 1, 1, 1 )) : void;

		/** Returns the font ascent (number of pixels above the baseline). */
		get_ascent() : number;

		/** Returns the font descent (number of pixels below the baseline). */
		get_descent() : number;

		/** Returns the total font height (ascent plus descent) in pixels. */
		get_height() : number;

		/**  */
		is_distance_field_hint() : boolean;

		/** Returns the size of a character, optionally taking kerning into account if the next character is provided. */
		//@ts-ignore
		get_char_size(char: number, next: number = 0) : Vector2;

		/** Returns the size of a string, taking kerning and advance into account. */
		get_string_size(p_string: string) : Vector2;

		/** Returns the size that the string would have with word wrapping enabled with a fixed `width`. */
		get_wordwrap_string_size(p_string: string, width: number) : Vector2;

		/** Returns `true` if the font has an outline. */
		has_outline() : boolean;

		/** Draw character `char` into a canvas item using the font at a given position, with `modulate` color, and optionally kerning if `next` is passed. clipping the width. `position` specifies the baseline, not the top. To draw from the top, *ascent* must be added to the Y axis. The width used by the character is returned, making this function useful for drawing strings character by character. */
		//@ts-ignore
		draw_char(canvas_item: RID, position: Vector2, char: number, next: number = -1, modulate: Color = Color( 1, 1, 1, 1 ), outline: boolean = false) : number;

		/** After editing a font (changing size, ascent, char rects, etc.). Call this function to propagate changes to controls that might use it. */
		update_changes() : void;
	}
	namespace Font {
	}

	/** Reference to a function in an object.
	 In GDScript, functions are not *first-class objects*. This means it is impossible to store them directly as variables, return them from another function, or pass them as arguments.

	 However, by creating a `FuncRef` using the `@GDScript.funcref` function, a reference to a function in a given object can be created, passed around and called. */
	class FuncRef extends Reference {

		/** Calls the referenced function previously set by `set_function` or `@GDScript.funcref`. */
		call_func(...args) : any;

		/** Calls the referenced function previously set by `set_function` or `@GDScript.funcref`. Contrarily to `call_func`, this method does not support a variable number of arguments but expects all parameters to be passed via a single `Array`. */
		call_funcv(arg_array: any[]) : any;

		/** The object containing the referenced function. This object must be of a type actually inheriting from `Object`, not a built-in type such as `int`, `Vector2` or `Dictionary`. */
		set_instance(instance: Object) : void;

		/** The name of the referenced function to call on the object, without parentheses or any parameters. */
		set_function(name: string) : void;

		/** Returns whether the object still exists and has the function assigned. */
		is_valid() : boolean;
	}
	namespace FuncRef {
	}

	/** 
	  */
	class GDNative extends Reference {

		/**  */
		library: GDNativeLibrary;

		/**  */
		initialize() : boolean;

		/**  */
		terminate() : boolean;

		/**  */
		call_native(calling_type: string, procedure_name: string, p_arguments: any[]) : any;

		/** Getter of `library` property */
		get_library() : GDNativeLibrary;

		/** Setter of `library` property */
		set_library(p_value: GDNativeLibrary) : void;
	}
	namespace GDNative {
	}

	/** An external library containing functions or script classes to use in Godot.
	 A GDNative library can implement `NativeScript`s, global functions to call with the `GDNative` class, or low-level engine extensions through interfaces such as `ARVRInterfaceGDNative`. The library must be compiled for each platform and architecture that the project will run on. */
	class GDNativeLibrary extends Resource {

		/** This resource in INI-style `ConfigFile` format, as in `.gdnlib` files. */
		config_file: ConfigFile;

		/** If `true`, Godot loads only one copy of the library and each script that references the library will share static data like static or global variables.

		 If `false`, Godot loads a separate copy of the library into memory for each script that references it. */
		load_once: boolean;

		/** If `true`, Godot loads the library at startup rather than the first time a script uses the library, calling `{prefix}gdnative_singleton` after initializing the library (where `{prefix}` is the value of `symbol_prefix`). The library remains loaded as long as Godot is running.

		 **Note:** A singleton library cannot be `reloadable`. */
		singleton: boolean;

		/** The prefix this library's entry point functions begin with. For example, a GDNativeLibrary would declare its `gdnative_init` function as `godot_gdnative_init` by default.

		 On platforms that require statically linking libraries (currently only iOS), each library must have a different `symbol_prefix`. */
		symbol_prefix: string;

		/** If `true`, the editor will temporarily unload the library whenever the user switches away from the editor window, allowing the user to recompile the library without restarting Godot.

		 **Note:** If the library defines tool scripts that run inside the editor, `reloadable` must be `false`. Otherwise, the editor will attempt to unload the tool scripts while they're in use and crash. */
		reloadable: boolean;

		/** Returns the path to the dynamic library file for the current platform and architecture. */
		get_current_library_path() : string;

		/** Returns paths to all dependency libraries for the current platform and architecture. */
		get_current_dependencies() : PoolStringArray;

		/** Getter of `config_file` property */
		get_config_file() : ConfigFile;

		/** Setter of `config_file` property */
		set_config_file(p_value: ConfigFile) : void;

		/** Getter of `load_once` property */
		should_load_once() : boolean;

		/** Setter of `load_once` property */
		set_load_once(p_value: boolean) : void;

		/** Getter of `singleton` property */
		is_singleton() : boolean;

		/** Setter of `singleton` property */
		set_singleton(p_value: boolean) : void;

		/** Getter of `symbol_prefix` property */
		get_symbol_prefix() : string;

		/** Setter of `symbol_prefix` property */
		set_symbol_prefix(p_value: string) : void;

		/** Getter of `reloadable` property */
		is_reloadable() : boolean;

		/** Setter of `reloadable` property */
		set_reloadable(p_value: boolean) : void;
	}
	namespace GDNativeLibrary {
	}

	/** A script implemented in the GDScript programming language.
	 A script implemented in the GDScript programming language. The script extends the functionality of all objects that instance it.

	 `new` creates a new instance of the script. `Object.set_script` extends an existing object, if that object's class matches one of the script's base classes. */
	class GDScript extends Script {

		/** Returns a new instance of the script.

		 For example:

		 ```gdscript
		 var MyClass = load("myclass.gd")
		 var instance = MyClass.new()
		 assert(instance.get_script() == MyClass)
		 ``` */
		'new'(...args) : any;

		/** Returns byte code for the script source code. */
		get_as_byte_code() : PoolByteArray;
	}
	namespace GDScript {
	}

	/** State of a function call after yielding.
	 Calling `@GDScript.yield` within a function will cause that function to yield and return its current state as an object of this type. The yielded function call can then be resumed later by calling `resume` on this state object. */
	class GDScriptFunctionState extends Reference {

		/** Resume execution of the yielded function call.

		 If handed an argument, return the argument from the `@GDScript.yield` call in the yielded function call. You can pass e.g. an `Array` to hand multiple arguments.

		 This function returns what the resumed function call returns, possibly another function state if yielded again. */
		//@ts-ignore
		resume(arg: any = null) : any;

		/** Check whether the function call may be resumed. This is not the case if the function state was already resumed.

		 If `extended_check` is enabled, it also checks if the associated script and object still exist. The extended check is done in debug mode as part of `GDScriptFunctionState.resume`, but you can use this if you know you may be trying to resume without knowing for sure the object and/or script have survived up to that point. */
		//@ts-ignore
		is_valid(extended_check: boolean = false) : boolean;
	}
	namespace GDScriptFunctionState {

		/**  */
		const completed: 'completed';
	}

	/** Real-time global illumination (GI) probe.
	 `GIProbe`s are used to provide high-quality real-time indirect light to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. `GIProbe`s need to be baked before using, however, once baked, dynamic objects will receive light from them. Further, lights can be fully dynamic or baked.

	 Having `GIProbe`s in a scene can be expensive, the quality of the probe can be turned down in exchange for better performance in the `ProjectSettings` using `ProjectSettings.rendering/quality/voxel_cone_tracing/high_quality`. */
	class GIProbe extends VisualInstance {

		/** Number of times to subdivide the grid that the `GIProbe` operates on. A higher number results in finer detail and thus higher visual quality, while lower numbers result in better performance. */
		subdiv: number;

		/** The size of the area covered by the `GIProbe`. If you make the extents larger without increasing the subdivisions with `subdiv`, the size of each cell will increase and result in lower detailed lighting. */
		extents: Vector3;

		/** The maximum brightness that the `GIProbe` will recognize. Brightness will be scaled within this range. */
		dynamic_range: number;

		/** Energy multiplier. Makes the lighting contribution from the `GIProbe` brighter. */
		energy: number;

		/** How much light propagates through the probe internally. A higher value allows light to spread further. */
		propagation: number;

		/** Offsets the lookup of the light contribution from the `GIProbe`. This can be used to avoid self-shadowing, but may introduce light leaking at higher values. This and `normal_bias` should be played around with to minimize self-shadowing and light leaking.

		 **Note:** `bias` should usually be above 1.0 as that is the size of the voxels. */
		bias: number;

		/** Offsets the lookup into the `GIProbe` based on the object's normal direction. Can be used to reduce some self-shadowing artifacts. */
		normal_bias: number;

		/** If `true`, ignores the sky contribution when calculating lighting. */
		interior: boolean;

		/** If `true`, the data for this `GIProbe` will be compressed. Compression saves space, but results in far worse visual quality. */
		compress: boolean;

		/** The `GIProbeData` resource that holds the data for this `GIProbe`. */
		data: GIProbeData;

		/** Bakes the effect from all `GeometryInstance`s marked with `GeometryInstance.use_in_baked_light` and `Light`s marked with either `Light.BAKE_INDIRECT` or `Light.BAKE_ALL`. If `create_visual_debug` is `true`, after baking the light, this will generate a `MultiMesh` that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the `GIProbe`'s data and debug any issues that may be occurring. */
		//@ts-ignore
		bake(from_node: Node = null, create_visual_debug: boolean = false) : void;

		/** Calls `bake` with `create_visual_debug` enabled. */
		debug_bake() : void;

		/** Getter of `subdiv` property */
		get_subdiv() : number;

		/** Setter of `subdiv` property */
		set_subdiv(p_value: number) : void;

		/** Getter of `extents` property */
		get_extents() : Vector3;

		/** Setter of `extents` property */
		set_extents(p_value: Vector3) : void;

		/** Getter of `dynamic_range` property */
		get_dynamic_range() : number;

		/** Setter of `dynamic_range` property */
		set_dynamic_range(p_value: number) : void;

		/** Getter of `energy` property */
		get_energy() : number;

		/** Setter of `energy` property */
		set_energy(p_value: number) : void;

		/** Getter of `propagation` property */
		get_propagation() : number;

		/** Setter of `propagation` property */
		set_propagation(p_value: number) : void;

		/** Getter of `bias` property */
		get_bias() : number;

		/** Setter of `bias` property */
		set_bias(p_value: number) : void;

		/** Getter of `normal_bias` property */
		get_normal_bias() : number;

		/** Setter of `normal_bias` property */
		set_normal_bias(p_value: number) : void;

		/** Getter of `interior` property */
		is_interior() : boolean;

		/** Setter of `interior` property */
		set_interior(p_value: boolean) : void;

		/** Getter of `compress` property */
		is_compressed() : boolean;

		/** Setter of `compress` property */
		set_compress(p_value: boolean) : void;

		/** Getter of `data` property */
		get_probe_data() : GIProbeData;

		/** Setter of `data` property */
		set_probe_data(p_value: GIProbeData) : void;
	}
	namespace GIProbe {
		enum Subdiv {
			/** Use 64 subdivisions. This is the lowest quality setting, but the fastest. Use it if you can, but especially use it on lower-end hardware. */
			SUBDIV_64 = 0,
			/** Use 128 subdivisions. This is the default quality setting. */
			SUBDIV_128 = 1,
			/** Use 256 subdivisions. */
			SUBDIV_256 = 2,
			/** Use 512 subdivisions. This is the highest quality setting, but the slowest. On lower-end hardware this could cause the GPU to stall. */
			SUBDIV_512 = 3,
			/** Represents the size of the `Subdiv` enum. */
			SUBDIV_MAX = 4,
		}

		/** Use 64 subdivisions. This is the lowest quality setting, but the fastest. Use it if you can, but especially use it on lower-end hardware. */
		const SUBDIV_64: Subdiv.SUBDIV_64;

		/** Use 128 subdivisions. This is the default quality setting. */
		const SUBDIV_128: Subdiv.SUBDIV_128;

		/** Use 256 subdivisions. */
		const SUBDIV_256: Subdiv.SUBDIV_256;

		/** Use 512 subdivisions. This is the highest quality setting, but the slowest. On lower-end hardware this could cause the GPU to stall. */
		const SUBDIV_512: Subdiv.SUBDIV_512;

		/** Represents the size of the `Subdiv` enum. */
		const SUBDIV_MAX: Subdiv.SUBDIV_MAX;
	}

	/** 
	  */
	class GIProbeData extends Resource {

		/**  */
		bounds: AABB;

		/**  */
		cell_size: number;

		/**  */
		to_cell_xform: Transform;

		/**  */
		dynamic_data: PoolIntArray;

		/**  */
		dynamic_range: number;

		/**  */
		energy: number;

		/**  */
		bias: number;

		/**  */
		normal_bias: number;

		/**  */
		propagation: number;

		/**  */
		interior: boolean;

		/**  */
		compress: boolean;

		/** Getter of `bounds` property */
		get_bounds() : AABB;

		/** Setter of `bounds` property */
		set_bounds(p_value: AABB) : void;

		/** Getter of `cell_size` property */
		get_cell_size() : number;

		/** Setter of `cell_size` property */
		set_cell_size(p_value: number) : void;

		/** Getter of `to_cell_xform` property */
		get_to_cell_xform() : Transform;

		/** Setter of `to_cell_xform` property */
		set_to_cell_xform(p_value: Transform) : void;

		/** Getter of `dynamic_data` property */
		get_dynamic_data() : PoolIntArray;

		/** Setter of `dynamic_data` property */
		set_dynamic_data(p_value: PoolIntArray) : void;

		/** Getter of `dynamic_range` property */
		get_dynamic_range() : number;

		/** Setter of `dynamic_range` property */
		set_dynamic_range(p_value: number) : void;

		/** Getter of `energy` property */
		get_energy() : number;

		/** Setter of `energy` property */
		set_energy(p_value: number) : void;

		/** Getter of `bias` property */
		get_bias() : number;

		/** Setter of `bias` property */
		set_bias(p_value: number) : void;

		/** Getter of `normal_bias` property */
		get_normal_bias() : number;

		/** Setter of `normal_bias` property */
		set_normal_bias(p_value: number) : void;

		/** Getter of `propagation` property */
		get_propagation() : number;

		/** Setter of `propagation` property */
		set_propagation(p_value: number) : void;

		/** Getter of `interior` property */
		is_interior() : boolean;

		/** Setter of `interior` property */
		set_interior(p_value: boolean) : void;

		/** Getter of `compress` property */
		is_compressed() : boolean;

		/** Setter of `compress` property */
		set_compress(p_value: boolean) : void;
	}
	namespace GIProbeData {
	}

	/** The generic 6-degrees-of-freedom joint can implement a variety of joint types by locking certain axes' rotation or translation.
	 The first 3 DOF axes are linear axes, which represent translation of Bodies, and the latter 3 DOF axes represent the angular motion. Each axis can be either locked, or limited. */
	class Generic6DOFJoint extends Joint {

		/** If `true`, the linear motion across the X axis is limited. */
		'linear_limit_x/enabled': boolean;

		/** The maximum difference between the pivot points' X axis. */
		'linear_limit_x/upper_distance': number;

		/** The minimum difference between the pivot points' X axis. */
		'linear_limit_x/lower_distance': number;

		/** A factor applied to the movement across the X axis. The lower, the slower the movement. */
		'linear_limit_x/softness': number;

		/** The amount of restitution on the X axis movement. The lower, the more momentum gets lost. */
		'linear_limit_x/restitution': number;

		/** The amount of damping that happens at the X motion. */
		'linear_limit_x/damping': number;

		/** If `true`, then there is a linear motor on the X axis. It will attempt to reach the target velocity while staying within the force limits. */
		'linear_motor_x/enabled': boolean;

		/** The speed that the linear motor will attempt to reach on the X axis. */
		'linear_motor_x/target_velocity': number;

		/** The maximum force the linear motor can apply on the X axis while trying to reach the target velocity. */
		'linear_motor_x/force_limit': number;

		/**  */
		'linear_spring_x/enabled': boolean;

		/**  */
		'linear_spring_x/stiffness': number;

		/**  */
		'linear_spring_x/damping': number;

		/**  */
		'linear_spring_x/equilibrium_point': number;

		/** If `true`, rotation across the X axis is limited. */
		'angular_limit_x/enabled': boolean;

		/** The minimum rotation in positive direction to break loose and rotate around the X axis. */
		'angular_limit_x/upper_angle': number;

		/** The minimum rotation in negative direction to break loose and rotate around the X axis. */
		'angular_limit_x/lower_angle': number;

		/** The speed of all rotations across the X axis. */
		'angular_limit_x/softness': number;

		/** The amount of rotational restitution across the X axis. The lower, the more restitution occurs. */
		'angular_limit_x/restitution': number;

		/** The amount of rotational damping across the X axis.

		 The lower, the longer an impulse from one side takes to travel to the other side. */
		'angular_limit_x/damping': number;

		/** The maximum amount of force that can occur, when rotating around the X axis. */
		'angular_limit_x/force_limit': number;

		/** When rotating across the X axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
		'angular_limit_x/erp': number;

		/** If `true`, a rotating motor at the X axis is enabled. */
		'angular_motor_x/enabled': boolean;

		/** Target speed for the motor at the X axis. */
		'angular_motor_x/target_velocity': number;

		/** Maximum acceleration for the motor at the X axis. */
		'angular_motor_x/force_limit': number;

		/**  */
		'angular_spring_x/enabled': boolean;

		/**  */
		'angular_spring_x/stiffness': number;

		/**  */
		'angular_spring_x/damping': number;

		/**  */
		'angular_spring_x/equilibrium_point': number;

		/** If `true`, the linear motion across the Y axis is limited. */
		'linear_limit_y/enabled': boolean;

		/** The maximum difference between the pivot points' Y axis. */
		'linear_limit_y/upper_distance': number;

		/** The minimum difference between the pivot points' Y axis. */
		'linear_limit_y/lower_distance': number;

		/** A factor applied to the movement across the Y axis. The lower, the slower the movement. */
		'linear_limit_y/softness': number;

		/** The amount of restitution on the Y axis movement. The lower, the more momentum gets lost. */
		'linear_limit_y/restitution': number;

		/** The amount of damping that happens at the Y motion. */
		'linear_limit_y/damping': number;

		/** If `true`, then there is a linear motor on the Y axis. It will attempt to reach the target velocity while staying within the force limits. */
		'linear_motor_y/enabled': boolean;

		/** The speed that the linear motor will attempt to reach on the Y axis. */
		'linear_motor_y/target_velocity': number;

		/** The maximum force the linear motor can apply on the Y axis while trying to reach the target velocity. */
		'linear_motor_y/force_limit': number;

		/**  */
		'linear_spring_y/enabled': boolean;

		/**  */
		'linear_spring_y/stiffness': number;

		/**  */
		'linear_spring_y/damping': number;

		/**  */
		'linear_spring_y/equilibrium_point': number;

		/** If `true`, rotation across the Y axis is limited. */
		'angular_limit_y/enabled': boolean;

		/** The minimum rotation in positive direction to break loose and rotate around the Y axis. */
		'angular_limit_y/upper_angle': number;

		/** The minimum rotation in negative direction to break loose and rotate around the Y axis. */
		'angular_limit_y/lower_angle': number;

		/** The speed of all rotations across the Y axis. */
		'angular_limit_y/softness': number;

		/** The amount of rotational restitution across the Y axis. The lower, the more restitution occurs. */
		'angular_limit_y/restitution': number;

		/** The amount of rotational damping across the Y axis. The lower, the more dampening occurs. */
		'angular_limit_y/damping': number;

		/** The maximum amount of force that can occur, when rotating around the Y axis. */
		'angular_limit_y/force_limit': number;

		/** When rotating across the Y axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
		'angular_limit_y/erp': number;

		/** If `true`, a rotating motor at the Y axis is enabled. */
		'angular_motor_y/enabled': boolean;

		/** Target speed for the motor at the Y axis. */
		'angular_motor_y/target_velocity': number;

		/** Maximum acceleration for the motor at the Y axis. */
		'angular_motor_y/force_limit': number;

		/**  */
		'angular_spring_y/enabled': boolean;

		/**  */
		'angular_spring_y/stiffness': number;

		/**  */
		'angular_spring_y/damping': number;

		/**  */
		'angular_spring_y/equilibrium_point': number;

		/** If `true`, the linear motion across the Z axis is limited. */
		'linear_limit_z/enabled': boolean;

		/** The maximum difference between the pivot points' Z axis. */
		'linear_limit_z/upper_distance': number;

		/** The minimum difference between the pivot points' Z axis. */
		'linear_limit_z/lower_distance': number;

		/** A factor applied to the movement across the Z axis. The lower, the slower the movement. */
		'linear_limit_z/softness': number;

		/** The amount of restitution on the Z axis movement. The lower, the more momentum gets lost. */
		'linear_limit_z/restitution': number;

		/** The amount of damping that happens at the Z motion. */
		'linear_limit_z/damping': number;

		/** If `true`, then there is a linear motor on the Z axis. It will attempt to reach the target velocity while staying within the force limits. */
		'linear_motor_z/enabled': boolean;

		/** The speed that the linear motor will attempt to reach on the Z axis. */
		'linear_motor_z/target_velocity': number;

		/** The maximum force the linear motor can apply on the Z axis while trying to reach the target velocity. */
		'linear_motor_z/force_limit': number;

		/**  */
		'linear_spring_z/enabled': boolean;

		/**  */
		'linear_spring_z/stiffness': number;

		/**  */
		'linear_spring_z/damping': number;

		/**  */
		'linear_spring_z/equilibrium_point': number;

		/** If `true`, rotation across the Z axis is limited. */
		'angular_limit_z/enabled': boolean;

		/** The minimum rotation in positive direction to break loose and rotate around the Z axis. */
		'angular_limit_z/upper_angle': number;

		/** The minimum rotation in negative direction to break loose and rotate around the Z axis. */
		'angular_limit_z/lower_angle': number;

		/** The speed of all rotations across the Z axis. */
		'angular_limit_z/softness': number;

		/** The amount of rotational restitution across the Z axis. The lower, the more restitution occurs. */
		'angular_limit_z/restitution': number;

		/** The amount of rotational damping across the Z axis. The lower, the more dampening occurs. */
		'angular_limit_z/damping': number;

		/** The maximum amount of force that can occur, when rotating around the Z axis. */
		'angular_limit_z/force_limit': number;

		/** When rotating across the Z axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
		'angular_limit_z/erp': number;

		/** If `true`, a rotating motor at the Z axis is enabled. */
		'angular_motor_z/enabled': boolean;

		/** Target speed for the motor at the Z axis. */
		'angular_motor_z/target_velocity': number;

		/** Maximum acceleration for the motor at the Z axis. */
		'angular_motor_z/force_limit': number;

		/**  */
		'angular_spring_z/enabled': boolean;

		/**  */
		'angular_spring_z/stiffness': number;

		/**  */
		'angular_spring_z/damping': number;

		/**  */
		'angular_spring_z/equilibrium_point': number;

		/**  */
		precision: number;

		/**  */
		set_param_x(param: Generic6DOFJoint.Param, value: number) : void;

		/**  */
		get_param_x(param: Generic6DOFJoint.Param) : number;

		/**  */
		set_param_y(param: Generic6DOFJoint.Param, value: number) : void;

		/**  */
		get_param_y(param: Generic6DOFJoint.Param) : number;

		/**  */
		set_param_z(param: Generic6DOFJoint.Param, value: number) : void;

		/**  */
		get_param_z(param: Generic6DOFJoint.Param) : number;

		/**  */
		set_flag_x(flag: Generic6DOFJoint.Flag, value: boolean) : void;

		/**  */
		get_flag_x(flag: Generic6DOFJoint.Flag) : boolean;

		/**  */
		set_flag_y(flag: Generic6DOFJoint.Flag, value: boolean) : void;

		/**  */
		get_flag_y(flag: Generic6DOFJoint.Flag) : boolean;

		/**  */
		set_flag_z(flag: Generic6DOFJoint.Flag, value: boolean) : void;

		/**  */
		get_flag_z(flag: Generic6DOFJoint.Flag) : boolean;

		/** Getter of `linear_limit_x/enabled` property */
		get_flag_x() : boolean;

		/** Setter of `linear_limit_x/enabled` property */
		set_flag_x(p_value: boolean) : void;

		/** Getter of `linear_limit_x/upper_distance` property */
		get_param_x() : number;

		/** Setter of `linear_limit_x/upper_distance` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_limit_x/lower_distance` property */
		get_param_x() : number;

		/** Setter of `linear_limit_x/lower_distance` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_limit_x/softness` property */
		get_param_x() : number;

		/** Setter of `linear_limit_x/softness` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_limit_x/restitution` property */
		get_param_x() : number;

		/** Setter of `linear_limit_x/restitution` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_limit_x/damping` property */
		get_param_x() : number;

		/** Setter of `linear_limit_x/damping` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_motor_x/enabled` property */
		get_flag_x() : boolean;

		/** Setter of `linear_motor_x/enabled` property */
		set_flag_x(p_value: boolean) : void;

		/** Getter of `linear_motor_x/target_velocity` property */
		get_param_x() : number;

		/** Setter of `linear_motor_x/target_velocity` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_motor_x/force_limit` property */
		get_param_x() : number;

		/** Setter of `linear_motor_x/force_limit` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_spring_x/enabled` property */
		get_flag_x() : boolean;

		/** Setter of `linear_spring_x/enabled` property */
		set_flag_x(p_value: boolean) : void;

		/** Getter of `linear_spring_x/stiffness` property */
		get_param_x() : number;

		/** Setter of `linear_spring_x/stiffness` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_spring_x/damping` property */
		get_param_x() : number;

		/** Setter of `linear_spring_x/damping` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_spring_x/equilibrium_point` property */
		get_param_x() : number;

		/** Setter of `linear_spring_x/equilibrium_point` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_limit_x/enabled` property */
		get_flag_x() : boolean;

		/** Setter of `angular_limit_x/enabled` property */
		set_flag_x(p_value: boolean) : void;

		/** Getter of `angular_limit_x/upper_angle` property */
		_get_angular_hi_limit_x() : number;

		/** Setter of `angular_limit_x/upper_angle` property */
		_set_angular_hi_limit_x(p_value: number) : void;

		/** Getter of `angular_limit_x/lower_angle` property */
		_get_angular_lo_limit_x() : number;

		/** Setter of `angular_limit_x/lower_angle` property */
		_set_angular_lo_limit_x(p_value: number) : void;

		/** Getter of `angular_limit_x/softness` property */
		get_param_x() : number;

		/** Setter of `angular_limit_x/softness` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_limit_x/restitution` property */
		get_param_x() : number;

		/** Setter of `angular_limit_x/restitution` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_limit_x/damping` property */
		get_param_x() : number;

		/** Setter of `angular_limit_x/damping` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_limit_x/force_limit` property */
		get_param_x() : number;

		/** Setter of `angular_limit_x/force_limit` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_limit_x/erp` property */
		get_param_x() : number;

		/** Setter of `angular_limit_x/erp` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_motor_x/enabled` property */
		get_flag_x() : boolean;

		/** Setter of `angular_motor_x/enabled` property */
		set_flag_x(p_value: boolean) : void;

		/** Getter of `angular_motor_x/target_velocity` property */
		get_param_x() : number;

		/** Setter of `angular_motor_x/target_velocity` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_motor_x/force_limit` property */
		get_param_x() : number;

		/** Setter of `angular_motor_x/force_limit` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_spring_x/enabled` property */
		get_flag_x() : boolean;

		/** Setter of `angular_spring_x/enabled` property */
		set_flag_x(p_value: boolean) : void;

		/** Getter of `angular_spring_x/stiffness` property */
		get_param_x() : number;

		/** Setter of `angular_spring_x/stiffness` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_spring_x/damping` property */
		get_param_x() : number;

		/** Setter of `angular_spring_x/damping` property */
		set_param_x(p_value: number) : void;

		/** Getter of `angular_spring_x/equilibrium_point` property */
		get_param_x() : number;

		/** Setter of `angular_spring_x/equilibrium_point` property */
		set_param_x(p_value: number) : void;

		/** Getter of `linear_limit_y/enabled` property */
		get_flag_y() : boolean;

		/** Setter of `linear_limit_y/enabled` property */
		set_flag_y(p_value: boolean) : void;

		/** Getter of `linear_limit_y/upper_distance` property */
		get_param_y() : number;

		/** Setter of `linear_limit_y/upper_distance` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_limit_y/lower_distance` property */
		get_param_y() : number;

		/** Setter of `linear_limit_y/lower_distance` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_limit_y/softness` property */
		get_param_y() : number;

		/** Setter of `linear_limit_y/softness` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_limit_y/restitution` property */
		get_param_y() : number;

		/** Setter of `linear_limit_y/restitution` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_limit_y/damping` property */
		get_param_y() : number;

		/** Setter of `linear_limit_y/damping` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_motor_y/enabled` property */
		get_flag_y() : boolean;

		/** Setter of `linear_motor_y/enabled` property */
		set_flag_y(p_value: boolean) : void;

		/** Getter of `linear_motor_y/target_velocity` property */
		get_param_y() : number;

		/** Setter of `linear_motor_y/target_velocity` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_motor_y/force_limit` property */
		get_param_y() : number;

		/** Setter of `linear_motor_y/force_limit` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_spring_y/enabled` property */
		get_flag_y() : boolean;

		/** Setter of `linear_spring_y/enabled` property */
		set_flag_y(p_value: boolean) : void;

		/** Getter of `linear_spring_y/stiffness` property */
		get_param_y() : number;

		/** Setter of `linear_spring_y/stiffness` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_spring_y/damping` property */
		get_param_y() : number;

		/** Setter of `linear_spring_y/damping` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_spring_y/equilibrium_point` property */
		get_param_y() : number;

		/** Setter of `linear_spring_y/equilibrium_point` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_limit_y/enabled` property */
		get_flag_y() : boolean;

		/** Setter of `angular_limit_y/enabled` property */
		set_flag_y(p_value: boolean) : void;

		/** Getter of `angular_limit_y/upper_angle` property */
		_get_angular_hi_limit_y() : number;

		/** Setter of `angular_limit_y/upper_angle` property */
		_set_angular_hi_limit_y(p_value: number) : void;

		/** Getter of `angular_limit_y/lower_angle` property */
		_get_angular_lo_limit_y() : number;

		/** Setter of `angular_limit_y/lower_angle` property */
		_set_angular_lo_limit_y(p_value: number) : void;

		/** Getter of `angular_limit_y/softness` property */
		get_param_y() : number;

		/** Setter of `angular_limit_y/softness` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_limit_y/restitution` property */
		get_param_y() : number;

		/** Setter of `angular_limit_y/restitution` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_limit_y/damping` property */
		get_param_y() : number;

		/** Setter of `angular_limit_y/damping` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_limit_y/force_limit` property */
		get_param_y() : number;

		/** Setter of `angular_limit_y/force_limit` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_limit_y/erp` property */
		get_param_y() : number;

		/** Setter of `angular_limit_y/erp` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_motor_y/enabled` property */
		get_flag_y() : boolean;

		/** Setter of `angular_motor_y/enabled` property */
		set_flag_y(p_value: boolean) : void;

		/** Getter of `angular_motor_y/target_velocity` property */
		get_param_y() : number;

		/** Setter of `angular_motor_y/target_velocity` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_motor_y/force_limit` property */
		get_param_y() : number;

		/** Setter of `angular_motor_y/force_limit` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_spring_y/enabled` property */
		get_flag_y() : boolean;

		/** Setter of `angular_spring_y/enabled` property */
		set_flag_y(p_value: boolean) : void;

		/** Getter of `angular_spring_y/stiffness` property */
		get_param_y() : number;

		/** Setter of `angular_spring_y/stiffness` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_spring_y/damping` property */
		get_param_y() : number;

		/** Setter of `angular_spring_y/damping` property */
		set_param_y(p_value: number) : void;

		/** Getter of `angular_spring_y/equilibrium_point` property */
		get_param_y() : number;

		/** Setter of `angular_spring_y/equilibrium_point` property */
		set_param_y(p_value: number) : void;

		/** Getter of `linear_limit_z/enabled` property */
		get_flag_z() : boolean;

		/** Setter of `linear_limit_z/enabled` property */
		set_flag_z(p_value: boolean) : void;

		/** Getter of `linear_limit_z/upper_distance` property */
		get_param_z() : number;

		/** Setter of `linear_limit_z/upper_distance` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_limit_z/lower_distance` property */
		get_param_z() : number;

		/** Setter of `linear_limit_z/lower_distance` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_limit_z/softness` property */
		get_param_z() : number;

		/** Setter of `linear_limit_z/softness` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_limit_z/restitution` property */
		get_param_z() : number;

		/** Setter of `linear_limit_z/restitution` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_limit_z/damping` property */
		get_param_z() : number;

		/** Setter of `linear_limit_z/damping` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_motor_z/enabled` property */
		get_flag_z() : boolean;

		/** Setter of `linear_motor_z/enabled` property */
		set_flag_z(p_value: boolean) : void;

		/** Getter of `linear_motor_z/target_velocity` property */
		get_param_z() : number;

		/** Setter of `linear_motor_z/target_velocity` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_motor_z/force_limit` property */
		get_param_z() : number;

		/** Setter of `linear_motor_z/force_limit` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_spring_z/enabled` property */
		get_flag_z() : boolean;

		/** Setter of `linear_spring_z/enabled` property */
		set_flag_z(p_value: boolean) : void;

		/** Getter of `linear_spring_z/stiffness` property */
		get_param_z() : number;

		/** Setter of `linear_spring_z/stiffness` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_spring_z/damping` property */
		get_param_z() : number;

		/** Setter of `linear_spring_z/damping` property */
		set_param_z(p_value: number) : void;

		/** Getter of `linear_spring_z/equilibrium_point` property */
		get_param_z() : number;

		/** Setter of `linear_spring_z/equilibrium_point` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_limit_z/enabled` property */
		get_flag_z() : boolean;

		/** Setter of `angular_limit_z/enabled` property */
		set_flag_z(p_value: boolean) : void;

		/** Getter of `angular_limit_z/upper_angle` property */
		_get_angular_hi_limit_z() : number;

		/** Setter of `angular_limit_z/upper_angle` property */
		_set_angular_hi_limit_z(p_value: number) : void;

		/** Getter of `angular_limit_z/lower_angle` property */
		_get_angular_lo_limit_z() : number;

		/** Setter of `angular_limit_z/lower_angle` property */
		_set_angular_lo_limit_z(p_value: number) : void;

		/** Getter of `angular_limit_z/softness` property */
		get_param_z() : number;

		/** Setter of `angular_limit_z/softness` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_limit_z/restitution` property */
		get_param_z() : number;

		/** Setter of `angular_limit_z/restitution` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_limit_z/damping` property */
		get_param_z() : number;

		/** Setter of `angular_limit_z/damping` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_limit_z/force_limit` property */
		get_param_z() : number;

		/** Setter of `angular_limit_z/force_limit` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_limit_z/erp` property */
		get_param_z() : number;

		/** Setter of `angular_limit_z/erp` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_motor_z/enabled` property */
		get_flag_z() : boolean;

		/** Setter of `angular_motor_z/enabled` property */
		set_flag_z(p_value: boolean) : void;

		/** Getter of `angular_motor_z/target_velocity` property */
		get_param_z() : number;

		/** Setter of `angular_motor_z/target_velocity` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_motor_z/force_limit` property */
		get_param_z() : number;

		/** Setter of `angular_motor_z/force_limit` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_spring_z/enabled` property */
		get_flag_z() : boolean;

		/** Setter of `angular_spring_z/enabled` property */
		set_flag_z(p_value: boolean) : void;

		/** Getter of `angular_spring_z/stiffness` property */
		get_param_z() : number;

		/** Setter of `angular_spring_z/stiffness` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_spring_z/damping` property */
		get_param_z() : number;

		/** Setter of `angular_spring_z/damping` property */
		set_param_z(p_value: number) : void;

		/** Getter of `angular_spring_z/equilibrium_point` property */
		get_param_z() : number;

		/** Setter of `angular_spring_z/equilibrium_point` property */
		set_param_z(p_value: number) : void;

		/** Getter of `precision` property */
		get_precision() : number;

		/** Setter of `precision` property */
		set_precision(p_value: number) : void;
	}
	namespace Generic6DOFJoint {
		enum Flag {
			/** If enabled, linear motion is possible within the given limits. */
			FLAG_ENABLE_LINEAR_LIMIT = 0,
			/** If enabled, rotational motion is possible within the given limits. */
			FLAG_ENABLE_ANGULAR_LIMIT = 1,
			/**  */
			FLAG_ENABLE_LINEAR_SPRING = 3,
			/**  */
			FLAG_ENABLE_ANGULAR_SPRING = 2,
			/** If enabled, there is a rotational motor across these axes. */
			FLAG_ENABLE_MOTOR = 4,
			/** If enabled, there is a linear motor across these axes. */
			FLAG_ENABLE_LINEAR_MOTOR = 5,
			/** Represents the size of the `Flag` enum. */
			FLAG_MAX = 6,
		}
		enum Param {
			/** The minimum difference between the pivot points' axes. */
			PARAM_LINEAR_LOWER_LIMIT = 0,
			/** The maximum difference between the pivot points' axes. */
			PARAM_LINEAR_UPPER_LIMIT = 1,
			/** A factor applied to the movement across the axes. The lower, the slower the movement. */
			PARAM_LINEAR_LIMIT_SOFTNESS = 2,
			/** The amount of restitution on the axes' movement. The lower, the more momentum gets lost. */
			PARAM_LINEAR_RESTITUTION = 3,
			/** The amount of damping that happens at the linear motion across the axes. */
			PARAM_LINEAR_DAMPING = 4,
			/** The velocity the linear motor will try to reach. */
			PARAM_LINEAR_MOTOR_TARGET_VELOCITY = 5,
			/** The maximum force the linear motor will apply while trying to reach the velocity target. */
			PARAM_LINEAR_MOTOR_FORCE_LIMIT = 6,
			/**  */
			PARAM_LINEAR_SPRING_STIFFNESS = 7,
			/**  */
			PARAM_LINEAR_SPRING_DAMPING = 8,
			/**  */
			PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT = 9,
			/** The minimum rotation in negative direction to break loose and rotate around the axes. */
			PARAM_ANGULAR_LOWER_LIMIT = 10,
			/** The minimum rotation in positive direction to break loose and rotate around the axes. */
			PARAM_ANGULAR_UPPER_LIMIT = 11,
			/** The speed of all rotations across the axes. */
			PARAM_ANGULAR_LIMIT_SOFTNESS = 12,
			/** The amount of rotational damping across the axes. The lower, the more dampening occurs. */
			PARAM_ANGULAR_DAMPING = 13,
			/** The amount of rotational restitution across the axes. The lower, the more restitution occurs. */
			PARAM_ANGULAR_RESTITUTION = 14,
			/** The maximum amount of force that can occur, when rotating around the axes. */
			PARAM_ANGULAR_FORCE_LIMIT = 15,
			/** When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
			PARAM_ANGULAR_ERP = 16,
			/** Target speed for the motor at the axes. */
			PARAM_ANGULAR_MOTOR_TARGET_VELOCITY = 17,
			/** Maximum acceleration for the motor at the axes. */
			PARAM_ANGULAR_MOTOR_FORCE_LIMIT = 18,
			/**  */
			PARAM_ANGULAR_SPRING_STIFFNESS = 19,
			/**  */
			PARAM_ANGULAR_SPRING_DAMPING = 20,
			/**  */
			PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT = 21,
			/** Represents the size of the `Param` enum. */
			PARAM_MAX = 22,
		}

		/** The minimum difference between the pivot points' axes. */
		const PARAM_LINEAR_LOWER_LIMIT: Param.PARAM_LINEAR_LOWER_LIMIT;

		/** The maximum difference between the pivot points' axes. */
		const PARAM_LINEAR_UPPER_LIMIT: Param.PARAM_LINEAR_UPPER_LIMIT;

		/** A factor applied to the movement across the axes. The lower, the slower the movement. */
		const PARAM_LINEAR_LIMIT_SOFTNESS: Param.PARAM_LINEAR_LIMIT_SOFTNESS;

		/** The amount of restitution on the axes' movement. The lower, the more momentum gets lost. */
		const PARAM_LINEAR_RESTITUTION: Param.PARAM_LINEAR_RESTITUTION;

		/** The amount of damping that happens at the linear motion across the axes. */
		const PARAM_LINEAR_DAMPING: Param.PARAM_LINEAR_DAMPING;

		/** The velocity the linear motor will try to reach. */
		const PARAM_LINEAR_MOTOR_TARGET_VELOCITY: Param.PARAM_LINEAR_MOTOR_TARGET_VELOCITY;

		/** The maximum force the linear motor will apply while trying to reach the velocity target. */
		const PARAM_LINEAR_MOTOR_FORCE_LIMIT: Param.PARAM_LINEAR_MOTOR_FORCE_LIMIT;

		/**  */
		const PARAM_LINEAR_SPRING_STIFFNESS: Param.PARAM_LINEAR_SPRING_STIFFNESS;

		/**  */
		const PARAM_LINEAR_SPRING_DAMPING: Param.PARAM_LINEAR_SPRING_DAMPING;

		/**  */
		const PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT: Param.PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT;

		/** The minimum rotation in negative direction to break loose and rotate around the axes. */
		const PARAM_ANGULAR_LOWER_LIMIT: Param.PARAM_ANGULAR_LOWER_LIMIT;

		/** The minimum rotation in positive direction to break loose and rotate around the axes. */
		const PARAM_ANGULAR_UPPER_LIMIT: Param.PARAM_ANGULAR_UPPER_LIMIT;

		/** The speed of all rotations across the axes. */
		const PARAM_ANGULAR_LIMIT_SOFTNESS: Param.PARAM_ANGULAR_LIMIT_SOFTNESS;

		/** The amount of rotational damping across the axes. The lower, the more dampening occurs. */
		const PARAM_ANGULAR_DAMPING: Param.PARAM_ANGULAR_DAMPING;

		/** The amount of rotational restitution across the axes. The lower, the more restitution occurs. */
		const PARAM_ANGULAR_RESTITUTION: Param.PARAM_ANGULAR_RESTITUTION;

		/** The maximum amount of force that can occur, when rotating around the axes. */
		const PARAM_ANGULAR_FORCE_LIMIT: Param.PARAM_ANGULAR_FORCE_LIMIT;

		/** When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
		const PARAM_ANGULAR_ERP: Param.PARAM_ANGULAR_ERP;

		/** Target speed for the motor at the axes. */
		const PARAM_ANGULAR_MOTOR_TARGET_VELOCITY: Param.PARAM_ANGULAR_MOTOR_TARGET_VELOCITY;

		/** Maximum acceleration for the motor at the axes. */
		const PARAM_ANGULAR_MOTOR_FORCE_LIMIT: Param.PARAM_ANGULAR_MOTOR_FORCE_LIMIT;

		/**  */
		const PARAM_ANGULAR_SPRING_STIFFNESS: Param.PARAM_ANGULAR_SPRING_STIFFNESS;

		/**  */
		const PARAM_ANGULAR_SPRING_DAMPING: Param.PARAM_ANGULAR_SPRING_DAMPING;

		/**  */
		const PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT: Param.PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT;

		/** Represents the size of the `Param` enum. */
		const PARAM_MAX: Param.PARAM_MAX;

		/** If enabled, linear motion is possible within the given limits. */
		const FLAG_ENABLE_LINEAR_LIMIT: Flag.FLAG_ENABLE_LINEAR_LIMIT;

		/** If enabled, rotational motion is possible within the given limits. */
		const FLAG_ENABLE_ANGULAR_LIMIT: Flag.FLAG_ENABLE_ANGULAR_LIMIT;

		/**  */
		const FLAG_ENABLE_LINEAR_SPRING: Flag.FLAG_ENABLE_LINEAR_SPRING;

		/**  */
		const FLAG_ENABLE_ANGULAR_SPRING: Flag.FLAG_ENABLE_ANGULAR_SPRING;

		/** If enabled, there is a rotational motor across these axes. */
		const FLAG_ENABLE_MOTOR: Flag.FLAG_ENABLE_MOTOR;

		/** If enabled, there is a linear motor across these axes. */
		const FLAG_ENABLE_LINEAR_MOTOR: Flag.FLAG_ENABLE_LINEAR_MOTOR;

		/** Represents the size of the `Flag` enum. */
		const FLAG_MAX: Flag.FLAG_MAX;
	}

	/** Helper node to calculate generic geometry operations.
	 Geometry provides users with a set of helper functions to create geometric shapes, compute intersections between shapes, and process various other geometric operations. */
	class Geometry extends Object {

		/** Returns an array with 6 `Plane`s that describe the sides of a box centered at the origin. The box size is defined by `extents`, which represents one (positive) corner of the box (i.e. half its actual size). */
		static build_box_planes(extents: Vector3) : any[];

		/** Returns an array of `Plane`s closely bounding a faceted cylinder centered at the origin with radius `radius` and height `height`. The parameter `sides` defines how many planes will be generated for the round part of the cylinder. The parameter `axis` describes the axis along which the cylinder is oriented (0 for X, 1 for Y, 2 for Z). */
		//@ts-ignore
		static build_cylinder_planes(radius: number, height: number, sides: number, axis: Vector3.Axis = 2) : any[];

		/** Returns an array of `Plane`s closely bounding a faceted capsule centered at the origin with radius `radius` and height `height`. The parameter `sides` defines how many planes will be generated for the side part of the capsule, whereas `lats` gives the number of latitudinal steps at the bottom and top of the capsule. The parameter `axis` describes the axis along which the capsule is oriented (0 for X, 1 for Y, 2 for Z). */
		//@ts-ignore
		static build_capsule_planes(radius: number, height: number, sides: number, lats: number, axis: Vector3.Axis = 2) : any[];

		/** Returns `true` if `point` is inside the circle or if it's located exactly *on* the circle's boundary, otherwise returns `false`. */
		static is_point_in_circle(point: Vector2, circle_position: Vector2, circle_radius: number) : boolean;

		/** Given the 2D segment (`segment_from`, `segment_to`), returns the position on the segment (as a number between 0 and 1) at which the segment hits the circle that is located at position `circle_position` and has radius `circle_radius`. If the segment does not intersect the circle, -1 is returned (this is also the case if the line extending the segment would intersect the circle, but the segment does not). */
		static segment_intersects_circle(segment_from: Vector2, segment_to: Vector2, circle_position: Vector2, circle_radius: number) : number;

		/** Checks if the two segments (`from_a`, `to_a`) and (`from_b`, `to_b`) intersect. If yes, return the point of intersection as `Vector2`. If no intersection takes place, returns an empty `Variant`. */
		static segment_intersects_segment_2d(from_a: Vector2, to_a: Vector2, from_b: Vector2, to_b: Vector2) : any;

		/** Checks if the two lines (`from_a`, `dir_a`) and (`from_b`, `dir_b`) intersect. If yes, return the point of intersection as `Vector2`. If no intersection takes place, returns an empty `Variant`.

		 **Note:** The lines are specified using direction vectors, not end points. */
		static line_intersects_line_2d(from_a: Vector2, dir_a: Vector2, from_b: Vector2, dir_b: Vector2) : any;

		/** Given the two 2D segments (`p1`, `p2`) and (`q1`, `q2`), finds those two points on the two segments that are closest to each other. Returns a `PoolVector2Array` that contains this point on (`p1`, `p2`) as well the accompanying point on (`q1`, `q2`). */
		static get_closest_points_between_segments_2d(p1: Vector2, q1: Vector2, p2: Vector2, q2: Vector2) : PoolVector2Array;

		/** Given the two 3D segments (`p1`, `p2`) and (`q1`, `q2`), finds those two points on the two segments that are closest to each other. Returns a `PoolVector3Array` that contains this point on (`p1`, `p2`) as well the accompanying point on (`q1`, `q2`). */
		static get_closest_points_between_segments(p1: Vector3, p2: Vector3, q1: Vector3, q2: Vector3) : PoolVector3Array;

		/** Returns the 2D point on the 2D segment (`s1`, `s2`) that is closest to `point`. The returned point will always be inside the specified segment. */
		static get_closest_point_to_segment_2d(point: Vector2, s1: Vector2, s2: Vector2) : Vector2;

		/** Returns the 3D point on the 3D segment (`s1`, `s2`) that is closest to `point`. The returned point will always be inside the specified segment. */
		static get_closest_point_to_segment(point: Vector3, s1: Vector3, s2: Vector3) : Vector3;

		/** Returns the 2D point on the 2D line defined by (`s1`, `s2`) that is closest to `point`. The returned point can be inside the segment (`s1`, `s2`) or outside of it, i.e. somewhere on the line extending from the segment. */
		static get_closest_point_to_segment_uncapped_2d(point: Vector2, s1: Vector2, s2: Vector2) : Vector2;

		/** Returns the 3D point on the 3D line defined by (`s1`, `s2`) that is closest to `point`. The returned point can be inside the segment (`s1`, `s2`) or outside of it, i.e. somewhere on the line extending from the segment. */
		static get_closest_point_to_segment_uncapped(point: Vector3, s1: Vector3, s2: Vector3) : Vector3;

		/** Used internally by the engine. */
		static get_uv84_normal_bit(normal: Vector3) : number;

		/** Tests if the 3D ray starting at `from` with the direction of `dir` intersects the triangle specified by `a`, `b` and `c`. If yes, returns the point of intersection as `Vector3`. If no intersection takes place, an empty `Variant` is returned. */
		static ray_intersects_triangle(p_from: Vector3, dir: Vector3, a: Vector3, b: Vector3, c: Vector3) : any;

		/** Tests if the segment (`from`, `to`) intersects the triangle `a`, `b`, `c`. If yes, returns the point of intersection as `Vector3`. If no intersection takes place, an empty `Variant` is returned. */
		static segment_intersects_triangle(p_from: Vector3, to: Vector3, a: Vector3, b: Vector3, c: Vector3) : any;

		/** Checks if the segment (`from`, `to`) intersects the sphere that is located at `sphere_position` and has radius `sphere_radius`. If no, returns an empty `PoolVector3Array`. If yes, returns a `PoolVector3Array` containing the point of intersection and the sphere's normal at the point of intersection. */
		static segment_intersects_sphere(p_from: Vector3, to: Vector3, sphere_position: Vector3, sphere_radius: number) : PoolVector3Array;

		/** Checks if the segment (`from`, `to`) intersects the cylinder with height `height` that is centered at the origin and has radius `radius`. If no, returns an empty `PoolVector3Array`. If an intersection takes place, the returned array contains the point of intersection and the cylinder's normal at the point of intersection. */
		static segment_intersects_cylinder(p_from: Vector3, to: Vector3, height: number, radius: number) : PoolVector3Array;

		/** Given a convex hull defined though the `Plane`s in the array `planes`, tests if the segment (`from`, `to`) intersects with that hull. If an intersection is found, returns a `PoolVector3Array` containing the point the intersection and the hull's normal. If no intersecion is found, an the returned array is empty. */
		static segment_intersects_convex(p_from: Vector3, to: Vector3, planes: any[]) : PoolVector3Array;

		/** Returns if `point` is inside the triangle specified by `a`, `b` and `c`. */
		static point_is_inside_triangle(point: Vector2, a: Vector2, b: Vector2, c: Vector2) : boolean;

		/** Returns `true` if `polygon`'s vertices are ordered in clockwise order, otherwise returns `false`. */
		static is_polygon_clockwise(polygon: PoolVector2Array) : boolean;

		/** Returns `true` if `point` is inside `polygon` or if it's located exactly *on* polygon's boundary, otherwise returns `false`. */
		static is_point_in_polygon(point: Vector2, polygon: PoolVector2Array) : boolean;

		/** Triangulates the polygon specified by the points in `polygon`. Returns a `PoolIntArray` where each triangle consists of three consecutive point indices into `polygon` (i.e. the returned array will have `n * 3` elements, with `n` being the number of found triangles). If the triangulation did not succeed, an empty `PoolIntArray` is returned. */
		static triangulate_polygon(polygon: PoolVector2Array) : PoolIntArray;

		/** Triangulates the area specified by discrete set of `points` such that no point is inside the circumcircle of any resulting triangle. Returns a `PoolIntArray` where each triangle consists of three consecutive point indices into `points` (i.e. the returned array will have `n * 3` elements, with `n` being the number of found triangles). If the triangulation did not succeed, an empty `PoolIntArray` is returned. */
		static triangulate_delaunay_2d(points: PoolVector2Array) : PoolIntArray;

		/** Given an array of `Vector2`s, returns the convex hull as a list of points in counterclockwise order. The last point is the same as the first one. */
		static convex_hull_2d(points: PoolVector2Array) : PoolVector2Array;

		/** Clips the polygon defined by the points in `points` against the `plane` and returns the points of the clipped polygon. */
		static clip_polygon(points: PoolVector3Array, plane: Plane) : PoolVector3Array;

		/** Merges (combines) `polygon_a` and `polygon_b` and returns an array of merged polygons. This performs `OPERATION_UNION` between polygons.

		 The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling `is_polygon_clockwise`. */
		static merge_polygons_2d(polygon_a: PoolVector2Array, polygon_b: PoolVector2Array) : any[];

		/** Clips `polygon_a` against `polygon_b` and returns an array of clipped polygons. This performs `OPERATION_DIFFERENCE` between polygons. Returns an empty array if `polygon_b` completely overlaps `polygon_a`.

		 If `polygon_b` is enclosed by `polygon_a`, returns an outer polygon (boundary) and inner polygon (hole) which could be distiguished by calling `is_polygon_clockwise`. */
		static clip_polygons_2d(polygon_a: PoolVector2Array, polygon_b: PoolVector2Array) : any[];

		/** Intersects `polygon_a` with `polygon_b` and returns an array of intersected polygons. This performs `OPERATION_INTERSECTION` between polygons. In other words, returns common area shared by polygons. Returns an empty array if no intersection occurs.

		 The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling `is_polygon_clockwise`. */
		static intersect_polygons_2d(polygon_a: PoolVector2Array, polygon_b: PoolVector2Array) : any[];

		/** Mutually excludes common area defined by intersection of `polygon_a` and `polygon_b` (see `intersect_polygons_2d`) and returns an array of excluded polygons. This performs `OPERATION_XOR` between polygons. In other words, returns all but common area between polygons.

		 The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distiguished by calling `is_polygon_clockwise`. */
		static exclude_polygons_2d(polygon_a: PoolVector2Array, polygon_b: PoolVector2Array) : any[];

		/** Clips `polyline` against `polygon` and returns an array of clipped polylines. This performs `OPERATION_DIFFERENCE` between the polyline and the polygon. This operation can be thought of as cutting a line with a closed shape. */
		static clip_polyline_with_polygon_2d(polyline: PoolVector2Array, polygon: PoolVector2Array) : any[];

		/** Intersects `polyline` with `polygon` and returns an array of intersected polylines. This performs `OPERATION_INTERSECTION` between the polyline and the polygon. This operation can be thought of as chopping a line with a closed shape. */
		static intersect_polyline_with_polygon_2d(polyline: PoolVector2Array, polygon: PoolVector2Array) : any[];

		/** Inflates or deflates `polygon` by `delta` units (pixels). If `delta` is positive, makes the polygon grow outward. If `delta` is negative, shrinks the polygon inward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. Returns an empty array if `delta` is negative and the absolute value of it approximately exceeds the minimum bounding rectangle dimensions of the polygon.

		 Each polygon's vertices will be rounded as determined by `join_type`, see `PolyJoinType`.

		 The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling `is_polygon_clockwise`.

		 **Note:** To translate the polygon's vertices specifically, use the `Transform2D.xform` method:

		 ```gdscript
		 var polygon = PoolVector2Array([Vector2(0, 0), Vector2(100, 0), Vector2(100, 100), Vector2(0, 100)])
		 var offset = Vector2(50, 50)
		 polygon = Transform2D(0, offset).xform(polygon)
		 print(polygon) # prints [Vector2(50, 50), Vector2(150, 50), Vector2(150, 150), Vector2(50, 150)]
		 ``` */
		//@ts-ignore
		static offset_polygon_2d(polygon: PoolVector2Array, delta: number, join_type: Geometry.PolyJoinType = 0) : any[];

		/** Inflates or deflates `polyline` by `delta` units (pixels), producing polygons. If `delta` is positive, makes the polyline grow outward. Returns an array of polygons because inflating/deflating may result in multiple discrete polygons. If `delta` is negative, returns an empty array.

		 Each polygon's vertices will be rounded as determined by `join_type`, see `PolyJoinType`.

		 Each polygon's endpoints will be rounded as determined by `end_type`, see `PolyEndType`.

		 The operation may result in an outer polygon (boundary) and inner polygon (hole) produced which could be distinguished by calling `is_polygon_clockwise`. */
		//@ts-ignore
		static offset_polyline_2d(polyline: PoolVector2Array, delta: number, join_type: Geometry.PolyJoinType = 0, end_type: Geometry.PolyEndType = 3) : any[];

		/** Given an array of `Vector2`s representing tiles, builds an atlas. The returned dictionary has two keys: `points` is a vector of `Vector2` that specifies the positions of each tile, `size` contains the overall size of the whole atlas as `Vector2`. */
		static make_atlas(sizes: PoolVector2Array) : object;
	}
	namespace Geometry {
		enum PolyBooleanOperation {
			/** Create regions where either subject or clip polygons (or both) are filled. */
			OPERATION_UNION = 0,
			/** Create regions where subject polygons are filled except where clip polygons are filled. */
			OPERATION_DIFFERENCE = 1,
			/** Create regions where both subject and clip polygons are filled. */
			OPERATION_INTERSECTION = 2,
			/** Create regions where either subject or clip polygons are filled but not where both are filled. */
			OPERATION_XOR = 3,
		}
		enum PolyEndType {
			/** Endpoints are joined using the `PolyJoinType` value and the path filled as a polygon. */
			END_POLYGON = 0,
			/** Endpoints are joined using the `PolyJoinType` value and the path filled as a polyline. */
			END_JOINED = 1,
			/** Endpoints are squared off with no extension. */
			END_BUTT = 2,
			/** Endpoints are squared off and extended by `delta` units. */
			END_SQUARE = 3,
			/** Endpoints are rounded off and extended by `delta` units. */
			END_ROUND = 4,
		}
		enum PolyJoinType {
			/** Squaring is applied uniformally at all convex edge joins at `1 * delta`. */
			JOIN_SQUARE = 0,
			/** While flattened paths can never perfectly trace an arc, they are approximated by a series of arc chords. */
			JOIN_ROUND = 1,
			/** There's a necessary limit to mitered joins since offsetting edges that join at very acute angles will produce excessively long and narrow "spikes". For any given edge join, when miter offsetting would exceed that maximum distance, "square" joining is applied. */
			JOIN_MITER = 2,
		}

		/** Create regions where either subject or clip polygons (or both) are filled. */
		const OPERATION_UNION: PolyBooleanOperation.OPERATION_UNION;

		/** Create regions where subject polygons are filled except where clip polygons are filled. */
		const OPERATION_DIFFERENCE: PolyBooleanOperation.OPERATION_DIFFERENCE;

		/** Create regions where both subject and clip polygons are filled. */
		const OPERATION_INTERSECTION: PolyBooleanOperation.OPERATION_INTERSECTION;

		/** Create regions where either subject or clip polygons are filled but not where both are filled. */
		const OPERATION_XOR: PolyBooleanOperation.OPERATION_XOR;

		/** Squaring is applied uniformally at all convex edge joins at `1 * delta`. */
		const JOIN_SQUARE: PolyJoinType.JOIN_SQUARE;

		/** While flattened paths can never perfectly trace an arc, they are approximated by a series of arc chords. */
		const JOIN_ROUND: PolyJoinType.JOIN_ROUND;

		/** There's a necessary limit to mitered joins since offsetting edges that join at very acute angles will produce excessively long and narrow "spikes". For any given edge join, when miter offsetting would exceed that maximum distance, "square" joining is applied. */
		const JOIN_MITER: PolyJoinType.JOIN_MITER;

		/** Endpoints are joined using the `PolyJoinType` value and the path filled as a polygon. */
		const END_POLYGON: PolyEndType.END_POLYGON;

		/** Endpoints are joined using the `PolyJoinType` value and the path filled as a polyline. */
		const END_JOINED: PolyEndType.END_JOINED;

		/** Endpoints are squared off with no extension. */
		const END_BUTT: PolyEndType.END_BUTT;

		/** Endpoints are squared off and extended by `delta` units. */
		const END_SQUARE: PolyEndType.END_SQUARE;

		/** Endpoints are rounded off and extended by `delta` units. */
		const END_ROUND: PolyEndType.END_ROUND;
	}

	/** Base node for geometry-based visual instances.
	 Base node for geometry-based visual instances. Shares some common functionality like visibility and custom materials. */
	class GeometryInstance extends VisualInstance {

		/** The material override for the whole geometry.

		 If a material is assigned to this property, it will be used instead of any material set in any material slot of the mesh. */
		material_override: Material;

		/** The selected shadow casting flag. See `ShadowCastingSetting` for possible values. */
		cast_shadow: number;

		/** The extra distance added to the GeometryInstance's bounding box (`AABB`) to increase its cull box. */
		extra_cull_margin: number;

		/** If `true`, this GeometryInstance will be used when baking lights using a `GIProbe` or `BakedLightmap`. */
		use_in_baked_light: boolean;

		/** The GeometryInstance's min LOD distance.

		 **Note:** This property currently has no effect. */
		lod_min_distance: number;

		/** The GeometryInstance's min LOD margin.

		 **Note:** This property currently has no effect. */
		lod_min_hysteresis: number;

		/** The GeometryInstance's max LOD distance.

		 **Note:** This property currently has no effect. */
		lod_max_distance: number;

		/** The GeometryInstance's max LOD margin.

		 **Note:** This property currently has no effect. */
		lod_max_hysteresis: number;

		/** Sets the `GeometryInstance.Flags` specified. See `GeometryInstance.Flags` for options. */
		set_flag(flag: GeometryInstance.Flags, value: boolean) : void;

		/** Returns the `GeometryInstance.Flags` that have been set for this object. */
		get_flag(flag: GeometryInstance.Flags) : boolean;

		/** Overrides the bounding box of this node with a custom one. To remove it, set an `AABB` with all fields set to zero. */
		set_custom_aabb(aabb: AABB) : void;

		/** Getter of `material_override` property */
		get_material_override() : Material;

		/** Setter of `material_override` property */
		set_material_override(p_value: Material) : void;

		/** Getter of `cast_shadow` property */
		get_cast_shadows_setting() : number;

		/** Setter of `cast_shadow` property */
		set_cast_shadows_setting(p_value: number) : void;

		/** Getter of `extra_cull_margin` property */
		get_extra_cull_margin() : number;

		/** Setter of `extra_cull_margin` property */
		set_extra_cull_margin(p_value: number) : void;

		/** Getter of `use_in_baked_light` property */
		get_flag() : boolean;

		/** Setter of `use_in_baked_light` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `lod_min_distance` property */
		get_lod_min_distance() : number;

		/** Setter of `lod_min_distance` property */
		set_lod_min_distance(p_value: number) : void;

		/** Getter of `lod_min_hysteresis` property */
		get_lod_min_hysteresis() : number;

		/** Setter of `lod_min_hysteresis` property */
		set_lod_min_hysteresis(p_value: number) : void;

		/** Getter of `lod_max_distance` property */
		get_lod_max_distance() : number;

		/** Setter of `lod_max_distance` property */
		set_lod_max_distance(p_value: number) : void;

		/** Getter of `lod_max_hysteresis` property */
		get_lod_max_hysteresis() : number;

		/** Setter of `lod_max_hysteresis` property */
		set_lod_max_hysteresis(p_value: number) : void;
	}
	namespace GeometryInstance {
		enum Flags {
			/** Will allow the GeometryInstance to be used when baking lights using a `GIProbe` or `BakedLightmap`. */
			FLAG_USE_BAKED_LIGHT = 0,
			/** Unused in this class, exposed for consistency with `VisualServer.InstanceFlags`. */
			FLAG_DRAW_NEXT_FRAME_IF_VISIBLE = 1,
			/** Represents the size of the `Flags` enum. */
			FLAG_MAX = 2,
		}
		enum ShadowCastingSetting {
			/** Will not cast any shadows. */
			SHADOW_CASTING_SETTING_OFF = 0,
			/** Will cast shadows from all visible faces in the GeometryInstance.

			 Will take culling into account, so faces not being rendered will not be taken into account when shadow casting. */
			SHADOW_CASTING_SETTING_ON = 1,
			/** Will cast shadows from all visible faces in the GeometryInstance.

			 Will not take culling into account, so all faces will be taken into account when shadow casting. */
			SHADOW_CASTING_SETTING_DOUBLE_SIDED = 2,
			/** Will only show the shadows casted from this object.

			 In other words, the actual mesh will not be visible, only the shadows casted from the mesh will be. */
			SHADOW_CASTING_SETTING_SHADOWS_ONLY = 3,
		}

		/** Will not cast any shadows. */
		const SHADOW_CASTING_SETTING_OFF: ShadowCastingSetting.SHADOW_CASTING_SETTING_OFF;

		/** Will cast shadows from all visible faces in the GeometryInstance.

		 Will take culling into account, so faces not being rendered will not be taken into account when shadow casting. */
		const SHADOW_CASTING_SETTING_ON: ShadowCastingSetting.SHADOW_CASTING_SETTING_ON;

		/** Will cast shadows from all visible faces in the GeometryInstance.

		 Will not take culling into account, so all faces will be taken into account when shadow casting. */
		const SHADOW_CASTING_SETTING_DOUBLE_SIDED: ShadowCastingSetting.SHADOW_CASTING_SETTING_DOUBLE_SIDED;

		/** Will only show the shadows casted from this object.

		 In other words, the actual mesh will not be visible, only the shadows casted from the mesh will be. */
		const SHADOW_CASTING_SETTING_SHADOWS_ONLY: ShadowCastingSetting.SHADOW_CASTING_SETTING_SHADOWS_ONLY;

		/** Will allow the GeometryInstance to be used when baking lights using a `GIProbe` or `BakedLightmap`. */
		const FLAG_USE_BAKED_LIGHT: Flags.FLAG_USE_BAKED_LIGHT;

		/** Unused in this class, exposed for consistency with `VisualServer.InstanceFlags`. */
		const FLAG_DRAW_NEXT_FRAME_IF_VISIBLE: Flags.FLAG_DRAW_NEXT_FRAME_IF_VISIBLE;

		/** Represents the size of the `Flags` enum. */
		const FLAG_MAX: Flags.FLAG_MAX;
	}

	/** A color interpolator resource which can be used to generate colors between user-defined color points.
	 Given a set of colors, this resource will interpolate them in order. This means that if you have color 1, color 2 and color 3, the ramp will interpolate from color 1 to color 2 and from color 2 to color 3. The ramp will initially have 2 colors (black and white), one (black) at ramp lower offset 0 and the other (white) at the ramp higher offset 1. */
	class Gradient extends Resource {

		/** Gradient's offsets returned as a `PoolRealArray`. */
		offsets: PoolRealArray;

		/** Gradient's colors returned as a `PoolColorArray`. */
		colors: PoolColorArray;

		/** Adds the specified color to the end of the ramp, with the specified offset. */
		add_point(offset: number, color: Color) : void;

		/** Removes the color at the index `offset`. */
		remove_point(offset: number) : void;

		/** Sets the offset for the ramp color at index `point`. */
		set_offset(point: number, offset: number) : void;

		/** Returns the offset of the ramp color at index `point`. */
		get_offset(point: number) : number;

		/** Sets the color of the ramp color at index `point`. */
		set_color(point: number, color: Color) : void;

		/** Returns the color of the ramp color at index `point`. */
		get_color(point: number) : Color;

		/** Returns the interpolated color specified by `offset`. */
		interpolate(offset: number) : Color;

		/** Returns the number of colors in the ramp. */
		get_point_count() : number;

		/** Getter of `offsets` property */
		get_offsets() : PoolRealArray;

		/** Setter of `offsets` property */
		set_offsets(p_value: PoolRealArray) : void;

		/** Getter of `colors` property */
		get_colors() : PoolColorArray;

		/** Setter of `colors` property */
		set_colors(p_value: PoolColorArray) : void;
	}
	namespace Gradient {
	}

	/** Gradient-filled texture.
	 GradientTexture uses a `Gradient` to fill the texture data. The gradient will be filled from left to right using colors obtained from the gradient. This means the texture does not necessarily represent an exact copy of the gradient, but instead an interpolation of samples obtained from the gradient at fixed steps (see `width`). */
	class GradientTexture extends Texture {

		/** The `Gradient` that will be used to fill the texture. */
		gradient: Gradient;

		/** The number of color samples that will be obtained from the `Gradient`. */
		width: number;

		/** Getter of `gradient` property */
		get_gradient() : Gradient;

		/** Setter of `gradient` property */
		set_gradient(p_value: Gradient) : void;

		/** Getter of `width` property */
		get_width() : number;

		/** Setter of `width` property */
		set_width(p_value: number) : void;
	}
	namespace GradientTexture {
	}

	/** GraphEdit is an area capable of showing various GraphNodes. It manages connection events between them.
	 GraphEdit manages the showing of GraphNodes it contains, as well as connections and disconnections between them. Signals are sent for each of these two events. Disconnection between GraphNode slots is disabled by default.

	 It is greatly advised to enable low-processor usage mode (see `OS.low_processor_usage_mode`) when using GraphEdits. */
	class GraphEdit extends Control {

		/** If `true`, enables disconnection of existing connections in the GraphEdit by dragging the right end. */
		right_disconnects: boolean;

		/** The scroll offset. */
		scroll_offset: Vector2;

		/** The snapping distance in pixels. */
		snap_distance: number;

		/** If `true`, enables snapping. */
		use_snap: boolean;

		/** The current zoom value. */
		zoom: number;

		/**  */
		rect_clip_content: boolean;

		/**  */
		focus_mode: number;

		/** Create a connection between the `from_port` slot of the `from` GraphNode and the `to_port` slot of the `to` GraphNode. If the connection already exists, no connection is created. */
		connect_node(p_from: string, from_port: number, to: string, to_port: number) : number;

		/** Returns `true` if the `from_port` slot of the `from` GraphNode is connected to the `to_port` slot of the `to` GraphNode. */
		is_node_connected(p_from: string, from_port: number, to: string, to_port: number) : boolean;

		/** Removes the connection between the `from_port` slot of the `from` GraphNode and the `to_port` slot of the `to` GraphNode. If the connection does not exist, no connection is removed. */
		disconnect_node(p_from: string, from_port: number, to: string, to_port: number) : void;

		/** Sets the coloration of the connection between `from`'s `from_port` and `to`'s `to_port` with the color provided in the `activity` theme property. */
		set_connection_activity(p_from: string, from_port: number, to: string, to_port: number, amount: number) : void;

		/** Returns an Array containing the list of connections. A connection consists in a structure of the form `{ from_port: 0, from: "GraphNode name 0", to_port: 1, to: "GraphNode name 1" }`. */
		get_connection_list() : any[];

		/** Removes all connections between nodes. */
		clear_connections() : void;

		/** Makes possible to disconnect nodes when dragging from the slot at the right if it has the specified type. */
		add_valid_right_disconnect_type(type: number) : void;

		/** Removes the possibility to disconnect nodes when dragging from the slot at the right if it has the specified type. */
		remove_valid_right_disconnect_type(type: number) : void;

		/** Makes possible to disconnect nodes when dragging from the slot at the left if it has the specified type. */
		add_valid_left_disconnect_type(type: number) : void;

		/** Removes the possibility to disconnect nodes when dragging from the slot at the left if it has the specified type. */
		remove_valid_left_disconnect_type(type: number) : void;

		/** Makes possible the connection between two different slot types. The type is defined with the `GraphNode.set_slot` method. */
		add_valid_connection_type(from_type: number, to_type: number) : void;

		/** Makes it not possible to connect between two different slot types. The type is defined with the `GraphNode.set_slot` method. */
		remove_valid_connection_type(from_type: number, to_type: number) : void;

		/** Returns whether it's possible to connect slots of the specified types. */
		is_valid_connection_type(from_type: number, to_type: number) : boolean;

		/** Gets the `HBoxContainer` that contains the zooming and grid snap controls in the top left of the graph.

		 Warning: The intended usage of this function is to allow you to reposition or add your own custom controls to the container. This is an internal control and as such should not be freed. If you wish to hide this or any of it's children use their `CanvasItem.visible` property instead. */
		get_zoom_hbox() : HBoxContainer;

		/** Sets the specified `node` as the one selected. */
		set_selected(node: Node) : void;

		/** Getter of `right_disconnects` property */
		is_right_disconnects_enabled() : boolean;

		/** Setter of `right_disconnects` property */
		set_right_disconnects(p_value: boolean) : void;

		/** Getter of `scroll_offset` property */
		get_scroll_ofs() : Vector2;

		/** Setter of `scroll_offset` property */
		set_scroll_ofs(p_value: Vector2) : void;

		/** Getter of `snap_distance` property */
		get_snap() : number;

		/** Setter of `snap_distance` property */
		set_snap(p_value: number) : void;

		/** Getter of `use_snap` property */
		is_using_snap() : boolean;

		/** Setter of `use_snap` property */
		set_use_snap(p_value: boolean) : void;

		/** Getter of `zoom` property */
		get_zoom() : number;

		/** Setter of `zoom` property */
		set_zoom(p_value: number) : void;

		/** Getter of `rect_clip_content` property */
		is_clipping_contents() : boolean;

		/** Setter of `rect_clip_content` property */
		set_clip_contents(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace GraphEdit {

		/** Emitted when a GraphNode is attempted to be removed from the GraphEdit. */
		const delete_nodes_request: 'delete_nodes_request';

		/** Emitted when the user presses `Ctrl + C`. */
		const copy_nodes_request: 'copy_nodes_request';

		/** Emitted when a GraphNode is attempted to be duplicated in the GraphEdit. */
		const duplicate_nodes_request: 'duplicate_nodes_request';

		/** Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. `position` is the position of the mouse pointer when the signal is sent. */
		const popup_request: 'popup_request';

		/** Emitted when the user presses `Ctrl + V`. */
		const paste_nodes_request: 'paste_nodes_request';

		/** Emitted when the scroll offset is changed by the user. It will not be emitted when changed in code. */
		const scroll_offset_changed: 'scroll_offset_changed';

		/** Emitted when a GraphNode is selected. */
		const node_selected: 'node_selected';

		/** Emitted at the beginning of a GraphNode movement. */
		const _begin_node_move: '_begin_node_move';

		/** Emitted when user dragging connection from output port into empty space of the graph. */
		const connection_to_empty: 'connection_to_empty';

		/** Emitted to the GraphEdit when the connection between `from_slot` slot of `from` GraphNode and `to_slot` slot of `to` GraphNode is attempted to be removed. */
		const disconnection_request: 'disconnection_request';

		/** Emitted to the GraphEdit when the connection between the `from_slot` slot of the `from` GraphNode and the `to_slot` slot of the `to` GraphNode is attempted to be created. */
		const connection_request: 'connection_request';

		/** Emitted at the end of a GraphNode movement. */
		const _end_node_move: '_end_node_move';

		/** Emitted when user dragging connection from input port into empty space of the graph. */
		const connection_from_empty: 'connection_from_empty';

		/**  */
		const node_unselected: 'node_unselected';
	}

	/** A GraphNode is a container with potentially several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.
	 A GraphNode is a container. Each GraphNode can have several input and output slots, sometimes referred to as ports, allowing connections between GraphNodes. To add a slot to GraphNode, add any `Control`-derived child node to it.

	 After adding at least one child to GraphNode new sections will be automatically created in the Inspector called 'Slot'. When 'Slot' is expanded you will see list with index number for each slot. You can click on each of them to expand further.

	 In the Inspector you can enable (show) or disable (hide) slots. By default all slots are disabled so you may not see any slots on your GraphNode initially. You can assign a type to each slot. Only slots of the same type will be able to connect to each other. You can also assign colors to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input connections are on the left and output connections are on the right side of GraphNode. Only enabled slots are counted as connections. */
	class GraphNode extends Container {

		/** The text displayed in the GraphNode's title bar. */
		title: string;

		/** The offset of the GraphNode, relative to the scroll offset of the `GraphEdit`.

		 **Note:** You cannot use position directly, as `GraphEdit` is a `Container`. */
		offset: Vector2;

		/** If `true`, the close button will be visible.

		 **Note:** Pressing it will only emit the `close_request` signal, the GraphNode needs to be removed manually. */
		show_close: boolean;

		/** If `true`, the user can resize the GraphNode.

		 **Note:** Dragging the handle will only emit the `resize_request` signal, the GraphNode needs to be resized manually. */
		resizable: boolean;

		/** If `true`, the GraphNode is selected. */
		selected: boolean;

		/** If `true`, the GraphNode is a comment node. */
		comment: boolean;

		/** Sets the overlay shown above the GraphNode. See `Overlay`. */
		overlay: number;

		/** Sets properties of the slot with ID `idx`.

		 If `enable_left`/`right`, a port will appear and the slot will be able to be connected from this side.

		 `type_left`/`right` is an arbitrary type of the port. Only ports with the same type values can be connected.

		 `color_left`/`right` is the tint of the port's icon on this side.

		 `custom_left`/`right` is a custom texture for this side's port.

		 **Note:** This method only sets properties of the slot. To create the slot, add a `Control`-derived child to the GraphNode. */
		//@ts-ignore
		set_slot(idx: number, enable_left: boolean, type_left: number, color_left: Color, enable_right: boolean, type_right: number, color_right: Color, custom_left: Texture = null, custom_right: Texture = null) : void;

		/** Disables input and output slot whose index is `idx`. */
		clear_slot(idx: number) : void;

		/** Disables all input and output slots of the GraphNode. */
		clear_all_slots() : void;

		/** Returns `true` if left (input) slot `idx` is enabled, `false` otherwise. */
		is_slot_enabled_left(idx: number) : boolean;

		/** Returns the (integer) type of left (input) `idx` slot. */
		get_slot_type_left(idx: number) : number;

		/** Returns the color set to `idx` left (input) slot. */
		get_slot_color_left(idx: number) : Color;

		/** Returns `true` if right (output) slot `idx` is enabled, `false` otherwise. */
		is_slot_enabled_right(idx: number) : boolean;

		/** Returns the (integer) type of right (output) `idx` slot. */
		get_slot_type_right(idx: number) : number;

		/** Returns the color set to `idx` right (output) slot. */
		get_slot_color_right(idx: number) : Color;

		/** Returns the number of enabled output slots (connections) of the GraphNode. */
		get_connection_output_count() : number;

		/** Returns the number of enabled input slots (connections) to the GraphNode. */
		get_connection_input_count() : number;

		/** Returns the position of the output connection `idx`. */
		get_connection_output_position(idx: number) : Vector2;

		/** Returns the type of the output connection `idx`. */
		get_connection_output_type(idx: number) : number;

		/** Returns the color of the output connection `idx`. */
		get_connection_output_color(idx: number) : Color;

		/** Returns the position of the input connection `idx`. */
		get_connection_input_position(idx: number) : Vector2;

		/** Returns the type of the input connection `idx`. */
		get_connection_input_type(idx: number) : number;

		/** Returns the color of the input connection `idx`. */
		get_connection_input_color(idx: number) : Color;

		/** Getter of `title` property */
		get_title() : string;

		/** Setter of `title` property */
		set_title(p_value: string) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `show_close` property */
		is_close_button_visible() : boolean;

		/** Setter of `show_close` property */
		set_show_close_button(p_value: boolean) : void;

		/** Getter of `resizable` property */
		is_resizable() : boolean;

		/** Setter of `resizable` property */
		set_resizable(p_value: boolean) : void;

		/** Getter of `selected` property */
		is_selected() : boolean;

		/** Setter of `selected` property */
		set_selected(p_value: boolean) : void;

		/** Getter of `comment` property */
		is_comment() : boolean;

		/** Setter of `comment` property */
		set_comment(p_value: boolean) : void;

		/** Getter of `overlay` property */
		get_overlay() : number;

		/** Setter of `overlay` property */
		set_overlay(p_value: number) : void;
	}
	namespace GraphNode {

		/** Emitted when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode. */
		const raise_request: 'raise_request';

		/** Emitted when the GraphNode is requested to be closed. Happens on clicking the close button (see `show_close`). */
		const close_request: 'close_request';

		/** Emitted when the GraphNode is dragged. */
		const dragged: 'dragged';

		/** Emitted when the GraphNode is moved. */
		const offset_changed: 'offset_changed';

		/** Emitted when the GraphNode is requested to be resized. Happens on dragging the resizer handle (see `resizable`). */
		const resize_request: 'resize_request';
		enum Overlay {
			/** No overlay is shown. */
			OVERLAY_DISABLED = 0,
			/** Show overlay set in the `breakpoint` theme property. */
			OVERLAY_BREAKPOINT = 1,
			/** Show overlay set in the `position` theme property. */
			OVERLAY_POSITION = 2,
		}

		/** No overlay is shown. */
		const OVERLAY_DISABLED: Overlay.OVERLAY_DISABLED;

		/** Show overlay set in the `breakpoint` theme property. */
		const OVERLAY_BREAKPOINT: Overlay.OVERLAY_BREAKPOINT;

		/** Show overlay set in the `position` theme property. */
		const OVERLAY_POSITION: Overlay.OVERLAY_POSITION;
	}

	/** Grid container used to arrange elements in a grid like layout.
	 Grid container will arrange its children in a grid like structure, the grid columns are specified using the `columns` property and the number of rows will be equal to the number of children in the container divided by the number of columns. For example, if the container has 5 children, and 2 columns, there will be 3 rows in the container.

	 Notice that grid layout will preserve the columns and rows for every size of the container, and that empty columns will be expanded automatically. */
	class GridContainer extends Container {

		/** The number of columns in the `GridContainer`. If modified, `GridContainer` reorders its children to accommodate the new layout. */
		columns: number;

		/**  */
		mouse_filter: number;

		/** Getter of `columns` property */
		get_columns() : number;

		/** Setter of `columns` property */
		set_columns(p_value: number) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;
	}
	namespace GridContainer {
	}

	/** Node for 3D tile-based maps.
	 GridMap lets you place meshes on a grid interactively. It works both from the editor and from scripts, which can help you create in-game level editors.

	 GridMaps use a `MeshLibrary` which contains a list of tiles. Each tile is a mesh with materials plus optional collision and navigation shapes.

	 A GridMap contains a collection of cells. Each grid cell refers to a tile in the `MeshLibrary`. All cells in the map have the same dimensions.

	 Internally, a GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells. */
	class GridMap extends Spatial {

		/** The assigned `MeshLibrary`. */
		mesh_library: MeshLibrary;

		/** The dimensions of the grid's cells.

		 This does not affect the size of the meshes. See `cell_scale`. */
		cell_size: Vector3;

		/** The size of each octant measured in number of cells. This applies to all three axis. */
		cell_octant_size: number;

		/** If `true`, grid items are centered on the X axis. */
		cell_center_x: boolean;

		/** If `true`, grid items are centered on the Y axis. */
		cell_center_y: boolean;

		/** If `true`, grid items are centered on the Z axis. */
		cell_center_z: boolean;

		/** The scale of the cell items.

		 This does not affect the size of the grid cells themselves, only the items in them. This can be used to make cell items overlap their neighbors. */
		cell_scale: number;

		/** The physics layers this GridMap is in.

		 GridMaps act as static bodies, meaning they aren't affected by gravity or other forces. They only affect other physics bodies that collide with them. */
		collision_layer: number;

		/** The physics layers this GridMap detects collisions in. */
		collision_mask: number;

		/** Sets an individual bit on the `collision_mask`. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the `collision_mask`. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Sets an individual bit on the `collision_layer`. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the `collision_layer`. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Sets the mesh index for the cell referenced by its grid-based X, Y and Z coordinates.

		 A negative item index such as `INVALID_CELL_ITEM` will clear the cell.

		 Optionally, the item's orientation can be passed. For valid orientation values, see `Basis.get_orthogonal_index`. */
		//@ts-ignore
		set_cell_item(x: number, y: number, z: number, item: number, orientation: number = 0) : void;

		/** The `MeshLibrary` item index located at the grid-based X, Y and Z coordinates. If the cell is empty, `INVALID_CELL_ITEM` will be returned. */
		get_cell_item(x: number, y: number, z: number) : number;

		/** The orientation of the cell at the grid-based X, Y and Z coordinates. -1 is returned if the cell is empty. */
		get_cell_item_orientation(x: number, y: number, z: number) : number;

		/** Returns the coordinates of the grid cell containing the given point.

		 `pos` should be in the GridMap's local coordinate space. */
		world_to_map(pos: Vector3) : Vector3;

		/** Returns the position of a grid cell in the GridMap's local coordinate space. */
		map_to_world(x: number, y: number, z: number) : Vector3;

		/**  */
		resource_changed(resource: Resource) : void;

		/**  */
		//@ts-ignore
		set_clip(enabled: boolean, clipabove: boolean = true, floor: number = 0, axis: Vector3.Axis = 0) : void;

		/** Clear all cells. */
		clear() : void;

		/** Returns an array of `Vector3` with the non-empty cell coordinates in the grid map. */
		get_used_cells() : any[];

		/** Returns an array of `Transform` and `Mesh` references corresponding to the non-empty cells in the grid. The transforms are specified in world space. */
		get_meshes() : any[];

		/**  */
		get_bake_meshes() : any[];

		/**  */
		get_bake_mesh_instance(idx: number) : RID;

		/**  */
		clear_baked_meshes() : void;

		/**  */
		//@ts-ignore
		make_baked_meshes(gen_lightmap_uv: boolean = false, lightmap_uv_texel_size: number = 0.1) : void;

		/** Getter of `mesh_library` property */
		get_mesh_library() : MeshLibrary;

		/** Setter of `mesh_library` property */
		set_mesh_library(p_value: MeshLibrary) : void;

		/** Getter of `cell_size` property */
		get_cell_size() : Vector3;

		/** Setter of `cell_size` property */
		set_cell_size(p_value: Vector3) : void;

		/** Getter of `cell_octant_size` property */
		get_octant_size() : number;

		/** Setter of `cell_octant_size` property */
		set_octant_size(p_value: number) : void;

		/** Getter of `cell_center_x` property */
		get_center_x() : boolean;

		/** Setter of `cell_center_x` property */
		set_center_x(p_value: boolean) : void;

		/** Getter of `cell_center_y` property */
		get_center_y() : boolean;

		/** Setter of `cell_center_y` property */
		set_center_y(p_value: boolean) : void;

		/** Getter of `cell_center_z` property */
		get_center_z() : boolean;

		/** Setter of `cell_center_z` property */
		set_center_z(p_value: boolean) : void;

		/** Getter of `cell_scale` property */
		get_cell_scale() : number;

		/** Setter of `cell_scale` property */
		set_cell_scale(p_value: number) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;
	}
	namespace GridMap {

		/** Emitted when `cell_size` changes. */
		const cell_size_changed: 'cell_size_changed';

		/** Invalid cell item that can be used in `set_cell_item` to clear cells (or represent an empty cell in `get_cell_item`). */
		const INVALID_CELL_ITEM: -1;
	}

	/** Groove constraint for 2D physics.
	 Groove constraint for 2D physics. This is useful for making a body "slide" through a segment placed in another. */
	class GrooveJoint2D extends Joint2D {

		/** The groove's length. The groove is from the joint's origin towards `length` along the joint's local Y axis. */
		length: number;

		/** The body B's initial anchor position defined by the joint's origin and a local offset `initial_offset` along the joint's Y axis (along the groove). */
		initial_offset: number;

		/** Getter of `length` property */
		get_length() : number;

		/** Setter of `length` property */
		set_length(p_value: number) : void;

		/** Getter of `initial_offset` property */
		get_initial_offset() : number;

		/** Setter of `initial_offset` property */
		set_initial_offset(p_value: number) : void;
	}
	namespace GrooveJoint2D {
	}

	/** Horizontal box container.
	 Horizontal box container. See `BoxContainer`. */
	class HBoxContainer extends BoxContainer {
	}
	namespace HBoxContainer {
	}

	/** Horizontal scroll bar.
	 Horizontal version of `ScrollBar`, which goes from left (min) to right (max). */
	class HScrollBar extends ScrollBar {
	}
	namespace HScrollBar {
	}

	/** Horizontal separator.
	 Horizontal separator. See `Separator`. Even though it looks horizontal, it is used to separate objects vertically. */
	class HSeparator extends Separator {
	}
	namespace HSeparator {
	}

	/** Horizontal slider.
	 Horizontal slider. See `Slider`. This one goes from left (min) to right (max). */
	class HSlider extends Slider {
	}
	namespace HSlider {
	}

	/** Horizontal split container.
	 Horizontal split container. See `SplitContainer`. This goes from left to right. */
	class HSplitContainer extends SplitContainer {
	}
	namespace HSplitContainer {
	}

	/** Hyper-text transfer protocol client.
	 Hyper-text transfer protocol client (sometimes called "User Agent"). Used to make HTTP requests to download web content, upload files and other data or to communicate with various services, among other use cases. See `HTTPRequest` for an higher-level alternative.

	 **Note:** This client only needs to connect to a host once (see `connect_to_host`) to send multiple requests. Because of this, methods that take URLs usually take just the part after the host instead of the full URL, as the client is already connected to a host. See `request` for a full example and to get started.

	 A `HTTPClient` should be reused between multiple requests or to connect to different hosts instead of creating one client per request. Supports SSL and SSL server certificate verification. HTTP status codes in the 2xx range indicate success, 3xx redirection (i.e. "try again, but over here"), 4xx something was wrong with the request, and 5xx something went wrong on the server's side.

	 For more information on HTTP, see https://developer.mozilla.org/en-US/docs/Web/HTTP (or read RFC 2616 to get it straight from the source: https://tools.ietf.org/html/rfc2616). */
	class HTTPClient extends Reference {

		/** If `true`, execution will block until all data is read from the response. */
		blocking_mode_enabled: boolean;

		/** The connection to use for this client. */
		connection: StreamPeer;

		/** The size of the buffer used and maximum bytes to read per iteration. See `read_response_body_chunk`. */
		read_chunk_size: number;

		/** Connects to a host. This needs to be done before any requests are sent.

		 The host should not have http:// prepended but will strip the protocol identifier if provided.

		 If no `port` is specified (or `-1` is used), it is automatically set to 80 for HTTP and 443 for HTTPS (if `use_ssl` is enabled).

		 `verify_host` will check the SSL identity of the host if set to `true`. */
		//@ts-ignore
		connect_to_host(host: string, port: number = -1, use_ssl: boolean = false, verify_host: boolean = true) : number;

		/** Sends a raw request to the connected host. The URL parameter is just the part after the host, so for `http://somehost.com/index.php`, it is `index.php`.

		 Headers are HTTP request headers. For available HTTP methods, see `Method`.

		 Sends the body data raw, as a byte array and does not encode it in any way. */
		request_raw(method: HTTPClient.Method, url: string, headers: PoolStringArray, body: PoolByteArray) : number;

		/** Sends a request to the connected host. The URL parameter is just the part after the host, so for `http://somehost.com/index.php`, it is `index.php`.

		 Headers are HTTP request headers. For available HTTP methods, see `Method`.

		 To create a POST request with query strings to push to the server, do:

		 ```gdscript
		 var fields = {"username" : "user", "password" : "pass"}
		 var query_string = http_client.query_string_from_dict(fields)
		 var headers = ["Content-Type: application/x-www-form-urlencoded", "Content-Length: " + str(query_string.length())]
		 var result = http_client.request(http_client.METHOD_POST, "index.php", headers, query_string)
		 ``` */
		//@ts-ignore
		request(method: HTTPClient.Method, url: string, headers: PoolStringArray, body: string = "") : number;

		/** Closes the current connection, allowing reuse of this `HTTPClient`. */
		close() : void;

		/** If `true`, this `HTTPClient` has a response available. */
		has_response() : boolean;

		/** If `true`, this `HTTPClient` has a response that is chunked. */
		is_response_chunked() : boolean;

		/** Returns the response's HTTP status code. */
		get_response_code() : number;

		/** Returns the response headers. */
		get_response_headers() : PoolStringArray;

		/** Returns all response headers as a Dictionary of structure `{ "key": "value1; value2" }` where the case-sensitivity of the keys and values is kept like the server delivers it. A value is a simple String, this string can have more than one value where "; " is used as separator.

		 **Example:**

		 ```gdscript
		 {
		     "content-length": 12,
		     "Content-Type": "application/json; charset=UTF-8",
		 }
		 ``` */
		get_response_headers_as_dictionary() : object;

		/** Returns the response's body length.

		 **Note:** Some Web servers may not send a body length. In this case, the value returned will be `-1`. If using chunked transfer encoding, the body length will also be `-1`. */
		get_response_body_length() : number;

		/** Reads one chunk from the response. */
		read_response_body_chunk() : PoolByteArray;

		/** Returns a `Status` constant. Need to call `poll` in order to get status updates. */
		get_status() : number;

		/** This needs to be called in order to have any request processed. Check results with `get_status`. */
		poll() : number;

		/** Generates a GET/POST application/x-www-form-urlencoded style query string from a provided dictionary, e.g.:

		 ```gdscript
		 var fields = {"username": "user", "password": "pass"}
		 var query_string = http_client.query_string_from_dict(fields)
		 # Returns "username=user&password=pass"
		 ```

		 Furthermore, if a key has a `null` value, only the key itself is added, without equal sign and value. If the value is an array, for each value in it a pair with the same key is added.

		 ```gdscript
		 var fields = {"single": 123, "not_valued": null, "multiple": [22, 33, 44]}
		 var query_string = http_client.query_string_from_dict(fields)
		 # Returns "single=123&not_valued&multiple=22&multiple=33&multiple=44"
		 ``` */
		query_string_from_dict(fields: object) : string;

		/** Getter of `blocking_mode_enabled` property */
		is_blocking_mode_enabled() : boolean;

		/** Setter of `blocking_mode_enabled` property */
		set_blocking_mode(p_value: boolean) : void;

		/** Getter of `connection` property */
		get_connection() : StreamPeer;

		/** Setter of `connection` property */
		set_connection(p_value: StreamPeer) : void;

		/** Getter of `read_chunk_size` property */
		get_read_chunk_size() : number;

		/** Setter of `read_chunk_size` property */
		set_read_chunk_size(p_value: number) : void;
	}
	namespace HTTPClient {
		enum Method {
			/** HTTP GET method. The GET method requests a representation of the specified resource. Requests using GET should only retrieve data. */
			METHOD_GET = 0,
			/** HTTP HEAD method. The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful to request metadata like HTTP headers or to check if a resource exists. */
			METHOD_HEAD = 1,
			/** HTTP POST method. The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. This is often used for forms and submitting data or uploading files. */
			METHOD_POST = 2,
			/** HTTP PUT method. The PUT method asks to replace all current representations of the target resource with the request payload. (You can think of POST as "create or update" and PUT as "update", although many services tend to not make a clear distinction or change their meaning). */
			METHOD_PUT = 3,
			/** HTTP DELETE method. The DELETE method requests to delete the specified resource. */
			METHOD_DELETE = 4,
			/** HTTP OPTIONS method. The OPTIONS method asks for a description of the communication options for the target resource. Rarely used. */
			METHOD_OPTIONS = 5,
			/** HTTP TRACE method. The TRACE method performs a message loop-back test along the path to the target resource. Returns the entire HTTP request received in the response body. Rarely used. */
			METHOD_TRACE = 6,
			/** HTTP CONNECT method. The CONNECT method establishes a tunnel to the server identified by the target resource. Rarely used. */
			METHOD_CONNECT = 7,
			/** HTTP PATCH method. The PATCH method is used to apply partial modifications to a resource. */
			METHOD_PATCH = 8,
			/** Represents the size of the `Method` enum. */
			METHOD_MAX = 9,
		}
		enum ResponseCode {
			/** HTTP status code `100 Continue`. Interim response that indicates everything so far is OK and that the client should continue with the request (or ignore this status if already finished). */
			RESPONSE_CONTINUE = 100,
			/** HTTP status code `101 Switching Protocol`. Sent in response to an `Upgrade` request header by the client. Indicates the protocol the server is switching to. */
			RESPONSE_SWITCHING_PROTOCOLS = 101,
			/** HTTP status code `102 Processing` (WebDAV). Indicates that the server has received and is processing the request, but no response is available yet. */
			RESPONSE_PROCESSING = 102,
			/** HTTP status code `200 OK`. The request has succeeded. Default response for successful requests. Meaning varies depending on the request. GET: The resource has been fetched and is transmitted in the message body. HEAD: The entity headers are in the message body. POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server. */
			RESPONSE_OK = 200,
			/** HTTP status code `201 Created`. The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request. */
			RESPONSE_CREATED = 201,
			/** HTTP status code `202 Accepted`. The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing. */
			RESPONSE_ACCEPTED = 202,
			/** HTTP status code `203 Non-Authoritative Information`. This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response. */
			RESPONSE_NON_AUTHORITATIVE_INFORMATION = 203,
			/** HTTP status code `204 No Content`. There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones. */
			RESPONSE_NO_CONTENT = 204,
			/** HTTP status code `205 Reset Content`. The server has fulfilled the request and desires that the client resets the "document view" that caused the request to be sent to its original state as received from the origin server. */
			RESPONSE_RESET_CONTENT = 205,
			/** HTTP status code `206 Partial Content`. This response code is used because of a range header sent by the client to separate download into multiple streams. */
			RESPONSE_PARTIAL_CONTENT = 206,
			/** HTTP status code `207 Multi-Status` (WebDAV). A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate. */
			RESPONSE_MULTI_STATUS = 207,
			/** HTTP status code `208 Already Reported` (WebDAV). Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly. */
			RESPONSE_ALREADY_REPORTED = 208,
			/** HTTP status code `226 IM Used` (WebDAV). The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance. */
			RESPONSE_IM_USED = 226,
			/** HTTP status code `300 Multiple Choice`. The request has more than one possible responses and there is no standardized way to choose one of the responses. User-agent or user should choose one of them. */
			RESPONSE_MULTIPLE_CHOICES = 300,
			/** HTTP status code `301 Moved Permanently`. Redirection. This response code means the URI of requested resource has been changed. The new URI is usually included in the response. */
			RESPONSE_MOVED_PERMANENTLY = 301,
			/** HTTP status code `302 Found`. Temporary redirection. This response code means the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests. */
			RESPONSE_FOUND = 302,
			/** HTTP status code `303 See Other`. The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request. */
			RESPONSE_SEE_OTHER = 303,
			/** HTTP status code `304 Not Modified`. A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to `false`. */
			RESPONSE_NOT_MODIFIED = 304,
			/** HTTP status code `305 Use Proxy`. *Deprecated. Do not use.* */
			RESPONSE_USE_PROXY = 305,
			/** HTTP status code `306 Switch Proxy`. *Deprecated. Do not use.* */
			RESPONSE_SWITCH_PROXY = 306,
			/** HTTP status code `307 Temporary Redirect`. The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI. */
			RESPONSE_TEMPORARY_REDIRECT = 307,
			/** HTTP status code `308 Permanent Redirect`. The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs. */
			RESPONSE_PERMANENT_REDIRECT = 308,
			/** HTTP status code `400 Bad Request`. The request was invalid. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, invalid request contents, or deceptive request routing). */
			RESPONSE_BAD_REQUEST = 400,
			/** HTTP status code `401 Unauthorized`. Credentials required. The request has not been applied because it lacks valid authentication credentials for the target resource. */
			RESPONSE_UNAUTHORIZED = 401,
			/** HTTP status code `402 Payment Required`. This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems, however this is not currently used. */
			RESPONSE_PAYMENT_REQUIRED = 402,
			/** HTTP status code `403 Forbidden`. The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike `401`, the client's identity is known to the server. */
			RESPONSE_FORBIDDEN = 403,
			/** HTTP status code `404 Not Found`. The server can not find requested resource. Either the URL is not recognized or the endpoint is valid but the resource itself does not exist. May also be sent instead of 403 to hide existence of a resource if the client is not authorized. */
			RESPONSE_NOT_FOUND = 404,
			/** HTTP status code `405 Method Not Allowed`. The request's HTTP method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code. */
			RESPONSE_METHOD_NOT_ALLOWED = 405,
			/** HTTP status code `406 Not Acceptable`. The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request. Used when negotiation content. */
			RESPONSE_NOT_ACCEPTABLE = 406,
			/** HTTP status code `407 Proxy Authentication Required`. Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy. */
			RESPONSE_PROXY_AUTHENTICATION_REQUIRED = 407,
			/** HTTP status code `408 Request Timeout`. The server did not receive a complete request message within the time that it was prepared to wait. */
			RESPONSE_REQUEST_TIMEOUT = 408,
			/** HTTP status code `409 Conflict`. The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request. */
			RESPONSE_CONFLICT = 409,
			/** HTTP status code `410 Gone`. The target resource is no longer available at the origin server and this condition is likely permanent. */
			RESPONSE_GONE = 410,
			/** HTTP status code `411 Length Required`. The server refuses to accept the request without a defined Content-Length header. */
			RESPONSE_LENGTH_REQUIRED = 411,
			/** HTTP status code `412 Precondition Failed`. One or more conditions given in the request header fields evaluated to `false` when tested on the server. */
			RESPONSE_PRECONDITION_FAILED = 412,
			/** HTTP status code `413 Entity Too Large`. The server is refusing to process a request because the request payload is larger than the server is willing or able to process. */
			RESPONSE_REQUEST_ENTITY_TOO_LARGE = 413,
			/** HTTP status code `414 Request-URI Too Long`. The server is refusing to service the request because the request-target is longer than the server is willing to interpret. */
			RESPONSE_REQUEST_URI_TOO_LONG = 414,
			/** HTTP status code `415 Unsupported Media Type`. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource. */
			RESPONSE_UNSUPPORTED_MEDIA_TYPE = 415,
			/** HTTP status code `416 Requested Range Not Satisfiable`. None of the ranges in the request's Range header field overlap the current extent of the selected resource or the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges. */
			RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE = 416,
			/** HTTP status code `417 Expectation Failed`. The expectation given in the request's Expect header field could not be met by at least one of the inbound servers. */
			RESPONSE_EXPECTATION_FAILED = 417,
			/** HTTP status code `418 I'm A Teapot`. Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout. */
			RESPONSE_IM_A_TEAPOT = 418,
			/** HTTP status code `421 Misdirected Request`. The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI. */
			RESPONSE_MISDIRECTED_REQUEST = 421,
			/** HTTP status code `422 Unprocessable Entity` (WebDAV). The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions. */
			RESPONSE_UNPROCESSABLE_ENTITY = 422,
			/** HTTP status code `423 Locked` (WebDAV). The source or destination resource of a method is locked. */
			RESPONSE_LOCKED = 423,
			/** HTTP status code `424 Failed Dependency` (WebDAV). The method could not be performed on the resource because the requested action depended on another action and that action failed. */
			RESPONSE_FAILED_DEPENDENCY = 424,
			/** HTTP status code `426 Upgrade Required`. The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. */
			RESPONSE_UPGRADE_REQUIRED = 426,
			/** HTTP status code `428 Precondition Required`. The origin server requires the request to be conditional. */
			RESPONSE_PRECONDITION_REQUIRED = 428,
			/** HTTP status code `429 Too Many Requests`. The user has sent too many requests in a given amount of time (see "rate limiting"). Back off and increase time between requests or try again later. */
			RESPONSE_TOO_MANY_REQUESTS = 429,
			/** HTTP status code `431 Request Header Fields Too Large`. The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields. */
			RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE = 431,
			/** HTTP status code `451 Response Unavailable For Legal Reasons`. The server is denying access to the resource as a consequence of a legal demand. */
			RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS = 451,
			/** HTTP status code `500 Internal Server Error`. The server encountered an unexpected condition that prevented it from fulfilling the request. */
			RESPONSE_INTERNAL_SERVER_ERROR = 500,
			/** HTTP status code `501 Not Implemented`. The server does not support the functionality required to fulfill the request. */
			RESPONSE_NOT_IMPLEMENTED = 501,
			/** HTTP status code `502 Bad Gateway`. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request. Usually returned by load balancers or proxies. */
			RESPONSE_BAD_GATEWAY = 502,
			/** HTTP status code `503 Service Unavailable`. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay. Try again later. */
			RESPONSE_SERVICE_UNAVAILABLE = 503,
			/** HTTP status code `504 Gateway Timeout`. The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request. Usually returned by load balancers or proxies. */
			RESPONSE_GATEWAY_TIMEOUT = 504,
			/** HTTP status code `505 HTTP Version Not Supported`. The server does not support, or refuses to support, the major version of HTTP that was used in the request message. */
			RESPONSE_HTTP_VERSION_NOT_SUPPORTED = 505,
			/** HTTP status code `506 Variant Also Negotiates`. The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process. */
			RESPONSE_VARIANT_ALSO_NEGOTIATES = 506,
			/** HTTP status code `507 Insufficient Storage`. The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. */
			RESPONSE_INSUFFICIENT_STORAGE = 507,
			/** HTTP status code `508 Loop Detected`. The server terminated an operation because it encountered an infinite loop while processing a request with "Depth: infinity". This status indicates that the entire operation failed. */
			RESPONSE_LOOP_DETECTED = 508,
			/** HTTP status code `510 Not Extended`. The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request. */
			RESPONSE_NOT_EXTENDED = 510,
			/** HTTP status code `511 Network Authentication Required`. The client needs to authenticate to gain network access. */
			RESPONSE_NETWORK_AUTH_REQUIRED = 511,
		}
		enum Status {
			/** Status: Disconnected from the server. */
			STATUS_DISCONNECTED = 0,
			/** Status: Currently resolving the hostname for the given URL into an IP. */
			STATUS_RESOLVING = 1,
			/** Status: DNS failure: Can't resolve the hostname for the given URL. */
			STATUS_CANT_RESOLVE = 2,
			/** Status: Currently connecting to server. */
			STATUS_CONNECTING = 3,
			/** Status: Can't connect to the server. */
			STATUS_CANT_CONNECT = 4,
			/** Status: Connection established. */
			STATUS_CONNECTED = 5,
			/** Status: Currently sending request. */
			STATUS_REQUESTING = 6,
			/** Status: HTTP body received. */
			STATUS_BODY = 7,
			/** Status: Error in HTTP connection. */
			STATUS_CONNECTION_ERROR = 8,
			/** Status: Error in SSL handshake. */
			STATUS_SSL_HANDSHAKE_ERROR = 9,
		}

		/** HTTP GET method. The GET method requests a representation of the specified resource. Requests using GET should only retrieve data. */
		const METHOD_GET: Method.METHOD_GET;

		/** HTTP HEAD method. The HEAD method asks for a response identical to that of a GET request, but without the response body. This is useful to request metadata like HTTP headers or to check if a resource exists. */
		const METHOD_HEAD: Method.METHOD_HEAD;

		/** HTTP POST method. The POST method is used to submit an entity to the specified resource, often causing a change in state or side effects on the server. This is often used for forms and submitting data or uploading files. */
		const METHOD_POST: Method.METHOD_POST;

		/** HTTP PUT method. The PUT method asks to replace all current representations of the target resource with the request payload. (You can think of POST as "create or update" and PUT as "update", although many services tend to not make a clear distinction or change their meaning). */
		const METHOD_PUT: Method.METHOD_PUT;

		/** HTTP DELETE method. The DELETE method requests to delete the specified resource. */
		const METHOD_DELETE: Method.METHOD_DELETE;

		/** HTTP OPTIONS method. The OPTIONS method asks for a description of the communication options for the target resource. Rarely used. */
		const METHOD_OPTIONS: Method.METHOD_OPTIONS;

		/** HTTP TRACE method. The TRACE method performs a message loop-back test along the path to the target resource. Returns the entire HTTP request received in the response body. Rarely used. */
		const METHOD_TRACE: Method.METHOD_TRACE;

		/** HTTP CONNECT method. The CONNECT method establishes a tunnel to the server identified by the target resource. Rarely used. */
		const METHOD_CONNECT: Method.METHOD_CONNECT;

		/** HTTP PATCH method. The PATCH method is used to apply partial modifications to a resource. */
		const METHOD_PATCH: Method.METHOD_PATCH;

		/** Represents the size of the `Method` enum. */
		const METHOD_MAX: Method.METHOD_MAX;

		/** Status: Disconnected from the server. */
		const STATUS_DISCONNECTED: Status.STATUS_DISCONNECTED;

		/** Status: Currently resolving the hostname for the given URL into an IP. */
		const STATUS_RESOLVING: Status.STATUS_RESOLVING;

		/** Status: DNS failure: Can't resolve the hostname for the given URL. */
		const STATUS_CANT_RESOLVE: Status.STATUS_CANT_RESOLVE;

		/** Status: Currently connecting to server. */
		const STATUS_CONNECTING: Status.STATUS_CONNECTING;

		/** Status: Can't connect to the server. */
		const STATUS_CANT_CONNECT: Status.STATUS_CANT_CONNECT;

		/** Status: Connection established. */
		const STATUS_CONNECTED: Status.STATUS_CONNECTED;

		/** Status: Currently sending request. */
		const STATUS_REQUESTING: Status.STATUS_REQUESTING;

		/** Status: HTTP body received. */
		const STATUS_BODY: Status.STATUS_BODY;

		/** Status: Error in HTTP connection. */
		const STATUS_CONNECTION_ERROR: Status.STATUS_CONNECTION_ERROR;

		/** Status: Error in SSL handshake. */
		const STATUS_SSL_HANDSHAKE_ERROR: Status.STATUS_SSL_HANDSHAKE_ERROR;

		/** HTTP status code `100 Continue`. Interim response that indicates everything so far is OK and that the client should continue with the request (or ignore this status if already finished). */
		const RESPONSE_CONTINUE: ResponseCode.RESPONSE_CONTINUE;

		/** HTTP status code `101 Switching Protocol`. Sent in response to an `Upgrade` request header by the client. Indicates the protocol the server is switching to. */
		const RESPONSE_SWITCHING_PROTOCOLS: ResponseCode.RESPONSE_SWITCHING_PROTOCOLS;

		/** HTTP status code `102 Processing` (WebDAV). Indicates that the server has received and is processing the request, but no response is available yet. */
		const RESPONSE_PROCESSING: ResponseCode.RESPONSE_PROCESSING;

		/** HTTP status code `200 OK`. The request has succeeded. Default response for successful requests. Meaning varies depending on the request. GET: The resource has been fetched and is transmitted in the message body. HEAD: The entity headers are in the message body. POST: The resource describing the result of the action is transmitted in the message body. TRACE: The message body contains the request message as received by the server. */
		const RESPONSE_OK: ResponseCode.RESPONSE_OK;

		/** HTTP status code `201 Created`. The request has succeeded and a new resource has been created as a result of it. This is typically the response sent after a PUT request. */
		const RESPONSE_CREATED: ResponseCode.RESPONSE_CREATED;

		/** HTTP status code `202 Accepted`. The request has been received but not yet acted upon. It is non-committal, meaning that there is no way in HTTP to later send an asynchronous response indicating the outcome of processing the request. It is intended for cases where another process or server handles the request, or for batch processing. */
		const RESPONSE_ACCEPTED: ResponseCode.RESPONSE_ACCEPTED;

		/** HTTP status code `203 Non-Authoritative Information`. This response code means returned meta-information set is not exact set as available from the origin server, but collected from a local or a third party copy. Except this condition, 200 OK response should be preferred instead of this response. */
		const RESPONSE_NON_AUTHORITATIVE_INFORMATION: ResponseCode.RESPONSE_NON_AUTHORITATIVE_INFORMATION;

		/** HTTP status code `204 No Content`. There is no content to send for this request, but the headers may be useful. The user-agent may update its cached headers for this resource with the new ones. */
		const RESPONSE_NO_CONTENT: ResponseCode.RESPONSE_NO_CONTENT;

		/** HTTP status code `205 Reset Content`. The server has fulfilled the request and desires that the client resets the "document view" that caused the request to be sent to its original state as received from the origin server. */
		const RESPONSE_RESET_CONTENT: ResponseCode.RESPONSE_RESET_CONTENT;

		/** HTTP status code `206 Partial Content`. This response code is used because of a range header sent by the client to separate download into multiple streams. */
		const RESPONSE_PARTIAL_CONTENT: ResponseCode.RESPONSE_PARTIAL_CONTENT;

		/** HTTP status code `207 Multi-Status` (WebDAV). A Multi-Status response conveys information about multiple resources in situations where multiple status codes might be appropriate. */
		const RESPONSE_MULTI_STATUS: ResponseCode.RESPONSE_MULTI_STATUS;

		/** HTTP status code `208 Already Reported` (WebDAV). Used inside a DAV: propstat response element to avoid enumerating the internal members of multiple bindings to the same collection repeatedly. */
		const RESPONSE_ALREADY_REPORTED: ResponseCode.RESPONSE_ALREADY_REPORTED;

		/** HTTP status code `226 IM Used` (WebDAV). The server has fulfilled a GET request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance. */
		const RESPONSE_IM_USED: ResponseCode.RESPONSE_IM_USED;

		/** HTTP status code `300 Multiple Choice`. The request has more than one possible responses and there is no standardized way to choose one of the responses. User-agent or user should choose one of them. */
		const RESPONSE_MULTIPLE_CHOICES: ResponseCode.RESPONSE_MULTIPLE_CHOICES;

		/** HTTP status code `301 Moved Permanently`. Redirection. This response code means the URI of requested resource has been changed. The new URI is usually included in the response. */
		const RESPONSE_MOVED_PERMANENTLY: ResponseCode.RESPONSE_MOVED_PERMANENTLY;

		/** HTTP status code `302 Found`. Temporary redirection. This response code means the URI of requested resource has been changed temporarily. New changes in the URI might be made in the future. Therefore, this same URI should be used by the client in future requests. */
		const RESPONSE_FOUND: ResponseCode.RESPONSE_FOUND;

		/** HTTP status code `303 See Other`. The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request. */
		const RESPONSE_SEE_OTHER: ResponseCode.RESPONSE_SEE_OTHER;

		/** HTTP status code `304 Not Modified`. A conditional GET or HEAD request has been received and would have resulted in a 200 OK response if it were not for the fact that the condition evaluated to `false`. */
		const RESPONSE_NOT_MODIFIED: ResponseCode.RESPONSE_NOT_MODIFIED;

		/** HTTP status code `305 Use Proxy`. *Deprecated. Do not use.* */
		const RESPONSE_USE_PROXY: ResponseCode.RESPONSE_USE_PROXY;

		/** HTTP status code `306 Switch Proxy`. *Deprecated. Do not use.* */
		const RESPONSE_SWITCH_PROXY: ResponseCode.RESPONSE_SWITCH_PROXY;

		/** HTTP status code `307 Temporary Redirect`. The target resource resides temporarily under a different URI and the user agent MUST NOT change the request method if it performs an automatic redirection to that URI. */
		const RESPONSE_TEMPORARY_REDIRECT: ResponseCode.RESPONSE_TEMPORARY_REDIRECT;

		/** HTTP status code `308 Permanent Redirect`. The target resource has been assigned a new permanent URI and any future references to this resource ought to use one of the enclosed URIs. */
		const RESPONSE_PERMANENT_REDIRECT: ResponseCode.RESPONSE_PERMANENT_REDIRECT;

		/** HTTP status code `400 Bad Request`. The request was invalid. The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, invalid request contents, or deceptive request routing). */
		const RESPONSE_BAD_REQUEST: ResponseCode.RESPONSE_BAD_REQUEST;

		/** HTTP status code `401 Unauthorized`. Credentials required. The request has not been applied because it lacks valid authentication credentials for the target resource. */
		const RESPONSE_UNAUTHORIZED: ResponseCode.RESPONSE_UNAUTHORIZED;

		/** HTTP status code `402 Payment Required`. This response code is reserved for future use. Initial aim for creating this code was using it for digital payment systems, however this is not currently used. */
		const RESPONSE_PAYMENT_REQUIRED: ResponseCode.RESPONSE_PAYMENT_REQUIRED;

		/** HTTP status code `403 Forbidden`. The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike `401`, the client's identity is known to the server. */
		const RESPONSE_FORBIDDEN: ResponseCode.RESPONSE_FORBIDDEN;

		/** HTTP status code `404 Not Found`. The server can not find requested resource. Either the URL is not recognized or the endpoint is valid but the resource itself does not exist. May also be sent instead of 403 to hide existence of a resource if the client is not authorized. */
		const RESPONSE_NOT_FOUND: ResponseCode.RESPONSE_NOT_FOUND;

		/** HTTP status code `405 Method Not Allowed`. The request's HTTP method is known by the server but has been disabled and cannot be used. For example, an API may forbid DELETE-ing a resource. The two mandatory methods, GET and HEAD, must never be disabled and should not return this error code. */
		const RESPONSE_METHOD_NOT_ALLOWED: ResponseCode.RESPONSE_METHOD_NOT_ALLOWED;

		/** HTTP status code `406 Not Acceptable`. The target resource does not have a current representation that would be acceptable to the user agent, according to the proactive negotiation header fields received in the request. Used when negotiation content. */
		const RESPONSE_NOT_ACCEPTABLE: ResponseCode.RESPONSE_NOT_ACCEPTABLE;

		/** HTTP status code `407 Proxy Authentication Required`. Similar to 401 Unauthorized, but it indicates that the client needs to authenticate itself in order to use a proxy. */
		const RESPONSE_PROXY_AUTHENTICATION_REQUIRED: ResponseCode.RESPONSE_PROXY_AUTHENTICATION_REQUIRED;

		/** HTTP status code `408 Request Timeout`. The server did not receive a complete request message within the time that it was prepared to wait. */
		const RESPONSE_REQUEST_TIMEOUT: ResponseCode.RESPONSE_REQUEST_TIMEOUT;

		/** HTTP status code `409 Conflict`. The request could not be completed due to a conflict with the current state of the target resource. This code is used in situations where the user might be able to resolve the conflict and resubmit the request. */
		const RESPONSE_CONFLICT: ResponseCode.RESPONSE_CONFLICT;

		/** HTTP status code `410 Gone`. The target resource is no longer available at the origin server and this condition is likely permanent. */
		const RESPONSE_GONE: ResponseCode.RESPONSE_GONE;

		/** HTTP status code `411 Length Required`. The server refuses to accept the request without a defined Content-Length header. */
		const RESPONSE_LENGTH_REQUIRED: ResponseCode.RESPONSE_LENGTH_REQUIRED;

		/** HTTP status code `412 Precondition Failed`. One or more conditions given in the request header fields evaluated to `false` when tested on the server. */
		const RESPONSE_PRECONDITION_FAILED: ResponseCode.RESPONSE_PRECONDITION_FAILED;

		/** HTTP status code `413 Entity Too Large`. The server is refusing to process a request because the request payload is larger than the server is willing or able to process. */
		const RESPONSE_REQUEST_ENTITY_TOO_LARGE: ResponseCode.RESPONSE_REQUEST_ENTITY_TOO_LARGE;

		/** HTTP status code `414 Request-URI Too Long`. The server is refusing to service the request because the request-target is longer than the server is willing to interpret. */
		const RESPONSE_REQUEST_URI_TOO_LONG: ResponseCode.RESPONSE_REQUEST_URI_TOO_LONG;

		/** HTTP status code `415 Unsupported Media Type`. The origin server is refusing to service the request because the payload is in a format not supported by this method on the target resource. */
		const RESPONSE_UNSUPPORTED_MEDIA_TYPE: ResponseCode.RESPONSE_UNSUPPORTED_MEDIA_TYPE;

		/** HTTP status code `416 Requested Range Not Satisfiable`. None of the ranges in the request's Range header field overlap the current extent of the selected resource or the set of ranges requested has been rejected due to invalid ranges or an excessive request of small or overlapping ranges. */
		const RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE: ResponseCode.RESPONSE_REQUESTED_RANGE_NOT_SATISFIABLE;

		/** HTTP status code `417 Expectation Failed`. The expectation given in the request's Expect header field could not be met by at least one of the inbound servers. */
		const RESPONSE_EXPECTATION_FAILED: ResponseCode.RESPONSE_EXPECTATION_FAILED;

		/** HTTP status code `418 I'm A Teapot`. Any attempt to brew coffee with a teapot should result in the error code "418 I'm a teapot". The resulting entity body MAY be short and stout. */
		const RESPONSE_IM_A_TEAPOT: ResponseCode.RESPONSE_IM_A_TEAPOT;

		/** HTTP status code `421 Misdirected Request`. The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI. */
		const RESPONSE_MISDIRECTED_REQUEST: ResponseCode.RESPONSE_MISDIRECTED_REQUEST;

		/** HTTP status code `422 Unprocessable Entity` (WebDAV). The server understands the content type of the request entity (hence a 415 Unsupported Media Type status code is inappropriate), and the syntax of the request entity is correct (thus a 400 Bad Request status code is inappropriate) but was unable to process the contained instructions. */
		const RESPONSE_UNPROCESSABLE_ENTITY: ResponseCode.RESPONSE_UNPROCESSABLE_ENTITY;

		/** HTTP status code `423 Locked` (WebDAV). The source or destination resource of a method is locked. */
		const RESPONSE_LOCKED: ResponseCode.RESPONSE_LOCKED;

		/** HTTP status code `424 Failed Dependency` (WebDAV). The method could not be performed on the resource because the requested action depended on another action and that action failed. */
		const RESPONSE_FAILED_DEPENDENCY: ResponseCode.RESPONSE_FAILED_DEPENDENCY;

		/** HTTP status code `426 Upgrade Required`. The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. */
		const RESPONSE_UPGRADE_REQUIRED: ResponseCode.RESPONSE_UPGRADE_REQUIRED;

		/** HTTP status code `428 Precondition Required`. The origin server requires the request to be conditional. */
		const RESPONSE_PRECONDITION_REQUIRED: ResponseCode.RESPONSE_PRECONDITION_REQUIRED;

		/** HTTP status code `429 Too Many Requests`. The user has sent too many requests in a given amount of time (see "rate limiting"). Back off and increase time between requests or try again later. */
		const RESPONSE_TOO_MANY_REQUESTS: ResponseCode.RESPONSE_TOO_MANY_REQUESTS;

		/** HTTP status code `431 Request Header Fields Too Large`. The server is unwilling to process the request because its header fields are too large. The request MAY be resubmitted after reducing the size of the request header fields. */
		const RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE: ResponseCode.RESPONSE_REQUEST_HEADER_FIELDS_TOO_LARGE;

		/** HTTP status code `451 Response Unavailable For Legal Reasons`. The server is denying access to the resource as a consequence of a legal demand. */
		const RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS: ResponseCode.RESPONSE_UNAVAILABLE_FOR_LEGAL_REASONS;

		/** HTTP status code `500 Internal Server Error`. The server encountered an unexpected condition that prevented it from fulfilling the request. */
		const RESPONSE_INTERNAL_SERVER_ERROR: ResponseCode.RESPONSE_INTERNAL_SERVER_ERROR;

		/** HTTP status code `501 Not Implemented`. The server does not support the functionality required to fulfill the request. */
		const RESPONSE_NOT_IMPLEMENTED: ResponseCode.RESPONSE_NOT_IMPLEMENTED;

		/** HTTP status code `502 Bad Gateway`. The server, while acting as a gateway or proxy, received an invalid response from an inbound server it accessed while attempting to fulfill the request. Usually returned by load balancers or proxies. */
		const RESPONSE_BAD_GATEWAY: ResponseCode.RESPONSE_BAD_GATEWAY;

		/** HTTP status code `503 Service Unavailable`. The server is currently unable to handle the request due to a temporary overload or scheduled maintenance, which will likely be alleviated after some delay. Try again later. */
		const RESPONSE_SERVICE_UNAVAILABLE: ResponseCode.RESPONSE_SERVICE_UNAVAILABLE;

		/** HTTP status code `504 Gateway Timeout`. The server, while acting as a gateway or proxy, did not receive a timely response from an upstream server it needed to access in order to complete the request. Usually returned by load balancers or proxies. */
		const RESPONSE_GATEWAY_TIMEOUT: ResponseCode.RESPONSE_GATEWAY_TIMEOUT;

		/** HTTP status code `505 HTTP Version Not Supported`. The server does not support, or refuses to support, the major version of HTTP that was used in the request message. */
		const RESPONSE_HTTP_VERSION_NOT_SUPPORTED: ResponseCode.RESPONSE_HTTP_VERSION_NOT_SUPPORTED;

		/** HTTP status code `506 Variant Also Negotiates`. The server has an internal configuration error: the chosen variant resource is configured to engage in transparent content negotiation itself, and is therefore not a proper end point in the negotiation process. */
		const RESPONSE_VARIANT_ALSO_NEGOTIATES: ResponseCode.RESPONSE_VARIANT_ALSO_NEGOTIATES;

		/** HTTP status code `507 Insufficient Storage`. The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request. */
		const RESPONSE_INSUFFICIENT_STORAGE: ResponseCode.RESPONSE_INSUFFICIENT_STORAGE;

		/** HTTP status code `508 Loop Detected`. The server terminated an operation because it encountered an infinite loop while processing a request with "Depth: infinity". This status indicates that the entire operation failed. */
		const RESPONSE_LOOP_DETECTED: ResponseCode.RESPONSE_LOOP_DETECTED;

		/** HTTP status code `510 Not Extended`. The policy for accessing the resource has not been met in the request. The server should send back all the information necessary for the client to issue an extended request. */
		const RESPONSE_NOT_EXTENDED: ResponseCode.RESPONSE_NOT_EXTENDED;

		/** HTTP status code `511 Network Authentication Required`. The client needs to authenticate to gain network access. */
		const RESPONSE_NETWORK_AUTH_REQUIRED: ResponseCode.RESPONSE_NETWORK_AUTH_REQUIRED;
	}

	/** A node with the ability to send HTTP(S) requests.
	 A node with the ability to send HTTP requests. Uses `HTTPClient` internally.

	 Can be used to make HTTP requests, i.e. download or upload files or web content via HTTP.

	 **Example of contacting a REST API and printing one of its returned fields:**

	 ```gdscript
	 func _ready():
	     # Create an HTTP request node and connect its completion signal.
	     var http_request = HTTPRequest.new()
	     add_child(http_request)
	     http_request.connect("request_completed", self, "_http_request_completed")
	 
	     # Perform a GET request. The URL below returns JSON as of writing.
	     var error = http_request.request("https://httpbin.org/get")
	     if error != OK:
	         push_error("An error occurred in the HTTP request.")
	 
	     # Perform a POST request. The URL below returns JSON as of writing.
	     # Note: Don't make simultaneous requests using a single HTTPRequest node.
	     # The snippet below is provided for reference only.
	     var body = {"name": "Godette"}
	     var error = http_request.request("https://httpbin.org/post", [], true, HTTPClient.METHOD_POST, body)
	     if error != OK:
	         push_error("An error occurred in the HTTP request.")
	 
	 
	 # Called when the HTTP request is completed.
	 func _http_request_completed(result, response_code, headers, body):
	     var response = parse_json(body.get_string_from_utf8())
	 
	     # Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).
	     print(response.headers["User-Agent"])
	 ```

	 **Example of loading and displaying an image using HTTPRequest:**

	 ```gdscript
	 func _ready():
	     # Create an HTTP request node and connect its completion signal.
	     var http_request = HTTPRequest.new()
	     add_child(http_request)
	     http_request.connect("request_completed", self, "_http_request_completed")
	 
	     # Perform the HTTP request. The URL below returns a PNG image as of writing.
	     var error = http_request.request("https://via.placeholder.com/512")
	     if error != OK:
	         push_error("An error occurred in the HTTP request.")
	 
	 
	 # Called when the HTTP request is completed.
	 func _http_request_completed(result, response_code, headers, body):
	     var image = Image.new()
	     var error = image.load_png_from_buffer(body)
	     if error != OK:
	         push_error("Couldn't load the image.")
	 
	     var texture = ImageTexture.new()
	     texture.create_from_image(image)
	 
	     # Display the image in a TextureRect node.
	     var texture_rect = TextureRect.new()
	     add_child(texture_rect)
	     texture_rect.texture = texture
	 ``` */
	class HTTPRequest extends Node {

		/** The file to download into. Will output any received file into it. */
		download_file: string;

		/** The size of the buffer used and maximum bytes to read per iteration. See `HTTPClient.read_chunk_size`.

		 Set this to a higher value (e.g. 65536 for 64 KiB) when downloading large files to achieve better speeds at the cost of memory. */
		download_chunk_size: number;

		/** If `true`, multithreading is used to improve performance. */
		use_threads: boolean;

		/** Maximum allowed size for response bodies. */
		body_size_limit: number;

		/** Maximum number of allowed redirects. */
		max_redirects: number;

		/**  */
		timeout: number;

		/** Creates request on the underlying `HTTPClient`. If there is no configuration errors, it tries to connect using `HTTPClient.connect_to_host` and passes parameters onto `HTTPClient.request`.

		 Returns `OK` if request is successfully created. (Does not imply that the server has responded), `ERR_UNCONFIGURED` if not in the tree, `ERR_BUSY` if still processing previous request, `ERR_INVALID_PARAMETER` if given string is not a valid URL format, or `ERR_CANT_CONNECT` if not using thread and the `HTTPClient` cannot connect to host. */
		//@ts-ignore
		request(url: string, custom_headers: PoolStringArray = PoolStringArray(  ), ssl_validate_domain: boolean = true, method: HTTPClient.Method = 0, request_data: string = "") : number;

		/** Cancels the current request. */
		cancel_request() : void;

		/** Returns the current status of the underlying `HTTPClient`. See `HTTPClient.Status`. */
		get_http_client_status() : number;

		/** Returns the amount of bytes this HTTPRequest downloaded. */
		get_downloaded_bytes() : number;

		/** Returns the response body length.

		 **Note:** Some Web servers may not send a body length. In this case, the value returned will be `-1`. If using chunked transfer encoding, the body length will also be `-1`. */
		get_body_size() : number;

		/** Getter of `download_file` property */
		get_download_file() : string;

		/** Setter of `download_file` property */
		set_download_file(p_value: string) : void;

		/** Getter of `download_chunk_size` property */
		get_download_chunk_size() : number;

		/** Setter of `download_chunk_size` property */
		set_download_chunk_size(p_value: number) : void;

		/** Getter of `use_threads` property */
		is_using_threads() : boolean;

		/** Setter of `use_threads` property */
		set_use_threads(p_value: boolean) : void;

		/** Getter of `body_size_limit` property */
		get_body_size_limit() : number;

		/** Setter of `body_size_limit` property */
		set_body_size_limit(p_value: number) : void;

		/** Getter of `max_redirects` property */
		get_max_redirects() : number;

		/** Setter of `max_redirects` property */
		set_max_redirects(p_value: number) : void;

		/** Getter of `timeout` property */
		get_timeout() : number;

		/** Setter of `timeout` property */
		set_timeout(p_value: number) : void;
	}
	namespace HTTPRequest {

		/** Emitted when a request is completed. */
		const request_completed: 'request_completed';
		enum Result {
			/** Request successful. */
			RESULT_SUCCESS = 0,
			/**  */
			RESULT_CHUNKED_BODY_SIZE_MISMATCH = 1,
			/** Request failed while connecting. */
			RESULT_CANT_CONNECT = 2,
			/** Request failed while resolving. */
			RESULT_CANT_RESOLVE = 3,
			/** Request failed due to connection (read/write) error. */
			RESULT_CONNECTION_ERROR = 4,
			/** Request failed on SSL handshake. */
			RESULT_SSL_HANDSHAKE_ERROR = 5,
			/** Request does not have a response (yet). */
			RESULT_NO_RESPONSE = 6,
			/** Request exceeded its maximum size limit, see `body_size_limit`. */
			RESULT_BODY_SIZE_LIMIT_EXCEEDED = 7,
			/** Request failed (currently unused). */
			RESULT_REQUEST_FAILED = 8,
			/** HTTPRequest couldn't open the download file. */
			RESULT_DOWNLOAD_FILE_CANT_OPEN = 9,
			/** HTTPRequest couldn't write to the download file. */
			RESULT_DOWNLOAD_FILE_WRITE_ERROR = 10,
			/** Request reached its maximum redirect limit, see `max_redirects`. */
			RESULT_REDIRECT_LIMIT_REACHED = 11,
			/**  */
			RESULT_TIMEOUT = 12,
		}

		/** Request successful. */
		const RESULT_SUCCESS: Result.RESULT_SUCCESS;

		/**  */
		const RESULT_CHUNKED_BODY_SIZE_MISMATCH: Result.RESULT_CHUNKED_BODY_SIZE_MISMATCH;

		/** Request failed while connecting. */
		const RESULT_CANT_CONNECT: Result.RESULT_CANT_CONNECT;

		/** Request failed while resolving. */
		const RESULT_CANT_RESOLVE: Result.RESULT_CANT_RESOLVE;

		/** Request failed due to connection (read/write) error. */
		const RESULT_CONNECTION_ERROR: Result.RESULT_CONNECTION_ERROR;

		/** Request failed on SSL handshake. */
		const RESULT_SSL_HANDSHAKE_ERROR: Result.RESULT_SSL_HANDSHAKE_ERROR;

		/** Request does not have a response (yet). */
		const RESULT_NO_RESPONSE: Result.RESULT_NO_RESPONSE;

		/** Request exceeded its maximum size limit, see `body_size_limit`. */
		const RESULT_BODY_SIZE_LIMIT_EXCEEDED: Result.RESULT_BODY_SIZE_LIMIT_EXCEEDED;

		/** Request failed (currently unused). */
		const RESULT_REQUEST_FAILED: Result.RESULT_REQUEST_FAILED;

		/** HTTPRequest couldn't open the download file. */
		const RESULT_DOWNLOAD_FILE_CANT_OPEN: Result.RESULT_DOWNLOAD_FILE_CANT_OPEN;

		/** HTTPRequest couldn't write to the download file. */
		const RESULT_DOWNLOAD_FILE_WRITE_ERROR: Result.RESULT_DOWNLOAD_FILE_WRITE_ERROR;

		/** Request reached its maximum redirect limit, see `max_redirects`. */
		const RESULT_REDIRECT_LIMIT_REACHED: Result.RESULT_REDIRECT_LIMIT_REACHED;

		/**  */
		const RESULT_TIMEOUT: Result.RESULT_TIMEOUT;
	}

	/** Context to compute cryptographic hashes over multiple iterations.
	 The HashingContext class provides an interface for computing cryptographic hashes over multiple iterations. This is useful for example when computing hashes of big files (so you don't have to load them all in memory), network streams, and data streams in general (so you don't have to hold buffers).

	 The `HashType` enum shows the supported hashing algorithms.

	 ```gdscript
	 const CHUNK_SIZE = 1024
	 
	 func hash_file(path):
	     var ctx = HashingContext.new()
	     var file = File.new()
	     # Start a SHA-256 context.
	     ctx.start(HashingContext.HASH_SHA256)
	     # Check that file exists.
	     if not file.file_exists(path):
	         return
	     # Open the file to hash.
	     file.open(path, File.READ)
	     # Update the context after reading each chunk.
	     while not file.eof_reached():
	         ctx.update(file.get_buffer(CHUNK_SIZE))
	     # Get the computed hash.
	     var res = ctx.finish()
	     # Print the result as hex string and array.
	     printt(res.hex_encode(), Array(res))
	 ```

	 **Note:** Not available in HTML5 exports. */
	class HashingContext extends Reference {

		/** Starts a new hash computation of the given `type` (e.g. `HASH_SHA256` to start computation of a SHA-256). */
		start(type: HashingContext.HashType) : number;

		/** Updates the computation with the given `chunk` of data. */
		update(chunk: PoolByteArray) : number;

		/** Closes the current context, and return the computed hash. */
		finish() : PoolByteArray;
	}
	namespace HashingContext {
		enum HashType {
			/** Hashing algorithm: MD5. */
			HASH_MD5 = 0,
			/** Hashing algorithm: SHA-1. */
			HASH_SHA1 = 1,
			/** Hashing algorithm: SHA-256. */
			HASH_SHA256 = 2,
		}

		/** Hashing algorithm: MD5. */
		const HASH_MD5: HashType.HASH_MD5;

		/** Hashing algorithm: SHA-1. */
		const HASH_SHA1: HashType.HASH_SHA1;

		/** Hashing algorithm: SHA-256. */
		const HASH_SHA256: HashType.HASH_SHA256;
	}

	/** Height map shape for 3D physics (Bullet only).
	 Height map shape resource, which can be added to a `PhysicsBody` or `Area`. */
	class HeightMapShape extends Shape {

		/** Width of the height map data. Changing this will resize the `map_data`. */
		map_width: number;

		/** Depth of the height map data. Changing this will resize the `map_data`. */
		map_depth: number;

		/** Height map data, pool array must be of `map_width` * `map_depth` size. */
		map_data: PoolRealArray;

		/** Getter of `map_width` property */
		get_map_width() : number;

		/** Setter of `map_width` property */
		set_map_width(p_value: number) : void;

		/** Getter of `map_depth` property */
		get_map_depth() : number;

		/** Setter of `map_depth` property */
		set_map_depth(p_value: number) : void;

		/** Getter of `map_data` property */
		get_map_data() : PoolRealArray;

		/** Setter of `map_data` property */
		set_map_data(p_value: PoolRealArray) : void;
	}
	namespace HeightMapShape {
	}

	/** A hinge between two 3D bodies.
	 A HingeJoint normally uses the Z axis of body A as the hinge axis, another axis can be specified when adding it manually though. */
	class HingeJoint extends Joint {

		/** The speed with which the two bodies get pulled together when they move in different directions. */
		'params/bias': number;

		/** If `true`, the hinges maximum and minimum rotation, defined by `angular_limit/lower` and `angular_limit/upper` has effects. */
		'angular_limit/enable': boolean;

		/** The maximum rotation. Only active if `angular_limit/enable` is `true`. */
		'angular_limit/upper': number;

		/** The minimum rotation. Only active if `angular_limit/enable` is `true`. */
		'angular_limit/lower': number;

		/** The speed with which the rotation across the axis perpendicular to the hinge gets corrected. */
		'angular_limit/bias': number;

		/**  */
		'angular_limit/softness': number;

		/** The lower this value, the more the rotation gets slowed down. */
		'angular_limit/relaxation': number;

		/** When activated, a motor turns the hinge. */
		'motor/enable': boolean;

		/** Target speed for the motor. */
		'motor/target_velocity': number;

		/** Maximum acceleration for the motor. */
		'motor/max_impulse': number;

		/** Sets the value of the specified parameter. */
		set_param(param: HingeJoint.Param, value: number) : void;

		/** Returns the value of the specified parameter. */
		get_param(param: HingeJoint.Param) : number;

		/** If `true`, enables the specified flag. */
		set_flag(flag: HingeJoint.Flag, enabled: boolean) : void;

		/** Returns the value of the specified flag. */
		get_flag(flag: HingeJoint.Flag) : boolean;

		/** Getter of `params/bias` property */
		get_param() : number;

		/** Setter of `params/bias` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_limit/enable` property */
		get_flag() : boolean;

		/** Setter of `angular_limit/enable` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `angular_limit/upper` property */
		_get_upper_limit() : number;

		/** Setter of `angular_limit/upper` property */
		_set_upper_limit(p_value: number) : void;

		/** Getter of `angular_limit/lower` property */
		_get_lower_limit() : number;

		/** Setter of `angular_limit/lower` property */
		_set_lower_limit(p_value: number) : void;

		/** Getter of `angular_limit/bias` property */
		get_param() : number;

		/** Setter of `angular_limit/bias` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_limit/softness` property */
		get_param() : number;

		/** Setter of `angular_limit/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_limit/relaxation` property */
		get_param() : number;

		/** Setter of `angular_limit/relaxation` property */
		set_param(p_value: number) : void;

		/** Getter of `motor/enable` property */
		get_flag() : boolean;

		/** Setter of `motor/enable` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `motor/target_velocity` property */
		get_param() : number;

		/** Setter of `motor/target_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `motor/max_impulse` property */
		get_param() : number;

		/** Setter of `motor/max_impulse` property */
		set_param(p_value: number) : void;
	}
	namespace HingeJoint {
		enum Flag {
			/** If `true`, the hinges maximum and minimum rotation, defined by `angular_limit/lower` and `angular_limit/upper` has effects. */
			FLAG_USE_LIMIT = 0,
			/** When activated, a motor turns the hinge. */
			FLAG_ENABLE_MOTOR = 1,
			/** Represents the size of the `Flag` enum. */
			FLAG_MAX = 2,
		}
		enum Param {
			/** The speed with which the two bodies get pulled together when they move in different directions. */
			PARAM_BIAS = 0,
			/** The maximum rotation. Only active if `angular_limit/enable` is `true`. */
			PARAM_LIMIT_UPPER = 1,
			/** The minimum rotation. Only active if `angular_limit/enable` is `true`. */
			PARAM_LIMIT_LOWER = 2,
			/** The speed with which the rotation across the axis perpendicular to the hinge gets corrected. */
			PARAM_LIMIT_BIAS = 3,
			/**  */
			PARAM_LIMIT_SOFTNESS = 4,
			/** The lower this value, the more the rotation gets slowed down. */
			PARAM_LIMIT_RELAXATION = 5,
			/** Target speed for the motor. */
			PARAM_MOTOR_TARGET_VELOCITY = 6,
			/** Maximum acceleration for the motor. */
			PARAM_MOTOR_MAX_IMPULSE = 7,
			/** Represents the size of the `Param` enum. */
			PARAM_MAX = 8,
		}

		/** The speed with which the two bodies get pulled together when they move in different directions. */
		const PARAM_BIAS: Param.PARAM_BIAS;

		/** The maximum rotation. Only active if `angular_limit/enable` is `true`. */
		const PARAM_LIMIT_UPPER: Param.PARAM_LIMIT_UPPER;

		/** The minimum rotation. Only active if `angular_limit/enable` is `true`. */
		const PARAM_LIMIT_LOWER: Param.PARAM_LIMIT_LOWER;

		/** The speed with which the rotation across the axis perpendicular to the hinge gets corrected. */
		const PARAM_LIMIT_BIAS: Param.PARAM_LIMIT_BIAS;

		/**  */
		const PARAM_LIMIT_SOFTNESS: Param.PARAM_LIMIT_SOFTNESS;

		/** The lower this value, the more the rotation gets slowed down. */
		const PARAM_LIMIT_RELAXATION: Param.PARAM_LIMIT_RELAXATION;

		/** Target speed for the motor. */
		const PARAM_MOTOR_TARGET_VELOCITY: Param.PARAM_MOTOR_TARGET_VELOCITY;

		/** Maximum acceleration for the motor. */
		const PARAM_MOTOR_MAX_IMPULSE: Param.PARAM_MOTOR_MAX_IMPULSE;

		/** Represents the size of the `Param` enum. */
		const PARAM_MAX: Param.PARAM_MAX;

		/** If `true`, the hinges maximum and minimum rotation, defined by `angular_limit/lower` and `angular_limit/upper` has effects. */
		const FLAG_USE_LIMIT: Flag.FLAG_USE_LIMIT;

		/** When activated, a motor turns the hinge. */
		const FLAG_ENABLE_MOTOR: Flag.FLAG_ENABLE_MOTOR;

		/** Represents the size of the `Flag` enum. */
		const FLAG_MAX: Flag.FLAG_MAX;
	}

	/** Internet protocol (IP) support functions such as DNS resolution.
	 IP contains support functions for the Internet Protocol (IP). TCP/IP support is in different classes (see `StreamPeerTCP` and `TCP_Server`). IP provides DNS hostname resolution support, both blocking and threaded. */
	class IP extends Object {

		/** Returns a given hostname's IPv4 or IPv6 address when resolved (blocking-type method). The address type returned depends on the `Type` constant given as `ip_type`. */
		//@ts-ignore
		static resolve_hostname(host: string, ip_type: IP.Type = 3) : string;

		/** Creates a queue item to resolve a hostname to an IPv4 or IPv6 address depending on the `Type` constant given as `ip_type`. Returns the queue ID if successful, or `RESOLVER_INVALID_ID` on error. */
		//@ts-ignore
		static resolve_hostname_queue_item(host: string, ip_type: IP.Type = 3) : number;

		/** Returns a queued hostname's status as a `ResolverStatus` constant, given its queue `id`. */
		static get_resolve_item_status(id: number) : number;

		/** Returns a queued hostname's IP address, given its queue `id`. Returns an empty string on error or if resolution hasn't happened yet (see `get_resolve_item_status`). */
		static get_resolve_item_address(id: number) : string;

		/** Removes a given item `id` from the queue. This should be used to free a queue after it has completed to enable more queries to happen. */
		static erase_resolve_item(id: number) : void;

		/** Returns all of the user's current IPv4 and IPv6 addresses as an array. */
		static get_local_addresses() : any[];

		/** Returns all network adapters as an array.

		 Each adapter is a dictionary of the form:

		 ```gdscript
		 {
		     "index": "1", # Interface index.
		     "name": "eth0", # Interface name.
		     "friendly": "Ethernet One", # A friendly name (might be empty).
		     "addresses": ["192.168.1.101"], # An array of IP addresses associated to this interface.
		 }
		 ``` */
		static get_local_interfaces() : any[];

		/** Removes all of a `hostname`'s cached references. If no `hostname` is given, all cached IP addresses are removed. */
		//@ts-ignore
		static clear_cache(hostname: string = "") : void;
	}
	namespace IP {
		enum ResolverStatus {
			/** DNS hostname resolver status: No status. */
			RESOLVER_STATUS_NONE = 0,
			/** DNS hostname resolver status: Waiting. */
			RESOLVER_STATUS_WAITING = 1,
			/** DNS hostname resolver status: Done. */
			RESOLVER_STATUS_DONE = 2,
			/** DNS hostname resolver status: Error. */
			RESOLVER_STATUS_ERROR = 3,
		}
		enum Type {
			/** Address type: None. */
			TYPE_NONE = 0,
			/** Address type: Internet protocol version 4 (IPv4). */
			TYPE_IPV4 = 1,
			/** Address type: Internet protocol version 6 (IPv6). */
			TYPE_IPV6 = 2,
			/** Address type: Any. */
			TYPE_ANY = 3,
		}

		/** DNS hostname resolver status: No status. */
		const RESOLVER_STATUS_NONE: ResolverStatus.RESOLVER_STATUS_NONE;

		/** DNS hostname resolver status: Waiting. */
		const RESOLVER_STATUS_WAITING: ResolverStatus.RESOLVER_STATUS_WAITING;

		/** DNS hostname resolver status: Done. */
		const RESOLVER_STATUS_DONE: ResolverStatus.RESOLVER_STATUS_DONE;

		/** DNS hostname resolver status: Error. */
		const RESOLVER_STATUS_ERROR: ResolverStatus.RESOLVER_STATUS_ERROR;

		/** Maximum number of concurrent DNS resolver queries allowed, `RESOLVER_INVALID_ID` is returned if exceeded. */
		const RESOLVER_MAX_QUERIES: 32;

		/** Invalid ID constant. Returned if `RESOLVER_MAX_QUERIES` is exceeded. */
		const RESOLVER_INVALID_ID: -1;

		/** Address type: None. */
		const TYPE_NONE: Type.TYPE_NONE;

		/** Address type: Internet protocol version 4 (IPv4). */
		const TYPE_IPV4: Type.TYPE_IPV4;

		/** Address type: Internet protocol version 6 (IPv6). */
		const TYPE_IPV6: Type.TYPE_IPV6;

		/** Address type: Any. */
		const TYPE_ANY: Type.TYPE_ANY;
	}

	/** Image datatype.
	 Native image datatype. Contains image data, which can be converted to a `Texture`, and several functions to interact with it. The maximum width and height for an `Image` are `MAX_WIDTH` and `MAX_HEIGHT`.

	 **Note:** The maximum image size is 16384×16384 pixels due to graphics hardware limitations. Larger images will fail to import. */
	class Image extends Resource {

		/** Holds all of the image's color data in a given format. See `Format` constants. */
		data: object;

		/** Returns the image's width. */
		get_width() : number;

		/** Returns the image's height. */
		get_height() : number;

		/** Returns the image's size (width and height). */
		get_size() : Vector2;

		/** Returns `true` if the image has generated mipmaps. */
		has_mipmaps() : boolean;

		/** Returns the image's format. See `Format` constants. */
		get_format() : number;

		/** Returns the image's raw data. */
		get_data() : PoolByteArray;

		/** Converts the image's format. See `Format` constants. */
		convert(format: Image.Format) : void;

		/** Returns the offset where the image's mipmap with index `mipmap` is stored in the `data` dictionary. */
		get_mipmap_offset(mipmap: number) : number;

		/** Resizes the image to the nearest power of 2 for the width and height. If `square` is `true` then set width and height to be the same. */
		//@ts-ignore
		resize_to_po2(square: boolean = false) : void;

		/** Resizes the image to the given `width` and `height`. New pixels are calculated using `interpolation`. See `interpolation` constants. */
		//@ts-ignore
		resize(width: number, height: number, interpolation: Image.Interpolation = 1) : void;

		/** Shrinks the image by a factor of 2. */
		shrink_x2() : void;

		/** Stretches the image and enlarges it by a factor of 2. No interpolation is done. */
		expand_x2_hq2x() : void;

		/** Crops the image to the given `width` and `height`. If the specified size is larger than the current size, the extra area is filled with black pixels. */
		crop(width: number, height: number) : void;

		/** Flips the image horizontally. */
		flip_x() : void;

		/** Flips the image vertically. */
		flip_y() : void;

		/** Generates mipmaps for the image. Mipmaps are pre-calculated and lower resolution copies of the image. Mipmaps are automatically used if the image needs to be scaled down when rendered. This improves image quality and the performance of the rendering. Returns an error if the image is compressed, in a custom format or if the image's width/height is 0. */
		//@ts-ignore
		generate_mipmaps(renormalize: boolean = false) : number;

		/** Removes the image's mipmaps. */
		clear_mipmaps() : void;

		/** Creates an empty image of given size and format. See `Format` constants. If `use_mipmaps` is `true` then generate mipmaps for this image. See the `generate_mipmaps`. */
		create(width: number, height: number, use_mipmaps: boolean, format: Image.Format) : void;

		/** Creates a new image of given size and format. See `Format` constants. Fills the image with the given raw data. If `use_mipmaps` is `true` then loads mipmaps for this image from `data`. See `generate_mipmaps`. */
		create_from_data(width: number, height: number, use_mipmaps: boolean, format: Image.Format, data: PoolByteArray) : void;

		/** Returns `true` if the image has no data. */
		is_empty() : boolean;

		/** Loads an image from file `path`. See `url=https://docs.godotengine.org/en/latest/getting_started/workflow/assets/importing_images.html#supported-image-formats`Supported image formats`/url` for a list of supported image formats and limitations. */
		load(path: string) : number;

		/** Saves the image as a PNG file to `path`. */
		save_png(path: string) : number;

		/**  */
		save_png_to_buffer() : PoolByteArray;

		/** Saves the image as an EXR file to `path`. If `grayscale` is `true` and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return `ERR_UNAVAILABLE` if Godot was compiled without the TinyEXR module. */
		//@ts-ignore
		save_exr(path: string, grayscale: boolean = false) : number;

		/** Returns `ALPHA_BLEND` if the image has data for alpha values. Returns `ALPHA_BIT` if all the alpha values are stored in a single bit. Returns `ALPHA_NONE` if no data for alpha values is found. */
		detect_alpha() : number;

		/** Returns `true` if all the image's pixels have an alpha value of 0. Returns `false` if any pixel has an alpha value higher than 0. */
		is_invisible() : boolean;

		/** Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. See `CompressMode` and `CompressSource` constants. */
		compress(mode: Image.CompressMode, source: Image.CompressSource, lossy_quality: number) : number;

		/** Decompresses the image if it is compressed. Returns an error if decompress function is not available. */
		decompress() : number;

		/** Returns `true` if the image is compressed. */
		is_compressed() : boolean;

		/** Blends low-alpha pixels with nearby pixels. */
		fix_alpha_edges() : void;

		/** Multiplies color values with alpha values. Resulting color values for a pixel are `(color * alpha)/256`. */
		premultiply_alpha() : void;

		/** Converts the raw data from the sRGB colorspace to a linear scale. */
		srgb_to_linear() : void;

		/** Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normalmap. A normalmap can add lots of detail to a 3D surface without increasing the polygon count. */
		normalmap_to_xy() : void;

		/** Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image. */
		rgbe_to_srgb() : Image;

		/** Converts a bumpmap to a normalmap. A bumpmap provides a height offset per-pixel, while a normalmap provides a normal direction per pixel. */
		//@ts-ignore
		bumpmap_to_normalmap(bump_scale: number = 1.0) : void;

		/** Copies `src_rect` from `src` image to this image at coordinates `dst`. */
		blit_rect(src: Image, src_rect: Rect2, dst: Vector2) : void;

		/** Blits `src_rect` area from `src` image to this image at the coordinates given by `dst`. `src` pixel is copied onto `dst` if the corresponding `mask` pixel's alpha value is not 0. `src` image and `mask` image **must** have the same size (width and height) but they can have different formats. */
		blit_rect_mask(src: Image, mask: Image, src_rect: Rect2, dst: Vector2) : void;

		/** Alpha-blends `src_rect` from `src` image to this image at coordinates `dest`. */
		blend_rect(src: Image, src_rect: Rect2, dst: Vector2) : void;

		/** Alpha-blends `src_rect` from `src` image to this image using `mask` image at coordinates `dst`. Alpha channels are required for both `src` and `mask`. `dst` pixels and `src` pixels will blend if the corresponding mask pixel's alpha value is not 0. `src` image and `mask` image **must** have the same size (width and height) but they can have different formats. */
		blend_rect_mask(src: Image, mask: Image, src_rect: Rect2, dst: Vector2) : void;

		/** Fills the image with a given `Color`. */
		fill(color: Color) : void;

		/** Returns a `Rect2` enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible. */
		get_used_rect() : Rect2;

		/** Returns a new image that is a copy of the image's area specified with `rect`. */
		get_rect(rect: Rect2) : Image;

		/** Copies `src` image to this image. */
		copy_from(src: Image) : void;

		/** Locks the data for reading and writing access. Sends an error to the console if the image is not locked when reading or writing a pixel. */
		lock() : void;

		/** Unlocks the data and prevents changes. */
		unlock() : void;

		/** Returns the color of the pixel at `src` if the image is locked. If the image is unlocked, it always returns a `Color` with the value `(0, 0, 0, 1.0)`. This is the same as `get_pixel`, but with a Vector2 argument instead of two integer arguments. */
		get_pixelv(src: Vector2) : Color;

		/** Returns the color of the pixel at `(x, y)` if the image is locked. If the image is unlocked, it always returns a `Color` with the value `(0, 0, 0, 1.0)`. This is the same as `get_pixelv`, but two integer arguments instead of a Vector2 argument. */
		get_pixel(x: number, y: number) : Color;

		/** Sets the `Color` of the pixel at `(dst.x, dst.y)` if the image is locked. Note that the `dst` values must be integers. Example:

		 ```gdscript
		 var img = Image.new()
		 img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
		 img.lock()
		 img.set_pixelv(Vector2(x, y), color) # Works
		 img.unlock()
		 img.set_pixelv(Vector2(x, y), color) # Does not have an effect
		 ``` */
		set_pixelv(dst: Vector2, color: Color) : void;

		/** Sets the `Color` of the pixel at `(x, y)` if the image is locked. Example:

		 ```gdscript
		 var img = Image.new()
		 img.create(img_width, img_height, false, Image.FORMAT_RGBA8)
		 img.lock()
		 img.set_pixel(x, y, color) # Works
		 img.unlock()
		 img.set_pixel(x, y, color) # Does not have an effect
		 ``` */
		set_pixel(x: number, y: number, color: Color) : void;

		/** Loads an image from the binary contents of a PNG file. */
		load_png_from_buffer(buffer: PoolByteArray) : number;

		/** Loads an image from the binary contents of a JPEG file. */
		load_jpg_from_buffer(buffer: PoolByteArray) : number;

		/** Loads an image from the binary contents of a WebP file. */
		load_webp_from_buffer(buffer: PoolByteArray) : number;

		/** Loads an image from the binary contents of a TGA file. */
		load_tga_from_buffer(buffer: PoolByteArray) : number;

		/** Getter of `data` property */
		_get_data() : object;

		/** Setter of `data` property */
		_set_data(p_value: object) : void;
	}
	namespace Image {
		enum AlphaMode {
			/** Image does not have alpha. */
			ALPHA_NONE = 0,
			/** Image stores alpha in a single bit. */
			ALPHA_BIT = 1,
			/** Image uses alpha. */
			ALPHA_BLEND = 2,
		}
		enum CompressMode {
			/** Use S3TC compression. */
			COMPRESS_S3TC = 0,
			/** Use PVRTC2 compression. */
			COMPRESS_PVRTC2 = 1,
			/** Use PVRTC4 compression. */
			COMPRESS_PVRTC4 = 2,
			/** Use ETC compression. */
			COMPRESS_ETC = 3,
			/** Use ETC2 compression. */
			COMPRESS_ETC2 = 4,
		}
		enum CompressSource {
			/** Source texture (before compression) is a regular texture. Default for all textures. */
			COMPRESS_SOURCE_GENERIC = 0,
			/** Source texture (before compression) is in sRGB space. */
			COMPRESS_SOURCE_SRGB = 1,
			/** Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels). */
			COMPRESS_SOURCE_NORMAL = 2,
		}
		enum Format {
			/** Texture format with a single 8-bit depth representing luminance. */
			FORMAT_L8 = 0,
			/** OpenGL texture format with two values, luminance and alpha each stored with 8 bits. */
			FORMAT_LA8 = 1,
			/** OpenGL texture format `RED` with a single component and a bitdepth of 8. */
			FORMAT_R8 = 2,
			/** OpenGL texture format `RG` with two components and a bitdepth of 8 for each. */
			FORMAT_RG8 = 3,
			/** OpenGL texture format `RGB` with three components, each with a bitdepth of 8.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_RGB8 = 4,
			/** OpenGL texture format `RGBA` with four components, each with a bitdepth of 8.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_RGBA8 = 5,
			/** OpenGL texture format `RGBA` with four components, each with a bitdepth of 4. */
			FORMAT_RGBA4444 = 6,
			/** OpenGL texture format `GL_RGB5_A1` where 5 bits of depth for each component of RGB and one bit for alpha. */
			FORMAT_RGBA5551 = 7,
			/** OpenGL texture format `GL_R32F` where there's one component, a 32-bit floating-point value. */
			FORMAT_RF = 8,
			/** OpenGL texture format `GL_RG32F` where there are two components, each a 32-bit floating-point values. */
			FORMAT_RGF = 9,
			/** OpenGL texture format `GL_RGB32F` where there are three components, each a 32-bit floating-point values. */
			FORMAT_RGBF = 10,
			/** OpenGL texture format `GL_RGBA32F` where there are four components, each a 32-bit floating-point values. */
			FORMAT_RGBAF = 11,
			/** OpenGL texture format `GL_R32F` where there's one component, a 16-bit "half-precision" floating-point value. */
			FORMAT_RH = 12,
			/** OpenGL texture format `GL_RG32F` where there are two components, each a 16-bit "half-precision" floating-point value. */
			FORMAT_RGH = 13,
			/** OpenGL texture format `GL_RGB32F` where there are three components, each a 16-bit "half-precision" floating-point value. */
			FORMAT_RGBH = 14,
			/** OpenGL texture format `GL_RGBA32F` where there are four components, each a 16-bit "half-precision" floating-point value. */
			FORMAT_RGBAH = 15,
			/** A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent. */
			FORMAT_RGBE9995 = 16,
			/** The `url=https://en.wikipedia.org/wiki/S3_Texture_Compression`S3TC`/url` texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_DXT1 = 17,
			/** The `url=https://en.wikipedia.org/wiki/S3_Texture_Compression`S3TC`/url` texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_DXT3 = 18,
			/** The `url=https://en.wikipedia.org/wiki/S3_Texture_Compression`S3TC`/url` texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_DXT5 = 19,
			/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression`Red Green Texture Compression`/url`, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel. */
			FORMAT_RGTC_R = 20,
			/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression`Red Green Texture Compression`/url`, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel. */
			FORMAT_RGTC_RG = 21,
			/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression`BPTC`/url` compression with unsigned normalized RGBA components.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_BPTC_RGBA = 22,
			/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression`BPTC`/url` compression with signed floating-point RGB components. */
			FORMAT_BPTC_RGBF = 23,
			/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression`BPTC`/url` compression with unsigned floating-point RGB components. */
			FORMAT_BPTC_RGBFU = 24,
			/** Texture format used on PowerVR-supported mobile platforms, uses 2-bit color depth with no alpha. More information can be found `url=https://en.wikipedia.org/wiki/PVRTC`here`/url`.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_PVRTC2 = 25,
			/** Same as `url=https://en.wikipedia.org/wiki/PVRTC`PVRTC2`/url`, but with an alpha component. */
			FORMAT_PVRTC2A = 26,
			/** Similar to `url=https://en.wikipedia.org/wiki/PVRTC`PVRTC2`/url`, but with 4-bit color depth and no alpha. */
			FORMAT_PVRTC4 = 27,
			/** Same as `url=https://en.wikipedia.org/wiki/PVRTC`PVRTC4`/url`, but with an alpha component. */
			FORMAT_PVRTC4A = 28,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1`Ericsson Texture Compression format 1`/url`, also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel. */
			FORMAT_ETC = 29,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`R11_EAC` variant), which provides one channel of unsigned data. */
			FORMAT_ETC2_R11 = 30,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`SIGNED_R11_EAC` variant), which provides one channel of signed data. */
			FORMAT_ETC2_R11S = 31,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RG11_EAC` variant), which provides two channels of unsigned data. */
			FORMAT_ETC2_RG11 = 32,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`SIGNED_RG11_EAC` variant), which provides two channels of signed data. */
			FORMAT_ETC2_RG11S = 33,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RGB8` variant), which is a follow-up of ETC1 and compresses RGB888 data.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_ETC2_RGB8 = 34,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RGBA8`variant), which compresses RGBA8888 data with full alpha support.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_ETC2_RGBA8 = 35,
			/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RGB8_PUNCHTHROUGH_ALPHA1` variant), which compresses RGBA data to make alpha either fully transparent or fully opaque.

			 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
			FORMAT_ETC2_RGB8A1 = 36,
			/** Represents the size of the `Format` enum. */
			FORMAT_MAX = 37,
		}
		enum Interpolation {
			/** Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated. */
			INTERPOLATE_NEAREST = 0,
			/** Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than `INTERPOLATE_CUBIC`, but it results in lower quality. */
			INTERPOLATE_BILINEAR = 1,
			/** Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to `INTERPOLATE_BILINEAR`, at the cost of being slower. */
			INTERPOLATE_CUBIC = 2,
			/** Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.

			 It's slower than `INTERPOLATE_BILINEAR`, but produces higher-quality results with much less aliasing artifacts.

			 If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.

			 **Note:** If you intend to scale multiple copies of the original image, it's better to call `generate_mipmaps`` on it in advance, to avoid wasting processing power in generating them again and again.

			 On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image. */
			INTERPOLATE_TRILINEAR = 3,
			/** Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscalng images. */
			INTERPOLATE_LANCZOS = 4,
		}

		/** The maximal width allowed for `Image` resources. */
		const MAX_WIDTH: 16384;

		/** The maximal height allowed for `Image` resources. */
		const MAX_HEIGHT: 16384;

		/** Texture format with a single 8-bit depth representing luminance. */
		const FORMAT_L8: Format.FORMAT_L8;

		/** OpenGL texture format with two values, luminance and alpha each stored with 8 bits. */
		const FORMAT_LA8: Format.FORMAT_LA8;

		/** OpenGL texture format `RED` with a single component and a bitdepth of 8. */
		const FORMAT_R8: Format.FORMAT_R8;

		/** OpenGL texture format `RG` with two components and a bitdepth of 8 for each. */
		const FORMAT_RG8: Format.FORMAT_RG8;

		/** OpenGL texture format `RGB` with three components, each with a bitdepth of 8.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_RGB8: Format.FORMAT_RGB8;

		/** OpenGL texture format `RGBA` with four components, each with a bitdepth of 8.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_RGBA8: Format.FORMAT_RGBA8;

		/** OpenGL texture format `RGBA` with four components, each with a bitdepth of 4. */
		const FORMAT_RGBA4444: Format.FORMAT_RGBA4444;

		/** OpenGL texture format `GL_RGB5_A1` where 5 bits of depth for each component of RGB and one bit for alpha. */
		const FORMAT_RGBA5551: Format.FORMAT_RGBA5551;

		/** OpenGL texture format `GL_R32F` where there's one component, a 32-bit floating-point value. */
		const FORMAT_RF: Format.FORMAT_RF;

		/** OpenGL texture format `GL_RG32F` where there are two components, each a 32-bit floating-point values. */
		const FORMAT_RGF: Format.FORMAT_RGF;

		/** OpenGL texture format `GL_RGB32F` where there are three components, each a 32-bit floating-point values. */
		const FORMAT_RGBF: Format.FORMAT_RGBF;

		/** OpenGL texture format `GL_RGBA32F` where there are four components, each a 32-bit floating-point values. */
		const FORMAT_RGBAF: Format.FORMAT_RGBAF;

		/** OpenGL texture format `GL_R32F` where there's one component, a 16-bit "half-precision" floating-point value. */
		const FORMAT_RH: Format.FORMAT_RH;

		/** OpenGL texture format `GL_RG32F` where there are two components, each a 16-bit "half-precision" floating-point value. */
		const FORMAT_RGH: Format.FORMAT_RGH;

		/** OpenGL texture format `GL_RGB32F` where there are three components, each a 16-bit "half-precision" floating-point value. */
		const FORMAT_RGBH: Format.FORMAT_RGBH;

		/** OpenGL texture format `GL_RGBA32F` where there are four components, each a 16-bit "half-precision" floating-point value. */
		const FORMAT_RGBAH: Format.FORMAT_RGBAH;

		/** A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent. */
		const FORMAT_RGBE9995: Format.FORMAT_RGBE9995;

		/** The `url=https://en.wikipedia.org/wiki/S3_Texture_Compression`S3TC`/url` texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_DXT1: Format.FORMAT_DXT1;

		/** The `url=https://en.wikipedia.org/wiki/S3_Texture_Compression`S3TC`/url` texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_DXT3: Format.FORMAT_DXT3;

		/** The `url=https://en.wikipedia.org/wiki/S3_Texture_Compression`S3TC`/url` texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_DXT5: Format.FORMAT_DXT5;

		/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression`Red Green Texture Compression`/url`, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel. */
		const FORMAT_RGTC_R: Format.FORMAT_RGTC_R;

		/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/Red_Green_Texture_Compression`Red Green Texture Compression`/url`, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel. */
		const FORMAT_RGTC_RG: Format.FORMAT_RGTC_RG;

		/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression`BPTC`/url` compression with unsigned normalized RGBA components.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_BPTC_RGBA: Format.FORMAT_BPTC_RGBA;

		/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression`BPTC`/url` compression with signed floating-point RGB components. */
		const FORMAT_BPTC_RGBF: Format.FORMAT_BPTC_RGBF;

		/** Texture format that uses `url=https://www.khronos.org/opengl/wiki/BPTC_Texture_Compression`BPTC`/url` compression with unsigned floating-point RGB components. */
		const FORMAT_BPTC_RGBFU: Format.FORMAT_BPTC_RGBFU;

		/** Texture format used on PowerVR-supported mobile platforms, uses 2-bit color depth with no alpha. More information can be found `url=https://en.wikipedia.org/wiki/PVRTC`here`/url`.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_PVRTC2: Format.FORMAT_PVRTC2;

		/** Same as `url=https://en.wikipedia.org/wiki/PVRTC`PVRTC2`/url`, but with an alpha component. */
		const FORMAT_PVRTC2A: Format.FORMAT_PVRTC2A;

		/** Similar to `url=https://en.wikipedia.org/wiki/PVRTC`PVRTC2`/url`, but with 4-bit color depth and no alpha. */
		const FORMAT_PVRTC4: Format.FORMAT_PVRTC4;

		/** Same as `url=https://en.wikipedia.org/wiki/PVRTC`PVRTC4`/url`, but with an alpha component. */
		const FORMAT_PVRTC4A: Format.FORMAT_PVRTC4A;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC1`Ericsson Texture Compression format 1`/url`, also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel. */
		const FORMAT_ETC: Format.FORMAT_ETC;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`R11_EAC` variant), which provides one channel of unsigned data. */
		const FORMAT_ETC2_R11: Format.FORMAT_ETC2_R11;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`SIGNED_R11_EAC` variant), which provides one channel of signed data. */
		const FORMAT_ETC2_R11S: Format.FORMAT_ETC2_R11S;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RG11_EAC` variant), which provides two channels of unsigned data. */
		const FORMAT_ETC2_RG11: Format.FORMAT_ETC2_RG11;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`SIGNED_RG11_EAC` variant), which provides two channels of signed data. */
		const FORMAT_ETC2_RG11S: Format.FORMAT_ETC2_RG11S;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RGB8` variant), which is a follow-up of ETC1 and compresses RGB888 data.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_ETC2_RGB8: Format.FORMAT_ETC2_RGB8;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RGBA8`variant), which compresses RGBA8888 data with full alpha support.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_ETC2_RGBA8: Format.FORMAT_ETC2_RGBA8;

		/** `url=https://en.wikipedia.org/wiki/Ericsson_Texture_Compression#ETC2_and_EAC`Ericsson Texture Compression format 2`/url` (`RGB8_PUNCHTHROUGH_ALPHA1` variant), which compresses RGBA data to make alpha either fully transparent or fully opaque.

		 **Note:** When creating an `ImageTexture`, an sRGB to linear color space conversion is performed. */
		const FORMAT_ETC2_RGB8A1: Format.FORMAT_ETC2_RGB8A1;

		/** Represents the size of the `Format` enum. */
		const FORMAT_MAX: Format.FORMAT_MAX;

		/** Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated. */
		const INTERPOLATE_NEAREST: Interpolation.INTERPOLATE_NEAREST;

		/** Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than `INTERPOLATE_CUBIC`, but it results in lower quality. */
		const INTERPOLATE_BILINEAR: Interpolation.INTERPOLATE_BILINEAR;

		/** Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to `INTERPOLATE_BILINEAR`, at the cost of being slower. */
		const INTERPOLATE_CUBIC: Interpolation.INTERPOLATE_CUBIC;

		/** Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them.

		 It's slower than `INTERPOLATE_BILINEAR`, but produces higher-quality results with much less aliasing artifacts.

		 If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image.

		 **Note:** If you intend to scale multiple copies of the original image, it's better to call `generate_mipmaps`` on it in advance, to avoid wasting processing power in generating them again and again.

		 On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image. */
		const INTERPOLATE_TRILINEAR: Interpolation.INTERPOLATE_TRILINEAR;

		/** Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscalng images. */
		const INTERPOLATE_LANCZOS: Interpolation.INTERPOLATE_LANCZOS;

		/** Image does not have alpha. */
		const ALPHA_NONE: AlphaMode.ALPHA_NONE;

		/** Image stores alpha in a single bit. */
		const ALPHA_BIT: AlphaMode.ALPHA_BIT;

		/** Image uses alpha. */
		const ALPHA_BLEND: AlphaMode.ALPHA_BLEND;

		/** Use S3TC compression. */
		const COMPRESS_S3TC: CompressMode.COMPRESS_S3TC;

		/** Use PVRTC2 compression. */
		const COMPRESS_PVRTC2: CompressMode.COMPRESS_PVRTC2;

		/** Use PVRTC4 compression. */
		const COMPRESS_PVRTC4: CompressMode.COMPRESS_PVRTC4;

		/** Use ETC compression. */
		const COMPRESS_ETC: CompressMode.COMPRESS_ETC;

		/** Use ETC2 compression. */
		const COMPRESS_ETC2: CompressMode.COMPRESS_ETC2;

		/** Source texture (before compression) is a regular texture. Default for all textures. */
		const COMPRESS_SOURCE_GENERIC: CompressSource.COMPRESS_SOURCE_GENERIC;

		/** Source texture (before compression) is in sRGB space. */
		const COMPRESS_SOURCE_SRGB: CompressSource.COMPRESS_SOURCE_SRGB;

		/** Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels). */
		const COMPRESS_SOURCE_NORMAL: CompressSource.COMPRESS_SOURCE_NORMAL;
	}

	/** A `Texture` based on an `Image`.
	 A `Texture` based on an `Image`. Can be created from an `Image` with `create_from_image`.

	 **Note:** The maximum image size is 16384×16384 pixels due to graphics hardware limitations. Larger images will fail to import. */
	class ImageTexture extends Texture {

		/** The storage type (raw, lossy, or compressed). */
		storage: number;

		/** The storage quality for `STORAGE_COMPRESS_LOSSY`. */
		lossy_quality: number;

		/**  */
		flags: number;

		/** Create a new `ImageTexture` with `width` and `height`.

		 `format` is a value from `Image.Format`, `flags` is any combination of `Texture.Flags`. */
		//@ts-ignore
		create(width: number, height: number, format: Image.Format, flags: number = 7) : void;

		/** Create a new `ImageTexture` from an `Image` with `flags` from `Texture.Flags`. An sRGB to linear color space conversion can take place, according to `Image.Format`. */
		//@ts-ignore
		create_from_image(image: Image, flags: number = 7) : void;

		/** Returns the format of the `ImageTexture`, one of `Image.Format`. */
		get_format() : number;

		/** Load an `ImageTexture` from a file path. */
		load(path: string) : number;

		/** Sets the `Image` of this `ImageTexture`. */
		set_data(image: Image) : void;

		/** Resizes the `ImageTexture` to the specified dimensions. */
		set_size_override(size: Vector2) : void;

		/** Getter of `storage` property */
		get_storage() : number;

		/** Setter of `storage` property */
		set_storage(p_value: number) : void;

		/** Getter of `lossy_quality` property */
		get_lossy_storage_quality() : number;

		/** Setter of `lossy_quality` property */
		set_lossy_storage_quality(p_value: number) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace ImageTexture {
		enum Storage {
			/** `Image` data is stored raw and unaltered. */
			STORAGE_RAW = 0,
			/** `Image` data is compressed with a lossy algorithm. You can set the storage quality with `lossy_quality`. */
			STORAGE_COMPRESS_LOSSY = 1,
			/** `Image` data is compressed with a lossless algorithm. */
			STORAGE_COMPRESS_LOSSLESS = 2,
		}

		/** `Image` data is stored raw and unaltered. */
		const STORAGE_RAW: Storage.STORAGE_RAW;

		/** `Image` data is compressed with a lossy algorithm. You can set the storage quality with `lossy_quality`. */
		const STORAGE_COMPRESS_LOSSY: Storage.STORAGE_COMPRESS_LOSSY;

		/** `Image` data is compressed with a lossless algorithm. */
		const STORAGE_COMPRESS_LOSSLESS: Storage.STORAGE_COMPRESS_LOSSLESS;
	}

	/** Draws simple geometry from code.
	 Draws simple geometry from code. Uses a drawing mode similar to OpenGL 1.x.

	 See also `ArrayMesh`, `MeshDataTool` and `SurfaceTool` for procedural geometry generation.

	 **Note:** ImmediateGeometry3D is best suited to small amounts of mesh data that change every frame. It will be slow when handling large amounts of mesh data. If mesh data doesn't change often, use `ArrayMesh`, `MeshDataTool` or `SurfaceTool` instead.

	 **Note:** Godot uses clockwise `url=https://learnopengl.com/Advanced-OpenGL/Face-culling`winding order`/url` for front faces of triangle primitive modes. */
	class ImmediateGeometry extends GeometryInstance {

		/** Begin drawing (and optionally pass a texture override). When done call `end`. For more information on how this works, search for `glBegin()` and `glEnd()` references.

		 For the type of primitive, see the `Mesh.PrimitiveType` enum. */
		//@ts-ignore
		begin(primitive: Mesh.PrimitiveType, texture: Texture = null) : void;

		/** The next vertex's normal. */
		set_normal(normal: Vector3) : void;

		/** The next vertex's tangent (and binormal facing). */
		set_tangent(tangent: Plane) : void;

		/** The current drawing color. */
		set_color(color: Color) : void;

		/** The next vertex's UV. */
		set_uv(uv: Vector2) : void;

		/** The next vertex's second layer UV. */
		set_uv2(uv: Vector2) : void;

		/** Adds a vertex in local coordinate space with the currently set color/uv/etc. */
		add_vertex(position: Vector3) : void;

		/** Simple helper to draw an UV sphere with given latitude, longitude and radius. */
		//@ts-ignore
		add_sphere(lats: number, lons: number, radius: number, add_uv: boolean = true) : void;

		/** Ends a drawing context and displays the results. */
		end() : void;

		/** Clears everything that was drawn using begin/end. */
		clear() : void;
	}
	namespace ImmediateGeometry {
	}

	/** A singleton that deals with inputs.
	 A singleton that deals with inputs. This includes key presses, mouse buttons and movement, joypads, and input actions. Actions and their events can be set in the **Input Map** tab in the **Project > Project Settings**, or with the `InputMap` class. */
	//@ts-ignore
	class Input extends Object {

		/** Returns `true` if you are pressing the key. You can pass a `KeyList` constant. */
		static is_key_pressed(scancode: number) : boolean;

		/** Returns `true` if you are pressing the mouse button specified with `ButtonList`. */
		static is_mouse_button_pressed(button: number) : boolean;

		/** Returns `true` if you are pressing the joypad button (see `JoystickList`). */
		static is_joy_button_pressed(device: number, button: number) : boolean;

		/** Returns `true` if you are pressing the action event. Note that if an action has multiple buttons assigned and more than one of them is pressed, releasing one button will release the action, even if some other button assigned to this action is still pressed. */
		static is_action_pressed(action: string) : boolean;

		/** Returns `true` when the user starts pressing the action event, meaning it's `true` only on the frame that the user pressed down the button.

		 This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed. */
		static is_action_just_pressed(action: string) : boolean;

		/** Returns `true` when the user stops pressing the action event, meaning it's `true` only on the frame that the user released the button. */
		static is_action_just_released(action: string) : boolean;

		/** Returns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis as the keyboard, the value returned will be 0 or 1. */
		static get_action_strength(action: string) : number;

		/** Adds a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices. */
		//@ts-ignore
		static add_joy_mapping(mapping: string, update_existing: boolean = false) : void;

		/** Removes all mappings from the internal database that match the given GUID. */
		static remove_joy_mapping(guid: string) : void;

		/** Notifies the `Input` singleton that a connection has changed, to update the state for the `device` index.

		 This is used internally and should not have to be called from user scripts. See `joy_connection_changed` for the signal emitted when this is triggered internally. */
		//@ts-ignore
		static joy_connection_changed(device: number, connected: boolean, name: string, guid: string) : void;

		/** Returns `true` if the system knows the specified device. This means that it sets all button and axis indices exactly as defined in `JoystickList`. Unknown joypads are not expected to match these constants, but you can still retrieve events from them. */
		static is_joy_known(device: number) : boolean;

		/** Returns the current value of the joypad axis at given index (see `JoystickList`). */
		static get_joy_axis(device: number, axis: number) : number;

		/** Returns the name of the joypad at the specified device index. */
		static get_joy_name(device: number) : string;

		/** Returns a SDL2-compatible device GUID on platforms that use gamepad remapping. Returns `"Default Gamepad"` otherwise. */
		static get_joy_guid(device: number) : string;

		/** Returns an `Array` containing the device IDs of all currently connected joypads. */
		static get_connected_joypads() : any[];

		/** Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor. */
		static get_joy_vibration_strength(device: number) : Vector2;

		/** Returns the duration of the current vibration effect in seconds. */
		static get_joy_vibration_duration(device: number) : number;

		/** Receives a gamepad button from `JoystickList` and returns its equivalent name as a string. */
		static get_joy_button_string(button_index: number) : string;

		/** Returns the index of the provided button name. */
		static get_joy_button_index_from_string(button: string) : number;

		/** Receives a `JoystickList` axis and returns its equivalent name as a string. */
		static get_joy_axis_string(axis_index: number) : string;

		/** Returns the index of the provided axis name. */
		static get_joy_axis_index_from_string(axis: string) : number;

		/** Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. `weak_magnitude` is the strength of the weak motor (between 0 and 1) and `strong_magnitude` is the strength of the strong motor (between 0 and 1). `duration` is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely).

		 **Note:** Not every hardware is compatible with long effect durations; it is recommended to restart an effect if it has to be played for more than a few seconds. */
		//@ts-ignore
		static start_joy_vibration(device: number, weak_magnitude: number, strong_magnitude: number, duration: number = 0) : void;

		/** Stops the vibration of the joypad. */
		static stop_joy_vibration(device: number) : void;

		/** Vibrate Android and iOS devices.

		 **Note:** It needs VIBRATE permission for Android at export settings. iOS does not support duration. */
		//@ts-ignore
		static vibrate_handheld(duration_ms: number = 500) : void;

		/** If the device has an accelerometer, this will return the gravity. Otherwise, it returns an empty `Vector3`. */
		static get_gravity() : Vector3;

		/** If the device has an accelerometer, this will return the acceleration. Otherwise, it returns an empty `Vector3`.

		 Note this method returns an empty `Vector3` when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer. */
		static get_accelerometer() : Vector3;

		/** If the device has a magnetometer, this will return the magnetic field strength in micro-Tesla for all axes. */
		static get_magnetometer() : Vector3;

		/** If the device has a gyroscope, this will return the rate of rotation in rad/s around a device's X, Y, and Z axes. Otherwise, it returns an empty `Vector3`. */
		static get_gyroscope() : Vector3;

		/** Returns the mouse speed for the last time the cursor was moved, and this until the next frame where the mouse moves. This means that even if the mouse is not moving, this function will still return the value of the last motion. */
		static get_last_mouse_speed() : Vector2;

		/** Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together. */
		static get_mouse_button_mask() : number;

		/** Sets the mouse mode. See the constants for more information. */
		static set_mouse_mode(mode: Input.MouseMode) : void;

		/** Returns the mouse mode. See the constants for more information. */
		static get_mouse_mode() : number;

		/** Sets the mouse position to the specified vector. */
		static warp_mouse_position(to: Vector2) : void;

		/** This will simulate pressing the specified action.

		 The strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.

		 **Note:** This method will not cause any `Node._input` calls. It is intended to be used with `is_action_pressed` and `is_action_just_pressed`. If you want to simulate `_input`, use `parse_input_event` instead. */
		//@ts-ignore
		static action_press(action: string, strength: number = 1.0) : void;

		/** If the specified action is already pressed, this will release it. */
		static action_release(action: string) : void;

		/** Sets the default cursor shape to be used in the viewport instead of `CURSOR_ARROW`.

		 **Note:** If you want to change the default cursor shape for `Control`'s nodes, use `Control.mouse_default_cursor_shape` instead.

		 **Note:** This method generates an `InputEventMouseMotion` to update cursor immediately. */
		//@ts-ignore
		static set_default_cursor_shape(shape: Input.CursorShape = 0) : void;

		/** Returns the currently assigned cursor shape (see `CursorShape`). */
		static get_current_cursor_shape() : number;

		/** Sets a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing `null` to the image parameter resets to the system cursor. See `CursorShape` for the list of shapes.

		 `image`'s size must be lower than 256×256.

		 `hotspot` must be within `image`'s size.

		 **Note:** `AnimatedTexture`s aren't supported as custom mouse cursors. If using an `AnimatedTexture`, only the first frame will be displayed.

		 **Note:** Only images imported with the **Lossless**, **Lossy** or **Uncompressed** compression modes are supported. The **Video RAM** compression mode can't be used for custom cursors. */
		//@ts-ignore
		static set_custom_mouse_cursor(image: Resource, shape: Input.CursorShape = 0, hotspot: Vector2 = Vector2( 0, 0 )) : void;

		/** Feeds an `InputEvent` to the game. Can be used to artificially trigger input events from code. Also generates `Node._input` calls.

		 Example:

		 ```gdscript
		 var a = InputEventAction.new()
		 a.action = "ui_cancel"
		 a.pressed = true
		 Input.parse_input_event(a)
		 ``` */
		static parse_input_event(event: InputEvent) : void;

		/** Enables or disables the accumulation of similar input events sent by the operating system. When input accumulation is enabled, all input events generated during a frame will be merged and emitted when the frame is done rendering. Therefore, this limits the number of input method calls per second to the rendering FPS.

		 Input accumulation is enabled by default. It can be disabled to get slightly more precise/reactive input at the cost of increased CPU usage. In applications where drawing freehand lines is required, input accumulation should generally be disabled while the user is drawing the line to get results that closely follow the actual input. */
		static set_use_accumulated_input(enable: boolean) : void;
	}
	namespace Input {

		/** Emitted when a joypad device has been connected or disconnected. */
		//@ts-ignore
		const joy_connection_changed: 'joy_connection_changed';
		enum CursorShape {
			/** Arrow cursor. Standard, default pointing cursor. */
			CURSOR_ARROW = 0,
			/** I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked. */
			CURSOR_IBEAM = 1,
			/** Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item. */
			CURSOR_POINTING_HAND = 2,
			/** Cross cursor. Typically appears over regions in which a drawing operation can be performed or for selections. */
			CURSOR_CROSS = 3,
			/** Wait cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application is still usable during the operation. */
			CURSOR_WAIT = 4,
			/** Busy cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application isn't usable during the operation (e.g. something is blocking its main thread). */
			CURSOR_BUSY = 5,
			/** Drag cursor. Usually displayed when dragging something. */
			CURSOR_DRAG = 6,
			/** Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position. */
			CURSOR_CAN_DROP = 7,
			/** Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled. */
			CURSOR_FORBIDDEN = 8,
			/** Vertical resize mouse cursor. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically. */
			CURSOR_VSIZE = 9,
			/** Horizontal resize mouse cursor. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally. */
			CURSOR_HSIZE = 10,
			/** Window resize mouse cursor. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically. */
			CURSOR_BDIAGSIZE = 11,
			/** Window resize mouse cursor. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of `CURSOR_BDIAGSIZE`. It tells the user they can resize the window or the panel both horizontally and vertically. */
			CURSOR_FDIAGSIZE = 12,
			/** Move cursor. Indicates that something can be moved. */
			CURSOR_MOVE = 13,
			/** Vertical split mouse cursor. On Windows, it's the same as `CURSOR_VSIZE`. */
			CURSOR_VSPLIT = 14,
			/** Horizontal split mouse cursor. On Windows, it's the same as `CURSOR_HSIZE`. */
			CURSOR_HSPLIT = 15,
			/** Help cursor. Usually a question mark. */
			CURSOR_HELP = 16,
		}
		enum MouseMode {
			/** Makes the mouse cursor visible if it is hidden. */
			MOUSE_MODE_VISIBLE = 0,
			/** Makes the mouse cursor hidden if it is visible. */
			MOUSE_MODE_HIDDEN = 1,
			/** Captures the mouse. The mouse will be hidden and unable to leave the game window, but it will still register movement and mouse button presses. On Windows and Linux, the mouse will use raw input mode, which means the reported movement will be unaffected by the OS' mouse acceleration settings. */
			MOUSE_MODE_CAPTURED = 2,
			/** Makes the mouse cursor visible but confines it to the game window. */
			MOUSE_MODE_CONFINED = 3,
		}

		/** Makes the mouse cursor visible if it is hidden. */
		const MOUSE_MODE_VISIBLE: MouseMode.MOUSE_MODE_VISIBLE;

		/** Makes the mouse cursor hidden if it is visible. */
		const MOUSE_MODE_HIDDEN: MouseMode.MOUSE_MODE_HIDDEN;

		/** Captures the mouse. The mouse will be hidden and unable to leave the game window, but it will still register movement and mouse button presses. On Windows and Linux, the mouse will use raw input mode, which means the reported movement will be unaffected by the OS' mouse acceleration settings. */
		const MOUSE_MODE_CAPTURED: MouseMode.MOUSE_MODE_CAPTURED;

		/** Makes the mouse cursor visible but confines it to the game window. */
		const MOUSE_MODE_CONFINED: MouseMode.MOUSE_MODE_CONFINED;

		/** Arrow cursor. Standard, default pointing cursor. */
		const CURSOR_ARROW: CursorShape.CURSOR_ARROW;

		/** I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked. */
		const CURSOR_IBEAM: CursorShape.CURSOR_IBEAM;

		/** Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item. */
		const CURSOR_POINTING_HAND: CursorShape.CURSOR_POINTING_HAND;

		/** Cross cursor. Typically appears over regions in which a drawing operation can be performed or for selections. */
		const CURSOR_CROSS: CursorShape.CURSOR_CROSS;

		/** Wait cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application is still usable during the operation. */
		const CURSOR_WAIT: CursorShape.CURSOR_WAIT;

		/** Busy cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application isn't usable during the operation (e.g. something is blocking its main thread). */
		const CURSOR_BUSY: CursorShape.CURSOR_BUSY;

		/** Drag cursor. Usually displayed when dragging something. */
		const CURSOR_DRAG: CursorShape.CURSOR_DRAG;

		/** Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position. */
		const CURSOR_CAN_DROP: CursorShape.CURSOR_CAN_DROP;

		/** Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled. */
		const CURSOR_FORBIDDEN: CursorShape.CURSOR_FORBIDDEN;

		/** Vertical resize mouse cursor. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically. */
		const CURSOR_VSIZE: CursorShape.CURSOR_VSIZE;

		/** Horizontal resize mouse cursor. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally. */
		const CURSOR_HSIZE: CursorShape.CURSOR_HSIZE;

		/** Window resize mouse cursor. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically. */
		const CURSOR_BDIAGSIZE: CursorShape.CURSOR_BDIAGSIZE;

		/** Window resize mouse cursor. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of `CURSOR_BDIAGSIZE`. It tells the user they can resize the window or the panel both horizontally and vertically. */
		const CURSOR_FDIAGSIZE: CursorShape.CURSOR_FDIAGSIZE;

		/** Move cursor. Indicates that something can be moved. */
		const CURSOR_MOVE: CursorShape.CURSOR_MOVE;

		/** Vertical split mouse cursor. On Windows, it's the same as `CURSOR_VSIZE`. */
		const CURSOR_VSPLIT: CursorShape.CURSOR_VSPLIT;

		/** Horizontal split mouse cursor. On Windows, it's the same as `CURSOR_HSIZE`. */
		const CURSOR_HSPLIT: CursorShape.CURSOR_HSPLIT;

		/** Help cursor. Usually a question mark. */
		const CURSOR_HELP: CursorShape.CURSOR_HELP;
	}

	/** Generic input event.
	 Base class of all sort of input event. See `Node._input`. */
	class InputEvent extends Resource {

		/** The event's device ID.

		 **Note:** This device ID will always be `-1` for emulated mouse input from a touchscreen. This can be used to distinguish emulated mouse input from physical mouse input. */
		device: number;

		/** Returns `true` if this input event matches a pre-defined action of any type. */
		is_action(action: string) : boolean;

		/** Returns `true` if the given action is being pressed (and is not an echo event for `InputEventKey` events, unless `allow_echo` is `true`). Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`. */
		//@ts-ignore
		is_action_pressed(action: string, allow_echo: boolean = false) : boolean;

		/** Returns `true` if the given action is released (i.e. not pressed). Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`. */
		is_action_released(action: string) : boolean;

		/** Returns a value between 0.0 and 1.0 depending on the given actions' state. Useful for getting the value of events of type `InputEventJoypadMotion`. */
		get_action_strength(action: string) : number;

		/** Returns `true` if this input event is pressed. Not relevant for events of type `InputEventMouseMotion` or `InputEventScreenDrag`. */
		is_pressed() : boolean;

		/** Returns `true` if this input event is an echo event (only for events of type `InputEventKey`). */
		is_echo() : boolean;

		/** Returns a `String` representation of the event. */
		as_text() : string;

		/** Returns `true` if the given input event is checking for the same key (`InputEventKey`), button (`InputEventJoypadButton`) or action (`InputEventAction`). */
		shortcut_match(event: InputEvent) : boolean;

		/** Returns `true` if this input event's type is one that can be assigned to an input action. */
		is_action_type() : boolean;

		/** Returns `true` if the given input event and this input event can be added together (only for events of type `InputEventMouseMotion`).

		 The given input event's position, global position and speed will be copied. The resulting `relative` is a sum of both events. Both events' modifiers have to be identical. */
		accumulate(with_event: InputEvent) : boolean;

		/** Returns a copy of the given input event which has been offset by `local_ofs` and transformed by `xform`. Relevant for events of type `InputEventMouseButton`, `InputEventMouseMotion`, `InputEventScreenTouch`, `InputEventScreenDrag`, `InputEventMagnifyGesture` and `InputEventPanGesture`. */
		//@ts-ignore
		xformed_by(xform: Transform2D, local_ofs: Vector2 = Vector2( 0, 0 )) : InputEvent;

		/** Getter of `device` property */
		get_device() : number;

		/** Setter of `device` property */
		set_device(p_value: number) : void;
	}
	namespace InputEvent {
	}

	/** Input event type for actions.
	 Contains a generic action which can be targeted from several types of inputs. Actions can be created from the **Input Map** tab in the **Project > Project Settings** menu. See `Node._input`. */
	class InputEventAction extends InputEvent {

		/** The action's name. Actions are accessed via this `String`. */
		action: string;

		/** If `true`, the action's state is pressed. If `false`, the action's state is released. */
		pressed: boolean;

		/** The action's strength between 0 and 1. This value is considered as equal to 0 if pressed is `false`. The event strength allows faking analog joypad motion events, by precising how strongly is the joypad axis bent or pressed. */
		strength: number;

		/** Getter of `action` property */
		get_action() : string;

		/** Setter of `action` property */
		set_action(p_value: string) : void;

		/** Getter of `pressed` property */
		is_pressed() : boolean;

		/** Setter of `pressed` property */
		set_pressed(p_value: boolean) : void;

		/** Getter of `strength` property */
		get_strength() : number;

		/** Setter of `strength` property */
		set_strength(p_value: number) : void;
	}
	namespace InputEventAction {
	}

	/** Base class for touch control gestures.
	  */
	class InputEventGesture extends InputEventWithModifiers {

		/** The local gesture position relative to the `Viewport`. If used in `Control._gui_input`, the position is relative to the current `Control` that received this gesture. */
		position: Vector2;

		/** Getter of `position` property */
		get_position() : Vector2;

		/** Setter of `position` property */
		set_position(p_value: Vector2) : void;
	}
	namespace InputEventGesture {
	}

	/** Input event for gamepad buttons.
	 Input event type for gamepad buttons. For gamepad analog sticks and joysticks, see `InputEventJoypadMotion`. */
	class InputEventJoypadButton extends InputEvent {

		/** Button identifier. One of the `JoystickList` button constants. */
		button_index: number;

		/** Represents the pressure the user puts on the button with his finger, if the controller supports it. Ranges from `0` to `1`. */
		pressure: number;

		/** If `true`, the button's state is pressed. If `false`, the button's state is released. */
		pressed: boolean;

		/** Getter of `button_index` property */
		get_button_index() : number;

		/** Setter of `button_index` property */
		set_button_index(p_value: number) : void;

		/** Getter of `pressure` property */
		get_pressure() : number;

		/** Setter of `pressure` property */
		set_pressure(p_value: number) : void;

		/** Getter of `pressed` property */
		is_pressed() : boolean;

		/** Setter of `pressed` property */
		set_pressed(p_value: boolean) : void;
	}
	namespace InputEventJoypadButton {
	}

	/** Input event type for gamepad joysticks and other motions. For buttons, see `InputEventJoypadButton`.
	 Stores information about joystick motions. One `InputEventJoypadMotion` represents one axis at a time. */
	class InputEventJoypadMotion extends InputEvent {

		/** Axis identifier. Use one of the `JoystickList` axis constants. */
		axis: number;

		/** Current position of the joystick on the given axis. The value ranges from `-1.0` to `1.0`. A value of `0` means the axis is in its resting position. */
		axis_value: number;

		/** Getter of `axis` property */
		get_axis() : number;

		/** Setter of `axis` property */
		set_axis(p_value: number) : void;

		/** Getter of `axis_value` property */
		get_axis_value() : number;

		/** Setter of `axis_value` property */
		set_axis_value(p_value: number) : void;
	}
	namespace InputEventJoypadMotion {
	}

	/** Input event type for keyboard events.
	 Stores key presses on the keyboard. Supports key presses, key releases and `echo` events. */
	class InputEventKey extends InputEventWithModifiers {

		/** If `true`, the key's state is pressed. If `false`, the key's state is released. */
		pressed: boolean;

		/** The key scancode, which corresponds to one of the `KeyList` constants.

		 To get a human-readable representation of the `InputEventKey`, use `OS.get_scancode_string(event.scancode)` where `event` is the `InputEventKey`. */
		scancode: number;

		/** The key Unicode identifier (when relevant). Unicode identifiers for the composite characters and complex scripts may not be available unless IME input mode is active. See `OS.set_ime_active` for more information. */
		unicode: number;

		/** If `true`, the key was already pressed before this event. It means the user is holding the key down. */
		echo: boolean;

		/** Returns the scancode combined with modifier keys such as `Shift` or `Alt`. See also `InputEventWithModifiers`.

		 To get a human-readable representation of the `InputEventKey` with modifiers, use `OS.get_scancode_string(event.get_scancode_with_modifiers())` where `event` is the `InputEventKey`. */
		get_scancode_with_modifiers() : number;

		/** Getter of `pressed` property */
		is_pressed() : boolean;

		/** Setter of `pressed` property */
		set_pressed(p_value: boolean) : void;

		/** Getter of `scancode` property */
		get_scancode() : number;

		/** Setter of `scancode` property */
		set_scancode(p_value: number) : void;

		/** Getter of `unicode` property */
		get_unicode() : number;

		/** Setter of `unicode` property */
		set_unicode(p_value: number) : void;

		/** Getter of `echo` property */
		is_echo() : boolean;

		/** Setter of `echo` property */
		set_echo(p_value: boolean) : void;
	}
	namespace InputEventKey {
	}

	/** 
	  */
	class InputEventMIDI extends InputEvent {

		/**  */
		channel: number;

		/**  */
		message: number;

		/**  */
		pitch: number;

		/**  */
		velocity: number;

		/**  */
		instrument: number;

		/**  */
		pressure: number;

		/**  */
		controller_number: number;

		/**  */
		controller_value: number;

		/** Getter of `channel` property */
		get_channel() : number;

		/** Setter of `channel` property */
		set_channel(p_value: number) : void;

		/** Getter of `message` property */
		get_message() : number;

		/** Setter of `message` property */
		set_message(p_value: number) : void;

		/** Getter of `pitch` property */
		get_pitch() : number;

		/** Setter of `pitch` property */
		set_pitch(p_value: number) : void;

		/** Getter of `velocity` property */
		get_velocity() : number;

		/** Setter of `velocity` property */
		set_velocity(p_value: number) : void;

		/** Getter of `instrument` property */
		get_instrument() : number;

		/** Setter of `instrument` property */
		set_instrument(p_value: number) : void;

		/** Getter of `pressure` property */
		get_pressure() : number;

		/** Setter of `pressure` property */
		set_pressure(p_value: number) : void;

		/** Getter of `controller_number` property */
		get_controller_number() : number;

		/** Setter of `controller_number` property */
		set_controller_number(p_value: number) : void;

		/** Getter of `controller_value` property */
		get_controller_value() : number;

		/** Setter of `controller_value` property */
		set_controller_value(p_value: number) : void;
	}
	namespace InputEventMIDI {
	}

	/** 
	  */
	class InputEventMagnifyGesture extends InputEventGesture {

		/**  */
		factor: number;

		/** Getter of `factor` property */
		get_factor() : number;

		/** Setter of `factor` property */
		set_factor(p_value: number) : void;
	}
	namespace InputEventMagnifyGesture {
	}

	/** Base input event type for mouse events.
	 Stores general mouse events information. */
	class InputEventMouse extends InputEventWithModifiers {

		/** The mouse button mask identifier, one of or a bitwise combination of the `ButtonList` button masks. */
		button_mask: number;

		/** The local mouse position relative to the `Viewport`. If used in `Control._gui_input`, the position is relative to the current `Control` which is under the mouse. */
		position: Vector2;

		/** The global mouse position relative to the current `Viewport` when used in `Control._gui_input`, otherwise is at 0,0. */
		global_position: Vector2;

		/** Getter of `button_mask` property */
		get_button_mask() : number;

		/** Setter of `button_mask` property */
		set_button_mask(p_value: number) : void;

		/** Getter of `position` property */
		get_position() : Vector2;

		/** Setter of `position` property */
		set_position(p_value: Vector2) : void;

		/** Getter of `global_position` property */
		get_global_position() : Vector2;

		/** Setter of `global_position` property */
		set_global_position(p_value: Vector2) : void;
	}
	namespace InputEventMouse {
	}

	/** Input event type for mouse button events.
	 Contains mouse click information. See `Node._input`. */
	class InputEventMouseButton extends InputEventMouse {

		/** The amount (or delta) of the event. When used for high-precision scroll events, this indicates the scroll amount (vertical or horizontal). This is only supported on some platforms; the reported sensitivity varies depending on the platform. May be `0` if not supported. */
		factor: number;

		/** The mouse button identifier, one of the `ButtonList` button or button wheel constants. */
		button_index: number;

		/** If `true`, the mouse button's state is pressed. If `false`, the mouse button's state is released. */
		pressed: boolean;

		/** If `true`, the mouse button's state is a double-click. */
		doubleclick: boolean;

		/** Getter of `factor` property */
		get_factor() : number;

		/** Setter of `factor` property */
		set_factor(p_value: number) : void;

		/** Getter of `button_index` property */
		get_button_index() : number;

		/** Setter of `button_index` property */
		set_button_index(p_value: number) : void;

		/** Getter of `pressed` property */
		is_pressed() : boolean;

		/** Setter of `pressed` property */
		set_pressed(p_value: boolean) : void;

		/** Getter of `doubleclick` property */
		is_doubleclick() : boolean;

		/** Setter of `doubleclick` property */
		set_doubleclick(p_value: boolean) : void;
	}
	namespace InputEventMouseButton {
	}

	/** Input event type for mouse motion events.
	 Contains mouse and pen motion information. Supports relative, absolute positions and speed. See `Node._input`. */
	class InputEventMouseMotion extends InputEventMouse {

		/** Represents the angles of tilt of the pen. Positive X-coordinate value indicates a tilt to the right. Positive Y-coordinate value indicates a tilt toward the user. Ranges from `-1.0` to `1.0` for both axes. */
		tilt: Vector2;

		/** Represents the pressure the user puts on the pen. Ranges from `0.0` to `1.0`. */
		pressure: number;

		/** The mouse position relative to the previous position (position at the last frame).

		 **Note:** Since `InputEventMouseMotion` is only emitted when the mouse moves, the last event won't have a relative position of `Vector2(0, 0)` when the user stops moving the mouse. */
		relative: Vector2;

		/** The mouse speed in pixels per second. */
		speed: Vector2;

		/** Getter of `tilt` property */
		get_tilt() : Vector2;

		/** Setter of `tilt` property */
		set_tilt(p_value: Vector2) : void;

		/** Getter of `pressure` property */
		get_pressure() : number;

		/** Setter of `pressure` property */
		set_pressure(p_value: number) : void;

		/** Getter of `relative` property */
		get_relative() : Vector2;

		/** Setter of `relative` property */
		set_relative(p_value: Vector2) : void;

		/** Getter of `speed` property */
		get_speed() : Vector2;

		/** Setter of `speed` property */
		set_speed(p_value: Vector2) : void;
	}
	namespace InputEventMouseMotion {
	}

	/** 
	  */
	class InputEventPanGesture extends InputEventGesture {

		/**  */
		delta: Vector2;

		/** Getter of `delta` property */
		get_delta() : Vector2;

		/** Setter of `delta` property */
		set_delta(p_value: Vector2) : void;
	}
	namespace InputEventPanGesture {
	}

	/** Input event type for screen drag events. Only available on mobile devices.
	 Contains screen drag information. See `Node._input`. */
	class InputEventScreenDrag extends InputEvent {

		/** The drag event index in the case of a multi-drag event. */
		index: number;

		/** The drag position. */
		position: Vector2;

		/** The drag position relative to its start position. */
		relative: Vector2;

		/** The drag speed. */
		speed: Vector2;

		/** Getter of `index` property */
		get_index() : number;

		/** Setter of `index` property */
		set_index(p_value: number) : void;

		/** Getter of `position` property */
		get_position() : Vector2;

		/** Setter of `position` property */
		set_position(p_value: Vector2) : void;

		/** Getter of `relative` property */
		get_relative() : Vector2;

		/** Setter of `relative` property */
		set_relative(p_value: Vector2) : void;

		/** Getter of `speed` property */
		get_speed() : Vector2;

		/** Setter of `speed` property */
		set_speed(p_value: Vector2) : void;
	}
	namespace InputEventScreenDrag {
	}

	/** Input event type for screen touch events.

	 (only available on mobile devices)
	 Stores multi-touch press/release information. Supports touch press, touch release and `index` for multi-touch count and order. */
	class InputEventScreenTouch extends InputEvent {

		/** The touch index in the case of a multi-touch event. One index = one finger. */
		index: number;

		/** The touch position. */
		position: Vector2;

		/** If `true`, the touch's state is pressed. If `false`, the touch's state is released. */
		pressed: boolean;

		/** Getter of `index` property */
		get_index() : number;

		/** Setter of `index` property */
		set_index(p_value: number) : void;

		/** Getter of `position` property */
		get_position() : Vector2;

		/** Setter of `position` property */
		set_position(p_value: Vector2) : void;

		/** Getter of `pressed` property */
		is_pressed() : boolean;

		/** Setter of `pressed` property */
		set_pressed(p_value: boolean) : void;
	}
	namespace InputEventScreenTouch {
	}

	/** Base class for keys events with modifiers.
	 Contains keys events information with modifiers support like `Shift` or `Alt`. See `Node._input`. */
	class InputEventWithModifiers extends InputEvent {

		/** State of the `Alt` modifier. */
		alt: boolean;

		/** State of the `Shift` modifier. */
		shift: boolean;

		/** State of the `Ctrl` modifier. */
		control: boolean;

		/** State of the `Meta` modifier. */
		meta: boolean;

		/** State of the `Command` modifier. */
		command: boolean;

		/** Getter of `alt` property */
		get_alt() : boolean;

		/** Setter of `alt` property */
		set_alt(p_value: boolean) : void;

		/** Getter of `shift` property */
		get_shift() : boolean;

		/** Setter of `shift` property */
		set_shift(p_value: boolean) : void;

		/** Getter of `control` property */
		get_control() : boolean;

		/** Setter of `control` property */
		set_control(p_value: boolean) : void;

		/** Getter of `meta` property */
		get_metakey() : boolean;

		/** Setter of `meta` property */
		set_metakey(p_value: boolean) : void;

		/** Getter of `command` property */
		get_command() : boolean;

		/** Setter of `command` property */
		set_command(p_value: boolean) : void;
	}
	namespace InputEventWithModifiers {
	}

	/** Singleton that manages `InputEventAction`.
	 Manages all `InputEventAction` which can be created/modified from the project settings menu **Project > Project Settings > Input Map** or in code with `add_action` and `action_add_event`. See `Node._input`. */
	class InputMap extends Object {

		/** Returns `true` if the `InputMap` has a registered action with the given name. */
		static has_action(action: string) : boolean;

		/** Returns an array of all actions in the `InputMap`. */
		static get_actions() : any[];

		/** Adds an empty action to the `InputMap` with a configurable `deadzone`.

		 An `InputEvent` can then be added to this action with `action_add_event`. */
		//@ts-ignore
		static add_action(action: string, deadzone: number = 0.5) : void;

		/** Removes an action from the `InputMap`. */
		static erase_action(action: string) : void;

		/** Sets a deadzone value for the action. */
		static action_set_deadzone(action: string, deadzone: number) : void;

		/** Adds an `InputEvent` to an action. This `InputEvent` will trigger the action. */
		static action_add_event(action: string, event: InputEvent) : void;

		/** Returns `true` if the action has the given `InputEvent` associated with it. */
		static action_has_event(action: string, event: InputEvent) : boolean;

		/** Removes an `InputEvent` from an action. */
		static action_erase_event(action: string, event: InputEvent) : void;

		/** Removes all events from an action. */
		static action_erase_events(action: string) : void;

		/** Returns an array of `InputEvent`s associated with a given action. */
		static get_action_list(action: string) : any[];

		/** Returns `true` if the given event is part of an existing action. This method ignores keyboard modifiers if the given `InputEvent` is not pressed (for proper release detection). See `action_has_event` if you don't want this behavior. */
		static event_is_action(event: InputEvent, action: string) : boolean;

		/** Clears all `InputEventAction` in the `InputMap` and load it anew from `ProjectSettings`. */
		static load_from_globals() : void;
	}
	namespace InputMap {
	}

	/** Placeholder for the root `Node` of a `PackedScene`.
	 Turning on the option **Load As Placeholder** for an instanced scene in the editor causes it to be replaced by an InstancePlaceholder when running the game. This makes it possible to delay actually loading the scene until calling `replace_by_instance`. This is useful to avoid loading large scenes all at once by loading parts of it selectively.

	 The InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again. */
	class InstancePlaceholder extends Node {

		/**  */
		//@ts-ignore
		get_stored_values(with_order: boolean = false) : object;

		/**  */
		//@ts-ignore
		create_instance(replace: boolean = false, custom_scene: PackedScene = null) : Node;

		/** Replaces this placeholder by the scene handed as an argument, or the original scene if no argument is given. As for all resources, the scene is loaded only if it's not loaded already. By manually loading the scene beforehand, delays caused by this function can be avoided. */
		//@ts-ignore
		replace_by_instance(custom_scene: PackedScene = null) : void;

		/** Gets the path to the `PackedScene` resource file that is loaded by default when calling `replace_by_instance`. */
		get_instance_path() : string;
	}
	namespace InstancePlaceholder {
	}

	/** Camera which moves toward another node.
	 InterpolatedCamera is a `Camera` which smoothly moves to match a target node's position and rotation.

	 If it is not `enabled` or does not have a valid target set, InterpolatedCamera acts like a normal Camera. */
	class InterpolatedCamera extends Camera {

		/** The target's `NodePath`. */
		target: string;

		/** How quickly the camera moves toward its target. Higher values will result in tighter camera motion. */
		speed: number;

		/** If `true`, and a target is set, the camera will move automatically. */
		enabled: boolean;

		/** Sets the node to move toward and orient with. */
		set_target(target: Object) : void;

		/** Getter of `target` property */
		get_target_path() : string;

		/** Setter of `target` property */
		set_target_path(p_value: string) : void;

		/** Getter of `speed` property */
		get_speed() : number;

		/** Setter of `speed` property */
		set_speed(p_value: number) : void;

		/** Getter of `enabled` property */
		is_interpolation_enabled() : boolean;

		/** Setter of `enabled` property */
		set_interpolation_enabled(p_value: boolean) : void;
	}
	namespace InterpolatedCamera {
	}

	/** Control that provides a list of selectable items (and/or icons) in a single column, or optionally in multiple columns.
	 This control provides a selectable list of items that may be in a single (or multiple columns) with option of text, icons, or both text and icon. Tooltips are supported and may be different for every item in the list.

	 Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be "activated" by double-clicking them or by pressing Enter.

	 Item text only supports single-line strings, newline characters (e.g. `\n`) in the string won't produce a newline. Text wrapping is enabled in `ICON_MODE_TOP` mode, but column's width is adjusted to fully fit its content by default. You need to set `fixed_column_width` greater than zero to wrap the text. */
	class ItemList extends Control {

		/** Allows single or multiple item selection. See the `SelectMode` constants. */
		select_mode: number;

		/** If `true`, the currently selected item can be selected again. */
		allow_reselect: boolean;

		/** If `true`, right mouse button click can select items. */
		allow_rmb_select: boolean;

		/** Maximum lines of text allowed in each item. Space will be reserved even when there is not enough lines of text to display.

		 **Note:** This property takes effect only when `icon_mode` is `ICON_MODE_TOP`. To make the text wrap, `fixed_column_width` should be greater than zero. */
		max_text_lines: number;

		/** If `true`, the control will automatically resize the height to fit its content. */
		auto_height: boolean;

		/** Maximum columns the list will have.

		 If greater than zero, the content will be split among the specified columns.

		 A value of zero means unlimited columns, i.e. all items will be put in the same row. */
		max_columns: number;

		/** Whether all columns will have the same width.

		 If `true`, the width is equal to the largest column width of all columns. */
		same_column_width: boolean;

		/** The width all columns will be adjusted to.

		 A value of zero disables the adjustment, each item will have a width equal to the width of its content and the columns will have an uneven width. */
		fixed_column_width: number;

		/** The icon position, whether above or to the left of the text. See the `IconMode` constants. */
		icon_mode: number;

		/** The scale of icon applied after `fixed_icon_size` and transposing takes effect. */
		icon_scale: number;

		/** The size all icons will be adjusted to.

		 If either X or Y component is not greater than zero, icon size won't be affected. */
		fixed_icon_size: Vector2;

		/**  */
		rect_clip_content: boolean;

		/**  */
		focus_mode: number;

		/** Adds an item to the item list with specified text. Specify an `icon`, or use `null` as the `icon` for a list item with no icon.

		 If selectable is `true`, the list item will be selectable. */
		//@ts-ignore
		add_item(text: string, icon: Texture = null, selectable: boolean = true) : void;

		/** Adds an item to the item list with no text, only an icon. */
		//@ts-ignore
		add_icon_item(icon: Texture, selectable: boolean = true) : void;

		/** Sets text of the item associated with the specified index. */
		set_item_text(idx: number, text: string) : void;

		/** Returns the text associated with the specified index. */
		get_item_text(idx: number) : string;

		/** Sets (or replaces) the icon's `Texture` associated with the specified index. */
		set_item_icon(idx: number, icon: Texture) : void;

		/** Returns the icon associated with the specified index. */
		get_item_icon(idx: number) : Texture;

		/** Sets whether the item icon will be drawn transposed. */
		set_item_icon_transposed(idx: number, transposed: boolean) : void;

		/** Returns `true` if the item icon will be drawn transposed, i.e. the X and Y axes are swapped. */
		is_item_icon_transposed(idx: number) : boolean;

		/** Sets the region of item's icon used. The whole icon will be used if the region has no area. */
		set_item_icon_region(idx: number, rect: Rect2) : void;

		/** Returns the region of item's icon used. The whole icon will be used if the region has no area. */
		get_item_icon_region(idx: number) : Rect2;

		/** Sets a modulating `Color` of the item associated with the specified index. */
		set_item_icon_modulate(idx: number, modulate: Color) : void;

		/** Returns a `Color` modulating item's icon at the specified index. */
		get_item_icon_modulate(idx: number) : Color;

		/** Allows or disallows selection of the item associated with the specified index. */
		set_item_selectable(idx: number, selectable: boolean) : void;

		/** Returns `true` if the item at the specified index is selectable. */
		is_item_selectable(idx: number) : boolean;

		/** Disables (or enables) the item at the specified index.

		 Disabled items cannot be selected and do not trigger activation signals (when double-clicking or pressing Enter). */
		set_item_disabled(idx: number, disabled: boolean) : void;

		/** Returns `true` if the item at the specified index is disabled. */
		is_item_disabled(idx: number) : boolean;

		/** Sets a value (of any type) to be stored with the item associated with the specified index. */
		set_item_metadata(idx: number, metadata: any) : void;

		/** Returns the metadata value of the specified index. */
		get_item_metadata(idx: number) : any;

		/** Sets the background color of the item specified by `idx` index to the specified `Color`.

		 ```gdscript
		 var some_string = "Some text"
		 some_string.set_item_custom_bg_color(0,Color(1, 0, 0, 1) # This will set the background color of the first item of the control to red.
		 ``` */
		set_item_custom_bg_color(idx: number, custom_bg_color: Color) : void;

		/** Returns the custom background color of the item specified by `idx` index. */
		get_item_custom_bg_color(idx: number) : Color;

		/** Sets the foreground color of the item specified by `idx` index to the specified `Color`.

		 ```gdscript
		 var some_string = "Some text"
		 some_string.set_item_custom_fg_color(0,Color(1, 0, 0, 1) # This will set the foreground color of the first item of the control to red.
		 ``` */
		set_item_custom_fg_color(idx: number, custom_fg_color: Color) : void;

		/** Returns the custom foreground color of the item specified by `idx` index. */
		get_item_custom_fg_color(idx: number) : Color;

		/** Sets whether the tooltip hint is enabled for specified item index. */
		set_item_tooltip_enabled(idx: number, enable: boolean) : void;

		/** Returns `true` if the tooltip is enabled for specified item index. */
		is_item_tooltip_enabled(idx: number) : boolean;

		/** Sets the tooltip hint for the item associated with the specified index. */
		set_item_tooltip(idx: number, tooltip: string) : void;

		/** Returns the tooltip hint associated with the specified index. */
		get_item_tooltip(idx: number) : string;

		/** Select the item at the specified index.

		 **Note:** This method does not trigger the item selection signal. */
		//@ts-ignore
		select(idx: number, single: boolean = true) : void;

		/** Ensures the item associated with the specified index is not selected. */
		unselect(idx: number) : void;

		/** Ensures there are no items selected. */
		unselect_all() : void;

		/** Returns `true` if the item at the specified index is currently selected. */
		is_selected(idx: number) : boolean;

		/** Returns an array with the indexes of the selected items. */
		get_selected_items() : PoolIntArray;

		/** Moves item from index `from_idx` to `to_idx`. */
		move_item(from_idx: number, to_idx: number) : void;

		/** Returns the number of items currently in the list. */
		get_item_count() : number;

		/** Removes the item specified by `idx` index from the list. */
		remove_item(idx: number) : void;

		/** Removes all items from the list. */
		clear() : void;

		/** Sorts items in the list by their text. */
		sort_items_by_text() : void;

		/** Returns `true` if one or more items are selected. */
		is_anything_selected() : boolean;

		/** Returns the item index at the given `position`.

		 When there is no item at that point, -1 will be returned if `exact` is `true`, and the closest item index will be returned otherwise. */
		//@ts-ignore
		get_item_at_position(position: Vector2, exact: boolean = false) : number;

		/** Ensure current selection is visible, adjusting the scroll position as necessary. */
		ensure_current_is_visible() : void;

		/** Returns the `Object` ID associated with the list. */
		get_v_scroll() : VScrollBar;

		/** Getter of `select_mode` property */
		get_select_mode() : number;

		/** Setter of `select_mode` property */
		set_select_mode(p_value: number) : void;

		/** Getter of `allow_reselect` property */
		get_allow_reselect() : boolean;

		/** Setter of `allow_reselect` property */
		set_allow_reselect(p_value: boolean) : void;

		/** Getter of `allow_rmb_select` property */
		get_allow_rmb_select() : boolean;

		/** Setter of `allow_rmb_select` property */
		set_allow_rmb_select(p_value: boolean) : void;

		/** Getter of `max_text_lines` property */
		get_max_text_lines() : number;

		/** Setter of `max_text_lines` property */
		set_max_text_lines(p_value: number) : void;

		/** Getter of `auto_height` property */
		has_auto_height() : boolean;

		/** Setter of `auto_height` property */
		set_auto_height(p_value: boolean) : void;

		/** Getter of `max_columns` property */
		get_max_columns() : number;

		/** Setter of `max_columns` property */
		set_max_columns(p_value: number) : void;

		/** Getter of `same_column_width` property */
		is_same_column_width() : boolean;

		/** Setter of `same_column_width` property */
		set_same_column_width(p_value: boolean) : void;

		/** Getter of `fixed_column_width` property */
		get_fixed_column_width() : number;

		/** Setter of `fixed_column_width` property */
		set_fixed_column_width(p_value: number) : void;

		/** Getter of `icon_mode` property */
		get_icon_mode() : number;

		/** Setter of `icon_mode` property */
		set_icon_mode(p_value: number) : void;

		/** Getter of `icon_scale` property */
		get_icon_scale() : number;

		/** Setter of `icon_scale` property */
		set_icon_scale(p_value: number) : void;

		/** Getter of `fixed_icon_size` property */
		get_fixed_icon_size() : Vector2;

		/** Setter of `fixed_icon_size` property */
		set_fixed_icon_size(p_value: Vector2) : void;

		/** Getter of `rect_clip_content` property */
		is_clipping_contents() : boolean;

		/** Setter of `rect_clip_content` property */
		set_clip_contents(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace ItemList {

		/** Triggered when specified list item is activated via double-clicking or by pressing Enter. */
		const item_activated: 'item_activated';

		/** Triggered when a multiple selection is altered on a list allowing multiple selection. */
		const multi_selected: 'multi_selected';

		/** Triggered when a left mouse click is issued within the rect of the list but on empty space. */
		const nothing_selected: 'nothing_selected';

		/** Triggered when a right mouse click is issued within the rect of the list but on empty space.

			 `allow_rmb_select` must be enabled. */
		const rmb_clicked: 'rmb_clicked';

		/** Triggered when specified list item has been selected via right mouse clicking.

			 The click position is also provided to allow appropriate popup of context menus at the correct location.

			 `allow_rmb_select` must be enabled. */
		const item_rmb_selected: 'item_rmb_selected';

		/** Triggered when specified item has been selected.

			 `allow_reselect` must be enabled to reselect an item. */
		const item_selected: 'item_selected';
		enum IconMode {
			/** Icon is drawn above the text. */
			ICON_MODE_TOP = 0,
			/** Icon is drawn to the left of the text. */
			ICON_MODE_LEFT = 1,
		}
		enum SelectMode {
			/** Only allow selecting a single item. */
			SELECT_SINGLE = 0,
			/** Allows selecting multiple items by holding Ctrl or Shift. */
			SELECT_MULTI = 1,
		}

		/** Icon is drawn above the text. */
		const ICON_MODE_TOP: IconMode.ICON_MODE_TOP;

		/** Icon is drawn to the left of the text. */
		const ICON_MODE_LEFT: IconMode.ICON_MODE_LEFT;

		/** Only allow selecting a single item. */
		const SELECT_SINGLE: SelectMode.SELECT_SINGLE;

		/** Allows selecting multiple items by holding Ctrl or Shift. */
		const SELECT_MULTI: SelectMode.SELECT_MULTI;
	}

	/** 
	  */
	class JNISingleton extends Object {
	}
	namespace JNISingleton {
	}

	/** Helper class for parsing JSON data.
	 Helper class for parsing JSON data. For usage example and other important hints, see `JSONParseResult`. */
	class JSON extends Object {

		/** Converts a `Variant` var to JSON text and returns the result. Useful for serializing data to store or send over the network. */
		//@ts-ignore
		static print(value: any, indent: string = "", sort_keys: boolean = false) : string;

		/** Parses a JSON encoded string and returns a `JSONParseResult` containing the result. */
		static parse(json: string) : JSONParseResult;
	}
	namespace JSON {
	}

	/** Data class wrapper for decoded JSON.
	 Returned by `JSON.parse`, `JSONParseResult` contains the decoded JSON or error information if the JSON source wasn't successfully parsed. You can check if the JSON source was successfully parsed with `if json_result.error == OK`. */
	class JSONParseResult extends Reference {

		/** The error type if the JSON source was not successfully parsed. See the `Error` constants. */
		error: number;

		/** The error message if JSON source was not successfully parsed. See the `Error` constants. */
		error_string: string;

		/** The line number where the error occurred if JSON source was not successfully parsed. */
		error_line: number;

		/** A `Variant` containing the parsed JSON. Use `@GDScript.typeof` or the `is` keyword to check if it is what you expect. For example, if the JSON source starts with curly braces (`{}`), a `Dictionary` will be returned. If the JSON source starts with braces (````), an `Array` will be returned.

		 **Note:** The JSON specification does not define integer or float types, but only a number type. Therefore, parsing a JSON text will convert all numerical values to float types.

		 **Note:** JSON objects do not preserve key order like Godot dictionaries, thus, you should not rely on keys being in a certain order if a dictionary is constructed from JSON. In contrast, JSON arrays retain the order of their elements:

		 ```gdscript
		 var p = JSON.parse('["hello", "world", "!"]')
		 if typeof(p.result) == TYPE_ARRAY:
		     print(p.result[0]) # Prints "hello"
		 else:
		     print("unexpected results")
		 ``` */
		result: any;

		/** Getter of `error` property */
		get_error() : number;

		/** Setter of `error` property */
		set_error(p_value: number) : void;

		/** Getter of `error_string` property */
		get_error_string() : string;

		/** Setter of `error_string` property */
		set_error_string(p_value: string) : void;

		/** Getter of `error_line` property */
		get_error_line() : number;

		/** Setter of `error_line` property */
		set_error_line(p_value: number) : void;

		/** Getter of `result` property */
		get_result() : any;

		/** Setter of `result` property */
		set_result(p_value: any) : void;
	}
	namespace JSONParseResult {
	}

	/** 
	  */
	class JSONRPC extends Object {

		/**  */
		set_scope(scope: string, target: Object) : void;

		/**  */
		//@ts-ignore
		process_action(action: any, recurse: boolean = false) : any;

		/**  */
		process_string(action: string) : string;

		/**  */
		make_request(method: string, params: any, id: any) : object;

		/**  */
		make_response(result: any, id: any) : object;

		/**  */
		make_notification(method: string, params: any) : object;

		/**  */
		//@ts-ignore
		make_response_error(code: number, message: string, id: any = null) : object;
	}
	namespace JSONRPC {
		enum ErrorCode {
			/**  */
			PARSE_ERROR = -32700,
			/**  */
			INVALID_REQUEST = -32600,
			/**  */
			METHOD_NOT_FOUND = -32601,
			/**  */
			INVALID_PARAMS = -32602,
			/**  */
			INTERNAL_ERROR = -32603,
		}

		/**  */
		const PARSE_ERROR: ErrorCode.PARSE_ERROR;

		/**  */
		const INVALID_REQUEST: ErrorCode.INVALID_REQUEST;

		/**  */
		const METHOD_NOT_FOUND: ErrorCode.METHOD_NOT_FOUND;

		/**  */
		const INVALID_PARAMS: ErrorCode.INVALID_PARAMS;

		/**  */
		const INTERNAL_ERROR: ErrorCode.INTERNAL_ERROR;
	}

	/** 
	  */
	class JavaClass extends Reference {
	}
	namespace JavaClass {
	}

	/** 
	  */
	class JavaClassWrapper extends Object {

		/**  */
		static wrap(name: string) : JavaClass;
	}
	namespace JavaClassWrapper {
	}

	/** Singleton that connects the engine with the browser's JavaScript context in HTML5 export.
	 The JavaScript singleton is implemented only in the HTML5 export. It's used to access the browser's JavaScript context. This allows interaction with embedding pages or calling third-party JavaScript APIs. */
	class JavaScript extends Object {

		/** Execute the string `code` as JavaScript code within the browser window. This is a call to the actual global JavaScript function `eval()`.

		 If `use_global_execution_context` is `true`, the code will be evaluated in the global execution context. Otherwise, it is evaluated in the execution context of a function within the engine's runtime environment. */
		//@ts-ignore
		static eval(code: string, use_global_execution_context: boolean = false) : any;
	}
	namespace JavaScript {
	}

	/** Base class for all 3D joints.
	 Joints are used to bind together two physics bodies. They have a solver priority and can define if the bodies of the two attached nodes should be able to collide with each other. */
	class Joint extends Spatial {

		/** The node attached to the first side (A) of the joint. */
		'nodes/node_a': string;

		/** The node attached to the second side (B) of the joint. */
		'nodes/node_b': string;

		/** The priority used to define which solver is executed first for multiple joints. The lower the value, the higher the priority. */
		'solver/priority': number;

		/** If `true`, the two bodies of the nodes are not able to collide with each other. */
		'collision/exclude_nodes': boolean;

		/** Getter of `nodes/node_a` property */
		get_node_a() : string;

		/** Setter of `nodes/node_a` property */
		set_node_a(p_value: string) : void;

		/** Getter of `nodes/node_b` property */
		get_node_b() : string;

		/** Setter of `nodes/node_b` property */
		set_node_b(p_value: string) : void;

		/** Getter of `solver/priority` property */
		get_solver_priority() : number;

		/** Setter of `solver/priority` property */
		set_solver_priority(p_value: number) : void;

		/** Getter of `collision/exclude_nodes` property */
		get_exclude_nodes_from_collision() : boolean;

		/** Setter of `collision/exclude_nodes` property */
		set_exclude_nodes_from_collision(p_value: boolean) : void;
	}
	namespace Joint {
	}

	/** Base node for all joint constraints in 2D physics.
	 Base node for all joint constraints in 2D physics. Joints take 2 bodies and apply a custom constraint. */
	class Joint2D extends Node2D {

		/** The first body attached to the joint. Must derive from `PhysicsBody2D`. */
		node_a: string;

		/** The second body attached to the joint. Must derive from `PhysicsBody2D`. */
		node_b: string;

		/** When `node_a` and `node_b` move in different directions the `bias` controls how fast the joint pulls them back to their original position. The lower the `bias` the more the two bodies can pull on the joint. */
		bias: number;

		/** If `true`, `node_a` and `node_b` can not collide. */
		disable_collision: boolean;

		/** Getter of `node_a` property */
		get_node_a() : string;

		/** Setter of `node_a` property */
		set_node_a(p_value: string) : void;

		/** Getter of `node_b` property */
		get_node_b() : string;

		/** Setter of `node_b` property */
		set_node_b(p_value: string) : void;

		/** Getter of `bias` property */
		get_bias() : number;

		/** Setter of `bias` property */
		set_bias(p_value: number) : void;

		/** Getter of `disable_collision` property */
		get_exclude_nodes_from_collision() : boolean;

		/** Setter of `disable_collision` property */
		set_exclude_nodes_from_collision(p_value: boolean) : void;
	}
	namespace Joint2D {
	}

	/** Kinematic body 3D node.
	 Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:

	 **Simulated motion:** When these bodies are moved manually, either from code or from an `AnimationPlayer` (with `AnimationPlayer.playback_process_mode` set to "physics"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).

	 **Kinematic characters:** KinematicBody also has an API for moving objects (the `move_and_collide` and `move_and_slide` methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics. */
	class KinematicBody extends PhysicsBody {

		/** Lock the body's X axis movement. */
		move_lock_x: boolean;

		/** Lock the body's Y axis movement. */
		move_lock_y: boolean;

		/** Lock the body's Z axis movement. */
		move_lock_z: boolean;

		/** If the body is at least this close to another body, this body will consider them to be colliding. */
		'collision/safe_margin': number;

		/** Moves the body along the vector `rel_vec`. The body will stop if it collides. Returns a `KinematicCollision`, which contains information about the collision.

		 If `test_only` is `true`, the body does not move but the would-be collision information is given. */
		//@ts-ignore
		move_and_collide(rel_vec: Vector3, infinite_inertia: boolean = true, exclude_raycast_shapes: boolean = true, test_only: boolean = false) : KinematicCollision;

		/** Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a `KinematicBody` or `RigidBody`, it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.

		 This method should be used in `Node._physics_process` (or in a method called by `Node._physics_process`), as it uses the physics step's `delta` value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.

		 `linear_velocity` is the velocity vector (typically meters per second). Unlike in `move_and_collide`, you should *not* multiply it by `delta` — the physics engine handles applying the velocity.

		 `up_direction` is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of `Vector3(0, 0, 0)`, everything is considered a wall.

		 If `stop_on_slope` is `true`, body will not slide on slopes when you include gravity in `linear_velocity` and the body is standing still.

		 If the body collides, it will change direction a maximum of `max_slides` times before it stops.

		 `floor_max_angle` is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.

		 If `infinite_inertia` is `true`, body will be able to push `RigidBody` nodes, but it won't also detect any collisions with them. If `false`, it will interact with `RigidBody` nodes like with `StaticBody`.

		 Returns the `linear_velocity` vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use `get_slide_collision`. */
		//@ts-ignore
		move_and_slide(linear_velocity: Vector3, up_direction: Vector3 = Vector3( 0, 0, 0 ), stop_on_slope: boolean = false, max_slides: number = 4, floor_max_angle: number = 0.785398, infinite_inertia: boolean = true) : Vector3;

		/** Moves the body while keeping it attached to slopes. Similar to `move_and_slide`.

		 As long as the `snap` vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting `snap` to `(0, 0, 0)` or by using `move_and_slide` instead. */
		//@ts-ignore
		move_and_slide_with_snap(linear_velocity: Vector3, snap: Vector3, up_direction: Vector3 = Vector3( 0, 0, 0 ), stop_on_slope: boolean = false, max_slides: number = 4, floor_max_angle: number = 0.785398, infinite_inertia: boolean = true) : Vector3;

		/** Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given `Transform`, then tries to move the body along the vector `rel_vec`. Returns `true` if a collision would occur. */
		//@ts-ignore
		test_move(p_from: Transform, rel_vec: Vector3, infinite_inertia: boolean = true) : boolean;

		/** Returns `true` if the body is on the floor. Only updates when calling `move_and_slide`. */
		is_on_floor() : boolean;

		/** Returns `true` if the body is on the ceiling. Only updates when calling `move_and_slide`. */
		is_on_ceiling() : boolean;

		/** Returns `true` if the body is on a wall. Only updates when calling `move_and_slide`. */
		is_on_wall() : boolean;

		/** Returns the surface normal of the floor at the last collision point. Only valid after calling `move_and_slide` or `move_and_slide_with_snap` and when `is_on_floor` returns `true`. */
		get_floor_normal() : Vector3;

		/** Returns the linear velocity of the floor at the last collision point. Only valid after calling `move_and_slide` or `move_and_slide_with_snap` and when `is_on_floor` returns `true`. */
		get_floor_velocity() : Vector3;

		/** Locks or unlocks the specified `axis` depending on the value of `lock`. See also `move_lock_x`, `move_lock_y` and `move_lock_z`. */
		set_axis_lock(axis: PhysicsServer.BodyAxis, lock: boolean) : void;

		/** Returns `true` if the specified `axis` is locked. See also `move_lock_x`, `move_lock_y` and `move_lock_z`. */
		get_axis_lock(axis: PhysicsServer.BodyAxis) : boolean;

		/** Returns the number of times the body collided and changed direction during the last call to `move_and_slide`. */
		get_slide_count() : number;

		/** Returns a `KinematicCollision`, which contains information about a collision that occurred during the last `move_and_slide` call. Since the body can collide several times in a single call to `move_and_slide`, you must specify the index of the collision in the range 0 to (`get_slide_count` - 1). */
		get_slide_collision(slide_idx: number) : KinematicCollision;

		/** Getter of `move_lock_x` property */
		get_axis_lock() : boolean;

		/** Setter of `move_lock_x` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `move_lock_y` property */
		get_axis_lock() : boolean;

		/** Setter of `move_lock_y` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `move_lock_z` property */
		get_axis_lock() : boolean;

		/** Setter of `move_lock_z` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `collision/safe_margin` property */
		get_safe_margin() : number;

		/** Setter of `collision/safe_margin` property */
		set_safe_margin(p_value: number) : void;
	}
	namespace KinematicBody {
	}

	/** Kinematic body 2D node.
	 Kinematic bodies are special types of bodies that are meant to be user-controlled. They are not affected by physics at all; to other types of bodies, such as a character or a rigid body, these are the same as a static body. However, they have two main uses:

	 **Simulated motion:** When these bodies are moved manually, either from code or from an `AnimationPlayer` (with `AnimationPlayer.playback_process_mode` set to "physics"), the physics will automatically compute an estimate of their linear and angular velocity. This makes them very useful for moving platforms or other AnimationPlayer-controlled objects (like a door, a bridge that opens, etc).

	 **Kinematic characters:** KinematicBody2D also has an API for moving objects (the `move_and_collide` and `move_and_slide` methods) while performing collision tests. This makes them really useful to implement characters that collide against a world, but that don't require advanced physics. */
	class KinematicBody2D extends PhysicsBody2D {

		/** If the body is at least this close to another body, this body will consider them to be colliding. */
		'collision/safe_margin': number;

		/** If `true`, the body's movement will be synchronized to the physics frame. This is useful when animating movement via `AnimationPlayer`, for example on moving platforms. Do **not** use together with `move_and_slide` or `move_and_collide` functions. */
		'motion/sync_to_physics': boolean;

		/** Moves the body along the vector `rel_vec`. The body will stop if it collides. Returns a `KinematicCollision2D`, which contains information about the collision.

		 If `test_only` is `true`, the body does not move but the would-be collision information is given. */
		//@ts-ignore
		move_and_collide(rel_vec: Vector2, infinite_inertia: boolean = true, exclude_raycast_shapes: boolean = true, test_only: boolean = false) : KinematicCollision2D;

		/** Moves the body along a vector. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a `KinematicBody2D` or `RigidBody2D`, it will also be affected by the motion of the other body. You can use this to make moving or rotating platforms, or to make nodes push other nodes.

		 This method should be used in `Node._physics_process` (or in a method called by `Node._physics_process`), as it uses the physics step's `delta` value automatically in calculations. Otherwise, the simulation will run at an incorrect speed.

		 `linear_velocity` is the velocity vector in pixels per second. Unlike in `move_and_collide`, you should *not* multiply it by `delta` — the physics engine handles applying the velocity.

		 `up_direction` is the up direction, used to determine what is a wall and what is a floor or a ceiling. If set to the default value of `Vector2(0, 0)`, everything is considered a wall. This is useful for topdown games.

		 If `stop_on_slope` is `true`, body will not slide on slopes when you include gravity in `linear_velocity` and the body is standing still.

		 If the body collides, it will change direction a maximum of `max_slides` times before it stops.

		 `floor_max_angle` is the maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall. The default value equals 45 degrees.

		 If `infinite_inertia` is `true`, body will be able to push `RigidBody2D` nodes, but it won't also detect any collisions with them. If `false`, it will interact with `RigidBody2D` nodes like with `StaticBody2D`.

		 Returns the `linear_velocity` vector, rotated and/or scaled if a slide collision occurred. To get detailed information about collisions that occurred, use `get_slide_collision`. */
		//@ts-ignore
		move_and_slide(linear_velocity: Vector2, up_direction: Vector2 = Vector2( 0, 0 ), stop_on_slope: boolean = false, max_slides: number = 4, floor_max_angle: number = 0.785398, infinite_inertia: boolean = true) : Vector2;

		/** Moves the body while keeping it attached to slopes. Similar to `move_and_slide`.

		 As long as the `snap` vector is in contact with the ground, the body will remain attached to the surface. This means you must disable snap in order to jump, for example. You can do this by setting `snap` to `(0, 0)` or by using `move_and_slide` instead. */
		//@ts-ignore
		move_and_slide_with_snap(linear_velocity: Vector2, snap: Vector2, up_direction: Vector2 = Vector2( 0, 0 ), stop_on_slope: boolean = false, max_slides: number = 4, floor_max_angle: number = 0.785398, infinite_inertia: boolean = true) : Vector2;

		/** Checks for collisions without moving the body. Virtually sets the node's position, scale and rotation to that of the given `Transform2D`, then tries to move the body along the vector `rel_vec`. Returns `true` if a collision would occur. */
		//@ts-ignore
		test_move(p_from: Transform2D, rel_vec: Vector2, infinite_inertia: boolean = true) : boolean;

		/** Returns `true` if the body is on the floor. Only updates when calling `move_and_slide`. */
		is_on_floor() : boolean;

		/** Returns `true` if the body is on the ceiling. Only updates when calling `move_and_slide`. */
		is_on_ceiling() : boolean;

		/** Returns `true` if the body is on a wall. Only updates when calling `move_and_slide`. */
		is_on_wall() : boolean;

		/** Returns the surface normal of the floor at the last collision point. Only valid after calling `move_and_slide` or `move_and_slide_with_snap` and when `is_on_floor` returns `true`. */
		get_floor_normal() : Vector2;

		/** Returns the linear velocity of the floor at the last collision point. Only valid after calling `move_and_slide` or `move_and_slide_with_snap` and when `is_on_floor` returns `true`. */
		get_floor_velocity() : Vector2;

		/** Returns the number of times the body collided and changed direction during the last call to `move_and_slide`. */
		get_slide_count() : number;

		/** Returns a `KinematicCollision2D`, which contains information about a collision that occurred during the last `move_and_slide` call. Since the body can collide several times in a single call to `move_and_slide`, you must specify the index of the collision in the range 0 to (`get_slide_count` - 1).

		 **Example usage:**

		 ```gdscript
		 for i in get_slide_count():
		     var collision = get_slide_collision(i)
		     print("Collided with: ", collision.collider.name)
		 ``` */
		get_slide_collision(slide_idx: number) : KinematicCollision2D;

		/** Getter of `collision/safe_margin` property */
		get_safe_margin() : number;

		/** Setter of `collision/safe_margin` property */
		set_safe_margin(p_value: number) : void;

		/** Getter of `motion/sync_to_physics` property */
		is_sync_to_physics_enabled() : boolean;

		/** Setter of `motion/sync_to_physics` property */
		set_sync_to_physics(p_value: boolean) : void;
	}
	namespace KinematicBody2D {
	}

	/** Collision data for `KinematicBody` collisions.
	 Contains collision data for `KinematicBody` collisions. When a `KinematicBody` is moved using `KinematicBody.move_and_collide`, it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision object is returned.

	 This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response. */
	class KinematicCollision extends Reference {

		/** The point of collision, in global coordinates. */
		position: Vector3;

		/** The colliding body's shape's normal at the point of collision. */
		normal: Vector3;

		/** The distance the moving object traveled before collision. */
		travel: Vector3;

		/** The moving object's remaining movement vector. */
		remainder: Vector3;

		/** The moving object's colliding shape. */
		local_shape: Object;

		/** The colliding body. */
		collider: Object;

		/** The colliding body's unique instance ID. See `Object.get_instance_id`. */
		collider_id: number;

		/** The colliding body's shape. */
		collider_shape: Object;

		/** The colliding shape's index. See `CollisionObject`. */
		collider_shape_index: number;

		/** The colliding object's velocity. */
		collider_velocity: Vector3;

		/** The colliding body's metadata. See `Object`. */
		collider_metadata: any;

		/** Getter of `position` property */
		get_position() : Vector3;

		/** Getter of `normal` property */
		get_normal() : Vector3;

		/** Getter of `travel` property */
		get_travel() : Vector3;

		/** Getter of `remainder` property */
		get_remainder() : Vector3;

		/** Getter of `local_shape` property */
		get_local_shape() : Object;

		/** Getter of `collider` property */
		get_collider() : Object;

		/** Getter of `collider_id` property */
		get_collider_id() : number;

		/** Getter of `collider_shape` property */
		get_collider_shape() : Object;

		/** Getter of `collider_shape_index` property */
		get_collider_shape_index() : number;

		/** Getter of `collider_velocity` property */
		get_collider_velocity() : Vector3;

		/** Getter of `collider_metadata` property */
		get_collider_metadata() : any;
	}
	namespace KinematicCollision {
	}

	/** Collision data for `KinematicBody2D` collisions.
	 Contains collision data for `KinematicBody2D` collisions. When a `KinematicBody2D` is moved using `KinematicBody2D.move_and_collide`, it stops if it detects a collision with another body. If a collision is detected, a KinematicCollision2D object is returned.

	 This object contains information about the collision, including the colliding object, the remaining motion, and the collision position. This information can be used to calculate a collision response. */
	class KinematicCollision2D extends Reference {

		/** The point of collision, in global coordinates. */
		position: Vector2;

		/** The colliding body's shape's normal at the point of collision. */
		normal: Vector2;

		/** The distance the moving object traveled before collision. */
		travel: Vector2;

		/** The moving object's remaining movement vector. */
		remainder: Vector2;

		/** The moving object's colliding shape. */
		local_shape: Object;

		/** The colliding body. */
		collider: Object;

		/** The colliding body's unique instance ID. See `Object.get_instance_id`. */
		collider_id: number;

		/** The colliding body's shape. */
		collider_shape: Object;

		/** The colliding shape's index. See `CollisionObject2D`. */
		collider_shape_index: number;

		/** The colliding object's velocity. */
		collider_velocity: Vector2;

		/** The colliding body's metadata. See `Object`. */
		collider_metadata: any;

		/** Getter of `position` property */
		get_position() : Vector2;

		/** Getter of `normal` property */
		get_normal() : Vector2;

		/** Getter of `travel` property */
		get_travel() : Vector2;

		/** Getter of `remainder` property */
		get_remainder() : Vector2;

		/** Getter of `local_shape` property */
		get_local_shape() : Object;

		/** Getter of `collider` property */
		get_collider() : Object;

		/** Getter of `collider_id` property */
		get_collider_id() : number;

		/** Getter of `collider_shape` property */
		get_collider_shape() : Object;

		/** Getter of `collider_shape_index` property */
		get_collider_shape_index() : number;

		/** Getter of `collider_velocity` property */
		get_collider_velocity() : Vector2;

		/** Getter of `collider_metadata` property */
		get_collider_metadata() : any;
	}
	namespace KinematicCollision2D {
	}

	/** Displays plain text in a line or wrapped inside a rectangle. For formatted text, use `RichTextLabel`.
	 Label displays plain text on the screen. It gives you control over the horizontal and vertical alignment, and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics or other formatting. For that, use `RichTextLabel` instead.

	 **Note:** Contrarily to most other `Control`s, Label's `Control.mouse_filter` defaults to `Control.MOUSE_FILTER_IGNORE` (i.e. it doesn't react to mouse input events). This implies that a label won't display any configured `Control.hint_tooltip`, unless you change its mouse filter. */
	class Label extends Control {

		/** The text to display on screen. */
		text: string;

		/** Controls the text's horizontal align. Supports left, center, right, and fill, or justify. Set it to one of the `Align` constants. */
		align: number;

		/** Controls the text's vertical align. Supports top, center, bottom, and fill. Set it to one of the `VAlign` constants. */
		valign: number;

		/** If `true`, wraps the text inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. */
		autowrap: boolean;

		/** If `true`, the Label only shows the text that fits inside its bounding rectangle. It also lets you scale the node down freely. */
		clip_text: boolean;

		/** If `true`, all the text displays as UPPERCASE. */
		uppercase: boolean;

		/** Restricts the number of characters to display. Set to -1 to disable. */
		visible_characters: number;

		/** Limits the amount of visible characters. If you set `percent_visible` to 0.5, only up to half of the text's characters will display on screen. Useful to animate the text in a dialog box. */
		percent_visible: number;

		/** The node ignores the first `lines_skipped` lines before it starts to display text. */
		lines_skipped: number;

		/** Limits the lines of text the node shows on screen. */
		max_lines_visible: number;

		/**  */
		mouse_filter: number;

		/**  */
		size_flags_vertical: number;

		/** Returns the font size in pixels. */
		get_line_height() : number;

		/** Returns the amount of lines of text the Label has. */
		get_line_count() : number;

		/** Returns the number of lines shown. Useful if the `Label`'s height cannot currently display all lines. */
		get_visible_line_count() : number;

		/** Returns the total number of printable characters in the text (excluding spaces and newlines). */
		get_total_character_count() : number;

		/** Getter of `text` property */
		get_text() : string;

		/** Setter of `text` property */
		set_text(p_value: string) : void;

		/** Getter of `align` property */
		get_align() : number;

		/** Setter of `align` property */
		set_align(p_value: number) : void;

		/** Getter of `valign` property */
		get_valign() : number;

		/** Setter of `valign` property */
		set_valign(p_value: number) : void;

		/** Getter of `autowrap` property */
		has_autowrap() : boolean;

		/** Setter of `autowrap` property */
		set_autowrap(p_value: boolean) : void;

		/** Getter of `clip_text` property */
		is_clipping_text() : boolean;

		/** Setter of `clip_text` property */
		set_clip_text(p_value: boolean) : void;

		/** Getter of `uppercase` property */
		is_uppercase() : boolean;

		/** Setter of `uppercase` property */
		set_uppercase(p_value: boolean) : void;

		/** Getter of `visible_characters` property */
		get_visible_characters() : number;

		/** Setter of `visible_characters` property */
		set_visible_characters(p_value: number) : void;

		/** Getter of `percent_visible` property */
		get_percent_visible() : number;

		/** Setter of `percent_visible` property */
		set_percent_visible(p_value: number) : void;

		/** Getter of `lines_skipped` property */
		get_lines_skipped() : number;

		/** Setter of `lines_skipped` property */
		set_lines_skipped(p_value: number) : void;

		/** Getter of `max_lines_visible` property */
		get_max_lines_visible() : number;

		/** Setter of `max_lines_visible` property */
		set_max_lines_visible(p_value: number) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;
	}
	namespace Label {
		enum Align {
			/** Align rows to the left (default). */
			ALIGN_LEFT = 0,
			/** Align rows centered. */
			ALIGN_CENTER = 1,
			/** Align rows to the right. */
			ALIGN_RIGHT = 2,
			/** Expand row whitespaces to fit the width. */
			ALIGN_FILL = 3,
		}
		enum VAlign {
			/** Align the whole text to the top. */
			VALIGN_TOP = 0,
			/** Align the whole text to the center. */
			VALIGN_CENTER = 1,
			/** Align the whole text to the bottom. */
			VALIGN_BOTTOM = 2,
			/** Align the whole text by spreading the rows. */
			VALIGN_FILL = 3,
		}

		/** Align rows to the left (default). */
		const ALIGN_LEFT: Align.ALIGN_LEFT;

		/** Align rows centered. */
		const ALIGN_CENTER: Align.ALIGN_CENTER;

		/** Align rows to the right. */
		const ALIGN_RIGHT: Align.ALIGN_RIGHT;

		/** Expand row whitespaces to fit the width. */
		const ALIGN_FILL: Align.ALIGN_FILL;

		/** Align the whole text to the top. */
		const VALIGN_TOP: VAlign.VALIGN_TOP;

		/** Align the whole text to the center. */
		const VALIGN_CENTER: VAlign.VALIGN_CENTER;

		/** Align the whole text to the bottom. */
		const VALIGN_BOTTOM: VAlign.VALIGN_BOTTOM;

		/** Align the whole text by spreading the rows. */
		const VALIGN_FILL: VAlign.VALIGN_FILL;
	}

	/** A `Texture` capable of storing many smaller textures with offsets.
	 A `Texture` capable of storing many smaller textures with offsets.

	 You can dynamically add pieces (`Texture`s) to this `LargeTexture` using different offsets. */
	class LargeTexture extends Texture {

		/**  */
		flags: number;

		/** Adds `texture` to this `LargeTexture`, starting on offset `ofs`. */
		add_piece(ofs: Vector2, texture: Texture) : number;

		/** Sets the offset of the piece with the index `idx` to `ofs`. */
		set_piece_offset(idx: number, ofs: Vector2) : void;

		/** Sets the `Texture` of the piece with index `idx` to `texture`. */
		set_piece_texture(idx: number, texture: Texture) : void;

		/** Sets the size of this `LargeTexture`. */
		set_size(size: Vector2) : void;

		/** Clears the `LargeTexture`. */
		clear() : void;

		/** Returns the number of pieces currently in this `LargeTexture`. */
		get_piece_count() : number;

		/** Returns the offset of the piece with the index `idx`. */
		get_piece_offset(idx: number) : Vector2;

		/** Returns the `Texture` of the piece with the index `idx`. */
		get_piece_texture(idx: number) : Texture;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace LargeTexture {
	}

	/** Provides a base class for different kinds of light nodes.
	 Light is the *abstract* base class for light nodes. As it can't be instanced, it shouldn't be used directly. Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting. */
	class Light extends VisualInstance {

		/** The light's color. An *overbright* color can be used to achieve a result equivalent to increasing the light's `light_energy`. */
		light_color: Color;

		/** The light's strength multiplier (this is not a physical unit). For `OmniLight` and `SpotLight`, changing this value will only change the light color's intensity, not the light's radius. */
		light_energy: number;

		/** Secondary multiplier used with indirect light (light bounces). This works on both `BakedLightmap` and `GIProbe`. */
		light_indirect_energy: number;

		/** If `true`, the light's effect is reversed, darkening areas and casting bright shadows. */
		light_negative: boolean;

		/** The intensity of the specular blob in objects affected by the light. At `0`, the light becomes a pure diffuse light. When not baking emission, this can be used to avoid unrealistic reflections when placing lights above an emissive surface. */
		light_specular: number;

		/** The light's bake mode. See `BakeMode`. */
		light_bake_mode: number;

		/** The light will affect objects in the selected layers. */
		light_cull_mask: number;

		/** If `true`, the light will cast shadows. */
		shadow_enabled: boolean;

		/** The color of shadows cast by this light. */
		shadow_color: Color;

		/** Used to adjust shadow appearance. Too small a value results in self-shadowing ("shadow acne"), while too large a value causes shadows to separate from casters ("peter-panning"). Adjust as needed. */
		shadow_bias: number;

		/** Attempts to reduce `shadow_bias` gap. */
		shadow_contact: number;

		/** If `true`, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with `GeometryInstance.SHADOW_CASTING_SETTING_DOUBLE_SIDED`. */
		shadow_reverse_cull_face: boolean;

		/** If `true`, the light only appears in the editor and will not be visible at runtime. */
		editor_only: boolean;

		/** Sets the value of the specified `Light.Param` parameter. */
		set_param(param: Light.Param, value: number) : void;

		/** Returns the value of the specified `Light.Param` parameter. */
		get_param(param: Light.Param) : number;

		/** Getter of `light_color` property */
		get_color() : Color;

		/** Setter of `light_color` property */
		set_color(p_value: Color) : void;

		/** Getter of `light_energy` property */
		get_param() : number;

		/** Setter of `light_energy` property */
		set_param(p_value: number) : void;

		/** Getter of `light_indirect_energy` property */
		get_param() : number;

		/** Setter of `light_indirect_energy` property */
		set_param(p_value: number) : void;

		/** Getter of `light_negative` property */
		is_negative() : boolean;

		/** Setter of `light_negative` property */
		set_negative(p_value: boolean) : void;

		/** Getter of `light_specular` property */
		get_param() : number;

		/** Setter of `light_specular` property */
		set_param(p_value: number) : void;

		/** Getter of `light_bake_mode` property */
		get_bake_mode() : number;

		/** Setter of `light_bake_mode` property */
		set_bake_mode(p_value: number) : void;

		/** Getter of `light_cull_mask` property */
		get_cull_mask() : number;

		/** Setter of `light_cull_mask` property */
		set_cull_mask(p_value: number) : void;

		/** Getter of `shadow_enabled` property */
		has_shadow() : boolean;

		/** Setter of `shadow_enabled` property */
		set_shadow(p_value: boolean) : void;

		/** Getter of `shadow_color` property */
		get_shadow_color() : Color;

		/** Setter of `shadow_color` property */
		set_shadow_color(p_value: Color) : void;

		/** Getter of `shadow_bias` property */
		get_param() : number;

		/** Setter of `shadow_bias` property */
		set_param(p_value: number) : void;

		/** Getter of `shadow_contact` property */
		get_param() : number;

		/** Setter of `shadow_contact` property */
		set_param(p_value: number) : void;

		/** Getter of `shadow_reverse_cull_face` property */
		get_shadow_reverse_cull_face() : boolean;

		/** Setter of `shadow_reverse_cull_face` property */
		set_shadow_reverse_cull_face(p_value: boolean) : void;

		/** Getter of `editor_only` property */
		is_editor_only() : boolean;

		/** Setter of `editor_only` property */
		set_editor_only(p_value: boolean) : void;
	}
	namespace Light {
		enum BakeMode {
			/** Light is ignored when baking.

			 **Note:** Hiding a light does *not* affect baking. */
			BAKE_DISABLED = 0,
			/** Only indirect lighting will be baked (default). */
			BAKE_INDIRECT = 1,
			/** Both direct and indirect light will be baked.

			 **Note:** You should hide the light if you don't want it to appear twice (dynamic and baked). */
			BAKE_ALL = 2,
		}
		enum Param {
			/** Constant for accessing `light_energy`. */
			PARAM_ENERGY = 0,
			/** Constant for accessing `light_indirect_energy`. */
			PARAM_INDIRECT_ENERGY = 1,
			/** Constant for accessing `light_specular`. */
			PARAM_SPECULAR = 2,
			/** Constant for accessing `OmniLight.omni_range` or `SpotLight.spot_range`. */
			PARAM_RANGE = 3,
			/** Constant for accessing `OmniLight.omni_attenuation` or `SpotLight.spot_attenuation`. */
			PARAM_ATTENUATION = 4,
			/** Constant for accessing `SpotLight.spot_angle`. */
			PARAM_SPOT_ANGLE = 5,
			/** Constant for accessing `SpotLight.spot_angle_attenuation`. */
			PARAM_SPOT_ATTENUATION = 6,
			/** Constant for accessing `shadow_contact`. */
			PARAM_CONTACT_SHADOW_SIZE = 7,
			/** Constant for accessing `DirectionalLight.directional_shadow_max_distance`. */
			PARAM_SHADOW_MAX_DISTANCE = 8,
			/** Constant for accessing `DirectionalLight.directional_shadow_split_1`. */
			PARAM_SHADOW_SPLIT_1_OFFSET = 9,
			/** Constant for accessing `DirectionalLight.directional_shadow_split_2`. */
			PARAM_SHADOW_SPLIT_2_OFFSET = 10,
			/** Constant for accessing `DirectionalLight.directional_shadow_split_3`. */
			PARAM_SHADOW_SPLIT_3_OFFSET = 11,
			/** Constant for accessing `DirectionalLight.directional_shadow_normal_bias`. */
			PARAM_SHADOW_NORMAL_BIAS = 12,
			/** Constant for accessing `shadow_bias`. */
			PARAM_SHADOW_BIAS = 13,
			/** Constant for accessing `DirectionalLight.directional_shadow_bias_split_scale`. */
			PARAM_SHADOW_BIAS_SPLIT_SCALE = 14,
			/** Represents the size of the `Param` enum. */
			PARAM_MAX = 15,
		}

		/** Constant for accessing `light_energy`. */
		const PARAM_ENERGY: Param.PARAM_ENERGY;

		/** Constant for accessing `light_indirect_energy`. */
		const PARAM_INDIRECT_ENERGY: Param.PARAM_INDIRECT_ENERGY;

		/** Constant for accessing `light_specular`. */
		const PARAM_SPECULAR: Param.PARAM_SPECULAR;

		/** Constant for accessing `OmniLight.omni_range` or `SpotLight.spot_range`. */
		const PARAM_RANGE: Param.PARAM_RANGE;

		/** Constant for accessing `OmniLight.omni_attenuation` or `SpotLight.spot_attenuation`. */
		const PARAM_ATTENUATION: Param.PARAM_ATTENUATION;

		/** Constant for accessing `SpotLight.spot_angle`. */
		const PARAM_SPOT_ANGLE: Param.PARAM_SPOT_ANGLE;

		/** Constant for accessing `SpotLight.spot_angle_attenuation`. */
		const PARAM_SPOT_ATTENUATION: Param.PARAM_SPOT_ATTENUATION;

		/** Constant for accessing `shadow_contact`. */
		const PARAM_CONTACT_SHADOW_SIZE: Param.PARAM_CONTACT_SHADOW_SIZE;

		/** Constant for accessing `DirectionalLight.directional_shadow_max_distance`. */
		const PARAM_SHADOW_MAX_DISTANCE: Param.PARAM_SHADOW_MAX_DISTANCE;

		/** Constant for accessing `DirectionalLight.directional_shadow_split_1`. */
		const PARAM_SHADOW_SPLIT_1_OFFSET: Param.PARAM_SHADOW_SPLIT_1_OFFSET;

		/** Constant for accessing `DirectionalLight.directional_shadow_split_2`. */
		const PARAM_SHADOW_SPLIT_2_OFFSET: Param.PARAM_SHADOW_SPLIT_2_OFFSET;

		/** Constant for accessing `DirectionalLight.directional_shadow_split_3`. */
		const PARAM_SHADOW_SPLIT_3_OFFSET: Param.PARAM_SHADOW_SPLIT_3_OFFSET;

		/** Constant for accessing `DirectionalLight.directional_shadow_normal_bias`. */
		const PARAM_SHADOW_NORMAL_BIAS: Param.PARAM_SHADOW_NORMAL_BIAS;

		/** Constant for accessing `shadow_bias`. */
		const PARAM_SHADOW_BIAS: Param.PARAM_SHADOW_BIAS;

		/** Constant for accessing `DirectionalLight.directional_shadow_bias_split_scale`. */
		const PARAM_SHADOW_BIAS_SPLIT_SCALE: Param.PARAM_SHADOW_BIAS_SPLIT_SCALE;

		/** Represents the size of the `Param` enum. */
		const PARAM_MAX: Param.PARAM_MAX;

		/** Light is ignored when baking.

		 **Note:** Hiding a light does *not* affect baking. */
		const BAKE_DISABLED: BakeMode.BAKE_DISABLED;

		/** Only indirect lighting will be baked (default). */
		const BAKE_INDIRECT: BakeMode.BAKE_INDIRECT;

		/** Both direct and indirect light will be baked.

		 **Note:** You should hide the light if you don't want it to appear twice (dynamic and baked). */
		const BAKE_ALL: BakeMode.BAKE_ALL;
	}

	/** Casts light in a 2D environment.
	 Casts light in a 2D environment. Light is defined by a (usually grayscale) texture, a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).

	 **Note:** Light2D can also be used as a mask. */
	class Light2D extends Node2D {

		/** If `true`, Light2D will emit light. */
		enabled: boolean;

		/** If `true`, Light2D will only appear when editing the scene. */
		editor_only: boolean;

		/** `Texture` used for the Light2D's appearance. */
		texture: Texture;

		/** The offset of the Light2D's `texture`. */
		offset: Vector2;

		/** The `texture`'s scale factor. */
		texture_scale: number;

		/** The Light2D's `Color`. */
		color: Color;

		/** The Light2D's energy value. The larger the value, the stronger the light. */
		energy: number;

		/** The Light2D's mode. See `Mode` constants for values. */
		mode: number;

		/** The height of the Light2D. Used with 2D normal mapping. */
		range_height: number;

		/** Minimum `z` value of objects that are affected by the Light2D. */
		range_z_min: number;

		/** Maximum `z` value of objects that are affected by the Light2D. */
		range_z_max: number;

		/** Minimum layer value of objects that are affected by the Light2D. */
		range_layer_min: number;

		/** Maximum layer value of objects that are affected by the Light2D. */
		range_layer_max: number;

		/** The layer mask. Only objects with a matching mask will be affected by the Light2D. */
		range_item_cull_mask: number;

		/** If `true`, the Light2D will cast shadows. */
		shadow_enabled: boolean;

		/** `Color` of shadows cast by the Light2D. */
		shadow_color: Color;

		/** Shadow buffer size. */
		shadow_buffer_size: number;

		/** Smooth shadow gradient length. */
		shadow_gradient_length: number;

		/** Shadow filter type. See `ShadowFilter` for possible values. */
		shadow_filter: number;

		/** Smoothing value for shadows. */
		shadow_filter_smooth: number;

		/** The shadow mask. Used with `LightOccluder2D` to cast shadows. Only occluders with a matching light mask will cast shadows. */
		shadow_item_cull_mask: number;

		/** Getter of `enabled` property */
		is_enabled() : boolean;

		/** Setter of `enabled` property */
		set_enabled(p_value: boolean) : void;

		/** Getter of `editor_only` property */
		is_editor_only() : boolean;

		/** Setter of `editor_only` property */
		set_editor_only(p_value: boolean) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `offset` property */
		get_texture_offset() : Vector2;

		/** Setter of `offset` property */
		set_texture_offset(p_value: Vector2) : void;

		/** Getter of `texture_scale` property */
		get_texture_scale() : number;

		/** Setter of `texture_scale` property */
		set_texture_scale(p_value: number) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `energy` property */
		get_energy() : number;

		/** Setter of `energy` property */
		set_energy(p_value: number) : void;

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `range_height` property */
		get_height() : number;

		/** Setter of `range_height` property */
		set_height(p_value: number) : void;

		/** Getter of `range_z_min` property */
		get_z_range_min() : number;

		/** Setter of `range_z_min` property */
		set_z_range_min(p_value: number) : void;

		/** Getter of `range_z_max` property */
		get_z_range_max() : number;

		/** Setter of `range_z_max` property */
		set_z_range_max(p_value: number) : void;

		/** Getter of `range_layer_min` property */
		get_layer_range_min() : number;

		/** Setter of `range_layer_min` property */
		set_layer_range_min(p_value: number) : void;

		/** Getter of `range_layer_max` property */
		get_layer_range_max() : number;

		/** Setter of `range_layer_max` property */
		set_layer_range_max(p_value: number) : void;

		/** Getter of `range_item_cull_mask` property */
		get_item_cull_mask() : number;

		/** Setter of `range_item_cull_mask` property */
		set_item_cull_mask(p_value: number) : void;

		/** Getter of `shadow_enabled` property */
		is_shadow_enabled() : boolean;

		/** Setter of `shadow_enabled` property */
		set_shadow_enabled(p_value: boolean) : void;

		/** Getter of `shadow_color` property */
		get_shadow_color() : Color;

		/** Setter of `shadow_color` property */
		set_shadow_color(p_value: Color) : void;

		/** Getter of `shadow_buffer_size` property */
		get_shadow_buffer_size() : number;

		/** Setter of `shadow_buffer_size` property */
		set_shadow_buffer_size(p_value: number) : void;

		/** Getter of `shadow_gradient_length` property */
		get_shadow_gradient_length() : number;

		/** Setter of `shadow_gradient_length` property */
		set_shadow_gradient_length(p_value: number) : void;

		/** Getter of `shadow_filter` property */
		get_shadow_filter() : number;

		/** Setter of `shadow_filter` property */
		set_shadow_filter(p_value: number) : void;

		/** Getter of `shadow_filter_smooth` property */
		get_shadow_smooth() : number;

		/** Setter of `shadow_filter_smooth` property */
		set_shadow_smooth(p_value: number) : void;

		/** Getter of `shadow_item_cull_mask` property */
		get_item_shadow_cull_mask() : number;

		/** Setter of `shadow_item_cull_mask` property */
		set_item_shadow_cull_mask(p_value: number) : void;
	}
	namespace Light2D {
		enum Mode {
			/** Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behavior of a light. */
			MODE_ADD = 0,
			/** Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect. */
			MODE_SUB = 1,
			/** Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation. */
			MODE_MIX = 2,
			/** The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture. */
			MODE_MASK = 3,
		}
		enum ShadowFilter {
			/** No filter applies to the shadow map. See `shadow_filter`. */
			SHADOW_FILTER_NONE = 0,
			/** Percentage closer filtering (3 samples) applies to the shadow map. See `shadow_filter`. */
			SHADOW_FILTER_PCF3 = 1,
			/** Percentage closer filtering (5 samples) applies to the shadow map. See `shadow_filter`. */
			SHADOW_FILTER_PCF5 = 2,
			/** Percentage closer filtering (7 samples) applies to the shadow map. See `shadow_filter`. */
			SHADOW_FILTER_PCF7 = 3,
			/** Percentage closer filtering (9 samples) applies to the shadow map. See `shadow_filter`. */
			SHADOW_FILTER_PCF9 = 4,
			/** Percentage closer filtering (13 samples) applies to the shadow map. See `shadow_filter`. */
			SHADOW_FILTER_PCF13 = 5,
		}

		/** Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behavior of a light. */
		const MODE_ADD: Mode.MODE_ADD;

		/** Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect. */
		const MODE_SUB: Mode.MODE_SUB;

		/** Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation. */
		const MODE_MIX: Mode.MODE_MIX;

		/** The light texture of the Light2D is used as a mask, hiding or revealing parts of the screen underneath depending on the value of each pixel of the light (mask) texture. */
		const MODE_MASK: Mode.MODE_MASK;

		/** No filter applies to the shadow map. See `shadow_filter`. */
		const SHADOW_FILTER_NONE: ShadowFilter.SHADOW_FILTER_NONE;

		/** Percentage closer filtering (3 samples) applies to the shadow map. See `shadow_filter`. */
		const SHADOW_FILTER_PCF3: ShadowFilter.SHADOW_FILTER_PCF3;

		/** Percentage closer filtering (5 samples) applies to the shadow map. See `shadow_filter`. */
		const SHADOW_FILTER_PCF5: ShadowFilter.SHADOW_FILTER_PCF5;

		/** Percentage closer filtering (7 samples) applies to the shadow map. See `shadow_filter`. */
		const SHADOW_FILTER_PCF7: ShadowFilter.SHADOW_FILTER_PCF7;

		/** Percentage closer filtering (9 samples) applies to the shadow map. See `shadow_filter`. */
		const SHADOW_FILTER_PCF9: ShadowFilter.SHADOW_FILTER_PCF9;

		/** Percentage closer filtering (13 samples) applies to the shadow map. See `shadow_filter`. */
		const SHADOW_FILTER_PCF13: ShadowFilter.SHADOW_FILTER_PCF13;
	}

	/** Occludes light cast by a Light2D, casting shadows.
	 Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an `OccluderPolygon2D` in order for the shadow to be computed. */
	class LightOccluder2D extends Node2D {

		/** The `OccluderPolygon2D` used to compute the shadow. */
		occluder: OccluderPolygon2D;

		/** The LightOccluder2D's light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s). */
		light_mask: number;

		/** Getter of `occluder` property */
		get_occluder_polygon() : OccluderPolygon2D;

		/** Setter of `occluder` property */
		set_occluder_polygon(p_value: OccluderPolygon2D) : void;

		/** Getter of `light_mask` property */
		get_occluder_light_mask() : number;

		/** Setter of `light_mask` property */
		set_occluder_light_mask(p_value: number) : void;
	}
	namespace LightOccluder2D {
	}

	/** A 2D line.
	 A line through several points in 2D space.

	 **Note:** By default, Godot can only draw up to 4,096 polygon points at a time. To increase this limit, open the Project Settings and increase `ProjectSettings.rendering/limits/buffers/canvas_polygon_buffer_size_kb` and `ProjectSettings.rendering/limits/buffers/canvas_polygon_index_buffer_size_kb`. */
	class Line2D extends Node2D {

		/** The points that form the lines. The line is drawn between every point set in this array. */
		points: PoolVector2Array;

		/** The line's width. */
		width: number;

		/** The line's width varies with the curve. The original width is simply multiply by the value of the Curve. */
		width_curve: Curve;

		/** The line's color. Will not be used if a gradient is set. */
		default_color: Color;

		/** The gradient is drawn through the whole line from start to finish. The default color will not be used if a gradient is set. */
		gradient: Gradient;

		/** The texture used for the line's texture. Uses `texture_mode` for drawing style. */
		texture: Texture;

		/** The style to render the `texture` on the line. Use `LineTextureMode` constants. */
		texture_mode: number;

		/** The style for the points between the start and the end. */
		joint_mode: number;

		/** Controls the style of the line's first point. Use `LineCapMode` constants. */
		begin_cap_mode: number;

		/** Controls the style of the line's last point. Use `LineCapMode` constants. */
		end_cap_mode: number;

		/** The direction difference in radians between vector points. This value is only used if `joint mode` is set to `LINE_JOINT_SHARP`. */
		sharp_limit: number;

		/** The smoothness of the rounded joints and caps. This is only used if a cap or joint is set as round. */
		round_precision: number;

		/** If `true`, the line's border will be anti-aliased. */
		antialiased: boolean;

		/** Overwrites the position in point `i` with the supplied `position`. */
		set_point_position(i: number, position: Vector2) : void;

		/** Returns point `i`'s position. */
		get_point_position(i: number) : Vector2;

		/** Returns the Line2D's amount of points. */
		get_point_count() : number;

		/** Adds a point at the `position`. Appends the point at the end of the line.

		 If `at_position` is given, the point is inserted before the point number `at_position`, moving that point (and every point after) after the inserted point. If `at_position` is not given, or is an illegal value (`at_position < 0` or `at_position >= `get_point_count``), the point will be appended at the end of the point list. */
		//@ts-ignore
		add_point(position: Vector2, at_position: number = -1) : void;

		/** Removes the point at index `i` from the line. */
		remove_point(i: number) : void;

		/** Removes all points from the line. */
		clear_points() : void;

		/** Getter of `points` property */
		get_points() : PoolVector2Array;

		/** Setter of `points` property */
		set_points(p_value: PoolVector2Array) : void;

		/** Getter of `width` property */
		get_width() : number;

		/** Setter of `width` property */
		set_width(p_value: number) : void;

		/** Getter of `width_curve` property */
		get_curve() : Curve;

		/** Setter of `width_curve` property */
		set_curve(p_value: Curve) : void;

		/** Getter of `default_color` property */
		get_default_color() : Color;

		/** Setter of `default_color` property */
		set_default_color(p_value: Color) : void;

		/** Getter of `gradient` property */
		get_gradient() : Gradient;

		/** Setter of `gradient` property */
		set_gradient(p_value: Gradient) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `texture_mode` property */
		get_texture_mode() : number;

		/** Setter of `texture_mode` property */
		set_texture_mode(p_value: number) : void;

		/** Getter of `joint_mode` property */
		get_joint_mode() : number;

		/** Setter of `joint_mode` property */
		set_joint_mode(p_value: number) : void;

		/** Getter of `begin_cap_mode` property */
		get_begin_cap_mode() : number;

		/** Setter of `begin_cap_mode` property */
		set_begin_cap_mode(p_value: number) : void;

		/** Getter of `end_cap_mode` property */
		get_end_cap_mode() : number;

		/** Setter of `end_cap_mode` property */
		set_end_cap_mode(p_value: number) : void;

		/** Getter of `sharp_limit` property */
		get_sharp_limit() : number;

		/** Setter of `sharp_limit` property */
		set_sharp_limit(p_value: number) : void;

		/** Getter of `round_precision` property */
		get_round_precision() : number;

		/** Setter of `round_precision` property */
		set_round_precision(p_value: number) : void;

		/** Getter of `antialiased` property */
		get_antialiased() : boolean;

		/** Setter of `antialiased` property */
		set_antialiased(p_value: boolean) : void;
	}
	namespace Line2D {
		enum LineCapMode {
			/** Don't draw a line cap. */
			LINE_CAP_NONE = 0,
			/** Draws the line cap as a box. */
			LINE_CAP_BOX = 1,
			/** Draws the line cap as a circle. */
			LINE_CAP_ROUND = 2,
		}
		enum LineJointMode {
			/** The line's joints will be pointy. If `sharp_limit` is greater than the rotation of a joint, it becomes a bevel joint instead. */
			LINE_JOINT_SHARP = 0,
			/** The line's joints will be bevelled/chamfered. */
			LINE_JOINT_BEVEL = 1,
			/** The line's joints will be rounded. */
			LINE_JOINT_ROUND = 2,
		}
		enum LineTextureMode {
			/** Takes the left pixels of the texture and renders it over the whole line. */
			LINE_TEXTURE_NONE = 0,
			/** Tiles the texture over the line. The texture must be imported with **Repeat** enabled for it to work properly. */
			LINE_TEXTURE_TILE = 1,
			/** Stretches the texture across the line. Import the texture with **Repeat** disabled for best results. */
			LINE_TEXTURE_STRETCH = 2,
		}

		/** The line's joints will be pointy. If `sharp_limit` is greater than the rotation of a joint, it becomes a bevel joint instead. */
		const LINE_JOINT_SHARP: LineJointMode.LINE_JOINT_SHARP;

		/** The line's joints will be bevelled/chamfered. */
		const LINE_JOINT_BEVEL: LineJointMode.LINE_JOINT_BEVEL;

		/** The line's joints will be rounded. */
		const LINE_JOINT_ROUND: LineJointMode.LINE_JOINT_ROUND;

		/** Don't draw a line cap. */
		const LINE_CAP_NONE: LineCapMode.LINE_CAP_NONE;

		/** Draws the line cap as a box. */
		const LINE_CAP_BOX: LineCapMode.LINE_CAP_BOX;

		/** Draws the line cap as a circle. */
		const LINE_CAP_ROUND: LineCapMode.LINE_CAP_ROUND;

		/** Takes the left pixels of the texture and renders it over the whole line. */
		const LINE_TEXTURE_NONE: LineTextureMode.LINE_TEXTURE_NONE;

		/** Tiles the texture over the line. The texture must be imported with **Repeat** enabled for it to work properly. */
		const LINE_TEXTURE_TILE: LineTextureMode.LINE_TEXTURE_TILE;

		/** Stretches the texture across the line. Import the texture with **Repeat** disabled for best results. */
		const LINE_TEXTURE_STRETCH: LineTextureMode.LINE_TEXTURE_STRETCH;
	}

	/** Control that provides single-line string editing.
	 LineEdit provides a single-line string editor, used for text fields.

	 It features many built-in shortcuts which will always be available (`Ctrl` here maps to `Command` on macOS):

	 - Ctrl + C: Copy

	 - Ctrl + X: Cut

	 - Ctrl + V or Ctrl + Y: Paste/"yank"

	 - Ctrl + Z: Undo

	 - Ctrl + Shift + Z: Redo

	 - Ctrl + U: Delete text from the cursor position to the beginning of the line

	 - Ctrl + K: Delete text from the cursor position to the end of the line

	 - Ctrl + A: Select all text

	 - Up/Down arrow: Move the cursor to the beginning/end of the line

	 On macOS, some extra keyboard shortcuts are available:

	 - Ctrl + F: Like the right arrow key, move the cursor one character right

	 - Ctrl + B: Like the left arrow key, move the cursor one character left

	 - Ctrl + P: Like the up arrow key, move the cursor to the previous line

	 - Ctrl + N: Like the down arrow key, move the cursor to the next line

	 - Ctrl + D: Like the Delete key, delete the character on the right side of cursor

	 - Ctrl + H: Like the Backspace key, delete the character on the left side of the cursor

	 - Command + Left arrow: Like the Home key, move the cursor to the beginning of the line

	 - Command + Right arrow: Like the End key, move the cursor to the end of the line */
	class LineEdit extends Control {

		/** String value of the `LineEdit`.

		 **Note:** Changing text using this property won't emit the `text_changed` signal. */
		text: string;

		/** Text alignment as defined in the `Align` enum. */
		align: number;

		/** Maximum amount of characters that can be entered inside the `LineEdit`. If `0`, there is no limit. */
		max_length: number;

		/** If `false`, existing text cannot be modified and new text cannot be added. */
		editable: boolean;

		/** If `true`, every character is replaced with the secret character (see `secret_character`). */
		secret: boolean;

		/** The character to use to mask secret input (defaults to "*"). Only a single character can be used as the secret character. */
		secret_character: string;

		/** If `true`, the `LineEdit` width will increase to stay longer than the `text`. It will **not** compress if the `text` is shortened. */
		expand_to_text_length: boolean;

		/** If `true`, the context menu will appear when right-clicked. */
		context_menu_enabled: boolean;

		/** If `true`, the `LineEdit` will show a clear button if `text` is not empty, which can be used to clear the text quickly. */
		clear_button_enabled: boolean;

		/** If `false`, using shortcuts will be disabled. */
		shortcut_keys_enabled: boolean;

		/** If `false`, it's impossible to select the text using mouse nor keyboard. */
		selecting_enabled: boolean;

		/** Sets the icon that will appear in the right end of the `LineEdit` if there's no `text`, or always, if `clear_button_enabled` is set to `false`. */
		right_icon: Texture;

		/** Text shown when the `LineEdit` is empty. It is **not** the `LineEdit`'s default value (see `text`). */
		placeholder_text: string;

		/** Opacity of the `placeholder_text`. From `0` to `1`. */
		placeholder_alpha: number;

		/** If `true`, the caret (visual cursor) blinks. */
		caret_blink: boolean;

		/** Duration (in seconds) of a caret's blinking cycle. */
		caret_blink_speed: number;

		/** The cursor's position inside the `LineEdit`. When set, the text may scroll to accommodate it. */
		caret_position: number;

		/**  */
		focus_mode: number;

		/**  */
		mouse_default_cursor_shape: number;

		/** Erases the `LineEdit`'s `text`. */
		clear() : void;

		/** Selects characters inside `LineEdit` between `from` and `to`. By default, `from` is at the beginning and `to` at the end.

		 ```gdscript
		 text = "Welcome"
		 select() # Will select "Welcome".
		 select(4) # Will select "ome".
		 select(2, 5) # Will select "lco".
		 ``` */
		//@ts-ignore
		select(p_from: number = 0, to: number = -1) : void;

		/** Selects the whole `String`. */
		select_all() : void;

		/** Clears the current selection. */
		deselect() : void;

		/** Adds `text` after the cursor. If the resulting value is longer than `max_length`, nothing happens. */
		append_at_cursor(text: string) : void;

		/** Deletes one character at the cursor's current position (equivalent to pressing the `Delete` key). */
		delete_char_at_cursor() : void;

		/** Deletes a section of the `text` going from position `from_column` to `to_column`. Both parameters should be within the text's length. */
		delete_text(from_column: number, to_column: number) : void;

		/** Executes a given action as defined in the `MenuItems` enum. */
		menu_option(option: number) : void;

		/** Returns the `PopupMenu` of this `LineEdit`. By default, this menu is displayed when right-clicking on the `LineEdit`. */
		get_menu() : PopupMenu;

		/** Getter of `text` property */
		get_text() : string;

		/** Setter of `text` property */
		set_text(p_value: string) : void;

		/** Getter of `align` property */
		get_align() : number;

		/** Setter of `align` property */
		set_align(p_value: number) : void;

		/** Getter of `max_length` property */
		get_max_length() : number;

		/** Setter of `max_length` property */
		set_max_length(p_value: number) : void;

		/** Getter of `editable` property */
		is_editable() : boolean;

		/** Setter of `editable` property */
		set_editable(p_value: boolean) : void;

		/** Getter of `secret` property */
		is_secret() : boolean;

		/** Setter of `secret` property */
		set_secret(p_value: boolean) : void;

		/** Getter of `secret_character` property */
		get_secret_character() : string;

		/** Setter of `secret_character` property */
		set_secret_character(p_value: string) : void;

		/** Getter of `expand_to_text_length` property */
		get_expand_to_text_length() : boolean;

		/** Setter of `expand_to_text_length` property */
		set_expand_to_text_length(p_value: boolean) : void;

		/** Getter of `context_menu_enabled` property */
		is_context_menu_enabled() : boolean;

		/** Setter of `context_menu_enabled` property */
		set_context_menu_enabled(p_value: boolean) : void;

		/** Getter of `clear_button_enabled` property */
		is_clear_button_enabled() : boolean;

		/** Setter of `clear_button_enabled` property */
		set_clear_button_enabled(p_value: boolean) : void;

		/** Getter of `shortcut_keys_enabled` property */
		is_shortcut_keys_enabled() : boolean;

		/** Setter of `shortcut_keys_enabled` property */
		set_shortcut_keys_enabled(p_value: boolean) : void;

		/** Getter of `selecting_enabled` property */
		is_selecting_enabled() : boolean;

		/** Setter of `selecting_enabled` property */
		set_selecting_enabled(p_value: boolean) : void;

		/** Getter of `right_icon` property */
		get_right_icon() : Texture;

		/** Setter of `right_icon` property */
		set_right_icon(p_value: Texture) : void;

		/** Getter of `placeholder_text` property */
		get_placeholder() : string;

		/** Setter of `placeholder_text` property */
		set_placeholder(p_value: string) : void;

		/** Getter of `placeholder_alpha` property */
		get_placeholder_alpha() : number;

		/** Setter of `placeholder_alpha` property */
		set_placeholder_alpha(p_value: number) : void;

		/** Getter of `caret_blink` property */
		cursor_get_blink_enabled() : boolean;

		/** Setter of `caret_blink` property */
		cursor_set_blink_enabled(p_value: boolean) : void;

		/** Getter of `caret_blink_speed` property */
		cursor_get_blink_speed() : number;

		/** Setter of `caret_blink_speed` property */
		cursor_set_blink_speed(p_value: number) : void;

		/** Getter of `caret_position` property */
		get_cursor_position() : number;

		/** Setter of `caret_position` property */
		set_cursor_position(p_value: number) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;

		/** Getter of `mouse_default_cursor_shape` property */
		get_default_cursor_shape() : number;

		/** Setter of `mouse_default_cursor_shape` property */
		set_default_cursor_shape(p_value: number) : void;
	}
	namespace LineEdit {

		/** Emitted when the user presses `KEY_ENTER` on the `LineEdit`. */
		const text_entered: 'text_entered';

		/** Emitted when the text changes. */
		const text_changed: 'text_changed';

		/** Emitted when trying to append text that would overflow the `max_length`. */
		const text_change_rejected: 'text_change_rejected';
		enum Align {
			/** Aligns the text on the left-hand side of the `LineEdit`. */
			ALIGN_LEFT = 0,
			/** Centers the text in the middle of the `LineEdit`. */
			ALIGN_CENTER = 1,
			/** Aligns the text on the right-hand side of the `LineEdit`. */
			ALIGN_RIGHT = 2,
			/** Stretches whitespaces to fit the `LineEdit`'s width. */
			ALIGN_FILL = 3,
		}
		enum MenuItems {
			/** Cuts (copies and clears) the selected text. */
			MENU_CUT = 0,
			/** Copies the selected text. */
			MENU_COPY = 1,
			/** Pastes the clipboard text over the selected text (or at the cursor's position).

			 Non-printable escape characters are automatically stripped from the OS clipboard via `String.strip_escapes`. */
			MENU_PASTE = 2,
			/** Erases the whole `LineEdit` text. */
			MENU_CLEAR = 3,
			/** Selects the whole `LineEdit` text. */
			MENU_SELECT_ALL = 4,
			/** Undoes the previous action. */
			MENU_UNDO = 5,
			/** Reverse the last undo action. */
			MENU_REDO = 6,
			/** Represents the size of the `MenuItems` enum. */
			MENU_MAX = 7,
		}

		/** Aligns the text on the left-hand side of the `LineEdit`. */
		const ALIGN_LEFT: Align.ALIGN_LEFT;

		/** Centers the text in the middle of the `LineEdit`. */
		const ALIGN_CENTER: Align.ALIGN_CENTER;

		/** Aligns the text on the right-hand side of the `LineEdit`. */
		const ALIGN_RIGHT: Align.ALIGN_RIGHT;

		/** Stretches whitespaces to fit the `LineEdit`'s width. */
		const ALIGN_FILL: Align.ALIGN_FILL;

		/** Cuts (copies and clears) the selected text. */
		const MENU_CUT: MenuItems.MENU_CUT;

		/** Copies the selected text. */
		const MENU_COPY: MenuItems.MENU_COPY;

		/** Pastes the clipboard text over the selected text (or at the cursor's position).

		 Non-printable escape characters are automatically stripped from the OS clipboard via `String.strip_escapes`. */
		const MENU_PASTE: MenuItems.MENU_PASTE;

		/** Erases the whole `LineEdit` text. */
		const MENU_CLEAR: MenuItems.MENU_CLEAR;

		/** Selects the whole `LineEdit` text. */
		const MENU_SELECT_ALL: MenuItems.MENU_SELECT_ALL;

		/** Undoes the previous action. */
		const MENU_UNDO: MenuItems.MENU_UNDO;

		/** Reverse the last undo action. */
		const MENU_REDO: MenuItems.MENU_REDO;

		/** Represents the size of the `MenuItems` enum. */
		const MENU_MAX: MenuItems.MENU_MAX;
	}

	/** Line shape for 2D collisions.
	 Line shape for 2D collisions. It works like a 2D plane and will not allow any physics body to go to the negative side. Not recommended for rigid bodies, and usually not recommended for static bodies either because it forces checks against it on every frame. */
	class LineShape2D extends Shape2D {

		/** The line's normal. */
		normal: Vector2;

		/** The line's distance from the origin. */
		d: number;

		/** Getter of `normal` property */
		get_normal() : Vector2;

		/** Setter of `normal` property */
		set_normal(p_value: Vector2) : void;

		/** Getter of `d` property */
		get_d() : number;

		/** Setter of `d` property */
		set_d(p_value: number) : void;
	}
	namespace LineShape2D {
	}

	/** Simple button used to represent a link to some resource.
	 This kind of button is primarily used when the interaction with the button causes a context change (like linking to a web page). */
	class LinkButton extends BaseButton {

		/** The button's text that will be displayed inside the button's area. */
		text: string;

		/** Determines when to show the underline. See `UnderlineMode` for options. */
		underline: number;

		/**  */
		enabled_focus_mode: number;

		/**  */
		focus_mode: number;

		/**  */
		mouse_default_cursor_shape: number;

		/** Getter of `text` property */
		get_text() : string;

		/** Setter of `text` property */
		set_text(p_value: string) : void;

		/** Getter of `underline` property */
		get_underline_mode() : number;

		/** Setter of `underline` property */
		set_underline_mode(p_value: number) : void;

		/** Getter of `enabled_focus_mode` property */
		get_enabled_focus_mode() : number;

		/** Setter of `enabled_focus_mode` property */
		set_enabled_focus_mode(p_value: number) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;

		/** Getter of `mouse_default_cursor_shape` property */
		get_default_cursor_shape() : number;

		/** Setter of `mouse_default_cursor_shape` property */
		set_default_cursor_shape(p_value: number) : void;
	}
	namespace LinkButton {
		enum UnderlineMode {
			/** The LinkButton will always show an underline at the bottom of its text. */
			UNDERLINE_MODE_ALWAYS = 0,
			/** The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it. */
			UNDERLINE_MODE_ON_HOVER = 1,
			/** The LinkButton will never show an underline at the bottom of its text. */
			UNDERLINE_MODE_NEVER = 2,
		}

		/** The LinkButton will always show an underline at the bottom of its text. */
		const UNDERLINE_MODE_ALWAYS: UnderlineMode.UNDERLINE_MODE_ALWAYS;

		/** The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it. */
		const UNDERLINE_MODE_ON_HOVER: UnderlineMode.UNDERLINE_MODE_ON_HOVER;

		/** The LinkButton will never show an underline at the bottom of its text. */
		const UNDERLINE_MODE_NEVER: UnderlineMode.UNDERLINE_MODE_NEVER;
	}

	/** Overrides the location sounds are heard from.
	 Once added to the scene tree and enabled using `make_current`, this node will override the location sounds are heard from. This can be used to listen from a location different from the `Camera`.

	 **Note:** There is no 2D equivalent for this node yet. */
	class Listener extends Spatial {

		/** Enables the listener. This will override the current camera's listener. */
		make_current() : void;

		/** Disables the listener to use the current camera's listener instead. */
		clear_current() : void;

		/** Returns `true` if the listener was made current using `make_current`, `false` otherwise.

		 **Note:** There may be more than one Listener marked as "current" in the scene tree, but only the one that was made current last will be used. */
		is_current() : boolean;

		/** Returns the listener's global orthonormalized `Transform`. */
		get_listener_transform() : Transform;
	}
	namespace Listener {
	}

	/** Abstract base class for the game's main loop.
	 `MainLoop` is the abstract base class for a Godot project's game loop. It is inherited by `SceneTree`, which is the default game loop implementation used in Godot projects, though it is also possible to write and use one's own `MainLoop` subclass instead of the scene tree.

	 Upon the application start, a `MainLoop` implementation must be provided to the OS; otherwise, the application will exit. This happens automatically (and a `SceneTree` is created) unless a main `Script` is provided from the command line (with e.g. `godot -s my_loop.gd`, which should then be a `MainLoop` implementation.

	 Here is an example script implementing a simple `MainLoop`:

	 ```gdscript
	 extends MainLoop
	 
	 var time_elapsed = 0
	 var keys_typed = []
	 var quit = false
	 
	 func _initialize():
	     print("Initialized:")
	     print("  Starting time: %s" % str(time_elapsed))
	 
	 func _idle(delta):
	     time_elapsed += delta
	     # Return true to end the main loop.
	     return quit
	 
	 func _input_event(event):
	     # Record keys.
	     if event is InputEventKey and event.pressed and !event.echo:
	         keys_typed.append(OS.get_scancode_string(event.scancode))
	         # Quit on Escape press.
	         if event.scancode == KEY_ESCAPE:
	             quit = true
	     # Quit on any mouse click.
	     if event is InputEventMouseButton:
	         quit = true
	 
	 func _finalize():
	     print("Finalized:")
	     print("  End time: %s" % str(time_elapsed))
	     print("  Keys typed: %s" % var2str(keys_typed))
	 ``` */
	class MainLoop extends Object {

		/** Called when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated. */
		_drop_files(files: PoolStringArray, from_screen: number) : void;

		/** Called before the program exits. */
		_finalize() : void;

		/** Called when the user performs an action in the system global menu (e.g. the Mac OS menu bar). */
		_global_menu_action(id: any, meta: any) : void;

		/** Called each idle frame with the time since the last idle frame as argument (in seconds). Equivalent to `Node._process`.

		 If implemented, the method must return a boolean value. `true` ends the main loop, while `false` lets it proceed to the next frame. */
		_idle(delta: number) : boolean;

		/** Called once during initialization. */
		_initialize() : void;

		/** Called whenever an `InputEvent` is received by the main loop. */
		_input_event(event: InputEvent) : void;

		/** Deprecated callback, does not do anything. Use `_input_event` to parse text input. Will be removed in Godot 4.0. */
		_input_text(text: string) : void;

		/** Called each physics frame with the time since the last physics frame as argument (in seconds). Equivalent to `Node._physics_process`.

		 If implemented, the method must return a boolean value. `true` ends the main loop, while `false` lets it proceed to the next frame. */
		_iteration(delta: number) : boolean;

		/** Should not be called manually, override `_input_event` instead. Will be removed in Godot 4.0. */
		input_event(event: InputEvent) : void;

		/** Should not be called manually, override `_input_text` instead. Will be removed in Godot 4.0. */
		input_text(text: string) : void;

		/** Should not be called manually, override `_initialize` instead. Will be removed in Godot 4.0. */
		init() : void;

		/** Should not be called manually, override `_iteration` instead. Will be removed in Godot 4.0. */
		iteration(delta: number) : boolean;

		/** Should not be called manually, override `_idle` instead. Will be removed in Godot 4.0. */
		idle(delta: number) : boolean;

		/** Should not be called manually, override `_finalize` instead. Will be removed in Godot 4.0. */
		finish() : void;
	}
	namespace MainLoop {

		/** Emitted when a user responds to a permission request. */
		const on_request_permissions_result: 'on_request_permissions_result';

		/** Notification received from the OS when the mouse enters the game window.

		 Implemented on desktop and web platforms. */
		const NOTIFICATION_WM_MOUSE_ENTER: 1002;

		/** Notification received from the OS when the mouse leaves the game window.

		 Implemented on desktop and web platforms. */
		const NOTIFICATION_WM_MOUSE_EXIT: 1003;

		/** Notification received from the OS when the game window is focused.

		 Implemented on all platforms. */
		const NOTIFICATION_WM_FOCUS_IN: 1004;

		/** Notification received from the OS when the game window is unfocused.

		 Implemented on all platforms. */
		const NOTIFICATION_WM_FOCUS_OUT: 1005;

		/** Notification received from the OS when a quit request is sent (e.g. closing the window with a "Close" button or Alt+F4).

		 Implemented on desktop platforms. */
		const NOTIFICATION_WM_QUIT_REQUEST: 1006;

		/** Notification received from the OS when a go back request is sent (e.g. pressing the "Back" button on Android).

		 Specific to the Android platform. */
		const NOTIFICATION_WM_GO_BACK_REQUEST: 1007;

		/** Notification received from the OS when an unfocus request is sent (e.g. another OS window wants to take the focus).

		 No supported platforms currently send this notification. */
		const NOTIFICATION_WM_UNFOCUS_REQUEST: 1008;

		/** Notification received from the OS when the application is exceeding its allocated memory.

		 Specific to the iOS platform. */
		const NOTIFICATION_OS_MEMORY_WARNING: 1009;

		/** Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like `Object.tr`. */
		const NOTIFICATION_TRANSLATION_CHANGED: 1010;

		/** Notification received from the OS when a request for "About" information is sent.

		 Specific to the macOS platform. */
		const NOTIFICATION_WM_ABOUT: 1011;

		/** Notification received from Godot's crash handler when the engine is about to crash.

		 Implemented on desktop platforms if the crash handler is enabled. */
		const NOTIFICATION_CRASH: 1012;

		/** Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string).

		 Specific to the macOS platform. */
		const NOTIFICATION_OS_IME_UPDATE: 1013;

		/** Notification received from the OS when the app is resumed.

		 Specific to the Android platform. */
		const NOTIFICATION_APP_RESUMED: 1014;

		/** Notification received from the OS when the app is paused.

		 Specific to the Android platform. */
		const NOTIFICATION_APP_PAUSED: 1015;
	}

	/** Simple margin container.
	 Adds a top, left, bottom, and right margin to all `Control` nodes that are direct children of the container. To control the `MarginContainer`'s margin, use the `margin_*` theme properties listed below.

	 **Note:** Be careful, `Control` margin values are different than the constant margin values. If you want to change the custom margin values of the `MarginContainer` by code, you should use the following examples:

	 ```gdscript
	 var margin_value = 100
	 set("custom_constants/margin_top", margin_value)
	 set("custom_constants/margin_left", margin_value)
	 set("custom_constants/margin_bottom", margin_value)
	 set("custom_constants/margin_right", margin_value)
	 ``` */
	class MarginContainer extends Container {
	}
	namespace MarginContainer {
	}

	/** Data transformation (marshalling) and encoding helpers.
	 Provides data transformation and encoding utility functions. */
	class Marshalls extends Object {

		/** Returns a Base64-encoded string of the `Variant` `variant`. If `full_objects` is `true`, encoding objects is allowed (and can potentially include code). */
		//@ts-ignore
		static variant_to_base64(variant: any, full_objects: boolean = false) : string;

		/** Returns a decoded `Variant` corresponding to the Base64-encoded string `base64_str`. If `allow_objects` is `true`, decoding objects is allowed.

		 **Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution. */
		//@ts-ignore
		static base64_to_variant(base64_str: string, allow_objects: boolean = false) : any;

		/** Returns a Base64-encoded string of a given `PoolByteArray`. */
		static raw_to_base64(array: PoolByteArray) : string;

		/** Returns a decoded `PoolByteArray` corresponding to the Base64-encoded string `base64_str`. */
		static base64_to_raw(base64_str: string) : PoolByteArray;

		/** Returns a Base64-encoded string of the UTF-8 string `utf8_str`. */
		static utf8_to_base64(utf8_str: string) : string;

		/** Returns a decoded string corresponding to the Base64-encoded string `base64_str`. */
		static base64_to_utf8(base64_str: string) : string;
	}
	namespace Marshalls {
	}

	/** Abstract base `Resource` for coloring and shading geometry.
	 Material is a base `Resource` used for coloring and shading geometry. All materials inherit from it and almost all `VisualInstance` derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here. */
	class Material extends Resource {

		/** Sets the render priority for transparent objects in 3D scenes. Higher priority objects will be sorted in front of lower priority objects.

		 **Note:** this only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority). */
		render_priority: number;

		/** Sets the `Material` to be used for the next pass. This renders the object again using a different material.

		 **Note:** only applies to `SpatialMaterial`s and `ShaderMaterial`s with type "Spatial". */
		next_pass: Material;

		/** Getter of `render_priority` property */
		get_render_priority() : number;

		/** Setter of `render_priority` property */
		set_render_priority(p_value: number) : void;

		/** Getter of `next_pass` property */
		get_next_pass() : Material;

		/** Setter of `next_pass` property */
		set_next_pass(p_value: Material) : void;
	}
	namespace Material {

		/** Maximum value for the `render_priority` parameter. */
		const RENDER_PRIORITY_MAX: 127;

		/** Minimum value for the `render_priority` parameter. */
		const RENDER_PRIORITY_MIN: -128;
	}

	/** Special button that brings up a `PopupMenu` when clicked.
	 Special button that brings up a `PopupMenu` when clicked.

	 New items can be created inside this `PopupMenu` using `get_popup().add_item("My Item Name")`. You can also create them directly from the editor. To do so, select the `MenuButton` node, then in the toolbar at the top of the 2D editor, click **Items** then click **Add** in the popup. You will be able to give each items new properties. */
	class MenuButton extends Button {

		/** If `true`, when the cursor hovers above another `MenuButton` within the same parent which also has `switch_on_hover` enabled, it will close the current `MenuButton` and open the other one. */
		switch_on_hover: boolean;

		/**  */
		flat: boolean;

		/**  */
		toggle_mode: boolean;

		/**  */
		action_mode: number;

		/**  */
		enabled_focus_mode: number;

		/**  */
		focus_mode: number;

		/** Returns the `PopupMenu` contained in this button. */
		get_popup() : PopupMenu;

		/** If `true`, shortcuts are disabled and cannot be used to trigger the button. */
		set_disable_shortcuts(disabled: boolean) : void;

		/** Getter of `switch_on_hover` property */
		is_switch_on_hover() : boolean;

		/** Setter of `switch_on_hover` property */
		set_switch_on_hover(p_value: boolean) : void;

		/** Getter of `flat` property */
		is_flat() : boolean;

		/** Setter of `flat` property */
		set_flat(p_value: boolean) : void;

		/** Getter of `toggle_mode` property */
		is_toggle_mode() : boolean;

		/** Setter of `toggle_mode` property */
		set_toggle_mode(p_value: boolean) : void;

		/** Getter of `action_mode` property */
		get_action_mode() : number;

		/** Setter of `action_mode` property */
		set_action_mode(p_value: number) : void;

		/** Getter of `enabled_focus_mode` property */
		get_enabled_focus_mode() : number;

		/** Setter of `enabled_focus_mode` property */
		set_enabled_focus_mode(p_value: number) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace MenuButton {

		/** Emitted when `PopupMenu` of this MenuButton is about to show. */
		const about_to_show: 'about_to_show';
	}

	/** A `Resource` that contains vertex array-based geometry.
	 Mesh is a type of `Resource` that contains vertex array-based geometry, divided in *surfaces*. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials. */
	class Mesh extends Resource {

		/** Sets a hint to be used for lightmap resolution in `BakedLightmap`. Overrides `BakedLightmap.bake_default_texels_per_unit`. */
		lightmap_size_hint: Vector2;

		/** Returns the smallest `AABB` enclosing this mesh. Not affected by `custom_aabb`.

		 **Note:** This is only implemented for `ArrayMesh` and `PrimitiveMesh`. */
		get_aabb() : AABB;

		/** Returns the amount of surfaces that the `Mesh` holds. */
		get_surface_count() : number;

		/** Returns the arrays for the vertices, normals, uvs, etc. that make up the requested surface (see `ArrayMesh.add_surface_from_arrays`). */
		surface_get_arrays(surf_idx: number) : any[];

		/** Returns the blend shape arrays for the requested surface. */
		surface_get_blend_shape_arrays(surf_idx: number) : any[];

		/** Sets a `Material` for a given surface. Surface will be rendered using this material. */
		surface_set_material(surf_idx: number, material: Material) : void;

		/** Returns a `Material` in a given surface. Surface is rendered using this material. */
		surface_get_material(surf_idx: number) : Material;

		/** Calculate a `ConcavePolygonShape` from the mesh. */
		create_trimesh_shape() : Shape;

		/** Calculate a `ConvexPolygonShape` from the mesh. */
		create_convex_shape() : Shape;

		/** Calculate an outline mesh at a defined offset (margin) from the original mesh.

		 **Note:** This method typically returns the vertices in reverse order (e.g. clockwise to counterclockwise). */
		create_outline(margin: number) : Mesh;

		/** Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle. */
		get_faces() : PoolVector3Array;

		/** Generate a `TriangleMesh` from the mesh. */
		generate_triangle_mesh() : TriangleMesh;

		/** Getter of `lightmap_size_hint` property */
		get_lightmap_size_hint() : Vector2;

		/** Setter of `lightmap_size_hint` property */
		set_lightmap_size_hint(p_value: Vector2) : void;
	}
	namespace Mesh {
		enum ArrayFormat {
			/** Mesh array contains vertices. All meshes require a vertex array so this should always be present. */
			ARRAY_FORMAT_VERTEX = 1,
			/** Mesh array contains normals. */
			ARRAY_FORMAT_NORMAL = 2,
			/** Mesh array contains tangents. */
			ARRAY_FORMAT_TANGENT = 4,
			/** Mesh array contains colors. */
			ARRAY_FORMAT_COLOR = 8,
			/** Mesh array contains UVs. */
			ARRAY_FORMAT_TEX_UV = 16,
			/** Mesh array contains second UV. */
			ARRAY_FORMAT_TEX_UV2 = 32,
			/** Mesh array contains bones. */
			ARRAY_FORMAT_BONES = 64,
			/** Mesh array contains bone weights. */
			ARRAY_FORMAT_WEIGHTS = 128,
			/** Mesh array uses indices. */
			ARRAY_FORMAT_INDEX = 256,
			/** Used internally to calculate other `ARRAY_COMPRESS_*` enum values. Do not use. */
			ARRAY_COMPRESS_BASE = 9,
			/** Flag used to mark a compressed (half float) vertex array. */
			ARRAY_COMPRESS_VERTEX = 512,
			/** Flag used to mark a compressed (half float) normal array. */
			ARRAY_COMPRESS_NORMAL = 1024,
			/** Flag used to mark a compressed (half float) tangent array. */
			ARRAY_COMPRESS_TANGENT = 2048,
			/** Flag used to mark a compressed (half float) color array. */
			ARRAY_COMPRESS_COLOR = 4096,
			/** Flag used to mark a compressed (half float) UV coordinates array. */
			ARRAY_COMPRESS_TEX_UV = 8192,
			/** Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates. */
			ARRAY_COMPRESS_TEX_UV2 = 16384,
			/** Flag used to mark a compressed bone array. */
			ARRAY_COMPRESS_BONES = 32768,
			/** Flag used to mark a compressed (half float) weight array. */
			ARRAY_COMPRESS_WEIGHTS = 65536,
			/** Flag used to mark a compressed index array. */
			ARRAY_COMPRESS_INDEX = 131072,
			/** Flag used to mark that the array contains 2D vertices. */
			ARRAY_FLAG_USE_2D_VERTICES = 262144,
			/** Flag used to mark that the array uses 16-bit bones instead of 8-bit. */
			ARRAY_FLAG_USE_16_BIT_BONES = 524288,
			/** Used to set flags `ARRAY_COMPRESS_VERTEX`, `ARRAY_COMPRESS_NORMAL`, `ARRAY_COMPRESS_TANGENT`, `ARRAY_COMPRESS_COLOR`, `ARRAY_COMPRESS_TEX_UV`, `ARRAY_COMPRESS_TEX_UV2` and `ARRAY_COMPRESS_WEIGHTS` quickly. */
			ARRAY_COMPRESS_DEFAULT = 97280,
		}
		enum ArrayType {
			/** Array of vertices. */
			ARRAY_VERTEX = 0,
			/** Array of normals. */
			ARRAY_NORMAL = 1,
			/** Array of tangents as an array of floats, 4 floats per tangent. */
			ARRAY_TANGENT = 2,
			/** Array of colors. */
			ARRAY_COLOR = 3,
			/** Array of UV coordinates. */
			ARRAY_TEX_UV = 4,
			/** Array of second set of UV coordinates. */
			ARRAY_TEX_UV2 = 5,
			/** Array of bone data. */
			ARRAY_BONES = 6,
			/** Array of weights. */
			ARRAY_WEIGHTS = 7,
			/** Array of indices. */
			ARRAY_INDEX = 8,
			/** Represents the size of the `ArrayType` enum. */
			ARRAY_MAX = 9,
		}
		enum BlendShapeMode {
			/** Blend shapes are normalized. */
			BLEND_SHAPE_MODE_NORMALIZED = 0,
			/** Blend shapes are relative to base weight. */
			BLEND_SHAPE_MODE_RELATIVE = 1,
		}
		enum PrimitiveType {
			/** Render array as points (one vertex equals one point). */
			PRIMITIVE_POINTS = 0,
			/** Render array as lines (every two vertices a line is created). */
			PRIMITIVE_LINES = 1,
			/** Render array as line strip. */
			PRIMITIVE_LINE_STRIP = 2,
			/** Render array as line loop (like line strip, but closed). */
			PRIMITIVE_LINE_LOOP = 3,
			/** Render array as triangles (every three vertices a triangle is created). */
			PRIMITIVE_TRIANGLES = 4,
			/** Render array as triangle strips. */
			PRIMITIVE_TRIANGLE_STRIP = 5,
			/** Render array as triangle fans. */
			PRIMITIVE_TRIANGLE_FAN = 6,
		}

		/** Render array as points (one vertex equals one point). */
		const PRIMITIVE_POINTS: PrimitiveType.PRIMITIVE_POINTS;

		/** Render array as lines (every two vertices a line is created). */
		const PRIMITIVE_LINES: PrimitiveType.PRIMITIVE_LINES;

		/** Render array as line strip. */
		const PRIMITIVE_LINE_STRIP: PrimitiveType.PRIMITIVE_LINE_STRIP;

		/** Render array as line loop (like line strip, but closed). */
		const PRIMITIVE_LINE_LOOP: PrimitiveType.PRIMITIVE_LINE_LOOP;

		/** Render array as triangles (every three vertices a triangle is created). */
		const PRIMITIVE_TRIANGLES: PrimitiveType.PRIMITIVE_TRIANGLES;

		/** Render array as triangle strips. */
		const PRIMITIVE_TRIANGLE_STRIP: PrimitiveType.PRIMITIVE_TRIANGLE_STRIP;

		/** Render array as triangle fans. */
		const PRIMITIVE_TRIANGLE_FAN: PrimitiveType.PRIMITIVE_TRIANGLE_FAN;

		/** Blend shapes are normalized. */
		const BLEND_SHAPE_MODE_NORMALIZED: BlendShapeMode.BLEND_SHAPE_MODE_NORMALIZED;

		/** Blend shapes are relative to base weight. */
		const BLEND_SHAPE_MODE_RELATIVE: BlendShapeMode.BLEND_SHAPE_MODE_RELATIVE;

		/** Mesh array contains vertices. All meshes require a vertex array so this should always be present. */
		const ARRAY_FORMAT_VERTEX: ArrayFormat.ARRAY_FORMAT_VERTEX;

		/** Mesh array contains normals. */
		const ARRAY_FORMAT_NORMAL: ArrayFormat.ARRAY_FORMAT_NORMAL;

		/** Mesh array contains tangents. */
		const ARRAY_FORMAT_TANGENT: ArrayFormat.ARRAY_FORMAT_TANGENT;

		/** Mesh array contains colors. */
		const ARRAY_FORMAT_COLOR: ArrayFormat.ARRAY_FORMAT_COLOR;

		/** Mesh array contains UVs. */
		const ARRAY_FORMAT_TEX_UV: ArrayFormat.ARRAY_FORMAT_TEX_UV;

		/** Mesh array contains second UV. */
		const ARRAY_FORMAT_TEX_UV2: ArrayFormat.ARRAY_FORMAT_TEX_UV2;

		/** Mesh array contains bones. */
		const ARRAY_FORMAT_BONES: ArrayFormat.ARRAY_FORMAT_BONES;

		/** Mesh array contains bone weights. */
		const ARRAY_FORMAT_WEIGHTS: ArrayFormat.ARRAY_FORMAT_WEIGHTS;

		/** Mesh array uses indices. */
		const ARRAY_FORMAT_INDEX: ArrayFormat.ARRAY_FORMAT_INDEX;

		/** Used internally to calculate other `ARRAY_COMPRESS_*` enum values. Do not use. */
		const ARRAY_COMPRESS_BASE: ArrayFormat.ARRAY_COMPRESS_BASE;

		/** Flag used to mark a compressed (half float) vertex array. */
		const ARRAY_COMPRESS_VERTEX: ArrayFormat.ARRAY_COMPRESS_VERTEX;

		/** Flag used to mark a compressed (half float) normal array. */
		const ARRAY_COMPRESS_NORMAL: ArrayFormat.ARRAY_COMPRESS_NORMAL;

		/** Flag used to mark a compressed (half float) tangent array. */
		const ARRAY_COMPRESS_TANGENT: ArrayFormat.ARRAY_COMPRESS_TANGENT;

		/** Flag used to mark a compressed (half float) color array. */
		const ARRAY_COMPRESS_COLOR: ArrayFormat.ARRAY_COMPRESS_COLOR;

		/** Flag used to mark a compressed (half float) UV coordinates array. */
		const ARRAY_COMPRESS_TEX_UV: ArrayFormat.ARRAY_COMPRESS_TEX_UV;

		/** Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates. */
		const ARRAY_COMPRESS_TEX_UV2: ArrayFormat.ARRAY_COMPRESS_TEX_UV2;

		/** Flag used to mark a compressed bone array. */
		const ARRAY_COMPRESS_BONES: ArrayFormat.ARRAY_COMPRESS_BONES;

		/** Flag used to mark a compressed (half float) weight array. */
		const ARRAY_COMPRESS_WEIGHTS: ArrayFormat.ARRAY_COMPRESS_WEIGHTS;

		/** Flag used to mark a compressed index array. */
		const ARRAY_COMPRESS_INDEX: ArrayFormat.ARRAY_COMPRESS_INDEX;

		/** Flag used to mark that the array contains 2D vertices. */
		const ARRAY_FLAG_USE_2D_VERTICES: ArrayFormat.ARRAY_FLAG_USE_2D_VERTICES;

		/** Flag used to mark that the array uses 16-bit bones instead of 8-bit. */
		const ARRAY_FLAG_USE_16_BIT_BONES: ArrayFormat.ARRAY_FLAG_USE_16_BIT_BONES;

		/** Used to set flags `ARRAY_COMPRESS_VERTEX`, `ARRAY_COMPRESS_NORMAL`, `ARRAY_COMPRESS_TANGENT`, `ARRAY_COMPRESS_COLOR`, `ARRAY_COMPRESS_TEX_UV`, `ARRAY_COMPRESS_TEX_UV2` and `ARRAY_COMPRESS_WEIGHTS` quickly. */
		const ARRAY_COMPRESS_DEFAULT: ArrayFormat.ARRAY_COMPRESS_DEFAULT;

		/** Array of vertices. */
		const ARRAY_VERTEX: ArrayType.ARRAY_VERTEX;

		/** Array of normals. */
		const ARRAY_NORMAL: ArrayType.ARRAY_NORMAL;

		/** Array of tangents as an array of floats, 4 floats per tangent. */
		const ARRAY_TANGENT: ArrayType.ARRAY_TANGENT;

		/** Array of colors. */
		const ARRAY_COLOR: ArrayType.ARRAY_COLOR;

		/** Array of UV coordinates. */
		const ARRAY_TEX_UV: ArrayType.ARRAY_TEX_UV;

		/** Array of second set of UV coordinates. */
		const ARRAY_TEX_UV2: ArrayType.ARRAY_TEX_UV2;

		/** Array of bone data. */
		const ARRAY_BONES: ArrayType.ARRAY_BONES;

		/** Array of weights. */
		const ARRAY_WEIGHTS: ArrayType.ARRAY_WEIGHTS;

		/** Array of indices. */
		const ARRAY_INDEX: ArrayType.ARRAY_INDEX;

		/** Represents the size of the `ArrayType` enum. */
		const ARRAY_MAX: ArrayType.ARRAY_MAX;
	}

	/** Helper tool to access and edit `Mesh` data.
	 MeshDataTool provides access to individual vertices in a `Mesh`. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.

	 To use MeshDataTool, load a mesh with `create_from_surface`. When you are finished editing the data commit the data to a mesh with `commit_to_surface`.

	 Below is an example of how MeshDataTool may be used.

	 ```gdscript
	 var mdt = MeshDataTool.new()
	 mdt.create_from_surface(mesh, 0)
	 for i in range(mdt.get_vertex_count()):
	     var vertex = mdt.get_vertex(i)
	     ...
	     mdt.set_vertex(i, vertex)
	 mesh.surface_remove(0)
	 mdt.commit_to_surface(mesh)
	 ```

	 See also `ArrayMesh`, `ImmediateGeometry` and `SurfaceTool` for procedural geometry generation.

	 **Note:** Godot uses clockwise `url=https://learnopengl.com/Advanced-OpenGL/Face-culling`winding order`/url` for front faces of triangle primitive modes. */
	class MeshDataTool extends Reference {

		/** Clears all data currently in MeshDataTool. */
		clear() : void;

		/** Uses specified surface of given `Mesh` to populate data for MeshDataTool.

		 Requires `Mesh` with primitive type `Mesh.PRIMITIVE_TRIANGLES`. */
		create_from_surface(mesh: ArrayMesh, surface: number) : number;

		/** Adds a new surface to specified `Mesh` with edited data. */
		commit_to_surface(mesh: ArrayMesh) : number;

		/** Returns the `Mesh`'s format. Format is an integer made up of `Mesh` format flags combined together. For example, a mesh containing both vertices and normals would return a format of `3` because `ArrayMesh.ARRAY_FORMAT_VERTEX` is `1` and `ArrayMesh.ARRAY_FORMAT_NORMAL` is `2`.

		 See `ArrayMesh.ArrayFormat` for a list of format flags. */
		get_format() : number;

		/** Returns the total number of vertices in `Mesh`. */
		get_vertex_count() : number;

		/** Returns the number of edges in this `Mesh`. */
		get_edge_count() : number;

		/** Returns the number of faces in this `Mesh`. */
		get_face_count() : number;

		/** Sets the position of the given vertex. */
		set_vertex(idx: number, vertex: Vector3) : void;

		/** Returns the vertex at given index. */
		get_vertex(idx: number) : Vector3;

		/** Sets the normal of the given vertex. */
		set_vertex_normal(idx: number, normal: Vector3) : void;

		/** Returns the normal of the given vertex. */
		get_vertex_normal(idx: number) : Vector3;

		/** Sets the tangent of the given vertex. */
		set_vertex_tangent(idx: number, tangent: Plane) : void;

		/** Returns the tangent of the given vertex. */
		get_vertex_tangent(idx: number) : Plane;

		/** Sets the UV of the given vertex. */
		set_vertex_uv(idx: number, uv: Vector2) : void;

		/** Returns the UV of the given vertex. */
		get_vertex_uv(idx: number) : Vector2;

		/** Sets the UV2 of the given vertex. */
		set_vertex_uv2(idx: number, uv2: Vector2) : void;

		/** Returns the UV2 of the given vertex. */
		get_vertex_uv2(idx: number) : Vector2;

		/** Sets the color of the given vertex. */
		set_vertex_color(idx: number, color: Color) : void;

		/** Returns the color of the given vertex. */
		get_vertex_color(idx: number) : Color;

		/** Sets the bones of the given vertex. */
		set_vertex_bones(idx: number, bones: PoolIntArray) : void;

		/** Returns the bones of the given vertex. */
		get_vertex_bones(idx: number) : PoolIntArray;

		/** Sets the bone weights of the given vertex. */
		set_vertex_weights(idx: number, weights: PoolRealArray) : void;

		/** Returns bone weights of the given vertex. */
		get_vertex_weights(idx: number) : PoolRealArray;

		/** Sets the metadata associated with the given vertex. */
		set_vertex_meta(idx: number, meta: any) : void;

		/** Returns the metadata associated with the given vertex. */
		get_vertex_meta(idx: number) : any;

		/** Returns an array of edges that share the given vertex. */
		get_vertex_edges(idx: number) : PoolIntArray;

		/** Returns an array of faces that share the given vertex. */
		get_vertex_faces(idx: number) : PoolIntArray;

		/** Returns index of specified vertex connected to given edge.

		 Vertex argument can only be 0 or 1 because edges are comprised of two vertices. */
		get_edge_vertex(idx: number, vertex: number) : number;

		/** Returns array of faces that touch given edge. */
		get_edge_faces(idx: number) : PoolIntArray;

		/** Sets the metadata of the given edge. */
		set_edge_meta(idx: number, meta: any) : void;

		/** Returns meta information assigned to given edge. */
		get_edge_meta(idx: number) : any;

		/** Returns the specified vertex of the given face.

		 Vertex argument must be 2 or less because faces contain three vertices. */
		get_face_vertex(idx: number, vertex: number) : number;

		/** Returns specified edge associated with given face.

		 Edge argument must 2 or less because a face only has three edges. */
		get_face_edge(idx: number, edge: number) : number;

		/** Sets the metadata of the given face. */
		set_face_meta(idx: number, meta: any) : void;

		/** Returns the metadata associated with the given face. */
		get_face_meta(idx: number) : any;

		/** Calculates and returns the face normal of the given face. */
		get_face_normal(idx: number) : Vector3;

		/** Sets the material to be used by newly-constructed `Mesh`. */
		set_material(material: Material) : void;

		/** Returns the material assigned to the `Mesh`. */
		get_material() : Material;
	}
	namespace MeshDataTool {
	}

	/** Node that instances meshes into a scenario.
	 MeshInstance is a node that takes a `Mesh` resource and adds it to the current scenario by creating an instance of it. This is the class most often used to get 3D geometry rendered and can be used to instance a single `Mesh` in many places. This allows to reuse geometry and save on resources. When a `Mesh` has to be instanced more than thousands of times at close proximity, consider using a `MultiMesh` in a `MultiMeshInstance` instead. */
	class MeshInstance extends GeometryInstance {

		/** The `Mesh` resource for the instance. */
		mesh: Mesh;

		/** Sets the skin to be used by this instance. */
		skin: Skin;

		/** `NodePath` to the `Skeleton` associated with the instance. */
		skeleton: string;

		/** Returns the number of surface materials. */
		get_surface_material_count() : number;

		/** Sets the `Material` for a surface of the `Mesh` resource. */
		set_surface_material(surface: number, material: Material) : void;

		/** Returns the `Material` for a surface of the `Mesh` resource. */
		get_surface_material(surface: number) : Material;

		/** This helper creates a `StaticBody` child node with a `ConcavePolygonShape` collision shape calculated from the mesh geometry. It's mainly used for testing. */
		create_trimesh_collision() : void;

		/** This helper creates a `StaticBody` child node with a `ConvexPolygonShape` collision shape calculated from the mesh geometry. It's mainly used for testing. */
		create_convex_collision() : void;

		/** This helper creates a `MeshInstance` child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing. */
		create_debug_tangents() : void;

		/** Getter of `mesh` property */
		get_mesh() : Mesh;

		/** Setter of `mesh` property */
		set_mesh(p_value: Mesh) : void;

		/** Getter of `skin` property */
		get_skin() : Skin;

		/** Setter of `skin` property */
		set_skin(p_value: Skin) : void;

		/** Getter of `skeleton` property */
		get_skeleton_path() : string;

		/** Setter of `skeleton` property */
		set_skeleton_path(p_value: string) : void;
	}
	namespace MeshInstance {
	}

	/** Node used for displaying a `Mesh` in 2D.
	 Node used for displaying a `Mesh` in 2D. Can be constructed from an existing `Sprite` via a tool in the editor toolbar. Select "Sprite" then "Convert to Mesh2D", select settings in popup and press "Create Mesh2D". */
	class MeshInstance2D extends Node2D {

		/** The `Mesh` that will be drawn by the `MeshInstance2D`. */
		mesh: Mesh;

		/** The `Texture` that will be used if using the default `CanvasItemMaterial`. Can be accessed as `TEXTURE` in CanvasItem shader. */
		texture: Texture;

		/** The normal map that will be used if using the default `CanvasItemMaterial`.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normal_map: Texture;

		/** Getter of `mesh` property */
		get_mesh() : Mesh;

		/** Setter of `mesh` property */
		set_mesh(p_value: Mesh) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normal_map` property */
		get_normal_map() : Texture;

		/** Setter of `normal_map` property */
		set_normal_map(p_value: Texture) : void;
	}
	namespace MeshInstance2D {

		/** Emitted when the `texture` is changed. */
		const texture_changed: 'texture_changed';
	}

	/** Library of meshes.
	 A library of meshes. Contains a list of `Mesh` resources, each with a name and ID. Each item can also include collision and navigation shapes. This resource is used in `GridMap`. */
	class MeshLibrary extends Resource {

		/** Creates a new item in the library with the given ID.

		 You can get an unused ID from `get_last_unused_item_id`. */
		create_item(id: number) : void;

		/** Sets the item's name.

		 This name is shown in the editor. It can also be used to look up the item later using `find_item_by_name`. */
		set_item_name(id: number, name: string) : void;

		/** Sets the item's mesh. */
		set_item_mesh(id: number, mesh: Mesh) : void;

		/** Sets the item's navigation mesh. */
		set_item_navmesh(id: number, navmesh: NavigationMesh) : void;

		/** Sets the transform to apply to the item's navigation mesh. */
		set_item_navmesh_transform(id: number, navmesh: Transform) : void;

		/** Sets an item's collision shapes.

		 The array should consist of `Shape` objects, each followed by a `Transform` that will be applied to it. For shapes that should not have a transform, use `Transform.IDENTITY`. */
		set_item_shapes(id: number, shapes: any[]) : void;

		/** Sets a texture to use as the item's preview icon in the editor. */
		set_item_preview(id: number, texture: Texture) : void;

		/** Returns the item's name. */
		get_item_name(id: number) : string;

		/** Returns the item's mesh. */
		get_item_mesh(id: number) : Mesh;

		/** Returns the item's navigation mesh. */
		get_item_navmesh(id: number) : NavigationMesh;

		/** Returns the transform applied to the item's navigation mesh. */
		get_item_navmesh_transform(id: number) : Transform;

		/** Returns an item's collision shapes.

		 The array consists of each `Shape` followed by its `Transform`. */
		get_item_shapes(id: number) : any[];

		/** When running in the editor, returns a generated item preview (a 3D rendering in isometric perspective). When used in a running project, returns the manually-defined item preview which can be set using `set_item_preview`. Returns an empty `Texture` if no preview was manually set in a running project. */
		get_item_preview(id: number) : Texture;

		/** Removes the item. */
		remove_item(id: number) : void;

		/** Returns the first item with the given name. */
		find_item_by_name(name: string) : number;

		/** Clears the library. */
		clear() : void;

		/** Returns the list of item IDs in use. */
		get_item_list() : PoolIntArray;

		/** Gets an unused ID for a new item. */
		get_last_unused_item_id() : number;
	}
	namespace MeshLibrary {
	}

	/** Simple texture that uses a mesh to draw itself.
	 Simple texture that uses a mesh to draw itself. It's limited because flags can't be changed and region drawing is not supported. */
	class MeshTexture extends Texture {

		/** Sets the mesh used to draw. It must be a mesh using 2D vertices. */
		mesh: Mesh;

		/** Sets the base texture that the Mesh will use to draw. */
		base_texture: Texture;

		/** Sets the size of the image, needed for reference. */
		image_size: Vector2;

		/**  */
		flags: number;

		/** Getter of `mesh` property */
		get_mesh() : Mesh;

		/** Setter of `mesh` property */
		set_mesh(p_value: Mesh) : void;

		/** Getter of `base_texture` property */
		get_base_texture() : Texture;

		/** Setter of `base_texture` property */
		set_base_texture(p_value: Texture) : void;

		/** Getter of `image_size` property */
		get_image_size() : Vector2;

		/** Setter of `image_size` property */
		set_image_size(p_value: Vector2) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace MeshTexture {
	}

	/** Generic mobile VR implementation.
	 This is a generic mobile VR implementation where you need to provide details about the phone and HMD used. It does not rely on any existing framework. This is the most basic interface we have. For the best effect, you need a mobile phone with a gyroscope and accelerometer.

	 Note that even though there is no positional tracking, the camera will assume the headset is at a height of 1.85 meters. You can change this by setting `eye_height`.

	 You can initialise this interface as follows:

	 ```gdscript
	 var interface = ARVRServer.find_interface("Native mobile")
	 if interface and interface.initialize():
	     get_viewport().arvr = true
	 ``` */
	class MobileVRInterface extends ARVRInterface {

		/** The height at which the camera is placed in relation to the ground (i.e. `ARVROrigin` node). */
		eye_height: number;

		/** The interocular distance, also known as the interpupillary distance. The distance between the pupils of the left and right eye. */
		iod: number;

		/** The width of the display in centimeters. */
		display_width: number;

		/** The distance between the display and the lenses inside of the device in centimeters. */
		display_to_lens: number;

		/** The oversample setting. Because of the lens distortion we have to render our buffers at a higher resolution then the screen can natively handle. A value between 1.5 and 2.0 often provides good results but at the cost of performance. */
		oversample: number;

		/** The k1 lens factor is one of the two constants that define the strength of the lens used and directly influences the lens distortion effect. */
		k1: number;

		/** The k2 lens factor, see k1. */
		k2: number;

		/** Getter of `eye_height` property */
		get_eye_height() : number;

		/** Setter of `eye_height` property */
		set_eye_height(p_value: number) : void;

		/** Getter of `iod` property */
		get_iod() : number;

		/** Setter of `iod` property */
		set_iod(p_value: number) : void;

		/** Getter of `display_width` property */
		get_display_width() : number;

		/** Setter of `display_width` property */
		set_display_width(p_value: number) : void;

		/** Getter of `display_to_lens` property */
		get_display_to_lens() : number;

		/** Setter of `display_to_lens` property */
		set_display_to_lens(p_value: number) : void;

		/** Getter of `oversample` property */
		get_oversample() : number;

		/** Setter of `oversample` property */
		set_oversample(p_value: number) : void;

		/** Getter of `k1` property */
		get_k1() : number;

		/** Setter of `k1` property */
		set_k1(p_value: number) : void;

		/** Getter of `k2` property */
		get_k2() : number;

		/** Setter of `k2` property */
		set_k2(p_value: number) : void;
	}
	namespace MobileVRInterface {
	}

	/** Provides high-performance mesh instancing.
	 MultiMesh provides low-level mesh instancing. Drawing thousands of `MeshInstance` nodes can be slow, since each object is submitted to the GPU then drawn individually.

	 MultiMesh is much faster as it can draw thousands of instances with a single draw call, resulting in less API overhead.

	 As a drawback, if the instances are too far away of each other, performance may be reduced as every single instance will always rendered (they are spatially indexed as one, for the whole object).

	 Since instances may have any behavior, the AABB used for visibility must be provided by the user. */
	class MultiMesh extends Resource {

		/** Format of colors in color array that gets passed to shader. */
		color_format: number;

		/** Format of transform used to transform mesh, either 2D or 3D. */
		transform_format: number;

		/** Format of custom data in custom data array that gets passed to shader. */
		custom_data_format: number;

		/** Number of instances that will get drawn. This clears and (re)sizes the buffers. By default, all instances are drawn but you can limit this with `visible_instance_count`. */
		instance_count: number;

		/** Limits the number of instances drawn, -1 draws all instances. Changing this does not change the sizes of the buffers. */
		visible_instance_count: number;

		/** Mesh to be drawn. */
		mesh: Mesh;

		/** Sets the `Transform` for a specific instance. */
		set_instance_transform(instance: number, transform: Transform) : void;

		/** Sets the `Transform2D` for a specific instance. */
		set_instance_transform_2d(instance: number, transform: Transform2D) : void;

		/** Returns the `Transform` of a specific instance. */
		get_instance_transform(instance: number) : Transform;

		/** Returns the `Transform2D` of a specific instance. */
		get_instance_transform_2d(instance: number) : Transform2D;

		/** Sets the color of a specific instance.

		 For the color to take effect, ensure that `color_format` is non-`null` on the `MultiMesh` and `SpatialMaterial.vertex_color_use_as_albedo` is `true` on the material. */
		set_instance_color(instance: number, color: Color) : void;

		/** Gets a specific instance's color. */
		get_instance_color(instance: number) : Color;

		/** Sets custom data for a specific instance. Although `Color` is used, it is just a container for 4 floating point numbers. The format of the number can change depending on the `CustomDataFormat` used. */
		set_instance_custom_data(instance: number, custom_data: Color) : void;

		/** Returns the custom data that has been set for a specific instance. */
		get_instance_custom_data(instance: number) : Color;

		/** Sets all data related to the instances in one go. This is especially useful when loading the data from disk or preparing the data from GDNative.

		 All data is packed in one large float array. An array may look like this: Transform for instance 1, color data for instance 1, custom data for instance 1, transform for instance 2, color data for instance 2, etc...

		 `Transform` is stored as 12 floats, `Transform2D` is stored as 8 floats, `COLOR_8BIT` / `CUSTOM_DATA_8BIT` is stored as 1 float (4 bytes as is) and `COLOR_FLOAT` / `CUSTOM_DATA_FLOAT` is stored as 4 floats. */
		set_as_bulk_array(array: PoolRealArray) : void;

		/** Returns the visibility axis-aligned bounding box. */
		get_aabb() : AABB;

		/** Getter of `color_format` property */
		get_color_format() : number;

		/** Setter of `color_format` property */
		set_color_format(p_value: number) : void;

		/** Getter of `transform_format` property */
		get_transform_format() : number;

		/** Setter of `transform_format` property */
		set_transform_format(p_value: number) : void;

		/** Getter of `custom_data_format` property */
		get_custom_data_format() : number;

		/** Setter of `custom_data_format` property */
		set_custom_data_format(p_value: number) : void;

		/** Getter of `instance_count` property */
		get_instance_count() : number;

		/** Setter of `instance_count` property */
		set_instance_count(p_value: number) : void;

		/** Getter of `visible_instance_count` property */
		get_visible_instance_count() : number;

		/** Setter of `visible_instance_count` property */
		set_visible_instance_count(p_value: number) : void;

		/** Getter of `mesh` property */
		get_mesh() : Mesh;

		/** Setter of `mesh` property */
		set_mesh(p_value: Mesh) : void;
	}
	namespace MultiMesh {
		enum ColorFormat {
			/** Use when you are not using per-instance `Color`s. */
			COLOR_NONE = 0,
			/** Compress `Color` data into 8 bits when passing to shader. This uses less memory and can be faster, but the `Color` loses precision. */
			COLOR_8BIT = 1,
			/** The `Color` passed into `set_instance_color` will use 4 floats. Use this for highest precision `Color`. */
			COLOR_FLOAT = 2,
		}
		enum CustomDataFormat {
			/** Use when you are not using per-instance custom data. */
			CUSTOM_DATA_NONE = 0,
			/** Compress custom_data into 8 bits when passing to shader. This uses less memory and can be faster, but loses precision and range. Floats packed into 8 bits can only represent values between 0 and 1, numbers outside that range will be clamped. */
			CUSTOM_DATA_8BIT = 1,
			/** The `Color` passed into `set_instance_custom_data` will use 4 floats. Use this for highest precision. */
			CUSTOM_DATA_FLOAT = 2,
		}
		enum TransformFormat {
			/** Use this when using 2D transforms. */
			TRANSFORM_2D = 0,
			/** Use this when using 3D transforms. */
			TRANSFORM_3D = 1,
		}

		/** Use this when using 2D transforms. */
		const TRANSFORM_2D: TransformFormat.TRANSFORM_2D;

		/** Use this when using 3D transforms. */
		const TRANSFORM_3D: TransformFormat.TRANSFORM_3D;

		/** Use when you are not using per-instance `Color`s. */
		const COLOR_NONE: ColorFormat.COLOR_NONE;

		/** Compress `Color` data into 8 bits when passing to shader. This uses less memory and can be faster, but the `Color` loses precision. */
		const COLOR_8BIT: ColorFormat.COLOR_8BIT;

		/** The `Color` passed into `set_instance_color` will use 4 floats. Use this for highest precision `Color`. */
		const COLOR_FLOAT: ColorFormat.COLOR_FLOAT;

		/** Use when you are not using per-instance custom data. */
		const CUSTOM_DATA_NONE: CustomDataFormat.CUSTOM_DATA_NONE;

		/** Compress custom_data into 8 bits when passing to shader. This uses less memory and can be faster, but loses precision and range. Floats packed into 8 bits can only represent values between 0 and 1, numbers outside that range will be clamped. */
		const CUSTOM_DATA_8BIT: CustomDataFormat.CUSTOM_DATA_8BIT;

		/** The `Color` passed into `set_instance_custom_data` will use 4 floats. Use this for highest precision. */
		const CUSTOM_DATA_FLOAT: CustomDataFormat.CUSTOM_DATA_FLOAT;
	}

	/** Node that instances a `MultiMesh`.
	 `MultiMeshInstance` is a specialized node to instance `GeometryInstance`s based on a `MultiMesh` resource.

	 This is useful to optimize the rendering of a high amount of instances of a given mesh (for example trees in a forest or grass strands). */
	class MultiMeshInstance extends GeometryInstance {

		/** The `MultiMesh` resource that will be used and shared among all instances of the `MultiMeshInstance`. */
		multimesh: MultiMesh;

		/** Getter of `multimesh` property */
		get_multimesh() : MultiMesh;

		/** Setter of `multimesh` property */
		set_multimesh(p_value: MultiMesh) : void;
	}
	namespace MultiMeshInstance {
	}

	/** Node that instances a `MultiMesh` in 2D.
	 `MultiMeshInstance2D` is a specialized node to instance a `MultiMesh` resource in 2D.

	 Usage is the same as `MultiMeshInstance`. */
	class MultiMeshInstance2D extends Node2D {

		/** The `MultiMesh` that will be drawn by the `MultiMeshInstance2D`. */
		multimesh: MultiMesh;

		/** The `Texture` that will be used if using the default `CanvasItemMaterial`. Can be accessed as `TEXTURE` in CanvasItem shader. */
		texture: Texture;

		/** The normal map that will be used if using the default `CanvasItemMaterial`.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normal_map: Texture;

		/** Getter of `multimesh` property */
		get_multimesh() : MultiMesh;

		/** Setter of `multimesh` property */
		set_multimesh(p_value: MultiMesh) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normal_map` property */
		get_normal_map() : Texture;

		/** Setter of `normal_map` property */
		set_normal_map(p_value: Texture) : void;
	}
	namespace MultiMeshInstance2D {

		/** Emitted when the `texture` is changed. */
		const texture_changed: 'texture_changed';
	}

	/** High-level multiplayer API.
	 This class implements most of the logic behind the high-level multiplayer API.

	 By default, `SceneTree` has a reference to this class that is used to provide multiplayer capabilities (i.e. RPC/RSET) across the whole scene.

	 It is possible to override the MultiplayerAPI instance used by specific Nodes by setting the `Node.custom_multiplayer` property, effectively allowing to run both client and server in the same scene. */
	class MultiplayerAPI extends Reference {

		/** If `true` (or if the `network_peer` has `PacketPeer.allow_object_decoding` set to `true`), the MultiplayerAPI will allow encoding and decoding of object during RPCs/RSETs.

		 **Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution. */
		allow_object_decoding: boolean;

		/** If `true`, the MultiplayerAPI's `network_peer` refuses new incoming connections. */
		refuse_new_network_connections: boolean;

		/** The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the MultiplayerAPI will become a network server (check with `is_network_server`) and will set root node's network mode to master, or it will become a regular peer with root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to MultiplayerAPI's signals. */
		network_peer: NetworkedMultiplayerPeer;

		/** Sets the base root node to use for RPCs. Instead of an absolute path, a relative path will be used to find the node upon which the RPC should be executed.

		 This effectively allows to have different branches of the scene tree to be managed by different MultiplayerAPI, allowing for example to run both client and server in the same scene. */
		set_root_node(node: Node) : void;

		/** Sends the given raw `bytes` to a specific peer identified by `id` (see `NetworkedMultiplayerPeer.set_target_peer`). Default ID is `0`, i.e. broadcast to all peers. */
		//@ts-ignore
		send_bytes(bytes: PoolByteArray, id: number = 0, mode: NetworkedMultiplayerPeer.TransferMode = 2) : number;

		/** Returns `true` if there is a `network_peer` set. */
		has_network_peer() : boolean;

		/** Returns the unique peer ID of this MultiplayerAPI's `network_peer`. */
		get_network_unique_id() : number;

		/** Returns `true` if this MultiplayerAPI's `network_peer` is in server mode (listening for connections). */
		is_network_server() : boolean;

		/** Returns the sender's peer ID for the RPC currently being executed.

		 **Note:** If not inside an RPC this method will return 0. */
		get_rpc_sender_id() : number;

		/** Method used for polling the MultiplayerAPI. You only need to worry about this if you are using `Node.custom_multiplayer` override or you set `SceneTree.multiplayer_poll` to `false`. By default, `SceneTree` will poll its MultiplayerAPI for you.

		 **Note:** This method results in RPCs and RSETs being called, so they will be executed in the same context of this function (e.g. `_process`, `physics`, `Thread`). */
		poll() : void;

		/** Clears the current MultiplayerAPI network state (you shouldn't call this unless you know what you are doing). */
		clear() : void;

		/** Returns the peer IDs of all connected peers of this MultiplayerAPI's `network_peer`. */
		get_network_connected_peers() : PoolIntArray;

		/** Getter of `allow_object_decoding` property */
		is_object_decoding_allowed() : boolean;

		/** Setter of `allow_object_decoding` property */
		set_allow_object_decoding(p_value: boolean) : void;

		/** Getter of `refuse_new_network_connections` property */
		is_refusing_new_network_connections() : boolean;

		/** Setter of `refuse_new_network_connections` property */
		set_refuse_new_network_connections(p_value: boolean) : void;

		/** Getter of `network_peer` property */
		get_network_peer() : NetworkedMultiplayerPeer;

		/** Setter of `network_peer` property */
		set_network_peer(p_value: NetworkedMultiplayerPeer) : void;
	}
	namespace MultiplayerAPI {

		/** Emitted when this MultiplayerAPI's `network_peer` successfully connected to a server. Only emitted on clients. */
		const connected_to_server: 'connected_to_server';

		/** Emitted when this MultiplayerAPI's `network_peer` fails to establish a connection to a server. Only emitted on clients. */
		const connection_failed: 'connection_failed';

		/** Emitted when this MultiplayerAPI's `network_peer` receive a `packet` with custom data (see `send_bytes`). ID is the peer ID of the peer that sent the packet. */
		const network_peer_packet: 'network_peer_packet';

		/** Emitted when this MultiplayerAPI's `network_peer` disconnects from a peer. Clients get notified when other clients disconnect from the same server. */
		const network_peer_disconnected: 'network_peer_disconnected';

		/** Emitted when this MultiplayerAPI's `network_peer` connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1). */
		const network_peer_connected: 'network_peer_connected';

		/** Emitted when this MultiplayerAPI's `network_peer` disconnects from server. Only emitted on clients. */
		const server_disconnected: 'server_disconnected';
		enum RPCMode {
			/** Used with `Node.rpc_config` or `Node.rset_config` to disable a method or property for all RPC calls, making it unavailable. Default for all methods. */
			RPC_MODE_DISABLED = 0,
			/** Used with `Node.rpc_config` or `Node.rset_config` to set a method to be called or a property to be changed only on the remote end, not locally. Analogous to the `remote` keyword. Calls and property changes are accepted from all remote peers, no matter if they are node's master or puppets. */
			RPC_MODE_REMOTE = 1,
			/** Used with `Node.rpc_config` or `Node.rset_config` to set a method to be called or a property to be changed only on the network master for this node. Analogous to the `master` keyword. Only accepts calls or property changes from the node's network puppets, see `Node.set_network_master`. */
			RPC_MODE_MASTER = 2,
			/** Used with `Node.rpc_config` or `Node.rset_config` to set a method to be called or a property to be changed only on puppets for this node. Analogous to the `puppet` keyword. Only accepts calls or property changes from the node's network master, see `Node.set_network_master`. */
			RPC_MODE_PUPPET = 3,
			/** *Deprecated.* Use `RPC_MODE_PUPPET` instead. Analogous to the `slave` keyword. */
			RPC_MODE_SLAVE = 3,
			/** Behave like `RPC_MODE_REMOTE` but also make the call or property change locally. Analogous to the `remotesync` keyword. */
			RPC_MODE_REMOTESYNC = 4,
			/** *Deprecated.* Use `RPC_MODE_REMOTESYNC` instead. Analogous to the `sync` keyword. */
			RPC_MODE_SYNC = 4,
			/** Behave like `RPC_MODE_MASTER` but also make the call or property change locally. Analogous to the `mastersync` keyword. */
			RPC_MODE_MASTERSYNC = 5,
			/** Behave like `RPC_MODE_PUPPET` but also make the call or property change locally. Analogous to the `puppetsync` keyword. */
			RPC_MODE_PUPPETSYNC = 6,
		}

		/** Used with `Node.rpc_config` or `Node.rset_config` to disable a method or property for all RPC calls, making it unavailable. Default for all methods. */
		const RPC_MODE_DISABLED: RPCMode.RPC_MODE_DISABLED;

		/** Used with `Node.rpc_config` or `Node.rset_config` to set a method to be called or a property to be changed only on the remote end, not locally. Analogous to the `remote` keyword. Calls and property changes are accepted from all remote peers, no matter if they are node's master or puppets. */
		const RPC_MODE_REMOTE: RPCMode.RPC_MODE_REMOTE;

		/** Used with `Node.rpc_config` or `Node.rset_config` to set a method to be called or a property to be changed only on the network master for this node. Analogous to the `master` keyword. Only accepts calls or property changes from the node's network puppets, see `Node.set_network_master`. */
		const RPC_MODE_MASTER: RPCMode.RPC_MODE_MASTER;

		/** Used with `Node.rpc_config` or `Node.rset_config` to set a method to be called or a property to be changed only on puppets for this node. Analogous to the `puppet` keyword. Only accepts calls or property changes from the node's network master, see `Node.set_network_master`. */
		const RPC_MODE_PUPPET: RPCMode.RPC_MODE_PUPPET;

		/** *Deprecated.* Use `RPC_MODE_PUPPET` instead. Analogous to the `slave` keyword. */
		const RPC_MODE_SLAVE: RPCMode.RPC_MODE_SLAVE;

		/** Behave like `RPC_MODE_REMOTE` but also make the call or property change locally. Analogous to the `remotesync` keyword. */
		const RPC_MODE_REMOTESYNC: RPCMode.RPC_MODE_REMOTESYNC;

		/** *Deprecated.* Use `RPC_MODE_REMOTESYNC` instead. Analogous to the `sync` keyword. */
		const RPC_MODE_SYNC: RPCMode.RPC_MODE_SYNC;

		/** Behave like `RPC_MODE_MASTER` but also make the call or property change locally. Analogous to the `mastersync` keyword. */
		const RPC_MODE_MASTERSYNC: RPCMode.RPC_MODE_MASTERSYNC;

		/** Behave like `RPC_MODE_PUPPET` but also make the call or property change locally. Analogous to the `puppetsync` keyword. */
		const RPC_MODE_PUPPETSYNC: RPCMode.RPC_MODE_PUPPETSYNC;
	}

	/** 
	  */
	class MultiplayerPeerGDNative extends NetworkedMultiplayerPeer {
	}
	namespace MultiplayerPeerGDNative {
	}

	/** 
	  */
	class NativeScript extends Script {

		/**  */
		class_name: string;

		/**  */
		library: GDNativeLibrary;

		/**  */
		script_class_name: string;

		/**  */
		script_class_icon_path: string;

		/** Returns the documentation string that was previously set with `godot_nativescript_set_class_documentation`. */
		get_class_documentation() : string;

		/** Returns the documentation string that was previously set with `godot_nativescript_set_method_documentation`. */
		get_method_documentation(method: string) : string;

		/** Returns the documentation string that was previously set with `godot_nativescript_set_signal_documentation`. */
		get_signal_documentation(signal_name: string) : string;

		/** Returns the documentation string that was previously set with `godot_nativescript_set_property_documentation`. */
		get_property_documentation(path: string) : string;

		/** Constructs a new object of the base type with a script of this type already attached.

		 *Note*: Any arguments passed to this function will be ignored and not passed to the native constructor function. This will change with in a future API extension. */
		'new'(...args) : any;

		/** Getter of `class_name` property */
		get_class_name() : string;

		/** Setter of `class_name` property */
		set_class_name(p_value: string) : void;

		/** Getter of `library` property */
		get_library() : GDNativeLibrary;

		/** Setter of `library` property */
		set_library(p_value: GDNativeLibrary) : void;

		/** Getter of `script_class_name` property */
		get_script_class_name() : string;

		/** Setter of `script_class_name` property */
		set_script_class_name(p_value: string) : void;

		/** Getter of `script_class_icon_path` property */
		get_script_class_icon_path() : string;

		/** Setter of `script_class_icon_path` property */
		set_script_class_icon_path(p_value: string) : void;
	}
	namespace NativeScript {
	}

	/** Mesh-based navigation and pathfinding node.
	 Provides navigation and pathfinding within a collection of `NavigationMesh`es. By default, these will be automatically collected from child `NavigationMeshInstance` nodes, but they can also be added on the fly with `navmesh_add`. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on. */
	class Navigation extends Spatial {

		/** Defines which direction is up. By default, this is `(0, 1, 0)`, which is the world's "up" direction. */
		up_vector: Vector3;

		/** Adds a `NavigationMesh`. Returns an ID for use with `navmesh_remove` or `navmesh_set_transform`. If given, a `Transform2D` is applied to the polygon. The optional `owner` is used as return value for `get_closest_point_owner`. */
		//@ts-ignore
		navmesh_add(mesh: NavigationMesh, xform: Transform, owner: Object = null) : number;

		/** Sets the transform applied to the `NavigationMesh` with the given ID. */
		navmesh_set_transform(id: number, xform: Transform) : void;

		/** Removes the `NavigationMesh` with the given ID. */
		navmesh_remove(id: number) : void;

		/** Returns the path between two given points. Points are in local coordinate space. If `optimize` is `true` (the default), the agent properties associated with each `NavigationMesh` (radius, height, etc.) are considered in the path calculation, otherwise they are ignored. */
		//@ts-ignore
		get_simple_path(start: Vector3, end: Vector3, optimize: boolean = true) : PoolVector3Array;

		/** Returns the navigation point closest to the given line segment. When enabling `use_collision`, only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned. */
		//@ts-ignore
		get_closest_point_to_segment(start: Vector3, end: Vector3, use_collision: boolean = false) : Vector3;

		/** Returns the navigation point closest to the point given. Points are in local coordinate space. */
		get_closest_point(to_point: Vector3) : Vector3;

		/** Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on. */
		get_closest_point_normal(to_point: Vector3) : Vector3;

		/** Returns the owner of the `NavigationMesh` which contains the navigation point closest to the point given. This is usually a `NavigationMeshInstance`. For meshes added via `navmesh_add`, returns the owner that was given (or `null` if the `owner` parameter was omitted). */
		get_closest_point_owner(to_point: Vector3) : Object;

		/** Getter of `up_vector` property */
		get_up_vector() : Vector3;

		/** Setter of `up_vector` property */
		set_up_vector(p_value: Vector3) : void;
	}
	namespace Navigation {
	}

	/** 2D navigation and pathfinding node.
	 Navigation2D provides navigation and pathfinding within a 2D area, specified as a collection of `NavigationPolygon` resources. By default, these are automatically collected from child `NavigationPolygonInstance` nodes, but they can also be added on the fly with `navpoly_add`. */
	class Navigation2D extends Node2D {

		/** Adds a `NavigationPolygon`. Returns an ID for use with `navpoly_remove` or `navpoly_set_transform`. If given, a `Transform2D` is applied to the polygon. The optional `owner` is used as return value for `get_closest_point_owner`. */
		//@ts-ignore
		navpoly_add(mesh: NavigationPolygon, xform: Transform2D, owner: Object = null) : number;

		/** Sets the transform applied to the `NavigationPolygon` with the given ID. */
		navpoly_set_transform(id: number, xform: Transform2D) : void;

		/** Removes the `NavigationPolygon` with the given ID. */
		navpoly_remove(id: number) : void;

		/** Returns the path between two given points. Points are in local coordinate space. If `optimize` is `true` (the default), the path is smoothed by merging path segments where possible. */
		//@ts-ignore
		get_simple_path(start: Vector2, end: Vector2, optimize: boolean = true) : PoolVector2Array;

		/** Returns the navigation point closest to the point given. Points are in local coordinate space. */
		get_closest_point(to_point: Vector2) : Vector2;

		/** Returns the owner of the `NavigationPolygon` which contains the navigation point closest to the point given. This is usually a `NavigationPolygonInstance`. For polygons added via `navpoly_add`, returns the owner that was given (or `null` if the `owner` parameter was omitted). */
		get_closest_point_owner(to_point: Vector2) : Object;
	}
	namespace Navigation2D {
	}

	/** 
	  */
	class NavigationMesh extends Resource {

		/**  */
		'sample_partition_type/sample_partition_type': number;

		/**  */
		'geometry/parsed_geometry_type': number;

		/**  */
		'geometry/collision_mask': number;

		/**  */
		'geometry/source_geometry_mode': number;

		/**  */
		'geometry/source_group_name': string;

		/**  */
		'cell/size': number;

		/**  */
		'cell/height': number;

		/**  */
		'agent/height': number;

		/**  */
		'agent/radius': number;

		/**  */
		'agent/max_climb': number;

		/**  */
		'agent/max_slope': number;

		/**  */
		'region/min_size': number;

		/**  */
		'region/merge_size': number;

		/**  */
		'edge/max_length': number;

		/**  */
		'edge/max_error': number;

		/**  */
		'polygon/verts_per_poly': number;

		/**  */
		'detail/sample_distance': number;

		/**  */
		'detail/sample_max_error': number;

		/**  */
		'filter/low_hanging_obstacles': boolean;

		/**  */
		'filter/ledge_spans': boolean;

		/**  */
		'filter/filter_walkable_low_height_spans': boolean;

		/**  */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/**  */
		get_collision_mask_bit(bit: number) : boolean;

		/**  */
		set_vertices(vertices: PoolVector3Array) : void;

		/**  */
		get_vertices() : PoolVector3Array;

		/**  */
		add_polygon(polygon: PoolIntArray) : void;

		/**  */
		get_polygon_count() : number;

		/**  */
		get_polygon(idx: number) : PoolIntArray;

		/**  */
		clear_polygons() : void;

		/**  */
		create_from_mesh(mesh: Mesh) : void;

		/** Getter of `sample_partition_type/sample_partition_type` property */
		get_sample_partition_type() : number;

		/** Setter of `sample_partition_type/sample_partition_type` property */
		set_sample_partition_type(p_value: number) : void;

		/** Getter of `geometry/parsed_geometry_type` property */
		get_parsed_geometry_type() : number;

		/** Setter of `geometry/parsed_geometry_type` property */
		set_parsed_geometry_type(p_value: number) : void;

		/** Getter of `geometry/collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `geometry/collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `geometry/source_geometry_mode` property */
		get_source_geometry_mode() : number;

		/** Setter of `geometry/source_geometry_mode` property */
		set_source_geometry_mode(p_value: number) : void;

		/** Getter of `geometry/source_group_name` property */
		get_source_group_name() : string;

		/** Setter of `geometry/source_group_name` property */
		set_source_group_name(p_value: string) : void;

		/** Getter of `cell/size` property */
		get_cell_size() : number;

		/** Setter of `cell/size` property */
		set_cell_size(p_value: number) : void;

		/** Getter of `cell/height` property */
		get_cell_height() : number;

		/** Setter of `cell/height` property */
		set_cell_height(p_value: number) : void;

		/** Getter of `agent/height` property */
		get_agent_height() : number;

		/** Setter of `agent/height` property */
		set_agent_height(p_value: number) : void;

		/** Getter of `agent/radius` property */
		get_agent_radius() : number;

		/** Setter of `agent/radius` property */
		set_agent_radius(p_value: number) : void;

		/** Getter of `agent/max_climb` property */
		get_agent_max_climb() : number;

		/** Setter of `agent/max_climb` property */
		set_agent_max_climb(p_value: number) : void;

		/** Getter of `agent/max_slope` property */
		get_agent_max_slope() : number;

		/** Setter of `agent/max_slope` property */
		set_agent_max_slope(p_value: number) : void;

		/** Getter of `region/min_size` property */
		get_region_min_size() : number;

		/** Setter of `region/min_size` property */
		set_region_min_size(p_value: number) : void;

		/** Getter of `region/merge_size` property */
		get_region_merge_size() : number;

		/** Setter of `region/merge_size` property */
		set_region_merge_size(p_value: number) : void;

		/** Getter of `edge/max_length` property */
		get_edge_max_length() : number;

		/** Setter of `edge/max_length` property */
		set_edge_max_length(p_value: number) : void;

		/** Getter of `edge/max_error` property */
		get_edge_max_error() : number;

		/** Setter of `edge/max_error` property */
		set_edge_max_error(p_value: number) : void;

		/** Getter of `polygon/verts_per_poly` property */
		get_verts_per_poly() : number;

		/** Setter of `polygon/verts_per_poly` property */
		set_verts_per_poly(p_value: number) : void;

		/** Getter of `detail/sample_distance` property */
		get_detail_sample_distance() : number;

		/** Setter of `detail/sample_distance` property */
		set_detail_sample_distance(p_value: number) : void;

		/** Getter of `detail/sample_max_error` property */
		get_detail_sample_max_error() : number;

		/** Setter of `detail/sample_max_error` property */
		set_detail_sample_max_error(p_value: number) : void;

		/** Getter of `filter/low_hanging_obstacles` property */
		get_filter_low_hanging_obstacles() : boolean;

		/** Setter of `filter/low_hanging_obstacles` property */
		set_filter_low_hanging_obstacles(p_value: boolean) : void;

		/** Getter of `filter/ledge_spans` property */
		get_filter_ledge_spans() : boolean;

		/** Setter of `filter/ledge_spans` property */
		set_filter_ledge_spans(p_value: boolean) : void;

		/** Getter of `filter/filter_walkable_low_height_spans` property */
		get_filter_walkable_low_height_spans() : boolean;

		/** Setter of `filter/filter_walkable_low_height_spans` property */
		set_filter_walkable_low_height_spans(p_value: boolean) : void;
	}
	namespace NavigationMesh {

		/**  */
		const SAMPLE_PARTITION_WATERSHED: 0;

		/**  */
		const SAMPLE_PARTITION_MONOTONE: 1;

		/**  */
		const SAMPLE_PARTITION_LAYERS: 2;

		/**  */
		const PARSED_GEOMETRY_MESH_INSTANCES: 0;

		/**  */
		const PARSED_GEOMETRY_STATIC_COLLIDERS: 1;

		/**  */
		const PARSED_GEOMETRY_BOTH: 2;
	}

	/** 
	  */
	class NavigationMeshInstance extends Spatial {

		/**  */
		navmesh: NavigationMesh;

		/**  */
		enabled: boolean;

		/** Getter of `navmesh` property */
		get_navigation_mesh() : NavigationMesh;

		/** Setter of `navmesh` property */
		set_navigation_mesh(p_value: NavigationMesh) : void;

		/** Getter of `enabled` property */
		is_enabled() : boolean;

		/** Setter of `enabled` property */
		set_enabled(p_value: boolean) : void;
	}
	namespace NavigationMeshInstance {
	}

	/** A node that has methods to draw outlines or use indices of vertices to create navigation polygons.
	 There are two ways to create polygons. Either by using the `add_outline` method, or using the `add_polygon` method.

	 Using `add_outline`:

	 ```gdscript
	 var polygon = NavigationPolygon.new()
	 var outline = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
	 polygon.add_outline(outline)
	 polygon.make_polygons_from_outlines()
	 $NavigationPolygonInstance.navpoly = polygon
	 ```

	 Using `add_polygon` and indices of the vertices array.

	 ```gdscript
	 var polygon = NavigationPolygon.new()
	 var vertices = PoolVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
	 polygon.set_vertices(vertices)
	 var indices = PoolIntArray(0, 3, 1)
	 polygon.add_polygon(indices)
	 $NavigationPolygonInstance.navpoly = polygon
	 ``` */
	class NavigationPolygon extends Resource {

		/** Sets the vertices that can be then indexed to create polygons with the `add_polygon` method. */
		set_vertices(vertices: PoolVector2Array) : void;

		/** Returns a `PoolVector2Array` containing all the vertices being used to create the polygons. */
		get_vertices() : PoolVector2Array;

		/** Adds a polygon using the indices of the vertices you get when calling `get_vertices`. */
		add_polygon(polygon: PoolIntArray) : void;

		/** Returns the count of all polygons. */
		get_polygon_count() : number;

		/** Returns a `PoolIntArray` containing the indices of the vertices of a created polygon. */
		get_polygon(idx: number) : PoolIntArray;

		/** Clears the array of polygons, but it doesn't clear the array of outlines and vertices. */
		clear_polygons() : void;

		/** Appends a `PoolVector2Array` that contains the vertices of an outline to the internal array that contains all the outlines. You have to call `make_polygons_from_outlines` in order for this array to be converted to polygons that the engine will use. */
		add_outline(outline: PoolVector2Array) : void;

		/** Adds a `PoolVector2Array` that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position. You have to call `make_polygons_from_outlines` in order for this array to be converted to polygons that the engine will use. */
		add_outline_at_index(outline: PoolVector2Array, index: number) : void;

		/** Returns the number of outlines that were created in the editor or by script. */
		get_outline_count() : number;

		/** Changes an outline created in the editor or by script. You have to call `make_polygons_from_outlines` for the polygons to update. */
		set_outline(idx: number, outline: PoolVector2Array) : void;

		/** Returns a `PoolVector2Array` containing the vertices of an outline that was created in the editor or by script. */
		get_outline(idx: number) : PoolVector2Array;

		/** Removes an outline created in the editor or by script. You have to call `make_polygons_from_outlines` for the polygons to update. */
		remove_outline(idx: number) : void;

		/** Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them. */
		clear_outlines() : void;

		/** Creates polygons from the outlines added in the editor or by script. */
		make_polygons_from_outlines() : void;
	}
	namespace NavigationPolygon {
	}

	/** 
	  */
	class NavigationPolygonInstance extends Node2D {

		/**  */
		navpoly: NavigationPolygon;

		/**  */
		enabled: boolean;

		/** Getter of `navpoly` property */
		get_navigation_polygon() : NavigationPolygon;

		/** Setter of `navpoly` property */
		set_navigation_polygon(p_value: NavigationPolygon) : void;

		/** Getter of `enabled` property */
		is_enabled() : boolean;

		/** Setter of `enabled` property */
		set_enabled(p_value: boolean) : void;
	}
	namespace NavigationPolygonInstance {
	}

	/** PacketPeer implementation using the `url=http://enet.bespin.org/index.html`ENet`/url` library.
	 A PacketPeer implementation that should be passed to `SceneTree.network_peer` after being initialized as either a client or server. Events can then be handled by connecting to `SceneTree` signals. */
	class NetworkedMultiplayerENet extends NetworkedMultiplayerPeer {

		/** The compression method used for network packets. These have different tradeoffs of compression speed versus bandwidth, you may need to test which one works best for your use case if you use compression at all. */
		compression_mode: number;

		/** Set the default channel to be used to transfer data. By default, this value is `-1` which means that ENet will only use 2 channels, one for reliable and one for unreliable packets. Channel `0` is reserved, and cannot be used. Setting this member to any value between `0` and `channel_count` (excluded) will force ENet to use that channel for sending data. */
		transfer_channel: number;

		/** The number of channels to be used by ENet. Channels are used to separate different kinds of data. In reliable or ordered mode, for example, the packet delivery order is ensured on a per channel basis. */
		channel_count: number;

		/** Enforce ordered packets when using `NetworkedMultiplayerPeer.TRANSFER_MODE_UNRELIABLE` (thus behaving similarly to `NetworkedMultiplayerPeer.TRANSFER_MODE_UNRELIABLE_ORDERED`). This is the only way to use ordering with the RPC system. */
		always_ordered: boolean;

		/** Enable or disable the server feature that notifies clients of other peers' connection/disconnection, and relays messages between them. When this option is `false`, clients won't be automatically notified of other peers and won't be able to send them packets through the server. */
		server_relay: boolean;

		/** Enable or disable certiticate verification when `use_dtls` `true`. */
		dtls_verify: boolean;

		/** When enabled, the client or server created by this peer, will use `PacketPeerDTLS` instead of raw UDP sockets for communicating with the remote peer. This will make the communication encrypted with DTLS at the cost of higher resource usage and potentially larger packet size.

		 Note: When creating a DTLS server, make sure you setup the key/certificate pair via `set_dtls_key` and `set_dtls_certificate`. For DTLS clients, have a look at the `dtls_verify` option, and configure the certificate accordingly via `set_dtls_certificate`. */
		use_dtls: boolean;

		/**  */
		refuse_new_connections: boolean;

		/**  */
		transfer_mode: number;

		/** Create server that listens to connections via `port`. The port needs to be an available, unused port between 0 and 65535. Note that ports below 1024 are privileged and may require elevated permissions depending on the platform. To change the interface the server listens on, use `set_bind_ip`. The default IP is the wildcard `"*"`, which listens on all available interfaces. `max_clients` is the maximum number of clients that are allowed at once, any number up to 4095 may be used, although the achievable number of simultaneous clients may be far lower and depends on the application. For additional details on the bandwidth parameters, see `create_client`. Returns `OK` if a server was created, `ERR_ALREADY_IN_USE` if this NetworkedMultiplayerENet instance already has an open connection (in which case you need to call `close_connection` first) or `ERR_CANT_CREATE` if the server could not be created. */
		//@ts-ignore
		create_server(port: number, max_clients: number = 32, in_bandwidth: number = 0, out_bandwidth: number = 0) : number;

		/** Create client that connects to a server at `address` using specified `port`. The given address needs to be either a fully qualified domain name (e.g. `"www.example.com"`) or an IP address in IPv4 or IPv6 format (e.g. `"192.168.1.1"`). The `port` is the port the server is listening on. The `in_bandwidth` and `out_bandwidth` parameters can be used to limit the incoming and outgoing bandwidth to the given number of bytes per second. The default of 0 means unlimited bandwidth. Note that ENet will strategically drop packets on specific sides of a connection between peers to ensure the peer's bandwidth is not overwhelmed. The bandwidth parameters also determine the window size of a connection which limits the amount of reliable packets that may be in transit at any given time. Returns `OK` if a client was created, `ERR_ALREADY_IN_USE` if this NetworkedMultiplayerENet instance already has an open connection (in which case you need to call `close_connection` first) or `ERR_CANT_CREATE` if the client could not be created. If `client_port` is specified, the client will also listen to the given port; this is useful for some NAT traversal techniques. */
		//@ts-ignore
		create_client(address: string, port: number, in_bandwidth: number = 0, out_bandwidth: number = 0, client_port: number = 0) : number;

		/** Closes the connection. Ignored if no connection is currently established. If this is a server it tries to notify all clients before forcibly disconnecting them. If this is a client it simply closes the connection to the server. */
		//@ts-ignore
		close_connection(wait_usec: number = 100) : void;

		/** Disconnect the given peer. If "now" is set to `true`, the connection will be closed immediately without flushing queued messages. */
		//@ts-ignore
		disconnect_peer(id: number, now: boolean = false) : void;

		/** The IP used when creating a server. This is set to the wildcard `"*"` by default, which binds to all available interfaces. The given IP needs to be in IPv4 or IPv6 address format, for example: `"192.168.1.1"`. */
		set_bind_ip(ip: string) : void;

		/** Configure the `CryptoKey` to use when `use_dtls` is `true`. Remember to also call `set_dtls_certificate` to setup your `X509Certificate`. */
		set_dtls_key(key: CryptoKey) : void;

		/** Configure the `X509Certificate` to use when `use_dtls` is `true`. For servers, you must also setup the `CryptoKey` via `set_dtls_key`. */
		set_dtls_certificate(certificate: X509Certificate) : void;

		/** Returns the IP address of the given peer. */
		get_peer_address(id: number) : string;

		/** Returns the remote port of the given peer. */
		get_peer_port(id: number) : number;

		/** Returns the channel of the next packet that will be retrieved via `PacketPeer.get_packet`. */
		get_packet_channel() : number;

		/** Returns the channel of the last packet fetched via `PacketPeer.get_packet`. */
		get_last_packet_channel() : number;

		/** Getter of `compression_mode` property */
		get_compression_mode() : number;

		/** Setter of `compression_mode` property */
		set_compression_mode(p_value: number) : void;

		/** Getter of `transfer_channel` property */
		get_transfer_channel() : number;

		/** Setter of `transfer_channel` property */
		set_transfer_channel(p_value: number) : void;

		/** Getter of `channel_count` property */
		get_channel_count() : number;

		/** Setter of `channel_count` property */
		set_channel_count(p_value: number) : void;

		/** Getter of `always_ordered` property */
		is_always_ordered() : boolean;

		/** Setter of `always_ordered` property */
		set_always_ordered(p_value: boolean) : void;

		/** Getter of `server_relay` property */
		is_server_relay_enabled() : boolean;

		/** Setter of `server_relay` property */
		set_server_relay_enabled(p_value: boolean) : void;

		/** Getter of `dtls_verify` property */
		is_dtls_verify_enabled() : boolean;

		/** Setter of `dtls_verify` property */
		set_dtls_verify_enabled(p_value: boolean) : void;

		/** Getter of `use_dtls` property */
		is_dtls_enabled() : boolean;

		/** Setter of `use_dtls` property */
		set_dtls_enabled(p_value: boolean) : void;

		/** Getter of `refuse_new_connections` property */
		is_refusing_new_connections() : boolean;

		/** Setter of `refuse_new_connections` property */
		set_refuse_new_connections(p_value: boolean) : void;

		/** Getter of `transfer_mode` property */
		get_transfer_mode() : number;

		/** Setter of `transfer_mode` property */
		set_transfer_mode(p_value: number) : void;
	}
	namespace NetworkedMultiplayerENet {
		enum CompressionMode {
			/** No compression. This uses the most bandwidth, but has the upside of requiring the fewest CPU resources. */
			COMPRESS_NONE = 0,
			/** ENet's built-in range encoding. */
			COMPRESS_RANGE_CODER = 1,
			/** `url=http://fastlz.org/`FastLZ`/url` compression. This option uses less CPU resources compared to `COMPRESS_ZLIB`, at the expense of using more bandwidth. */
			COMPRESS_FASTLZ = 2,
			/** `url=https://www.zlib.net/`Zlib`/url` compression. This option uses less bandwidth compared to `COMPRESS_FASTLZ`, at the expense of using more CPU resources. */
			COMPRESS_ZLIB = 3,
			/** `url=https://facebook.github.io/zstd/`Zstandard`/url` compression. */
			COMPRESS_ZSTD = 4,
		}

		/** No compression. This uses the most bandwidth, but has the upside of requiring the fewest CPU resources. */
		const COMPRESS_NONE: CompressionMode.COMPRESS_NONE;

		/** ENet's built-in range encoding. */
		const COMPRESS_RANGE_CODER: CompressionMode.COMPRESS_RANGE_CODER;

		/** `url=http://fastlz.org/`FastLZ`/url` compression. This option uses less CPU resources compared to `COMPRESS_ZLIB`, at the expense of using more bandwidth. */
		const COMPRESS_FASTLZ: CompressionMode.COMPRESS_FASTLZ;

		/** `url=https://www.zlib.net/`Zlib`/url` compression. This option uses less bandwidth compared to `COMPRESS_FASTLZ`, at the expense of using more CPU resources. */
		const COMPRESS_ZLIB: CompressionMode.COMPRESS_ZLIB;

		/** `url=https://facebook.github.io/zstd/`Zstandard`/url` compression. */
		const COMPRESS_ZSTD: CompressionMode.COMPRESS_ZSTD;
	}

	/** A high-level network interface to simplify multiplayer interactions.
	 Manages the connection to network peers. Assigns unique IDs to each client connected to the server. */
	class NetworkedMultiplayerPeer extends PacketPeer {

		/** If `true`, this `NetworkedMultiplayerPeer` refuses new connections. */
		refuse_new_connections: boolean;

		/** The manner in which to send packets to the `target_peer`. See `TransferMode`. */
		transfer_mode: number;

		/** Sets the peer to which packets will be sent.

		 The `id` can be one of: `TARGET_PEER_BROADCAST` to send to all connected peers, `TARGET_PEER_SERVER` to send to the peer acting as server, a valid peer ID to send to that specific peer, a negative peer ID to send to all peers except that one. By default, the target peer is `TARGET_PEER_BROADCAST`. */
		set_target_peer(id: number) : void;

		/** Returns the ID of the `NetworkedMultiplayerPeer` who sent the most recent packet. */
		get_packet_peer() : number;

		/** Waits up to 1 second to receive a new network event. */
		poll() : void;

		/** Returns the current state of the connection. See `ConnectionStatus`. */
		get_connection_status() : number;

		/** Returns the ID of this `NetworkedMultiplayerPeer`. */
		get_unique_id() : number;

		/** Getter of `refuse_new_connections` property */
		is_refusing_new_connections() : boolean;

		/** Setter of `refuse_new_connections` property */
		set_refuse_new_connections(p_value: boolean) : void;

		/** Getter of `transfer_mode` property */
		get_transfer_mode() : number;

		/** Setter of `transfer_mode` property */
		set_transfer_mode(p_value: number) : void;
	}
	namespace NetworkedMultiplayerPeer {

		/** Emitted when a connection attempt fails. */
		const connection_failed: 'connection_failed';

		/** Emitted when a connection attempt succeeds. */
		const connection_succeeded: 'connection_succeeded';

		/** Emitted by the server when a client disconnects. */
		const peer_disconnected: 'peer_disconnected';

		/** Emitted by the server when a client connects. */
		const peer_connected: 'peer_connected';

		/** Emitted by clients when the server disconnects. */
		const server_disconnected: 'server_disconnected';
		enum ConnectionStatus {
			/** The ongoing connection disconnected. */
			CONNECTION_DISCONNECTED = 0,
			/** A connection attempt is ongoing. */
			CONNECTION_CONNECTING = 1,
			/** The connection attempt succeeded. */
			CONNECTION_CONNECTED = 2,
		}
		enum TransferMode {
			/** Packets are not acknowledged, no resend attempts are made for lost packets. Packets may arrive in any order. Potentially faster than `TRANSFER_MODE_UNRELIABLE_ORDERED`. Use for non-critical data, and always consider whether the order matters. */
			TRANSFER_MODE_UNRELIABLE = 0,
			/** Packets are not acknowledged, no resend attempts are made for lost packets. Packets are received in the order they were sent in. Potentially faster than `TRANSFER_MODE_RELIABLE`. Use for non-critical data or data that would be outdated if received late due to resend attempt(s) anyway, for example movement and positional data. */
			TRANSFER_MODE_UNRELIABLE_ORDERED = 1,
			/** Packets must be received and resend attempts should be made until the packets are acknowledged. Packets must be received in the order they were sent in. Most reliable transfer mode, but potentially the slowest due to the overhead. Use for critical data that must be transmitted and arrive in order, for example an ability being triggered or a chat message. Consider carefully if the information really is critical, and use sparingly. */
			TRANSFER_MODE_RELIABLE = 2,
		}

		/** Packets are not acknowledged, no resend attempts are made for lost packets. Packets may arrive in any order. Potentially faster than `TRANSFER_MODE_UNRELIABLE_ORDERED`. Use for non-critical data, and always consider whether the order matters. */
		const TRANSFER_MODE_UNRELIABLE: TransferMode.TRANSFER_MODE_UNRELIABLE;

		/** Packets are not acknowledged, no resend attempts are made for lost packets. Packets are received in the order they were sent in. Potentially faster than `TRANSFER_MODE_RELIABLE`. Use for non-critical data or data that would be outdated if received late due to resend attempt(s) anyway, for example movement and positional data. */
		const TRANSFER_MODE_UNRELIABLE_ORDERED: TransferMode.TRANSFER_MODE_UNRELIABLE_ORDERED;

		/** Packets must be received and resend attempts should be made until the packets are acknowledged. Packets must be received in the order they were sent in. Most reliable transfer mode, but potentially the slowest due to the overhead. Use for critical data that must be transmitted and arrive in order, for example an ability being triggered or a chat message. Consider carefully if the information really is critical, and use sparingly. */
		const TRANSFER_MODE_RELIABLE: TransferMode.TRANSFER_MODE_RELIABLE;

		/** The ongoing connection disconnected. */
		const CONNECTION_DISCONNECTED: ConnectionStatus.CONNECTION_DISCONNECTED;

		/** A connection attempt is ongoing. */
		const CONNECTION_CONNECTING: ConnectionStatus.CONNECTION_CONNECTING;

		/** The connection attempt succeeded. */
		const CONNECTION_CONNECTED: ConnectionStatus.CONNECTION_CONNECTED;

		/** Packets are sent to the server and then redistributed to other peers. */
		const TARGET_PEER_BROADCAST: 0;

		/** Packets are sent to the server alone. */
		const TARGET_PEER_SERVER: 1;
	}

	/** Scalable texture-based frame that tiles the texture's centers and sides, but keeps the corners' original size. Perfect for panels and dialog boxes.
	 Also known as 9-slice panels, NinePatchRect produces clean panels of any size, based on a small texture. To do so, it splits the texture in a 3×3 grid. When you scale the node, it tiles the texture's sides horizontally or vertically, the center on both axes but it doesn't scale or tile the corners. */
	class NinePatchRect extends Control {

		/** The node's texture resource. */
		texture: Texture;

		/** If `true`, draw the panel's center. Else, only draw the 9-slice's borders. */
		draw_center: boolean;

		/** Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one. If the rect is empty, NinePatchRect will use the whole texture. */
		region_rect: Rect2;

		/** The height of the 9-slice's left column. */
		patch_margin_left: number;

		/** The height of the 9-slice's top row. */
		patch_margin_top: number;

		/** The height of the 9-slice's right column. */
		patch_margin_right: number;

		/** The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. */
		patch_margin_bottom: number;

		/** Doesn't do anything at the time of writing. */
		axis_stretch_horizontal: number;

		/** Doesn't do anything at the time of writing. */
		axis_stretch_vertical: number;

		/**  */
		mouse_filter: number;

		/** Sets the size of the margin identified by the given `Margin` constant to `value` in pixels. */
		set_patch_margin(margin: Margin, value: number) : void;

		/** Returns the size of the margin identified by the given `Margin` constant. */
		get_patch_margin(margin: Margin) : number;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `draw_center` property */
		is_draw_center_enabled() : boolean;

		/** Setter of `draw_center` property */
		set_draw_center(p_value: boolean) : void;

		/** Getter of `region_rect` property */
		get_region_rect() : Rect2;

		/** Setter of `region_rect` property */
		set_region_rect(p_value: Rect2) : void;

		/** Getter of `patch_margin_left` property */
		get_patch_margin() : number;

		/** Setter of `patch_margin_left` property */
		set_patch_margin(p_value: number) : void;

		/** Getter of `patch_margin_top` property */
		get_patch_margin() : number;

		/** Setter of `patch_margin_top` property */
		set_patch_margin(p_value: number) : void;

		/** Getter of `patch_margin_right` property */
		get_patch_margin() : number;

		/** Setter of `patch_margin_right` property */
		set_patch_margin(p_value: number) : void;

		/** Getter of `patch_margin_bottom` property */
		get_patch_margin() : number;

		/** Setter of `patch_margin_bottom` property */
		set_patch_margin(p_value: number) : void;

		/** Getter of `axis_stretch_horizontal` property */
		get_h_axis_stretch_mode() : number;

		/** Setter of `axis_stretch_horizontal` property */
		set_h_axis_stretch_mode(p_value: number) : void;

		/** Getter of `axis_stretch_vertical` property */
		get_v_axis_stretch_mode() : number;

		/** Setter of `axis_stretch_vertical` property */
		set_v_axis_stretch_mode(p_value: number) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;
	}
	namespace NinePatchRect {

		/** Emitted when the node's texture changes. */
		const texture_changed: 'texture_changed';
		enum AxisStretchMode {
			/** Doesn't do anything at the time of writing. */
			AXIS_STRETCH_MODE_STRETCH = 0,
			/** Doesn't do anything at the time of writing. */
			AXIS_STRETCH_MODE_TILE = 1,
			/** Doesn't do anything at the time of writing. */
			AXIS_STRETCH_MODE_TILE_FIT = 2,
		}

		/** Doesn't do anything at the time of writing. */
		const AXIS_STRETCH_MODE_STRETCH: AxisStretchMode.AXIS_STRETCH_MODE_STRETCH;

		/** Doesn't do anything at the time of writing. */
		const AXIS_STRETCH_MODE_TILE: AxisStretchMode.AXIS_STRETCH_MODE_TILE;

		/** Doesn't do anything at the time of writing. */
		const AXIS_STRETCH_MODE_TILE_FIT: AxisStretchMode.AXIS_STRETCH_MODE_TILE_FIT;
	}

	/** Base class for all *scene* objects.
	 Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names.

	 A tree of nodes is called a *scene*. Scenes can be saved to the disk and then instanced into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects.

	 **Scene tree:** The `SceneTree` contains the active tree of nodes. When a node is added to the scene tree, it receives the `NOTIFICATION_ENTER_TREE` notification and its `_enter_tree` callback is triggered. Child nodes are always added *after* their parent node, i.e. the `_enter_tree` callback of a parent node will be triggered before its child's.

	 Once all nodes have been added in the scene tree, they receive the `NOTIFICATION_READY` notification and their respective `_ready` callbacks are triggered. For groups of nodes, the `_ready` callback is called in reverse order, starting with the children and moving up to the parent nodes.

	 This means that when adding a node to the scene tree, the following order will be used for the callbacks: `_enter_tree` of the parent, `_enter_tree` of the children, `_ready` of the children and finally `_ready` of the parent (recursively for the entire scene tree).

	 **Processing:** Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback `_process`, toggled with `set_process`) happens as fast as possible and is dependent on the frame rate, so the processing time *delta* is passed as an argument. Physics processing (callback `_physics_process`, toggled with `set_physics_process`) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine.

	 Nodes can also process input events. When present, the `_input` function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the `_unhandled_input` function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI `Control` nodes), ensuring that the node only receives the events that were meant for it.

	 To keep track of the scene hierarchy (especially when instancing scenes into other scenes), an "owner" can be set for the node with the `owner` property. This keeps track of who instanced what. This is mostly useful when writing editors and tools, though.

	 Finally, when a node is freed with `Object.free` or `queue_free`, it will also free all its children.

	 **Groups:** Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See `add_to_group`, `is_in_group` and `remove_from_group`. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on `SceneTree`.

	 **Networking with nodes:** After connecting to a server (or making one, see `NetworkedMultiplayerENet`), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling `rpc` with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its `NodePath` (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos. */
	class Node extends Object {

		/** Pause mode. How the node will behave if the `SceneTree` is paused. */
		pause_mode: number;

		/** The name of the node. This name is unique among the siblings (other child nodes from the same parent). When set to an existing name, the node will be automatically renamed. */
		name: string;

		/** When a scene is instanced from a file, its topmost node contains the filename from which it was loaded. */
		filename: string;

		/** The node owner. A node can have any other node as owner (as long as it is a valid parent, grandparent, etc. ascending in the tree). When saving a node (using `PackedScene`), all the nodes it owns will be saved with it. This allows for the creation of complex `SceneTree`s, with instancing and subinstancing. */
		owner: Node;

		/** The `MultiplayerAPI` instance associated with this node. Either the `custom_multiplayer`, or the default SceneTree one (if inside tree). */
		multiplayer: MultiplayerAPI;

		/** The override to the default `MultiplayerAPI`. Set to `null` to use the default `SceneTree` one. */
		custom_multiplayer: MultiplayerAPI;

		/** The node's priority in the execution order of the enabled processing callbacks (i.e. `NOTIFICATION_PROCESS`, `NOTIFICATION_PHYSICS_PROCESS` and their internal counterparts). Nodes whose process priority value is *lower* will have their processing callbacks executed first. */
		process_priority: number;

		/** Called when the node enters the `SceneTree` (e.g. upon instancing, scene changing, or after calling `add_child` in a script). If the node has children, its `_enter_tree` callback will be called first, and then that of the children.

		 Corresponds to the `NOTIFICATION_ENTER_TREE` notification in `Object._notification`. */
		_enter_tree() : void;

		/** Called when the node is about to leave the `SceneTree` (e.g. upon freeing, scene changing, or after calling `remove_child` in a script). If the node has children, its `_exit_tree` callback will be called last, after all its children have left the tree.

		 Corresponds to the `NOTIFICATION_EXIT_TREE` notification in `Object._notification` and signal `tree_exiting`. To get notified when the node has already left the active tree, connect to the `tree_exited`. */
		_exit_tree() : void;

		/** The string returned from this method is displayed as a warning in the Scene Dock if the script that overrides it is a `tool` script.

		 Returning an empty string produces no warning.

		 Call `update_configuration_warning` when the warning needs to be updated for this node. */
		_get_configuration_warning() : string;

		/** Called when there is an input event. The input event propagates up through the node tree until a node consumes it.

		 It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_input`.

		 To consume the input event and stop it propagating further to other nodes, `SceneTree.set_input_as_handled` can be called.

		 For gameplay input, `_unhandled_input` and `_unhandled_key_input` are usually a better fit as they allow the GUI to intercept the events first.

		 **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan). */
		_input(event: InputEvent) : void;

		/** Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the `delta` variable should be constant.

		 It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_physics_process`.

		 Corresponds to the `NOTIFICATION_PHYSICS_PROCESS` notification in `Object._notification`.

		 **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan). */
		_physics_process(delta: number) : void;

		/** Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the `delta` time since the previous frame is not constant.

		 It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process`.

		 Corresponds to the `NOTIFICATION_PROCESS` notification in `Object._notification`.

		 **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan). */
		_process(delta: number) : void;

		/** Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their `_ready` callbacks get triggered first, and the parent node will receive the ready notification afterwards.

		 Corresponds to the `NOTIFICATION_READY` notification in `Object._notification`. See also the `onready` keyword for variables.

		 Usually used for initialization. For even earlier initialization, `Object._init` may be used. See also `_enter_tree`.

		 **Note:** `_ready` may be called only once for each node. After removing a node from the scene tree and adding again, `_ready` will not be called for the second time. This can be bypassed with requesting another call with `request_ready`, which may be called anywhere before adding the node again. */
		_ready() : void;

		/** Called when an `InputEvent` hasn't been consumed by `_input` or any GUI. The input event propagates up through the node tree until a node consumes it.

		 It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_unhandled_input`.

		 To consume the input event and stop it propagating further to other nodes, `SceneTree.set_input_as_handled` can be called.

		 For gameplay input, this and `_unhandled_key_input` are usually a better fit than `_input` as they allow the GUI to intercept the events first.

		 **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan). */
		_unhandled_input(event: InputEvent) : void;

		/** Called when an `InputEventKey` hasn't been consumed by `_input` or any GUI. The input event propagates up through the node tree until a node consumes it.

		 It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with `set_process_unhandled_key_input`.

		 To consume the input event and stop it propagating further to other nodes, `SceneTree.set_input_as_handled` can be called.

		 For gameplay input, this and `_unhandled_input` are usually a better fit than `_input` as they allow the GUI to intercept the events first.

		 **Note:** This method is only called if the node is present in the scene tree (i.e. if it's not orphan). */
		_unhandled_key_input(event: InputEventKey) : void;

		/** Adds a child node. The child is placed below the given node in the list of children.

		 If `legible_unique_name` is `true`, the child node will have an human-readable name based on the name of the node being instanced instead of its type. */
		//@ts-ignore
		add_child_below_node(node: Node, child_node: Node, legible_unique_name: boolean = false) : void;

		/** Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node.

		 If `legible_unique_name` is `true`, the child node will have an human-readable name based on the name of the node being instanced instead of its type.

		 **Note:** If the child node already has a parent, the function will fail. Use `remove_child` first to remove the node from its current parent. For example:

		 ```gdscript
		 if child_node.get_parent():
		     child_node.get_parent().remove_child(child_node)
		 add_child(child_node)
		 ```

		 **Note:** If you want a child to be persisted to a `PackedScene`, you must set `owner` in addition to calling `add_child`. This is typically relevant for `url=https://godot.readthedocs.io/en/latest/tutorials/misc/running_code_in_the_editor.html`tool scripts`/url` and `url=https://godot.readthedocs.io/en/latest/tutorials/plugins/editor/index.html`editor plugins`/url`. If `add_child` is called without setting `owner`, the newly added `Node` will not be visible in the scene tree, though it will be visible in the 2D/3D view. */
		//@ts-ignore
		add_child(node: Node, legible_unique_name: boolean = false) : void;

		/** Removes a child node. The node is NOT deleted and must be deleted manually. */
		remove_child(node: Node) : void;

		/** Returns the number of child nodes. */
		get_child_count() : number;

		/** Returns an array of references to node's children. */
		get_children() : any[];

		/** Returns a child node by its index (see `get_child_count`). This method is often used for iterating all children of a node.

		 To access a child node via its name, use `get_node`. */
		get_child(idx: number) : Node;

		/** Returns `true` if the node that the `NodePath` points to exists. */
		has_node(path: string) : boolean;

		/** Fetches a node. The `NodePath` can be either a relative path (from the current node) or an absolute path (in the scene tree) to a node. If the path does not exist, a `null instance` is returned and an error is logged. Attempts to access methods on the return value will result in an "Attempt to call <method> on a null instance." error.

		 **Note:** Fetching absolute paths only works when the node is inside the scene tree (see `is_inside_tree`).

		 **Example:** Assume your current node is Character and the following tree:

		 ```gdscript
		 /root
		 /root/Character
		 /root/Character/Sword
		 /root/Character/Backpack/Dagger
		 /root/MyGame
		 /root/Swamp/Alligator
		 /root/Swamp/Mosquito
		 /root/Swamp/Goblin
		 ```

		 Possible paths are:

		 ```gdscript
		 get_node("Sword")
		 get_node("Backpack/Dagger")
		 get_node("../Swamp/Alligator")
		 get_node("/root/MyGame")
		 ``` */
		get_node(path: string) : Node;

		/** Similar to `get_node`, but does not log an error if `path` does not point to a valid `Node`. */
		get_node_or_null(path: string) : Node;

		/** Returns the parent node of the current node, or a `null instance` if the node lacks a parent. */
		get_parent() : Node;

		/** Finds a descendant of this node whose name matches `mask` as in `String.match` (i.e. case-sensitive, but `"*"` matches zero or more characters and `"?"` matches any single character except `"."`).

		 **Note:** It does not match against the full path, just against individual node names.

		 If `owned` is `true`, this method only finds nodes whose owner is this node. This is especially important for scenes instantiated through a script, because those scenes don't have an owner. */
		//@ts-ignore
		find_node(mask: string, recursive: boolean = true, owned: boolean = true) : Node;

		/** Finds the first parent of the current node whose name matches `mask` as in `String.match` (i.e. case-sensitive, but `"*"` matches zero or more characters and `"?"` matches any single character except `"."`).

		 **Note:** It does not match against the full path, just against individual node names. */
		find_parent(mask: string) : Node;

		/** Returns `true` if the `NodePath` points to a valid node and its subname points to a valid resource, e.g. `Area2D/CollisionShape2D:shape`. Properties with a non-`Resource` type (e.g. nodes or primitive math types) are not considered resources. */
		has_node_and_resource(path: string) : boolean;

		/** Fetches a node and one of its resources as specified by the `NodePath`'s subname (e.g. `Area2D/CollisionShape2D:shape`). If several nested resources are specified in the `NodePath`, the last one will be fetched.

		 The return value is an array of size 3: the first index points to the `Node` (or `null` if not found), the second index points to the `Resource` (or `null` if not found), and the third index is the remaining `NodePath`, if any.

		 For example, assuming that `Area2D/CollisionShape2D` is a valid node and that its `shape` property has been assigned a `RectangleShape2D` resource, one could have this kind of output:

		 ```gdscript
		 print(get_node_and_resource("Area2D/CollisionShape2D")) # [[CollisionShape2D:1161], Null, ]
		 print(get_node_and_resource("Area2D/CollisionShape2D:shape")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], ]
		 print(get_node_and_resource("Area2D/CollisionShape2D:shape:extents")) # [[CollisionShape2D:1161], [RectangleShape2D:1156], :extents]
		 ``` */
		get_node_and_resource(path: string) : any[];

		/** Returns `true` if this node is currently inside a `SceneTree`. */
		is_inside_tree() : boolean;

		/** Returns `true` if the given node is a direct or indirect child of the current node. */
		is_a_parent_of(node: Node) : boolean;

		/** Returns `true` if the given node occurs later in the scene hierarchy than the current node. */
		is_greater_than(node: Node) : boolean;

		/** Returns the absolute path of the current node. This only works if the current node is inside the scene tree (see `is_inside_tree`). */
		get_path() : string;

		/** Returns the relative `NodePath` from this node to the specified `node`. Both nodes must be in the same scene or the function will fail. */
		get_path_to(node: Node) : string;

		/** Adds the node to a group. Groups are helpers to name and organize a subset of nodes, for example "enemies" or "collectables". A node can be in any number of groups. Nodes can be assigned a group at any time, but will not be added until they are inside the scene tree (see `is_inside_tree`). See notes in the description, and the group methods in `SceneTree`.

		 The `persistent` option is used when packing node to `PackedScene` and saving to file. Non-persistent groups aren't stored. */
		//@ts-ignore
		add_to_group(group: string, persistent: boolean = false) : void;

		/** Removes a node from a group. See notes in the description, and the group methods in `SceneTree`. */
		remove_from_group(group: string) : void;

		/** Returns `true` if this node is in the specified group. See notes in the description, and the group methods in `SceneTree`. */
		is_in_group(group: string) : boolean;

		/** Moves a child node to a different position (order) among the other children. Since calls, signals, etc are performed by tree order, changing the order of children nodes may be useful. */
		move_child(child_node: Node, to_position: number) : void;

		/** Returns an array listing the groups that the node is a member of. */
		get_groups() : any[];

		/** Moves this node to the bottom of parent node's children hierarchy. This is often useful in GUIs (`Control` nodes), because their order of drawing depends on their order in the tree, i.e. the further they are on the node list, the higher they are drawn. After using `raise`, a Control will be drawn on top of their siblings. */
		raise() : void;

		/** Removes a node and sets all its children as children of the parent node (if it exists). All event subscriptions that pass by the removed node will be unsubscribed. */
		remove_and_skip() : void;

		/** Returns the node's index, i.e. its position among the siblings of its parent. */
		get_index() : number;

		/** Prints the tree to stdout. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the `get_node` function.

		 **Example output:**

		 ```gdscript
		 TheGame
		 TheGame/Menu
		 TheGame/Menu/Label
		 TheGame/Menu/Camera2D
		 TheGame/SplashScreen
		 TheGame/SplashScreen/Camera2D
		 ``` */
		print_tree() : void;

		/** Similar to `print_tree`, this prints the tree to stdout. This version displays a more graphical representation similar to what is displayed in the scene inspector. It is useful for inspecting larger trees.

		 **Example output:**

		 ```gdscript
		  ┖╴TheGame
		     ┠╴Menu
		     ┃  ┠╴Label
		     ┃  ┖╴Camera2D
		     ┖-SplashScreen
		        ┖╴Camera2D
		 ``` */
		print_tree_pretty() : void;

		/** Notifies the current node and all its children recursively by calling `Object.notification` on all of them. */
		propagate_notification(what: number) : void;

		/** Calls the given method (if present) with the arguments given in `args` on this node and recursively on all its children. If the `parent_first` argument is `true`, the method will be called on the current node first, then on all its children. If `parent_first` is `false`, the children will be called first. */
		//@ts-ignore
		propagate_call(method: string, args: any[] = [  ], parent_first: boolean = false) : void;

		/** Enables or disables physics (i.e. fixed framerate) processing. When a node is being processed, it will receive a `NOTIFICATION_PHYSICS_PROCESS` at a fixed (usually 60 FPS, see `Engine.iterations_per_second` to change) interval (and the `_physics_process` callback will be called if exists). Enabled automatically if `_physics_process` is overridden. Any calls to this before `_ready` will be ignored. */
		set_physics_process(enable: boolean) : void;

		/** Returns the time elapsed since the last physics-bound frame (see `_physics_process`). This is always a constant value in physics processing unless the frames per second is changed via `Engine.iterations_per_second`. */
		get_physics_process_delta_time() : number;

		/** Returns `true` if physics processing is enabled (see `set_physics_process`). */
		is_physics_processing() : boolean;

		/** Returns the time elapsed (in seconds) since the last process callback. This value may vary from frame to frame. */
		get_process_delta_time() : number;

		/** Enables or disables processing. When a node is being processed, it will receive a `NOTIFICATION_PROCESS` on every drawn frame (and the `_process` callback will be called if exists). Enabled automatically if `_process` is overridden. Any calls to this before `_ready` will be ignored. */
		set_process(enable: boolean) : void;

		/** Returns `true` if processing is enabled (see `set_process`). */
		is_processing() : boolean;

		/** Enables or disables input processing. This is not required for GUI controls! Enabled automatically if `_input` is overridden. Any calls to this before `_ready` will be ignored. */
		set_process_input(enable: boolean) : void;

		/** Returns `true` if the node is processing input (see `set_process_input`). */
		is_processing_input() : boolean;

		/** Enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a `Control`). Enabled automatically if `_unhandled_input` is overridden. Any calls to this before `_ready` will be ignored. */
		set_process_unhandled_input(enable: boolean) : void;

		/** Returns `true` if the node is processing unhandled input (see `set_process_unhandled_input`). */
		is_processing_unhandled_input() : boolean;

		/** Enables unhandled key input processing. Enabled automatically if `_unhandled_key_input` is overridden. Any calls to this before `_ready` will be ignored. */
		set_process_unhandled_key_input(enable: boolean) : void;

		/** Returns `true` if the node is processing unhandled key input (see `set_process_unhandled_key_input`). */
		is_processing_unhandled_key_input() : boolean;

		/** Returns `true` if the node can process while the scene tree is paused (see `pause_mode`). Always returns `true` if the scene tree is not paused, and `false` if the node is not in the tree. */
		can_process() : boolean;

		/** Prints all stray nodes (nodes outside the `SceneTree`). Used for debugging. Works only in debug builds. */
		print_stray_nodes() : void;

		/** Returns the node's order in the scene tree branch. For example, if called on the first child node the position is `0`. */
		get_position_in_parent() : number;

		/** Sets the folded state of the node in the Scene dock. */
		set_display_folded(fold: boolean) : void;

		/** Returns `true` if the node is folded (collapsed) in the Scene dock. */
		is_displayed_folded() : boolean;

		/** Enables or disabled internal processing for this node. Internal processing happens in isolation from the normal `_process` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (`set_process`). Only useful for advanced uses to manipulate built-in nodes' behaviour. */
		set_process_internal(enable: boolean) : void;

		/** Returns `true` if internal processing is enabled (see `set_process_internal`). */
		is_processing_internal() : boolean;

		/** Enables or disables internal physics for this node. Internal physics processing happens in isolation from the normal `_physics_process` calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (`set_physics_process`). Only useful for advanced uses to manipulate built-in nodes' behaviour. */
		set_physics_process_internal(enable: boolean) : void;

		/** Returns `true` if internal physics processing is enabled (see `set_physics_process_internal`). */
		is_physics_processing_internal() : boolean;

		/** Returns the `SceneTree` that contains this node. */
		get_tree() : SceneTree;

		/** Duplicates the node, returning a new node.

		 You can fine-tune the behavior using the `flags` (see `DuplicateFlags`).

		 **Note:** It will not work properly if the node contains a script with constructor arguments (i.e. needs to supply arguments to `Object._init` method). In that case, the node will be duplicated without a script. */
		//@ts-ignore
		duplicate(flags: number = 15) : Node;

		/** Replaces a node in a scene by the given one. Subscriptions that pass through this node will be lost. */
		//@ts-ignore
		replace_by(node: Node, keep_data: boolean = false) : void;

		/** Sets whether this is an instance load placeholder. See `InstancePlaceholder`. */
		set_scene_instance_load_placeholder(load_placeholder: boolean) : void;

		/** Returns `true` if this is an instance load placeholder. See `InstancePlaceholder`. */
		get_scene_instance_load_placeholder() : boolean;

		/** Returns the node's `Viewport`. */
		get_viewport() : Viewport;

		/** Queues a node for deletion at the end of the current frame. When deleted, all of its child nodes will be deleted as well. This method ensures it's safe to delete the node, contrary to `Object.free`. Use `Object.is_queued_for_deletion` to check whether a node will be deleted at the end of the frame. */
		queue_free() : void;

		/** Requests that `_ready` be called again. Note that the method won't be called immediately, but is scheduled for when the node is added to the scene tree again (see `_ready`). `_ready` is called only for the node which requested it, which means that you need to request ready for each child if you want them to call `_ready` too (in which case, `_ready` will be called in the same order as it would normally). */
		request_ready() : void;

		/** Sets the node's network master to the peer with the given peer ID. The network master is the peer that has authority over the node on the network. Useful in conjunction with the `master` and `puppet` keywords. Inherited from the parent node by default, which ultimately defaults to peer ID 1 (the server). If `recursive`, the given peer is recursively set as the master for all children of this node. */
		//@ts-ignore
		set_network_master(id: number, recursive: boolean = true) : void;

		/** Returns the peer ID of the network master for this node. See `set_network_master`. */
		get_network_master() : number;

		/** Returns `true` if the local system is the master of this node. */
		is_network_master() : boolean;

		/** Changes the RPC mode for the given `method` to the given `mode`. See `MultiplayerAPI.RPCMode`. An alternative is annotating methods and properties with the corresponding keywords (`remote`, `master`, `puppet`, `remotesync`, `mastersync`, `puppetsync`). By default, methods are not exposed to networking (and RPCs). See also `rset` and `rset_config` for properties. */
		rpc_config(method: string, mode: MultiplayerAPI.RPCMode) : void;

		/** Changes the RPC mode for the given `property` to the given `mode`. See `MultiplayerAPI.RPCMode`. An alternative is annotating methods and properties with the corresponding keywords (`remote`, `master`, `puppet`, `remotesync`, `mastersync`, `puppetsync`). By default, properties are not exposed to networking (and RPCs). See also `rpc` and `rpc_config` for methods. */
		rset_config(property: string, mode: MultiplayerAPI.RPCMode) : void;

		/** Sends a remote procedure call request for the given `method` to peers on the network (and locally), optionally sending all additional arguments as arguments to the method called by the RPC. The call request will only be received by nodes with the same `NodePath`, including the exact same node name. Behaviour depends on the RPC configuration for the given method, see `rpc_config`. Methods are not exposed to RPCs by default. See also `rset` and `rset_config` for properties. Returns an empty `Variant`.

		 **Note:** You can only safely use RPCs on clients after you received the `connected_to_server` signal from the `SceneTree`. You also need to keep track of the connection state, either by the `SceneTree` signals like `server_disconnected` or by checking `SceneTree.network_peer.get_connection_status() == CONNECTION_CONNECTED`. */
		rpc(method: string, ...args) : any;

		/** Sends a `rpc` using an unreliable protocol. Returns an empty `Variant`. */
		rpc_unreliable(method: string, ...args) : any;

		/** Sends a `rpc` to a specific peer identified by `peer_id` (see `NetworkedMultiplayerPeer.set_target_peer`). Returns an empty `Variant`. */
		rpc_id(peer_id: number, method: string, ...args) : any;

		/** Sends a `rpc` to a specific peer identified by `peer_id` using an unreliable protocol (see `NetworkedMultiplayerPeer.set_target_peer`). Returns an empty `Variant`. */
		rpc_unreliable_id(peer_id: number, method: string, ...args) : any;

		/** Remotely changes a property's value on other peers (and locally). Behaviour depends on the RPC configuration for the given property, see `rset_config`. See also `rpc` for RPCs for methods, most information applies to this method as well. */
		rset(property: string, value: any) : void;

		/** Remotely changes the property's value on a specific peer identified by `peer_id` (see `NetworkedMultiplayerPeer.set_target_peer`). */
		rset_id(peer_id: number, property: string, value: any) : void;

		/** Remotely changes the property's value on other peers (and locally) using an unreliable protocol. */
		rset_unreliable(property: string, value: any) : void;

		/** Remotely changes property's value on a specific peer identified by `peer_id` using an unreliable protocol (see `NetworkedMultiplayerPeer.set_target_peer`). */
		rset_unreliable_id(peer_id: number, property: string, value: any) : void;

		/** Updates the warning displayed for this node in the Scene Dock.

		 Use `_get_configuration_warning` to setup the warning message to display. */
		update_configuration_warning() : void;

		/** Getter of `pause_mode` property */
		get_pause_mode() : number;

		/** Setter of `pause_mode` property */
		set_pause_mode(p_value: number) : void;

		/** Getter of `name` property */
		get_name() : string;

		/** Setter of `name` property */
		set_name(p_value: string) : void;

		/** Getter of `filename` property */
		get_filename() : string;

		/** Setter of `filename` property */
		set_filename(p_value: string) : void;

		/** Getter of `owner` property */
		get_owner() : Node;

		/** Setter of `owner` property */
		set_owner(p_value: Node) : void;

		/** Getter of `multiplayer` property */
		get_multiplayer() : MultiplayerAPI;

		/** Getter of `custom_multiplayer` property */
		get_custom_multiplayer() : MultiplayerAPI;

		/** Setter of `custom_multiplayer` property */
		set_custom_multiplayer(p_value: MultiplayerAPI) : void;

		/** Getter of `process_priority` property */
		get_process_priority() : number;

		/** Setter of `process_priority` property */
		set_process_priority(p_value: number) : void;
		/** Get first node with the class `cls` */
		get_node<T extends godot.Node>(cls: new()=>T): T;
		
		/** Get node with the path */
		$(path: string): godot.Node;
		/** Get first node with the class `cls` */
		$<T extends godot.Node>(cls: new()=>T): T;
	}
	namespace Node {

		/** Emitted when the node is renamed. */
		const renamed: 'renamed';

		/** Emitted when the node is ready. */
		const ready: 'ready';

		/** Emitted when the node enters the tree. */
		const tree_entered: 'tree_entered';

		/** Emitted when the node is still active but about to exit the tree. This is the right place for de-initialization (or a "destructor", if you will). */
		const tree_exiting: 'tree_exiting';

		/** Emitted after the node exits the tree and is no longer active. */
		const tree_exited: 'tree_exited';
		enum DuplicateFlags {
			/** Duplicate the node's signals. */
			DUPLICATE_SIGNALS = 1,
			/** Duplicate the node's groups. */
			DUPLICATE_GROUPS = 2,
			/** Duplicate the node's scripts. */
			DUPLICATE_SCRIPTS = 4,
			/** Duplicate using instancing.

			 An instance stays linked to the original so when the original changes, the instance changes too. */
			DUPLICATE_USE_INSTANCING = 8,
		}
		enum PauseMode {
			/** Inherits pause mode from the node's parent. For the root node, it is equivalent to `PAUSE_MODE_STOP`. Default. */
			PAUSE_MODE_INHERIT = 0,
			/** Stops processing when the `SceneTree` is paused. */
			PAUSE_MODE_STOP = 1,
			/** Continue to process regardless of the `SceneTree` pause state. */
			PAUSE_MODE_PROCESS = 2,
		}

		/** Notification received when the node enters a `SceneTree`. */
		const NOTIFICATION_ENTER_TREE: 10;

		/** Notification received when the node is about to exit a `SceneTree`. */
		const NOTIFICATION_EXIT_TREE: 11;

		/** Notification received when the node is moved in the parent. */
		const NOTIFICATION_MOVED_IN_PARENT: 12;

		/** Notification received when the node is ready. See `_ready`. */
		const NOTIFICATION_READY: 13;

		/** Notification received when the node is paused. */
		const NOTIFICATION_PAUSED: 14;

		/** Notification received when the node is unpaused. */
		const NOTIFICATION_UNPAUSED: 15;

		/** Notification received every frame when the physics process flag is set (see `set_physics_process`). */
		const NOTIFICATION_PHYSICS_PROCESS: 16;

		/** Notification received every frame when the process flag is set (see `set_process`). */
		const NOTIFICATION_PROCESS: 17;

		/** Notification received when a node is set as a child of another node.

		 **Note:** This doesn't mean that a node entered the `SceneTree`. */
		const NOTIFICATION_PARENTED: 18;

		/** Notification received when a node is unparented (parent removed it from the list of children). */
		const NOTIFICATION_UNPARENTED: 19;

		/** Notification received when the node is instanced. */
		const NOTIFICATION_INSTANCED: 20;

		/** Notification received when a drag begins. */
		const NOTIFICATION_DRAG_BEGIN: 21;

		/** Notification received when a drag ends. */
		const NOTIFICATION_DRAG_END: 22;

		/** Notification received when the node's `NodePath` changed. */
		const NOTIFICATION_PATH_CHANGED: 23;

		/** Notification received every frame when the internal process flag is set (see `set_process_internal`). */
		const NOTIFICATION_INTERNAL_PROCESS: 25;

		/** Notification received every frame when the internal physics process flag is set (see `set_physics_process_internal`). */
		const NOTIFICATION_INTERNAL_PHYSICS_PROCESS: 26;

		/** Notification received from the OS when the mouse enters the game window.

		 Implemented on desktop and web platforms. */
		const NOTIFICATION_WM_MOUSE_ENTER: 1002;

		/** Notification received from the OS when the mouse leaves the game window.

		 Implemented on desktop and web platforms. */
		const NOTIFICATION_WM_MOUSE_EXIT: 1003;

		/** Notification received from the OS when the game window is focused.

		 Implemented on all platforms. */
		const NOTIFICATION_WM_FOCUS_IN: 1004;

		/** Notification received from the OS when the game window is unfocused.

		 Implemented on all platforms. */
		const NOTIFICATION_WM_FOCUS_OUT: 1005;

		/** Notification received from the OS when a quit request is sent (e.g. closing the window with a "Close" button or Alt+F4).

		 Implemented on desktop platforms. */
		const NOTIFICATION_WM_QUIT_REQUEST: 1006;

		/** Notification received from the OS when a go back request is sent (e.g. pressing the "Back" button on Android).

		 Specific to the Android platform. */
		const NOTIFICATION_WM_GO_BACK_REQUEST: 1007;

		/** Notification received from the OS when an unfocus request is sent (e.g. another OS window wants to take the focus).

		 No supported platforms currently send this notification. */
		const NOTIFICATION_WM_UNFOCUS_REQUEST: 1008;

		/** Notification received from the OS when the application is exceeding its allocated memory.

		 Specific to the iOS platform. */
		const NOTIFICATION_OS_MEMORY_WARNING: 1009;

		/** Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like `Object.tr`. */
		const NOTIFICATION_TRANSLATION_CHANGED: 1010;

		/** Notification received from the OS when a request for "About" information is sent.

		 Specific to the macOS platform. */
		const NOTIFICATION_WM_ABOUT: 1011;

		/** Notification received from Godot's crash handler when the engine is about to crash.

		 Implemented on desktop platforms if the crash handler is enabled. */
		const NOTIFICATION_CRASH: 1012;

		/** Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string).

		 Specific to the macOS platform. */
		const NOTIFICATION_OS_IME_UPDATE: 1013;

		/** Notification received from the OS when the app is resumed.

		 Specific to the Android platform. */
		const NOTIFICATION_APP_RESUMED: 1014;

		/** Notification received from the OS when the app is paused.

		 Specific to the Android platform. */
		const NOTIFICATION_APP_PAUSED: 1015;

		/** Inherits pause mode from the node's parent. For the root node, it is equivalent to `PAUSE_MODE_STOP`. Default. */
		const PAUSE_MODE_INHERIT: PauseMode.PAUSE_MODE_INHERIT;

		/** Stops processing when the `SceneTree` is paused. */
		const PAUSE_MODE_STOP: PauseMode.PAUSE_MODE_STOP;

		/** Continue to process regardless of the `SceneTree` pause state. */
		const PAUSE_MODE_PROCESS: PauseMode.PAUSE_MODE_PROCESS;

		/** Duplicate the node's signals. */
		const DUPLICATE_SIGNALS: DuplicateFlags.DUPLICATE_SIGNALS;

		/** Duplicate the node's groups. */
		const DUPLICATE_GROUPS: DuplicateFlags.DUPLICATE_GROUPS;

		/** Duplicate the node's scripts. */
		const DUPLICATE_SCRIPTS: DuplicateFlags.DUPLICATE_SCRIPTS;

		/** Duplicate using instancing.

		 An instance stays linked to the original so when the original changes, the instance changes too. */
		const DUPLICATE_USE_INSTANCING: DuplicateFlags.DUPLICATE_USE_INSTANCING;
	}

	/** A 2D game object, inherited by all 2D-related nodes. Has a position, rotation, scale, and Z index.
	 A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order. */
	class Node2D extends CanvasItem {

		/** Position, relative to the node's parent. */
		position: Vector2;

		/** Rotation in radians, relative to the node's parent. */
		rotation: number;

		/** Rotation in degrees, relative to the node's parent. */
		rotation_degrees: number;

		/** The node's scale. Unscaled value: `(1, 1)`. */
		scale: Vector2;

		/** Local `Transform2D`. */
		transform: Transform2D;

		/** Global position. */
		global_position: Vector2;

		/** Global rotation in radians. */
		global_rotation: number;

		/** Global rotation in degrees. */
		global_rotation_degrees: number;

		/** Global scale. */
		global_scale: Vector2;

		/** Global `Transform2D`. */
		global_transform: Transform2D;

		/** Z index. Controls the order in which the nodes render. A node with a higher Z index will display in front of others. */
		z_index: number;

		/** If `true`, the node's Z index is relative to its parent's Z index. If this node's Z index is 2 and its parent's effective Z index is 3, then this node's effective Z index will be 2 + 3 = 5. */
		z_as_relative: boolean;

		/** Applies a rotation to the node, in radians, starting from its current rotation. */
		rotate(radians: number) : void;

		/** Applies a local translation on the node's X axis based on the `Node._process`'s `delta`. If `scaled` is `false`, normalizes the movement. */
		//@ts-ignore
		move_local_x(delta: number, scaled: boolean = false) : void;

		/** Applies a local translation on the node's Y axis based on the `Node._process`'s `delta`. If `scaled` is `false`, normalizes the movement. */
		//@ts-ignore
		move_local_y(delta: number, scaled: boolean = false) : void;

		/** Translates the node by the given `offset` in local coordinates. */
		translate(offset: Vector2) : void;

		/** Adds the `offset` vector to the node's global position. */
		global_translate(offset: Vector2) : void;

		/** Multiplies the current scale by the `ratio` vector. */
		apply_scale(ratio: Vector2) : void;

		/** Rotates the node so it points towards the `point`, which is expected to use global coordinates. */
		look_at(point: Vector2) : void;

		/** Returns the angle between the node and the `point` in radians. */
		get_angle_to(point: Vector2) : number;

		/** Transforms the provided global position into a position in local coordinate space. The output will be local relative to the `Node2D` it is called on. e.g. It is appropriate for determining the positions of child nodes, but it is not appropriate for determining its own position relative to its parent. */
		to_local(global_point: Vector2) : Vector2;

		/** Transforms the provided local position into a position in global coordinate space. The input is expected to be local relative to the `Node2D` it is called on. e.g. Applying this method to the positions of child nodes will correctly transform their positions into the global coordinate space, but applying it to a node's own position will give an incorrect result, as it will incorporate the node's own transformation into its global position. */
		to_global(local_point: Vector2) : Vector2;

		/** Returns the `Transform2D` relative to this node's parent. */
		get_relative_transform_to_parent(parent: Node) : Transform2D;

		/** Getter of `position` property */
		get_position() : Vector2;

		/** Setter of `position` property */
		set_position(p_value: Vector2) : void;

		/** Getter of `rotation` property */
		get_rotation() : number;

		/** Setter of `rotation` property */
		set_rotation(p_value: number) : void;

		/** Getter of `rotation_degrees` property */
		get_rotation_degrees() : number;

		/** Setter of `rotation_degrees` property */
		set_rotation_degrees(p_value: number) : void;

		/** Getter of `scale` property */
		get_scale() : Vector2;

		/** Setter of `scale` property */
		set_scale(p_value: Vector2) : void;

		/** Getter of `transform` property */
		get_transform() : Transform2D;

		/** Setter of `transform` property */
		set_transform(p_value: Transform2D) : void;

		/** Getter of `global_position` property */
		get_global_position() : Vector2;

		/** Setter of `global_position` property */
		set_global_position(p_value: Vector2) : void;

		/** Getter of `global_rotation` property */
		get_global_rotation() : number;

		/** Setter of `global_rotation` property */
		set_global_rotation(p_value: number) : void;

		/** Getter of `global_rotation_degrees` property */
		get_global_rotation_degrees() : number;

		/** Setter of `global_rotation_degrees` property */
		set_global_rotation_degrees(p_value: number) : void;

		/** Getter of `global_scale` property */
		get_global_scale() : Vector2;

		/** Setter of `global_scale` property */
		set_global_scale(p_value: Vector2) : void;

		/** Getter of `global_transform` property */
		get_global_transform() : Transform2D;

		/** Setter of `global_transform` property */
		set_global_transform(p_value: Transform2D) : void;

		/** Getter of `z_index` property */
		get_z_index() : number;

		/** Setter of `z_index` property */
		set_z_index(p_value: number) : void;

		/** Getter of `z_as_relative` property */
		is_z_relative() : boolean;

		/** Setter of `z_as_relative` property */
		set_z_as_relative(p_value: boolean) : void;
	}
	namespace Node2D {
	}

	/** `OpenSimplexNoise` filled texture.
	 Uses an `OpenSimplexNoise` to fill the texture data. You can specify the texture size but keep in mind that larger textures will take longer to generate and seamless noise only works with square sized textures.

	 NoiseTexture can also generate normalmap textures.

	 The class uses `Thread`s to generate the texture data internally, so `Texture.get_data` may return `null` if the generation process has not completed yet. In that case, you need to wait for the texture to be generated before accessing the data:

	 ```gdscript
	 var texture = preload("res://noise.tres")
	 yield(texture, "changed")
	 var image = texture.get_data()
	 ``` */
	class NoiseTexture extends Texture {

		/** Width of the generated texture. */
		width: number;

		/** Height of the generated texture. */
		height: number;

		/** Whether the texture can be tiled without visible seams or not. Seamless textures take longer to generate. */
		seamless: boolean;

		/** If `true`, the resulting texture contains a normal map created from the original noise interpreted as a bump map. */
		as_normalmap: boolean;

		/** Strength of the bump maps used in this texture. A higher value will make the bump maps appear larger while a lower value will make them appear softer. */
		bump_strength: number;

		/** The `OpenSimplexNoise` instance used to generate the noise. */
		noise: OpenSimplexNoise;

		/**  */
		flags: number;

		/** Getter of `width` property */
		get_width() : number;

		/** Setter of `width` property */
		set_width(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;

		/** Getter of `seamless` property */
		get_seamless() : boolean;

		/** Setter of `seamless` property */
		set_seamless(p_value: boolean) : void;

		/** Getter of `as_normalmap` property */
		is_normalmap() : boolean;

		/** Setter of `as_normalmap` property */
		set_as_normalmap(p_value: boolean) : void;

		/** Getter of `bump_strength` property */
		get_bump_strength() : number;

		/** Setter of `bump_strength` property */
		set_bump_strength(p_value: number) : void;

		/** Getter of `noise` property */
		get_noise() : OpenSimplexNoise;

		/** Setter of `noise` property */
		set_noise(p_value: OpenSimplexNoise) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace NoiseTexture {
	}

	/** Operating System functions.
	 Operating System functions. OS wraps the most common functionality to communicate with the host operating system, such as the clipboard, video driver, date and time, timers, environment variables, execution of binaries, command line, etc. */
	class OS extends Object {

		/** The current tablet drvier in use. */
		static tablet_driver: string;

		/** The clipboard from the host OS. Might be unavailable on some platforms. */
		static clipboard: string;

		/** The current screen index (starting from 0). */
		static current_screen: number;

		/** The exit code passed to the OS when the main loop exits. By convention, an exit code of `0` indicates success whereas a non-zero exit code indicates an error. For portability reasons, the exit code should be set between 0 and 125 (inclusive).

		 **Note:** This value will be ignored if using `SceneTree.quit` with an `exit_code` argument passed. */
		static exit_code: number;

		/** If `true`, vertical synchronization (Vsync) is enabled. */
		static vsync_enabled: boolean;

		/** If `true` and `vsync_enabled` is true, the operating system's window compositor will be used for vsync when the compositor is enabled and the game is in windowed mode.

		 **Note:** This option is experimental and meant to alleviate stutter experienced by some users. However, some users have experienced a Vsync framerate halving (e.g. from 60 FPS to 30 FPS) when using it.

		 **Note:** This property is only implemented on Windows. */
		static vsync_via_compositor: boolean;

		/** If `true`, the engine optimizes for low processor usage by only refreshing the screen if needed. Can improve battery consumption on mobile. */
		static low_processor_usage_mode: boolean;

		/** The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage. */
		static low_processor_usage_mode_sleep_usec: number;

		/** If `true`, the engine tries to keep the screen on while the game is running. Useful on mobile. */
		static keep_screen_on: boolean;

		/** The minimum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to `(0, 0)` to reset to the system default value. */
		static min_window_size: Vector2;

		/** The maximum size of the window (without counting window manager decorations). Does not affect fullscreen mode. Set to `(0, 0)` to reset to the system default value. */
		static max_window_size: Vector2;

		/** The current screen orientation. */
		static screen_orientation: number;

		/** If `true`, removes the window frame.

		 **Note:** Setting `window_borderless` to `false` disables per-pixel transparency. */
		static window_borderless: boolean;

		/** If `true`, the window background is transparent and window frame is removed.

		 Use `get_tree().get_root().set_transparent_background(true)` to disable main viewport background rendering.

		 **Note:** This property has no effect if **Project > Project Settings > Display > Window > Per-pixel transparency > Allowed** setting is disabled.

		 **Note:** This property is implemented on HTML5, Linux, macOS and Windows. */
		static window_per_pixel_transparency_enabled: boolean;

		/** If `true`, the window is fullscreen. */
		static window_fullscreen: boolean;

		/** If `true`, the window is maximized. */
		static window_maximized: boolean;

		/** If `true`, the window is minimized. */
		static window_minimized: boolean;

		/** If `true`, the window is resizable by the user. */
		static window_resizable: boolean;

		/** The window position relative to the screen, the origin is the top left corner, +Y axis goes to the bottom and +X axis goes to the right. */
		static window_position: Vector2;

		/** The size of the window (without counting window manager decorations). */
		static window_size: Vector2;

		/** Add a new item with text "label" to global menu. Use "_dock" menu to add item to the macOS dock icon menu.

		 **Note:** This method is implemented on macOS. */
		static global_menu_add_item(menu: string, label: string, id: any, meta: any) : void;

		/** Add a separator between items. Separators also occupy an index.

		 **Note:** This method is implemented on macOS. */
		static global_menu_add_separator(menu: string) : void;

		/** Removes the item at index "idx" from the global menu. Note that the indexes of items after the removed item are going to be shifted by one.

		 **Note:** This method is implemented on macOS. */
		static global_menu_remove_item(menu: string, idx: number) : void;

		/** Clear the global menu, in effect removing all items.

		 **Note:** This method is implemented on macOS. */
		static global_menu_clear(menu: string) : void;

		/** Returns the number of video drivers supported on the current platform. */
		static get_video_driver_count() : number;

		/** Returns the name of the video driver matching the given `driver` index. This index is a value from `VideoDriver`, and you can use `get_current_video_driver` to get the current backend's index. */
		static get_video_driver_name(driver: OS.VideoDriver) : string;

		/** Returns the currently used video driver, using one of the values from `VideoDriver`. */
		static get_current_video_driver() : number;

		/** Returns the total number of available audio drivers. */
		static get_audio_driver_count() : number;

		/** Returns the audio driver name for the given index. */
		static get_audio_driver_name(driver: number) : string;

		/** Returns an array of MIDI device names.

		 The returned array will be empty if the system MIDI driver has not previously been initialised with `open_midi_inputs`.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static get_connected_midi_inputs() : PoolStringArray;

		/** Initialises the singleton for the system MIDI driver.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static open_midi_inputs() : void;

		/** Shuts down system MIDI driver.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static close_midi_inputs() : void;

		/** Returns the number of displays attached to the host machine. */
		static get_screen_count() : number;

		/** Returns the position of the specified screen by index. If `screen` is `-1` (the default value), the current screen will be used. */
		//@ts-ignore
		static get_screen_position(screen: number = -1) : Vector2;

		/** Returns the dimensions in pixels of the specified screen. If `screen` is `-1` (the default value), the current screen will be used. */
		//@ts-ignore
		static get_screen_size(screen: number = -1) : Vector2;

		/** Returns the dots per inch density of the specified screen. If `screen` is `-1` (the default value), the current screen will be used.

		 On Android devices, the actual screen densities are grouped into six generalized densities:

		 ```gdscript
		    ldpi - 120 dpi
		    mdpi - 160 dpi
		    hdpi - 240 dpi
		   xhdpi - 320 dpi
		  xxhdpi - 480 dpi
		 xxxhdpi - 640 dpi
		 ```

		 **Note:** This method is implemented on Android, Linux, macOS and Windows. Returns `72` on unsupported platforms. */
		//@ts-ignore
		static get_screen_dpi(screen: number = -1) : number;

		/** Return the scale factor of the specified screen by index. If `screen` is `-1` (the default value), the current screen will be used.

		 **Note:** On macOS returned value is `2.0` for hiDPI (Retina) screen, and `1.0` for all other cases.

		 **Note:** This method is implemented on macOS. */
		//@ts-ignore
		static get_screen_scale(screen: number = -1) : number;

		/** Return the greatest scale factor of all screens.

		 **Note:** On macOS returned value is `2.0` if there is at least one hiDPI (Retina) screen in the system, and `1.0` in all other cases.

		 **Note:** This method is implemented on macOS. */
		static get_screen_max_scale() : number;

		/** Returns unobscured area of the window where interactive controls should be rendered. */
		static get_window_safe_area() : Rect2;

		/** Sets whether the window should always be on top.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static set_window_always_on_top(enabled: boolean) : void;

		/** Returns `true` if the window should always be on top of other windows. */
		static is_window_always_on_top() : boolean;

		/** Returns `true` if the window is currently focused.

		 **Note:** Only implemented on desktop platforms. On other platforms, it will always return `true`. */
		static is_window_focused() : boolean;

		/** Request the user attention to the window. It'll flash the taskbar button on Windows or bounce the dock icon on OSX.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static request_attention() : void;

		/** Returns the window size including decorations like window borders. */
		static get_real_window_size() : Vector2;

		/** Centers the window on the screen if in windowed mode. */
		static center_window() : void;

		/** Moves the window to the front.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static move_window_to_foreground() : void;

		/** Sets whether IME input mode should be enabled.

		 If active IME handles key events before the application and creates an composition string and suggestion list.

		 Application can retrieve the composition status by using `get_ime_selection` and `get_ime_text` functions.

		 Completed composition string is committed when input is finished.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static set_ime_active(active: boolean) : void;

		/** Sets position of IME suggestion list popup (in window coordinates).

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static set_ime_position(position: Vector2) : void;

		/** Returns the IME cursor position (the currently-edited portion of the string) relative to the characters in the composition string.

		 `MainLoop.NOTIFICATION_OS_IME_UPDATE` is sent to the application to notify it of changes to the IME cursor position.

		 **Note:** This method is implemented on macOS. */
		static get_ime_selection() : Vector2;

		/** Returns the IME intermediate composition string.

		 `MainLoop.NOTIFICATION_OS_IME_UPDATE` is sent to the application to notify it of changes to the IME composition string.

		 **Note:** This method is implemented on macOS. */
		static get_ime_text() : string;

		/** Returns `true` if the device has a touchscreen or emulates one. */
		static has_touchscreen_ui_hint() : boolean;

		/** Sets the window title to the specified string.

		 **Note:** This should be used sporadically. Don't set this every frame, as that will negatively affect performance on some window managers.

		 **Note:** This method is implemented on HTML5, Linux, macOS and Windows. */
		static set_window_title(title: string) : void;

		/** Returns the number of threads available on the host machine. */
		static get_processor_count() : number;

		/** Returns the path to the current engine executable. */
		static get_executable_path() : string;

		/** Execute the file at the given path with the arguments passed as an array of strings. Platform path resolution will take place. The resolved file must exist and be executable.

		 The arguments are used in the given order and separated by a space, so `OS.execute("ping", `"-w", "3", "godotengine.org"`, false)` will resolve to `ping -w 3 godotengine.org` in the system's shell.

		 This method has slightly different behavior based on whether the `blocking` mode is enabled.

		 If `blocking` is `true`, the Godot thread will pause its execution while waiting for the process to terminate. The shell output of the process will be written to the `output` array as a single string. When the process terminates, the Godot thread will resume execution.

		 If `blocking` is `false`, the Godot thread will continue while the new process runs. It is not possible to retrieve the shell output in non-blocking mode, so `output` will be empty.

		 The return value also depends on the blocking mode. When blocking, the method will return an exit code of the process. When non-blocking, the method returns a process ID, which you can use to monitor the process (and potentially terminate it with `kill`). If the process forking (non-blocking) or opening (blocking) fails, the method will return `-1` or another exit code.

		 Example of blocking mode and retrieving the shell output:

		 ```gdscript
		 var output = []
		 var exit_code = OS.execute("ls", ["-l", "/tmp"], true, output)
		 ```

		 Example of non-blocking mode, running another instance of the project and storing its process ID:

		 ```gdscript
		 var pid = OS.execute(OS.get_executable_path(), [], false)
		 ```

		 If you wish to access a shell built-in or perform a composite command, a platform-specific shell can be invoked. For example:

		 ```gdscript
		 OS.execute("CMD.exe", ["/C", "cd %TEMP% && dir"], true, output)
		 ```

		 **Note:** This method is implemented on Android, iOS, Linux, macOS and Windows. */
		//@ts-ignore
		static execute(path: string, p_arguments: PoolStringArray, blocking: boolean = true, output: any[] = [  ], read_stderr: boolean = false) : number;

		/** Kill (terminate) the process identified by the given process ID (`pid`), e.g. the one returned by `execute` in non-blocking mode.

		 **Note:** This method can also be used to kill processes that were not spawned by the game.

		 **Note:** This method is implemented on Android, iOS, Linux, macOS and Windows. */
		static kill(pid: number) : number;

		/** Requests the OS to open a resource with the most appropriate program. For example:

		 - `OS.shell_open("C:\\Users\name\Downloads")` on Windows opens the file explorer at the user's Downloads folder.

		 - `OS.shell_open("https://godotengine.org")` opens the default web browser on the official Godot website.

		 - `OS.shell_open("mailto:example@example.com")` opens the default email client with the "To" field set to `example@example.com`. See `url=https://blog.escapecreative.com/customizing-mailto-links/`Customizing `mailto:` Links`/url` for a list of fields that can be added.

		 Use `ProjectSettings.globalize_path` to convert a `res://` or `user://` path into a system path for use with this method.

		 **Note:** This method is implemented on Android, iOS, HTML5, Linux, macOS and Windows. */
		static shell_open(uri: string) : number;

		/** Returns the project's process ID.

		 **Note:** This method is implemented on Android, iOS, Linux, macOS and Windows. */
		static get_process_id() : number;

		/** Returns an environment variable. */
		static get_environment(environment: string) : string;

		/** Returns `true` if an environment variable exists. */
		static has_environment(environment: string) : boolean;

		/** Returns the name of the host OS. Possible values are: `"Android"`, `"iOS"`, `"HTML5"`, `"OSX"`, `"Server"`, `"Windows"`, `"UWP"`, `"X11"`. */
		static get_name() : string;

		/** Returns the command line arguments passed to the engine. */
		static get_cmdline_args() : PoolStringArray;

		/** Returns current datetime as a dictionary of keys: `year`, `month`, `day`, `weekday`, `dst` (Daylight Savings Time), `hour`, `minute`, `second`. */
		//@ts-ignore
		static get_datetime(utc: boolean = false) : object;

		/** Returns current date as a dictionary of keys: `year`, `month`, `day`, `weekday`, `dst` (Daylight Savings Time). */
		//@ts-ignore
		static get_date(utc: boolean = false) : object;

		/** Returns current time as a dictionary of keys: hour, minute, second. */
		//@ts-ignore
		static get_time(utc: boolean = false) : object;

		/** Returns the current time zone as a dictionary with the keys: bias and name. */
		static get_time_zone_info() : object;

		/** Returns the current UNIX epoch timestamp. */
		static get_unix_time() : number;

		/** Gets a dictionary of time values corresponding to the given UNIX epoch time (in seconds).

		 The returned Dictionary's values will be the same as `get_datetime`, with the exception of Daylight Savings Time as it cannot be determined from the epoch. */
		static get_datetime_from_unix_time(unix_time_val: number) : object;

		/** Gets an epoch time value from a dictionary of time values.

		 `datetime` must be populated with the following keys: `year`, `month`, `day`, `hour`, `minute`, `second`.

		 You can pass the output from `get_datetime_from_unix_time` directly into this function. Daylight Savings Time (`dst`), if present, is ignored. */
		static get_unix_time_from_datetime(datetime: object) : number;

		/** Returns the epoch time of the operating system in seconds. */
		static get_system_time_secs() : number;

		/** Returns the epoch time of the operating system in milliseconds. */
		static get_system_time_msecs() : number;

		/** Sets the game's icon using a multi-size platform-specific icon file (`*.ico` on Windows and `*.icns` on macOS).

		 Appropriate size sub-icons are used for window caption, taskbar/dock and window selection dialog.

		 **Note:** This method is implemented on macOS and Windows. */
		static set_native_icon(filename: string) : void;

		/** Sets the game's icon using an `Image` resource.

		 The same image is used for window caption, taskbar/dock and window selection dialog. Image is scaled as needed.

		 **Note:** This method is implemented on HTML5, Linux, macOS and Windows. */
		static set_icon(icon: Image) : void;

		/** Delay execution of the current thread by `usec` microseconds. */
		static delay_usec(usec: number) : void;

		/** Delay execution of the current thread by `msec` milliseconds. */
		static delay_msec(msec: number) : void;

		/** Returns the amount of time passed in milliseconds since the engine started. */
		static get_ticks_msec() : number;

		/** Returns the amount of time passed in microseconds since the engine started. */
		static get_ticks_usec() : number;

		/** Returns the amount of time in milliseconds it took for the boot logo to appear. */
		static get_splash_tick_msec() : number;

		/** Returns the host OS locale. */
		static get_locale() : string;

		/** Returns the current latin keyboard variant as a String.

		 Possible return values are: `"QWERTY"`, `"AZERTY"`, `"QZERTY"`, `"DVORAK"`, `"NEO"`, `"COLEMAK"` or `"ERROR"`.

		 **Note:** This method is implemented on Linux, macOS and Windows. Returns `"QWERTY"` on unsupported platforms. */
		static get_latin_keyboard_variant() : string;

		/** Returns the model name of the current device.

		 **Note:** This method is implemented on Android and iOS. Returns `"GenericDevice"` on unsupported platforms. */
		static get_model_name() : string;

		/** Returns the number of keyboard layouts.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static keyboard_get_layout_count() : number;

		/** Returns active keyboard layout index.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static keyboard_get_current_layout() : number;

		/** Sets active keyboard layout.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static keyboard_set_current_layout(index: number) : void;

		/** Returns the ISO-639/BCP-47 language code of the keyboard layout at position `index`.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static keyboard_get_layout_language(index: number) : string;

		/** Returns the localized name of the keyboard layout at position `index`.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static keyboard_get_layout_name(index: number) : string;

		/** Returns `true` if the host OS allows drawing. */
		static can_draw() : boolean;

		/** If `true`, the `user://` file system is persistent, so that its state is the same after a player quits and starts the game again. Relevant to the HTML5 platform, where this persistence may be unavailable. */
		static is_userfs_persistent() : boolean;

		/** Returns `true` if the engine was executed with `-v` (verbose stdout). */
		static is_stdout_verbose() : boolean;

		/** Returns `true` if the current host platform is using multiple threads. */
		static can_use_threads() : boolean;

		/** Returns `true` if the Godot binary used to run the project is a *debug* export template, or when running in the editor.

		 Returns `false` if the Godot binary used to run the project is a *release* export template.

		 To check whether the Godot binary used to run the project is an export template (debug or release), use `OS.has_feature("standalone")` instead. */
		static is_debug_build() : boolean;

		/** Dumps the memory allocation ringlist to a file (only works in debug).

		 Entry format per line: "Address - Size - Description". */
		static dump_memory_to_file(file: string) : void;

		/** Dumps all used resources to file (only works in debug).

		 Entry format per line: "Resource Type : Resource Location".

		 At the end of the file is a statistic of all used Resource Types. */
		static dump_resources_to_file(file: string) : void;

		/** Returns `true` if the platform has a virtual keyboard, `false` otherwise. */
		static has_virtual_keyboard() : boolean;

		/** Shows the virtual keyboard if the platform has one. The `existing_text` parameter is useful for implementing your own LineEdit, as it tells the virtual keyboard what text has already been typed (the virtual keyboard uses it for auto-correct and predictions).

		 **Note:** This method is implemented on Android, iOS and UWP. */
		//@ts-ignore
		static show_virtual_keyboard(existing_text: string = "") : void;

		/** Hides the virtual keyboard if it is shown, does nothing otherwise. */
		static hide_virtual_keyboard() : void;

		/** Returns the on-screen keyboard's height in pixels. Returns 0 if there is no keyboard or if it is currently hidden. */
		static get_virtual_keyboard_height() : number;

		/** Shows all resources currently used by the game. */
		//@ts-ignore
		static print_resources_in_use(short: boolean = false) : void;

		/** Shows all resources in the game. Optionally, the list can be written to a file by specifying a file path in `tofile`. */
		//@ts-ignore
		static print_all_resources(tofile: string = "") : void;

		/** Returns the amount of static memory being used by the program in bytes. */
		static get_static_memory_usage() : number;

		/** Returns the maximum amount of static memory used (only works in debug). */
		static get_static_memory_peak_usage() : number;

		/** Returns the total amount of dynamic memory used (only works in debug). */
		static get_dynamic_memory_usage() : number;

		/** Returns the absolute directory path where user data is written (`user://`).

		 On Linux, this is `~/.local/share/godot/app_userdata/`project_name``, or `~/.local/share/`custom_name`` if `use_custom_user_dir` is set.

		 On macOS, this is `~/Library/Application Support/Godot/app_userdata/`project_name``, or `~/Library/Application Support/`custom_name`` if `use_custom_user_dir` is set.

		 On Windows, this is `%APPDATA%\Godot\app_userdata\`project_name``, or `%APPDATA%\`custom_name`` if `use_custom_user_dir` is set. `%APPDATA%` expands to `%USERPROFILE%\AppData\Roaming`.

		 If the project name is empty, `user://` falls back to `res://`. */
		static get_user_data_dir() : string;

		/** Returns the actual path to commonly used folders across different platforms. Available locations are specified in `SystemDir`.

		 **Note:** This method is implemented on Android, Linux, macOS and Windows. */
		static get_system_dir(dir: OS.SystemDir) : string;

		/** Returns a string that is unique to the device.

		 **Note:** Returns an empty string on HTML5 and UWP, as this method isn't implemented on those platforms yet. */
		static get_unique_id() : string;

		/** Returns `true` if the **OK** button should appear on the left and **Cancel** on the right. */
		static is_ok_left_and_cancel_right() : boolean;

		/** Shows the list of loaded textures sorted by size in memory. */
		static print_all_textures_by_size() : void;

		/** Shows the number of resources loaded by the game of the given types. */
		static print_resources_by_type(types: PoolStringArray) : void;

		/** Plays native video from the specified path, at the given volume and with audio and subtitle tracks.

		 **Note:** This method is implemented on Android and iOS, and the current Android implementation does not support the `volume`, `audio_track` and `subtitle_track` options. */
		static native_video_play(path: string, volume: number, audio_track: string, subtitle_track: string) : number;

		/** Returns `true` if native video is playing.

		 **Note:** This method is implemented on Android and iOS. */
		static native_video_is_playing() : boolean;

		/** Stops native video playback.

		 **Note:** This method is implemented on Android and iOS. */
		static native_video_stop() : void;

		/** Pauses native video playback.

		 **Note:** This method is implemented on Android and iOS. */
		static native_video_pause() : void;

		/** Resumes native video playback.

		 **Note:** This method is implemented on Android and iOS. */
		static native_video_unpause() : void;

		/** Returns the given scancode as a string (e.g. Return values: `"Escape"`, `"Shift+Escape"`).

		 See also `InputEventKey.scancode` and `InputEventKey.get_scancode_with_modifiers`. */
		static get_scancode_string(code: number) : string;

		/** Returns `true` if the input scancode corresponds to a Unicode character. */
		static is_scancode_unicode(code: number) : boolean;

		/** Returns the scancode of the given string (e.g. "Escape"). */
		static find_scancode_from_string(p_string: string) : number;

		/** Enables backup saves if `enabled` is `true`. */
		static set_use_file_access_save_and_swap(enabled: boolean) : void;

		/** Displays a modal dialog box using the host OS' facilities. Execution is blocked until the dialog is closed. */
		//@ts-ignore
		static alert(text: string, title: string = "Alert!") : void;

		/** Sets the name of the current thread. */
		static set_thread_name(name: string) : number;

		/** Returns `true` if the feature for the given feature tag is supported in the currently running instance, depending on platform, build etc. Can be used to check whether you're currently running a debug build, on a certain platform or arch, etc. Refer to the `url=https://docs.godotengine.org/en/latest/getting_started/workflow/export/feature_tags.html`Feature Tags`/url` documentation for more details.

		 **Note:** Tag names are case-sensitive. */
		static has_feature(tag_name: string) : boolean;

		/** Returns the current state of the device regarding battery and power. See `PowerState` constants.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static get_power_state() : number;

		/** Returns an estimate of the time left in seconds before the device runs out of battery. Returns `-1` if power state is unknown.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static get_power_seconds_left() : number;

		/** Returns the amount of battery left in the device as a percentage. Returns `-1` if power state is unknown.

		 **Note:** This method is implemented on Linux, macOS and Windows. */
		static get_power_percent_left() : number;

		/** At the moment this function is only used by `AudioDriverOpenSL` to request permission for `RECORD_AUDIO` on Android. */
		static request_permission(name: string) : boolean;

		/** With this function you can request dangerous permissions since normal permissions are automatically granted at install time in Android application.

		 **Note:** This method is implemented on Android. */
		static request_permissions() : boolean;

		/** With this function you can get the list of dangerous permissions that have been granted to the Android application.

		 **Note:** This method is implemented on Android. */
		static get_granted_permissions() : PoolStringArray;

		/** Returns the total number of available tablet drivers.

		 **Note:** This method is implemented on Windows. */
		static get_tablet_driver_count() : number;

		/** Returns the tablet driver name for the given index.

		 **Note:** This method is implemented on Windows. */
		static get_tablet_driver_name(idx: number) : string;

		/** Getter of `tablet_driver` property */
		static get_current_tablet_driver() : string;

		/** Setter of `tablet_driver` property */
		static set_current_tablet_driver(p_value: string) : void;

		/** Getter of `clipboard` property */
		static get_clipboard() : string;

		/** Setter of `clipboard` property */
		static set_clipboard(p_value: string) : void;

		/** Getter of `current_screen` property */
		static get_current_screen() : number;

		/** Setter of `current_screen` property */
		static set_current_screen(p_value: number) : void;

		/** Getter of `exit_code` property */
		static get_exit_code() : number;

		/** Setter of `exit_code` property */
		static set_exit_code(p_value: number) : void;

		/** Getter of `vsync_enabled` property */
		static is_vsync_enabled() : boolean;

		/** Setter of `vsync_enabled` property */
		static set_use_vsync(p_value: boolean) : void;

		/** Getter of `vsync_via_compositor` property */
		static is_vsync_via_compositor_enabled() : boolean;

		/** Setter of `vsync_via_compositor` property */
		static set_vsync_via_compositor(p_value: boolean) : void;

		/** Getter of `low_processor_usage_mode` property */
		static is_in_low_processor_usage_mode() : boolean;

		/** Setter of `low_processor_usage_mode` property */
		static set_low_processor_usage_mode(p_value: boolean) : void;

		/** Getter of `low_processor_usage_mode_sleep_usec` property */
		static get_low_processor_usage_mode_sleep_usec() : number;

		/** Setter of `low_processor_usage_mode_sleep_usec` property */
		static set_low_processor_usage_mode_sleep_usec(p_value: number) : void;

		/** Getter of `keep_screen_on` property */
		static is_keep_screen_on() : boolean;

		/** Setter of `keep_screen_on` property */
		static set_keep_screen_on(p_value: boolean) : void;

		/** Getter of `min_window_size` property */
		static get_min_window_size() : Vector2;

		/** Setter of `min_window_size` property */
		static set_min_window_size(p_value: Vector2) : void;

		/** Getter of `max_window_size` property */
		static get_max_window_size() : Vector2;

		/** Setter of `max_window_size` property */
		static set_max_window_size(p_value: Vector2) : void;

		/** Getter of `screen_orientation` property */
		static get_screen_orientation() : number;

		/** Setter of `screen_orientation` property */
		static set_screen_orientation(p_value: number) : void;

		/** Getter of `window_borderless` property */
		static get_borderless_window() : boolean;

		/** Setter of `window_borderless` property */
		static set_borderless_window(p_value: boolean) : void;

		/** Getter of `window_per_pixel_transparency_enabled` property */
		static get_window_per_pixel_transparency_enabled() : boolean;

		/** Setter of `window_per_pixel_transparency_enabled` property */
		static set_window_per_pixel_transparency_enabled(p_value: boolean) : void;

		/** Getter of `window_fullscreen` property */
		static is_window_fullscreen() : boolean;

		/** Setter of `window_fullscreen` property */
		static set_window_fullscreen(p_value: boolean) : void;

		/** Getter of `window_maximized` property */
		static is_window_maximized() : boolean;

		/** Setter of `window_maximized` property */
		static set_window_maximized(p_value: boolean) : void;

		/** Getter of `window_minimized` property */
		static is_window_minimized() : boolean;

		/** Setter of `window_minimized` property */
		static set_window_minimized(p_value: boolean) : void;

		/** Getter of `window_resizable` property */
		static is_window_resizable() : boolean;

		/** Setter of `window_resizable` property */
		static set_window_resizable(p_value: boolean) : void;

		/** Getter of `window_position` property */
		static get_window_position() : Vector2;

		/** Setter of `window_position` property */
		static set_window_position(p_value: Vector2) : void;

		/** Getter of `window_size` property */
		static get_window_size() : Vector2;

		/** Setter of `window_size` property */
		static set_window_size(p_value: Vector2) : void;
	}
	namespace OS {
		enum Month {
			/** January. */
			MONTH_JANUARY = 1,
			/** February. */
			MONTH_FEBRUARY = 2,
			/** March. */
			MONTH_MARCH = 3,
			/** April. */
			MONTH_APRIL = 4,
			/** May. */
			MONTH_MAY = 5,
			/** June. */
			MONTH_JUNE = 6,
			/** July. */
			MONTH_JULY = 7,
			/** August. */
			MONTH_AUGUST = 8,
			/** September. */
			MONTH_SEPTEMBER = 9,
			/** October. */
			MONTH_OCTOBER = 10,
			/** November. */
			MONTH_NOVEMBER = 11,
			/** December. */
			MONTH_DECEMBER = 12,
		}
		enum PowerState {
			/** Unknown powerstate. */
			POWERSTATE_UNKNOWN = 0,
			/** Unplugged, running on battery. */
			POWERSTATE_ON_BATTERY = 1,
			/** Plugged in, no battery available. */
			POWERSTATE_NO_BATTERY = 2,
			/** Plugged in, battery charging. */
			POWERSTATE_CHARGING = 3,
			/** Plugged in, battery fully charged. */
			POWERSTATE_CHARGED = 4,
		}
		enum ScreenOrientation {
			/** Landscape screen orientation. */
			SCREEN_ORIENTATION_LANDSCAPE = 0,
			/** Portrait screen orientation. */
			SCREEN_ORIENTATION_PORTRAIT = 1,
			/** Reverse landscape screen orientation. */
			SCREEN_ORIENTATION_REVERSE_LANDSCAPE = 2,
			/** Reverse portrait screen orientation. */
			SCREEN_ORIENTATION_REVERSE_PORTRAIT = 3,
			/** Uses landscape or reverse landscape based on the hardware sensor. */
			SCREEN_ORIENTATION_SENSOR_LANDSCAPE = 4,
			/** Uses portrait or reverse portrait based on the hardware sensor. */
			SCREEN_ORIENTATION_SENSOR_PORTRAIT = 5,
			/** Uses most suitable orientation based on the hardware sensor. */
			SCREEN_ORIENTATION_SENSOR = 6,
		}
		enum SystemDir {
			/** Desktop directory path. */
			SYSTEM_DIR_DESKTOP = 0,
			/** DCIM (Digital Camera Images) directory path. */
			SYSTEM_DIR_DCIM = 1,
			/** Documents directory path. */
			SYSTEM_DIR_DOCUMENTS = 2,
			/** Downloads directory path. */
			SYSTEM_DIR_DOWNLOADS = 3,
			/** Movies directory path. */
			SYSTEM_DIR_MOVIES = 4,
			/** Music directory path. */
			SYSTEM_DIR_MUSIC = 5,
			/** Pictures directory path. */
			SYSTEM_DIR_PICTURES = 6,
			/** Ringtones directory path. */
			SYSTEM_DIR_RINGTONES = 7,
		}
		enum VideoDriver {
			/** The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web. */
			VIDEO_DRIVER_GLES2 = 1,
			/** The GLES3 rendering backend. It uses OpenGL ES 3.0 on mobile devices, OpenGL 3.3 on desktop platforms and WebGL 2.0 on the web. */
			VIDEO_DRIVER_GLES3 = 0,
		}
		enum Weekday {
			/** Sunday. */
			DAY_SUNDAY = 0,
			/** Monday. */
			DAY_MONDAY = 1,
			/** Tuesday. */
			DAY_TUESDAY = 2,
			/** Wednesday. */
			DAY_WEDNESDAY = 3,
			/** Thursday. */
			DAY_THURSDAY = 4,
			/** Friday. */
			DAY_FRIDAY = 5,
			/** Saturday. */
			DAY_SATURDAY = 6,
		}

		/** The GLES2 rendering backend. It uses OpenGL ES 2.0 on mobile devices, OpenGL 2.1 on desktop platforms and WebGL 1.0 on the web. */
		const VIDEO_DRIVER_GLES2: VideoDriver.VIDEO_DRIVER_GLES2;

		/** The GLES3 rendering backend. It uses OpenGL ES 3.0 on mobile devices, OpenGL 3.3 on desktop platforms and WebGL 2.0 on the web. */
		const VIDEO_DRIVER_GLES3: VideoDriver.VIDEO_DRIVER_GLES3;

		/** Sunday. */
		const DAY_SUNDAY: Weekday.DAY_SUNDAY;

		/** Monday. */
		const DAY_MONDAY: Weekday.DAY_MONDAY;

		/** Tuesday. */
		const DAY_TUESDAY: Weekday.DAY_TUESDAY;

		/** Wednesday. */
		const DAY_WEDNESDAY: Weekday.DAY_WEDNESDAY;

		/** Thursday. */
		const DAY_THURSDAY: Weekday.DAY_THURSDAY;

		/** Friday. */
		const DAY_FRIDAY: Weekday.DAY_FRIDAY;

		/** Saturday. */
		const DAY_SATURDAY: Weekday.DAY_SATURDAY;

		/** January. */
		const MONTH_JANUARY: Month.MONTH_JANUARY;

		/** February. */
		const MONTH_FEBRUARY: Month.MONTH_FEBRUARY;

		/** March. */
		const MONTH_MARCH: Month.MONTH_MARCH;

		/** April. */
		const MONTH_APRIL: Month.MONTH_APRIL;

		/** May. */
		const MONTH_MAY: Month.MONTH_MAY;

		/** June. */
		const MONTH_JUNE: Month.MONTH_JUNE;

		/** July. */
		const MONTH_JULY: Month.MONTH_JULY;

		/** August. */
		const MONTH_AUGUST: Month.MONTH_AUGUST;

		/** September. */
		const MONTH_SEPTEMBER: Month.MONTH_SEPTEMBER;

		/** October. */
		const MONTH_OCTOBER: Month.MONTH_OCTOBER;

		/** November. */
		const MONTH_NOVEMBER: Month.MONTH_NOVEMBER;

		/** December. */
		const MONTH_DECEMBER: Month.MONTH_DECEMBER;

		/** Landscape screen orientation. */
		const SCREEN_ORIENTATION_LANDSCAPE: ScreenOrientation.SCREEN_ORIENTATION_LANDSCAPE;

		/** Portrait screen orientation. */
		const SCREEN_ORIENTATION_PORTRAIT: ScreenOrientation.SCREEN_ORIENTATION_PORTRAIT;

		/** Reverse landscape screen orientation. */
		const SCREEN_ORIENTATION_REVERSE_LANDSCAPE: ScreenOrientation.SCREEN_ORIENTATION_REVERSE_LANDSCAPE;

		/** Reverse portrait screen orientation. */
		const SCREEN_ORIENTATION_REVERSE_PORTRAIT: ScreenOrientation.SCREEN_ORIENTATION_REVERSE_PORTRAIT;

		/** Uses landscape or reverse landscape based on the hardware sensor. */
		const SCREEN_ORIENTATION_SENSOR_LANDSCAPE: ScreenOrientation.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;

		/** Uses portrait or reverse portrait based on the hardware sensor. */
		const SCREEN_ORIENTATION_SENSOR_PORTRAIT: ScreenOrientation.SCREEN_ORIENTATION_SENSOR_PORTRAIT;

		/** Uses most suitable orientation based on the hardware sensor. */
		const SCREEN_ORIENTATION_SENSOR: ScreenOrientation.SCREEN_ORIENTATION_SENSOR;

		/** Desktop directory path. */
		const SYSTEM_DIR_DESKTOP: SystemDir.SYSTEM_DIR_DESKTOP;

		/** DCIM (Digital Camera Images) directory path. */
		const SYSTEM_DIR_DCIM: SystemDir.SYSTEM_DIR_DCIM;

		/** Documents directory path. */
		const SYSTEM_DIR_DOCUMENTS: SystemDir.SYSTEM_DIR_DOCUMENTS;

		/** Downloads directory path. */
		const SYSTEM_DIR_DOWNLOADS: SystemDir.SYSTEM_DIR_DOWNLOADS;

		/** Movies directory path. */
		const SYSTEM_DIR_MOVIES: SystemDir.SYSTEM_DIR_MOVIES;

		/** Music directory path. */
		const SYSTEM_DIR_MUSIC: SystemDir.SYSTEM_DIR_MUSIC;

		/** Pictures directory path. */
		const SYSTEM_DIR_PICTURES: SystemDir.SYSTEM_DIR_PICTURES;

		/** Ringtones directory path. */
		const SYSTEM_DIR_RINGTONES: SystemDir.SYSTEM_DIR_RINGTONES;

		/** Unknown powerstate. */
		const POWERSTATE_UNKNOWN: PowerState.POWERSTATE_UNKNOWN;

		/** Unplugged, running on battery. */
		const POWERSTATE_ON_BATTERY: PowerState.POWERSTATE_ON_BATTERY;

		/** Plugged in, no battery available. */
		const POWERSTATE_NO_BATTERY: PowerState.POWERSTATE_NO_BATTERY;

		/** Plugged in, battery charging. */
		const POWERSTATE_CHARGING: PowerState.POWERSTATE_CHARGING;

		/** Plugged in, battery fully charged. */
		const POWERSTATE_CHARGED: PowerState.POWERSTATE_CHARGED;
	}

	/** Base class for all non built-in types.
	 Every class which is not a built-in type inherits from this class.

	 You can construct Objects from scripting languages, using `Object.new()` in GDScript, `new Object` in C#, or the "Construct Object" node in VisualScript.

	 Objects do not manage memory. If a class inherits from Object, you will have to delete instances of it manually. To do so, call the `free` method from your script or delete the instance from C++.

	 Some classes that extend Object add memory management. This is the case of `Reference`, which counts references and deletes itself automatically when no longer referenced. `Node`, another fundamental type, deletes all its children when freed from memory.

	 Objects export properties, which are mainly useful for storage and editing, but not really so much in programming. Properties are exported in `_get_property_list` and handled in `_get` and `_set`. However, scripting languages and C++ have simpler means to export them.

	 Property membership can be tested directly in GDScript using `in`:

	 ```gdscript
	 var n = Node2D.new()
	 print("position" in n) # Prints "True".
	 print("other_property" in n) # Prints "False".
	 ```

	 The `in` operator will evaluate to `true` as long as the key exists, even if the value is `null`.

	 Objects also receive notifications. Notifications are a simple way to notify the object about different events, so they can all be handled together. See `_notification`. */
	class Object {

		/** Virtual method which can be overridden to customize the return value of `get`.

		 Returns the given property. Returns `null` if the `property` does not exist. */
		_get(property: string) : any;

		/** Virtual method which can be overridden to customize the return value of `get_property_list`.

		 Returns the object's property list as an `Array` of dictionaries.

		 Each property's `Dictionary` must contain at least `name: String` and `type: int` (see `Variant.Type`) entries. Optionally, it can also include `hint: int` (see `PropertyHint`), `hint_string: String`, and `usage: int` (see `PropertyUsageFlags`). */
		_get_property_list() : any[];

		/** Called when the object is initialized. */
		_init() : void;

		/** Called whenever the object receives a notification, which is identified in `what` by a constant. The base `Object` has two constants `NOTIFICATION_POSTINITIALIZE` and `NOTIFICATION_PREDELETE`, but subclasses such as `Node` define a lot more notifications which are also received by this method. */
		_notification(what: number) : void;

		/** Virtual method which can be overridden to customize the return value of `set`.

		 Sets a property. Returns `true` if the `property` exists. */
		_set(property: string, value: any) : boolean;

		/** Virtual method which can be overridden to customize the return value of `to_string`, and thus the object's representation where it is converted to a string, e.g. with `print(obj)`.

		 Returns a `String` representing the object. If not overridden, defaults to `"`ClassName:RID`"`. */
		_to_string() : string;

		/** Deletes the object from memory. Any pre-existing reference to the freed object will become invalid, e.g. `is_instance_valid(object)` will return `false`. */
		free() : void;

		/** Returns the object's class as a `String`. */
		get_class() : string;

		/** Returns `true` if the object inherits from the given `class`. */
		is_class(p_class: string) : boolean;

		/** Assigns a new value to the given property. If the `property` does not exist, nothing will happen. */
		'set'(property: string, value: any) : void;

		/** Returns the `Variant` value of the given `property`. If the `property` doesn't exist, this will return `null`. */
		'get'(property: string) : any;

		/** Assigns a new value to the property identified by the `NodePath`. The node path should be relative to the current object and can use the colon character (`:`) to access nested properties. Example:

		 ```gdscript
		 set_indexed("position", Vector2(42, 0))
		 set_indexed("position:y", -10)
		 print(position) # (42, -10)
		 ``` */
		set_indexed(property: string, value: any) : void;

		/** Gets the object's property indexed by the given `NodePath`. The node path should be relative to the current object and can use the colon character (`:`) to access nested properties. Examples: `"position:x"` or `"material:next_pass:blend_mode"`. */
		get_indexed(property: string) : any;

		/** Returns the object's property list as an `Array` of dictionaries.

		 Each property's `Dictionary` contain at least `name: String` and `type: int` (see `Variant.Type`) entries. Optionally, it can also include `hint: int` (see `PropertyHint`), `hint_string: String`, and `usage: int` (see `PropertyUsageFlags`). */
		get_property_list() : any[];

		/** Returns the object's methods and their signatures as an `Array`. */
		get_method_list() : any[];

		/** Send a given notification to the object, which will also trigger a call to the `_notification` method of all classes that the object inherits from.

		 If `reversed` is `true`, `_notification` is called first on the object's own class, and then up to its successive parent classes. If `reversed` is `false`, `_notification` is called first on the highest ancestor (`Object` itself), and then down to its successive inheriting classes. */
		//@ts-ignore
		notification(what: number, reversed: boolean = false) : void;

		/** Returns a `String` representing the object. If not overridden, defaults to `"`ClassName:RID`"`.

		 Override the method `_to_string` to customize the `String` representation. */
		to_string() : string;

		/** Returns the object's unique instance ID.

		 This ID can be saved in `EncodedObjectAsID`, and can be used to retrieve the object instance with `@GDScript.instance_from_id`. */
		get_instance_id() : number;

		/** Assigns a script to the object. Each object can have a single script assigned to it, which are used to extend its functionality.

		 If the object already had a script, the previous script instance will be freed and its variables and state will be lost. The new script's `_init` method will be called. */
		set_script(script: Reference) : void;

		/** Returns the object's `Script` instance, or `null` if none is assigned. */
		get_script() : Reference;

		/** Adds or changes a given entry in the object's metadata. Metadata are serialized, and can take any `Variant` value. */
		set_meta(name: string, value: any) : void;

		/** Removes a given entry from the object's metadata. */
		remove_meta(name: string) : void;

		/** Returns the object's metadata entry for the given `name`. */
		get_meta(name: string) : any;

		/** Returns `true` if a metadata entry is found with the given `name`. */
		has_meta(name: string) : boolean;

		/** Returns the object's metadata as a `PoolStringArray`. */
		get_meta_list() : PoolStringArray;

		/** Adds a user-defined `signal`. Arguments are optional, but can be added as an `Array` of dictionaries, each containing `name: String` and `type: int` (see `Variant.Type`) entries. */
		//@ts-ignore
		add_user_signal(signal: string, p_arguments: any[] = [  ]) : void;

		/** Returns `true` if the given user-defined `signal` exists. Only signals added using `add_user_signal` are taken into account. */
		has_user_signal(signal: string) : boolean;

		/** Emits the given `signal`. The signal must exist, so it should be a built-in signal of this class or one of its parent classes, or a user-defined signal. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:

		 ```gdscript
		 emit_signal("hit", weapon_type, damage)
		 emit_signal("game_over")
		 ``` */
		emit_signal(signal: string, ...args) : void;

		/** Calls the `method` on the object and returns the result. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:

		 ```gdscript
		 call("set", "position", Vector2(42.0, 0.0))
		 ``` */
		call(method: string, ...args) : any;

		/** Calls the `method` on the object during idle time. This method supports a variable number of arguments, so parameters are passed as a comma separated list. Example:

		 ```gdscript
		 call_deferred("set", "position", Vector2(42.0, 0.0))
		 ``` */
		call_deferred(method: string, ...args) : void;

		/** Assigns a new value to the given property, after the current frame's physics step. This is equivalent to calling `set` via `call_deferred`, i.e. `call_deferred("set", property, value)`. */
		set_deferred(property: string, value: any) : void;

		/** Calls the `method` on the object and returns the result. Contrarily to `call`, this method does not support a variable number of arguments but expects all parameters to be via a single `Array`.

		 ```gdscript
		 callv("set", [ "position", Vector2(42.0, 0.0) ])
		 ``` */
		callv(method: string, arg_array: any[]) : any;

		/** Returns `true` if the object contains the given `method`. */
		has_method(method: string) : boolean;

		/** Returns `true` if the given `signal` exists. */
		has_signal(signal: string) : boolean;

		/** Returns the list of signals as an `Array` of dictionaries. */
		get_signal_list() : any[];

		/** Returns an `Array` of connections for the given `signal`. */
		get_signal_connection_list(signal: string) : any[];

		/** Returns an `Array` of dictionaries with information about signals that are connected to the object.

		 Each `Dictionary` contains three String entries:

		 - `source` is a reference to the signal emitter.

		 - `signal_name` is the name of the connected signal.

		 - `method_name` is the name of the method to which the signal is connected. */
		get_incoming_connections() : any[];

		/** Connects a `signal` to a `method` on a `target` object. Pass optional `binds` to the call as an `Array` of parameters. These parameters will be passed to the method after any parameter used in the call to `emit_signal`. Use `flags` to set deferred or one-shot connections. See `ConnectFlags` constants.

		 A `signal` can only be connected once to a `method`. It will throw an error if already connected, unless the signal was connected with `CONNECT_REFERENCE_COUNTED`. To avoid this, first, use `is_connected` to check for existing connections.

		 If the `target` is destroyed in the game's lifecycle, the connection will be lost.

		 Examples:

		 ```gdscript
		 connect("pressed", self, "_on_Button_pressed") # BaseButton signal
		 connect("text_entered", self, "_on_LineEdit_text_entered") # LineEdit signal
		 connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # User-defined signal
		 ```

		 An example of the relationship between `binds` passed to `connect` and parameters used when calling `emit_signal`:

		 ```gdscript
		 connect("hit", self, "_on_Player_hit", [ weapon_type, damage ]) # weapon_type and damage are passed last
		 emit_signal("hit", "Dark lord", 5) # "Dark lord" and 5 are passed first
		 func _on_Player_hit(hit_by, level, weapon_type, damage):
		     print("Hit by %s (lvl %d) with weapon %s for %d damage" % [hit_by, level, weapon_type, damage])
		 ``` */
		//@ts-ignore
		connect(signal: string, target: Object, method: string, binds: any[] = [  ], flags: number = 0) : number;

		/** Disconnects a `signal` from a `method` on the given `target`.

		 If you try to disconnect a connection that does not exist, the method will throw an error. Use `is_connected` to ensure that the connection exists. */
		disconnect(signal: string, target: Object, method: string) : void;

		/** Returns `true` if a connection exists for a given `signal`, `target`, and `method`. */
		is_connected(signal: string, target: Object, method: string) : boolean;

		/** If set to `true`, signal emission is blocked. */
		set_block_signals(enable: boolean) : void;

		/** Returns `true` if signal emission blocking is enabled. */
		is_blocking_signals() : boolean;

		/** Notify the editor that the property list has changed, so that editor plugins can take the new values into account. Does nothing on export builds. */
		property_list_changed_notify() : void;

		/** Defines whether the object can translate strings (with calls to `tr`). Enabled by default. */
		set_message_translation(enable: boolean) : void;

		/** Returns `true` if the object can translate strings. See `set_message_translation` and `tr`. */
		can_translate_messages() : boolean;

		/** Translates a message using translation catalogs configured in the Project Settings.

		 Only works if message translation is enabled (which it is by default), otherwise it returns the `message` unchanged. See `set_message_translation`. */
		tr(message: string) : string;

		/** Returns `true` if the `Node.queue_free` method was called for the object. */
		is_queued_for_deletion() : boolean;
		/** Connect the `method` of `target` to the `signal`*/
		//@ts-ignore
		connect(signal: string, target: Object, method: Function, binds: any[] = [], flags: number = 0) : number;
		
		/** Connect the `method` to the `signal`. The caller of the method will be `null` */
		//@ts-ignore
		connect(signal: string, method: Function, binds: any[] = [], flags: number = 0) : number;
		
		/** Returns `true` if a connection exists for a given `signal`, `target`, and `method`. */
		is_connected(signal: string, target: Object, method: Function) : boolean;
		/** Returns `true` if a connection exists for a given `signal` and `method`. */
		is_connected(signal: string, method: Function) : boolean;
		
		/** Disconnects a `signal` from the `method` on the given `target`. */
		disconnect(signal: string, target: Object, method: Function) : void;
		/** Disconnects a `signal` from the `method` */
		disconnect(signal: string, method: Function) : void;
	}
	namespace Object {

		/** Emitted whenever the object's script is changed. */
		const script_changed: 'script_changed';
		enum ConnectFlags {
			/** Connects a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time. */
			CONNECT_DEFERRED = 1,
			/** Persisting connections are saved when the object is serialized to file. */
			CONNECT_PERSIST = 2,
			/** One-shot connections disconnect themselves after emission. */
			CONNECT_ONESHOT = 4,
			/** Connect a signal as reference counted. This means that a given signal can be connected several times to the same target, and will only be fully disconnected once no references are left. */
			CONNECT_REFERENCE_COUNTED = 8,
		}

		/** Called right when the object is initialized. Not available in script. */
		const NOTIFICATION_POSTINITIALIZE: 0;

		/** Called before the object is about to be deleted. */
		const NOTIFICATION_PREDELETE: 1;

		/** Connects a signal in deferred mode. This way, signal emissions are stored in a queue, then set on idle time. */
		const CONNECT_DEFERRED: ConnectFlags.CONNECT_DEFERRED;

		/** Persisting connections are saved when the object is serialized to file. */
		const CONNECT_PERSIST: ConnectFlags.CONNECT_PERSIST;

		/** One-shot connections disconnect themselves after emission. */
		const CONNECT_ONESHOT: ConnectFlags.CONNECT_ONESHOT;

		/** Connect a signal as reference counted. This means that a given signal can be connected several times to the same target, and will only be fully disconnected once no references are left. */
		const CONNECT_REFERENCE_COUNTED: ConnectFlags.CONNECT_REFERENCE_COUNTED;
	}

	/** Defines a 2D polygon for LightOccluder2D.
	 Editor facility that helps you draw a 2D polygon used as resource for `LightOccluder2D`. */
	class OccluderPolygon2D extends Resource {

		/** If `true`, closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction. */
		closed: boolean;

		/** The culling mode to use. */
		cull_mode: number;

		/** A `Vector2` array with the index for polygon's vertices positions.

		 **Note:** The returned value is a copy of the underlying array, rather than a reference. */
		polygon: PoolVector2Array;

		/** Getter of `closed` property */
		is_closed() : boolean;

		/** Setter of `closed` property */
		set_closed(p_value: boolean) : void;

		/** Getter of `cull_mode` property */
		get_cull_mode() : number;

		/** Setter of `cull_mode` property */
		set_cull_mode(p_value: number) : void;

		/** Getter of `polygon` property */
		get_polygon() : PoolVector2Array;

		/** Setter of `polygon` property */
		set_polygon(p_value: PoolVector2Array) : void;
	}
	namespace OccluderPolygon2D {
		enum CullMode {
			/** Culling is disabled. See `cull_mode`. */
			CULL_DISABLED = 0,
			/** Culling is performed in the clockwise direction. See `cull_mode`. */
			CULL_CLOCKWISE = 1,
			/** Culling is performed in the counterclockwise direction. See `cull_mode`. */
			CULL_COUNTER_CLOCKWISE = 2,
		}

		/** Culling is disabled. See `cull_mode`. */
		const CULL_DISABLED: CullMode.CULL_DISABLED;

		/** Culling is performed in the clockwise direction. See `cull_mode`. */
		const CULL_CLOCKWISE: CullMode.CULL_CLOCKWISE;

		/** Culling is performed in the counterclockwise direction. See `cull_mode`. */
		const CULL_COUNTER_CLOCKWISE: CullMode.CULL_COUNTER_CLOCKWISE;
	}

	/** Omnidirectional light, such as a light bulb or a candle.
	 An Omnidirectional light is a type of `Light` that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters. */
	class OmniLight extends Light {

		/** The light's radius. Note that the effectively lit area may appear to be smaller depending on the `omni_attenuation` in use. No matter the `omni_attenuation` in use, the light will never reach anything outside this radius. */
		omni_range: number;

		/** The light's attenuation (drop-off) curve. A number of presets are available in the **Inspector** by right-clicking the curve. */
		omni_attenuation: number;

		/** See `ShadowMode`. */
		omni_shadow_mode: number;

		/** See `ShadowDetail`. */
		omni_shadow_detail: number;

		/** Getter of `omni_range` property */
		get_param() : number;

		/** Setter of `omni_range` property */
		set_param(p_value: number) : void;

		/** Getter of `omni_attenuation` property */
		get_param() : number;

		/** Setter of `omni_attenuation` property */
		set_param(p_value: number) : void;

		/** Getter of `omni_shadow_mode` property */
		get_shadow_mode() : number;

		/** Setter of `omni_shadow_mode` property */
		set_shadow_mode(p_value: number) : void;

		/** Getter of `omni_shadow_detail` property */
		get_shadow_detail() : number;

		/** Setter of `omni_shadow_detail` property */
		set_shadow_detail(p_value: number) : void;
	}
	namespace OmniLight {
		enum ShadowDetail {
			/** Use more detail vertically when computing the shadow. */
			SHADOW_DETAIL_VERTICAL = 0,
			/** Use more detail horizontally when computing the shadow. */
			SHADOW_DETAIL_HORIZONTAL = 1,
		}
		enum ShadowMode {
			/** Shadows are rendered to a dual-paraboloid texture. Faster than `SHADOW_CUBE`, but lower-quality. */
			SHADOW_DUAL_PARABOLOID = 0,
			/** Shadows are rendered to a cubemap. Slower than `SHADOW_DUAL_PARABOLOID`, but higher-quality. */
			SHADOW_CUBE = 1,
		}

		/** Shadows are rendered to a dual-paraboloid texture. Faster than `SHADOW_CUBE`, but lower-quality. */
		const SHADOW_DUAL_PARABOLOID: ShadowMode.SHADOW_DUAL_PARABOLOID;

		/** Shadows are rendered to a cubemap. Slower than `SHADOW_DUAL_PARABOLOID`, but higher-quality. */
		const SHADOW_CUBE: ShadowMode.SHADOW_CUBE;

		/** Use more detail vertically when computing the shadow. */
		const SHADOW_DETAIL_VERTICAL: ShadowDetail.SHADOW_DETAIL_VERTICAL;

		/** Use more detail horizontally when computing the shadow. */
		const SHADOW_DETAIL_HORIZONTAL: ShadowDetail.SHADOW_DETAIL_HORIZONTAL;
	}

	/** Noise generator based on Open Simplex.
	 This resource allows you to configure and sample a fractal noise space. Here is a brief usage example that configures an OpenSimplexNoise and gets samples at various positions and dimensions:

	 ```gdscript
	 var noise = OpenSimplexNoise.new()
	 
	 # Configure
	 noise.seed = randi()
	 noise.octaves = 4
	 noise.period = 20.0
	 noise.persistence = 0.8
	 
	 # Sample
	 print("Values:")
	 print(noise.get_noise_2d(1.0, 1.0))
	 print(noise.get_noise_3d(0.5, 3.0, 15.0))
	 print(noise.get_noise_4d(0.5, 1.9, 4.7, 0.0))
	 ``` */
	class OpenSimplexNoise extends Resource {

		/** Seed used to generate random values, different seeds will generate different noise maps. */
		seed: number;

		/** Number of OpenSimplex noise layers that are sampled to get the fractal noise. Higher values result in more detailed noise but take more time to generate.

		 **Note:** The maximum allowed value is 9. */
		octaves: number;

		/** Period of the base octave. A lower period results in a higher-frequency noise (more value changes across the same distance). */
		period: number;

		/** Contribution factor of the different octaves. A `persistence` value of 1 means all the octaves have the same contribution, a value of 0.5 means each octave contributes half as much as the previous one. */
		persistence: number;

		/** Difference in period between `octaves`. */
		lacunarity: number;

		/** Generate a noise image with the requested `width` and `height`, based on the current noise parameters. */
		get_image(width: number, height: number) : Image;

		/** Generate a tileable noise image, based on the current noise parameters. Generated seamless images are always square (`size` × `size`). */
		get_seamless_image(size: number) : Image;

		/** Returns the 1D noise value ``-1,1`` at the given x-coordinate.

		 **Note:** This method actually returns the 2D noise value ``-1,1`` with fixed y-coordinate value 0.0. */
		get_noise_1d(x: number) : number;

		/** Returns the 2D noise value ``-1,1`` at the given position. */
		get_noise_2d(x: number, y: number) : number;

		/** Returns the 3D noise value ``-1,1`` at the given position. */
		get_noise_3d(x: number, y: number, z: number) : number;

		/** Returns the 4D noise value ``-1,1`` at the given position. */
		get_noise_4d(x: number, y: number, z: number, w: number) : number;

		/** Returns the 2D noise value ``-1,1`` at the given position. */
		get_noise_2dv(pos: Vector2) : number;

		/** Returns the 3D noise value ``-1,1`` at the given position. */
		get_noise_3dv(pos: Vector3) : number;

		/** Getter of `seed` property */
		get_seed() : number;

		/** Setter of `seed` property */
		set_seed(p_value: number) : void;

		/** Getter of `octaves` property */
		get_octaves() : number;

		/** Setter of `octaves` property */
		set_octaves(p_value: number) : void;

		/** Getter of `period` property */
		get_period() : number;

		/** Setter of `period` property */
		set_period(p_value: number) : void;

		/** Getter of `persistence` property */
		get_persistence() : number;

		/** Setter of `persistence` property */
		set_persistence(p_value: number) : void;

		/** Getter of `lacunarity` property */
		get_lacunarity() : number;

		/** Setter of `lacunarity` property */
		set_lacunarity(p_value: number) : void;
	}
	namespace OpenSimplexNoise {
	}

	/** Button control that provides selectable options when pressed.
	 OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the "current" item and is displayed as the button text. */
	class OptionButton extends Button {

		/** The index of the currently selected item, or `-1` if no item is selected. */
		selected: number;

		/**  */
		align: number;

		/**  */
		toggle_mode: boolean;

		/**  */
		action_mode: number;

		/** Adds an item, with text `label` and (optionally) `id`. If no `id` is passed, the item index will be used as the item's ID. New items are appended at the end. */
		//@ts-ignore
		add_item(label: string, id: number = -1) : void;

		/** Adds an item, with a `texture` icon, text `label` and (optionally) `id`. If no `id` is passed, the item index will be used as the item's ID. New items are appended at the end. */
		//@ts-ignore
		add_icon_item(texture: Texture, label: string, id: number = -1) : void;

		/** Sets the text of the item at index `idx`. */
		set_item_text(idx: number, text: string) : void;

		/** Sets the icon of the item at index `idx`. */
		set_item_icon(idx: number, texture: Texture) : void;

		/** Sets whether the item at index `idx` is disabled.

		 Disabled items are drawn differently in the dropdown and are not selectable by the user. If the current selected item is set as disabled, it will remain selected. */
		set_item_disabled(idx: number, disabled: boolean) : void;

		/** Sets the ID of the item at index `idx`. */
		set_item_id(idx: number, id: number) : void;

		/** Sets the metadata of an item. Metadata may be of any type and can be used to store extra information about an item, such as an external string ID. */
		set_item_metadata(idx: number, metadata: any) : void;

		/** Returns the text of the item at index `idx`. */
		get_item_text(idx: number) : string;

		/** Returns the icon of the item at index `idx`. */
		get_item_icon(idx: number) : Texture;

		/** Returns the ID of the item at index `idx`. */
		get_item_id(idx: number) : number;

		/** Returns the index of the item with the given `id`. */
		get_item_index(id: number) : number;

		/** Retrieves the metadata of an item. Metadata may be any type and can be used to store extra information about an item, such as an external string ID. */
		get_item_metadata(idx: number) : any;

		/** Returns `true` if the item at index `idx` is disabled. */
		is_item_disabled(idx: number) : boolean;

		/** Returns the amount of items in the OptionButton, including separators. */
		get_item_count() : number;

		/** Adds a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end. */
		add_separator() : void;

		/** Clears all the items in the `OptionButton`. */
		clear() : void;

		/** Selects an item by index and makes it the current item. This will work even if the item is disabled. */
		select(idx: number) : void;

		/** Returns the ID of the selected item, or `0` if no item is selected. */
		get_selected_id() : number;

		/** Gets the metadata of the selected item. Metadata for items can be set using `set_item_metadata`. */
		get_selected_metadata() : any;

		/** Removes the item at index `idx`. */
		remove_item(idx: number) : void;

		/** Returns the `PopupMenu` contained in this button. */
		get_popup() : PopupMenu;

		/** Getter of `selected` property */
		get_selected() : number;

		/** Setter of `selected` property */
		_select_int(p_value: number) : void;

		/** Getter of `align` property */
		get_text_align() : number;

		/** Setter of `align` property */
		set_text_align(p_value: number) : void;

		/** Getter of `toggle_mode` property */
		is_toggle_mode() : boolean;

		/** Setter of `toggle_mode` property */
		set_toggle_mode(p_value: boolean) : void;

		/** Getter of `action_mode` property */
		get_action_mode() : number;

		/** Setter of `action_mode` property */
		set_action_mode(p_value: number) : void;
	}
	namespace OptionButton {

		/** Emitted the when user navigates to an item using the `ui_up` or `ui_down` actions. The index of the item selected is passed as argument. */
		const item_focused: 'item_focused';

		/** Emitted when the current item has been changed by the user. The index of the item selected is passed as argument. */
		const item_selected: 'item_selected';
	}

	/** Creates packages that can be loaded into a running project.
	 The `PCKPacker` is used to create packages that can be loaded into a running project using `ProjectSettings.load_resource_pack`.

	 ```gdscript
	 var packer = PCKPacker.new()
	 packer.pck_start("test.pck")
	 packer.add_file("res://text.txt", "text.txt")
	 packer.flush()
	 ```

	 The above `PCKPacker` creates package `test.pck`, then adds a file named `text.txt` at the root of the package. */
	class PCKPacker extends Reference {

		/** Creates a new PCK file with the name `pck_name`. The `.pck` file extension isn't added automatically, so it should be part of `pck_name` (even though it's not required). */
		//@ts-ignore
		pck_start(pck_name: string, alignment: number = 0) : number;

		/** Adds the `source_path` file to the current PCK package at the `pck_path` internal path (should start with `res://`). */
		add_file(pck_path: string, source_path: string) : number;

		/** Writes the files specified using all `add_file` calls since the last flush. If `verbose` is `true`, a list of files added will be printed to the console for easier debugging. */
		//@ts-ignore
		flush(verbose: boolean = false) : number;
	}
	namespace PCKPacker {
	}

	/** Optimized translation.
	 Optimized translation. Uses real-time compressed translations, which results in very small dictionaries. */
	class PHashTranslation extends Translation {

		/** Generates and sets an optimized translation from the given `Translation` resource. */
		generate(p_from: Translation) : void;
	}
	namespace PHashTranslation {
	}

	/** 
	  */
	class PackedDataContainer extends Resource {

		/**  */
		__data__: PoolByteArray;

		/**  */
		pack(value: any) : number;

		/**  */
		size() : number;

		/** Getter of `__data__` property */
		_get_data() : PoolByteArray;

		/** Setter of `__data__` property */
		_set_data(p_value: PoolByteArray) : void;
	}
	namespace PackedDataContainer {
	}

	/** Reference version of `PackedDataContainer`.
	  */
	class PackedDataContainerRef extends Reference {

		/**  */
		size() : number;
	}
	namespace PackedDataContainerRef {
	}

	/** An abstraction of a serialized scene.
	 A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself.

	 Can be used to save a node to a file. When saving, the node as well as all the node it owns get saved (see `owner` property on `Node`).

	 **Note:** The node doesn't need to own itself.

	 **Example of loading a saved scene:**

	 ```gdscript
	 # Use `load()` instead of `preload()` if the path isn't known at compile-time.
	 var scene = preload("res://scene.tscn").instance()
	 # Add the node as a child of the node the script is attached to.
	 add_child(scene)
	 ```

	 **Example of saving a node with different owners:** The following example creates 3 objects: `Node2D` (`node`), `RigidBody2D` (`rigid`) and `CollisionObject2D` (`collision`). `collision` is a child of `rigid` which is a child of `node`. Only `rigid` is owned by `node` and `pack` will therefore only save those two nodes, but not `collision`.

	 ```gdscript
	 # Create the objects.
	 var node = Node2D.new()
	 var rigid = RigidBody2D.new()
	 var collision = CollisionShape2D.new()
	 
	 # Create the object hierarchy.
	 rigid.add_child(collision)
	 node.add_child(rigid)
	 
	 # Change owner of `rigid`, but not of `collision`.
	 rigid.owner = node
	 
	 var scene = PackedScene.new()
	 # Only `node` and `rigid` are now packed.
	 var result = scene.pack(node)
	 if result == OK:
	     var error = ResourceSaver.save("res://path/name.scn", scene)  # Or "user://..."
	     if error != OK:
	         push_error("An error occurred while saving the scene to disk.")
	 ``` */
	class PackedScene extends Resource {

		/** A dictionary representation of the scene contents.

		 Available keys include "rnames" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for base scene children overrides, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene. */
		_bundled: object;

		/** Pack will ignore any sub-nodes not owned by given node. See `Node.owner`. */
		pack(path: Node) : number;

		/** Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers a `Node.NOTIFICATION_INSTANCED` notification on the root node. */
		//@ts-ignore
		instance(edit_state: PackedScene.GenEditState = 0) : Node;

		/** Returns `true` if the scene file has nodes. */
		can_instance() : boolean;

		/** Returns the `SceneState` representing the scene file contents. */
		get_state() : SceneState;

		/** Getter of `_bundled` property */
		_get_bundled_scene() : object;

		/** Setter of `_bundled` property */
		_set_bundled_scene(p_value: object) : void;
	}
	namespace PackedScene {
		enum GenEditState {
			/** If passed to `instance`, blocks edits to the scene state. */
			GEN_EDIT_STATE_DISABLED = 0,
			/** If passed to `instance`, provides local scene resources to the local scene.

			 **Note:** Only available in editor builds. */
			GEN_EDIT_STATE_INSTANCE = 1,
			/** If passed to `instance`, provides local scene resources to the local scene. Only the main scene should receive the main edit state.

			 **Note:** Only available in editor builds. */
			GEN_EDIT_STATE_MAIN = 2,
		}

		/** If passed to `instance`, blocks edits to the scene state. */
		const GEN_EDIT_STATE_DISABLED: GenEditState.GEN_EDIT_STATE_DISABLED;

		/** If passed to `instance`, provides local scene resources to the local scene.

		 **Note:** Only available in editor builds. */
		const GEN_EDIT_STATE_INSTANCE: GenEditState.GEN_EDIT_STATE_INSTANCE;

		/** If passed to `instance`, provides local scene resources to the local scene. Only the main scene should receive the main edit state.

		 **Note:** Only available in editor builds. */
		const GEN_EDIT_STATE_MAIN: GenEditState.GEN_EDIT_STATE_MAIN;
	}

	/** Abstraction and base class for packet-based protocols.
	 PacketPeer is an abstraction and base class for packet-based protocols (such as UDP). It provides an API for sending and receiving packets both as raw data or variables. This makes it easy to transfer data over a protocol, without having to encode data as low-level bytes or having to worry about network ordering. */
	class PacketPeer extends Reference {

		/** Maximum buffer size allowed when encoding `Variant`s. Raise this value to support heavier memory allocations.

		 The `put_var` method allocates memory on the stack, and the buffer used will grow automatically to the closest power of two to match the size of the `Variant`. If the `Variant` is bigger than `encode_buffer_max_size`, the method will error out with `ERR_OUT_OF_MEMORY`. */
		encode_buffer_max_size: number;

		/** *Deprecated.* Use `get_var` and `put_var` parameters instead.

		 If `true`, the PacketPeer will allow encoding and decoding of object via `get_var` and `put_var`.

		 **Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution. */
		allow_object_decoding: boolean;

		/** Gets a Variant. If `allow_objects` (or `allow_object_decoding`) is `true`, decoding objects is allowed.

		 **Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution. */
		//@ts-ignore
		get_var(allow_objects: boolean = false) : any;

		/** Sends a `Variant` as a packet. If `full_objects` (or `allow_object_decoding`) is `true`, encoding objects is allowed (and can potentially include code). */
		//@ts-ignore
		put_var(p_var: any, full_objects: boolean = false) : number;

		/** Gets a raw packet. */
		get_packet() : PoolByteArray;

		/** Sends a raw packet. */
		put_packet(buffer: PoolByteArray) : number;

		/** Returns the error state of the last packet received (via `get_packet` and `get_var`). */
		get_packet_error() : number;

		/** Returns the number of packets currently available in the ring-buffer. */
		get_available_packet_count() : number;

		/** Getter of `encode_buffer_max_size` property */
		get_encode_buffer_max_size() : number;

		/** Setter of `encode_buffer_max_size` property */
		set_encode_buffer_max_size(p_value: number) : void;

		/** Getter of `allow_object_decoding` property */
		is_object_decoding_allowed() : boolean;

		/** Setter of `allow_object_decoding` property */
		set_allow_object_decoding(p_value: boolean) : void;
	}
	namespace PacketPeer {
	}

	/** DTLS packet peer.
	 This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by `DTLSServer.take_connection`. */
	class PacketPeerDTLS extends PacketPeer {

		/** Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working. */
		poll() : void;

		/** Connects a `peer` beginning the DTLS handshake using the underlying `PacketPeerUDP` which must be connected (see `PacketPeerUDP.connect_to_host`). If `validate_certs` is `true`, `PacketPeerDTLS` will validate that the certificate presented by the remote peer and match it with the `for_hostname` argument. You can specify a custom `X509Certificate` to use for validation via the `valid_certificate` argument. */
		//@ts-ignore
		connect_to_peer(packet_peer: PacketPeerUDP, validate_certs: boolean = true, for_hostname: string = "", valid_certificate: X509Certificate = null) : number;

		/** Returns the status of the connection. See `Status` for values. */
		get_status() : number;

		/** Disconnects this peer, terminating the DTLS session. */
		disconnect_from_peer() : void;
	}
	namespace PacketPeerDTLS {
		enum Status {
			/** A status representing a `PacketPeerDTLS` that is disconnected. */
			STATUS_DISCONNECTED = 0,
			/** A status representing a `PacketPeerDTLS` that is currently performing the handshake with a remote peer. */
			STATUS_HANDSHAKING = 1,
			/** A status representing a `PacketPeerDTLS` that is connected to a remote peer. */
			STATUS_CONNECTED = 2,
			/** A status representing a `PacketPeerDTLS` in a generic error state. */
			STATUS_ERROR = 3,
			/** An error status that shows a mismatch in the DTLS certificate domain presented by the host and the domain requested for validation. */
			STATUS_ERROR_HOSTNAME_MISMATCH = 4,
		}

		/** A status representing a `PacketPeerDTLS` that is disconnected. */
		const STATUS_DISCONNECTED: Status.STATUS_DISCONNECTED;

		/** A status representing a `PacketPeerDTLS` that is currently performing the handshake with a remote peer. */
		const STATUS_HANDSHAKING: Status.STATUS_HANDSHAKING;

		/** A status representing a `PacketPeerDTLS` that is connected to a remote peer. */
		const STATUS_CONNECTED: Status.STATUS_CONNECTED;

		/** A status representing a `PacketPeerDTLS` in a generic error state. */
		const STATUS_ERROR: Status.STATUS_ERROR;

		/** An error status that shows a mismatch in the DTLS certificate domain presented by the host and the domain requested for validation. */
		const STATUS_ERROR_HOSTNAME_MISMATCH: Status.STATUS_ERROR_HOSTNAME_MISMATCH;
	}

	/** 
	  */
	class PacketPeerGDNative extends PacketPeer {
	}
	namespace PacketPeerGDNative {
	}

	/** Wrapper to use a PacketPeer over a StreamPeer.
	 PacketStreamPeer provides a wrapper for working using packets over a stream. This allows for using packet based code with StreamPeers. PacketPeerStream implements a custom protocol over the StreamPeer, so the user should not read or write to the wrapped StreamPeer directly. */
	class PacketPeerStream extends PacketPeer {

		/**  */
		input_buffer_max_size: number;

		/**  */
		output_buffer_max_size: number;

		/** The wrapped `StreamPeer` object. */
		stream_peer: StreamPeer;

		/** Getter of `input_buffer_max_size` property */
		get_input_buffer_max_size() : number;

		/** Setter of `input_buffer_max_size` property */
		set_input_buffer_max_size(p_value: number) : void;

		/** Getter of `output_buffer_max_size` property */
		get_output_buffer_max_size() : number;

		/** Setter of `output_buffer_max_size` property */
		set_output_buffer_max_size(p_value: number) : void;

		/** Getter of `stream_peer` property */
		get_stream_peer() : StreamPeer;

		/** Setter of `stream_peer` property */
		set_stream_peer(p_value: StreamPeer) : void;
	}
	namespace PacketPeerStream {
	}

	/** UDP packet peer.
	 UDP packet peer. Can be used to send raw UDP packets as well as `Variant`s. */
	class PacketPeerUDP extends PacketPeer {

		/** Makes this `PacketPeerUDP` listen on the `port` binding to `bind_address` with a buffer size `recv_buf_size`.

		 If `bind_address` is set to `"*"` (default), the peer will listen on all available addresses (both IPv4 and IPv6).

		 If `bind_address` is set to `"0.0.0.0"` (for IPv4) or `"::"` (for IPv6), the peer will listen on all available addresses matching that IP type.

		 If `bind_address` is set to any valid address (e.g. `"192.168.1.101"`, `"::1"`, etc), the peer will only listen on the interface with that addresses (or fail if no interface with the given address exists). */
		//@ts-ignore
		listen(port: number, bind_address: string = "*", recv_buf_size: number = 65536) : number;

		/** Closes the UDP socket the `PacketPeerUDP` is currently listening on. */
		close() : void;

		/** Waits for a packet to arrive on the listening port. See `listen`. */
		wait() : number;

		/** Returns whether this `PacketPeerUDP` is listening. */
		is_listening() : boolean;

		/** Calling this method connects this UDP peer to the given `host`/`port` pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to `set_dest_address` are not allowed). This method does not send any data to the remote peer, to do that, use `PacketPeer.put_var` or `PacketPeer.put_packet` as usual. See also `UDPServer`.

		 Note: Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like SSL or DTLS if you feel like your application is transfering sensitive information. */
		connect_to_host(host: string, port: number) : number;

		/** Returns `true` if the UDP socket is open and has been connected to a remote address. See `connect_to_host`. */
		is_connected_to_host() : boolean;

		/** Returns the IP of the remote peer that sent the last packet(that was received with `PacketPeer.get_packet` or `PacketPeer.get_var`). */
		get_packet_ip() : string;

		/** Returns the port of the remote peer that sent the last packet(that was received with `PacketPeer.get_packet` or `PacketPeer.get_var`). */
		get_packet_port() : number;

		/** Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed.

		 Note: `set_broadcast_enabled` must be enabled before sending packets to a broadcast address (e.g. `255.255.255.255`). */
		set_dest_address(host: string, port: number) : number;

		/** Enable or disable sending of broadcast packets (e.g. `set_dest_address("255.255.255.255", 4343)`. This option is disabled by default.

		 Note: Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission and this option to be enabled to receive broadcast packets too. */
		set_broadcast_enabled(enabled: boolean) : void;

		/** Joins the multicast group specified by `multicast_address` using the interface identified by `interface_name`.

		 You can join the same multicast group with multiple interfaces. Use `IP.get_local_interfaces` to know which are available.

		 Note: Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission for multicast to work. */
		join_multicast_group(multicast_address: string, interface_name: string) : number;

		/** Removes the interface identified by `interface_name` from the multicast group specified by `multicast_address`. */
		leave_multicast_group(multicast_address: string, interface_name: string) : number;
	}
	namespace PacketPeerUDP {
	}

	/** Provides an opaque background for `Control` children.
	 Panel is a `Control` that displays an opaque background. It's commonly used as a parent and container for other types of `Control` nodes. */
	class Panel extends Control {
	}
	namespace Panel {
	}

	/** Panel container type.
	 Panel container type. This container fits controls inside of the delimited area of a stylebox. It's useful for giving controls an outline. */
	class PanelContainer extends Container {
	}
	namespace PanelContainer {
	}

	/** A type of `Sky` used to draw a background texture.
	 A resource referenced in an `Environment` that is used to draw a background. The Panorama sky functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a cube map.

	 Using an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR (`.hdr`) and OpenEXR (`.exr`) image formats for this purpose.

	 You can use `url=https://danilw.github.io/GLSL-howto/cubemap_to_panorama_js/cubemap_to_panorama.html`this tool`/url` to convert a cube map to an equirectangular sky map. */
	class PanoramaSky extends Sky {

		/** `Texture` to be applied to the PanoramaSky. */
		panorama: Texture;

		/** Getter of `panorama` property */
		get_panorama() : Texture;

		/** Setter of `panorama` property */
		set_panorama(p_value: Texture) : void;
	}
	namespace PanoramaSky {
	}

	/** A node used to create a parallax scrolling background.
	 A ParallaxBackground uses one or more `ParallaxLayer` child nodes to create a parallax effect. Each `ParallaxLayer` can move at a different speed using `ParallaxLayer.motion_offset`. This creates an illusion of depth in a 2D game. If not used with a `Camera2D`, you must manually calculate the `scroll_offset`. */
	class ParallaxBackground extends CanvasLayer {

		/** The ParallaxBackground's scroll value. Calculated automatically when using a `Camera2D`, but can be used to manually manage scrolling when no camera is present. */
		scroll_offset: Vector2;

		/** The base position offset for all `ParallaxLayer` children. */
		scroll_base_offset: Vector2;

		/** The base motion scale for all `ParallaxLayer` children. */
		scroll_base_scale: Vector2;

		/** Top-left limits for scrolling to begin. If the camera is outside of this limit, the background will stop scrolling. Must be lower than `scroll_limit_end` to work. */
		scroll_limit_begin: Vector2;

		/** Bottom-right limits for scrolling to end. If the camera is outside of this limit, the background will stop scrolling. Must be higher than `scroll_limit_begin` to work. */
		scroll_limit_end: Vector2;

		/** If `true`, elements in `ParallaxLayer` child aren't affected by the zoom level of the camera. */
		scroll_ignore_camera_zoom: boolean;

		/**  */
		layer: number;

		/** Getter of `scroll_offset` property */
		get_scroll_offset() : Vector2;

		/** Setter of `scroll_offset` property */
		set_scroll_offset(p_value: Vector2) : void;

		/** Getter of `scroll_base_offset` property */
		get_scroll_base_offset() : Vector2;

		/** Setter of `scroll_base_offset` property */
		set_scroll_base_offset(p_value: Vector2) : void;

		/** Getter of `scroll_base_scale` property */
		get_scroll_base_scale() : Vector2;

		/** Setter of `scroll_base_scale` property */
		set_scroll_base_scale(p_value: Vector2) : void;

		/** Getter of `scroll_limit_begin` property */
		get_limit_begin() : Vector2;

		/** Setter of `scroll_limit_begin` property */
		set_limit_begin(p_value: Vector2) : void;

		/** Getter of `scroll_limit_end` property */
		get_limit_end() : Vector2;

		/** Setter of `scroll_limit_end` property */
		set_limit_end(p_value: Vector2) : void;

		/** Getter of `scroll_ignore_camera_zoom` property */
		is_ignore_camera_zoom() : boolean;

		/** Setter of `scroll_ignore_camera_zoom` property */
		set_ignore_camera_zoom(p_value: boolean) : void;

		/** Getter of `layer` property */
		get_layer() : number;

		/** Setter of `layer` property */
		set_layer(p_value: number) : void;
	}
	namespace ParallaxBackground {
	}

	/** A parallax scrolling layer to be used with `ParallaxBackground`.
	 A ParallaxLayer must be the child of a `ParallaxBackground` node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the `ParallaxBackground.scroll_offset` value.

	 This node's children will be affected by its scroll offset.

	 **Note:** Any changes to this node's position and scale made after it enters the scene will be ignored. */
	class ParallaxLayer extends Node2D {

		/** Multiplies the ParallaxLayer's motion. If an axis is set to `0`, it will not scroll. */
		motion_scale: Vector2;

		/** The ParallaxLayer's offset relative to the parent ParallaxBackground's `ParallaxBackground.scroll_offset`. */
		motion_offset: Vector2;

		/** The ParallaxLayer's `Texture` mirroring. Useful for creating an infinite scrolling background. If an axis is set to `0`, the `Texture` will not be mirrored. */
		motion_mirroring: Vector2;

		/** Getter of `motion_scale` property */
		get_motion_scale() : Vector2;

		/** Setter of `motion_scale` property */
		set_motion_scale(p_value: Vector2) : void;

		/** Getter of `motion_offset` property */
		get_motion_offset() : Vector2;

		/** Setter of `motion_offset` property */
		set_motion_offset(p_value: Vector2) : void;

		/** Getter of `motion_mirroring` property */
		get_mirroring() : Vector2;

		/** Setter of `motion_mirroring` property */
		set_mirroring(p_value: Vector2) : void;
	}
	namespace ParallaxLayer {
	}

	/** 3D particle emitter.
	 3D particle node used to create a variety of particle systems and effects. `Particles` features an emitter that generates some number of particles at a given rate.

	 Use the `process_material` property to add a `ParticlesMaterial` to configure particle appearance and behavior. Alternatively, you can add a `ShaderMaterial` which will be applied to all particles. */
	class Particles extends GeometryInstance {

		/** If `true`, particles are being emitted. */
		emitting: boolean;

		/** Number of particles to emit. */
		amount: number;

		/** Amount of time each particle will exist. */
		lifetime: number;

		/** If `true`, only `amount` particles will be emitted. */
		one_shot: boolean;

		/** Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting. */
		preprocess: number;

		/** Speed scaling ratio. A value of `0` can be used to pause the particles. */
		speed_scale: number;

		/** Time ratio between each emission. If `0`, particles are emitted continuously. If `1`, all particles are emitted simultaneously. */
		explosiveness: number;

		/** Emission randomness ratio. */
		randomness: number;

		/** The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself. */
		fixed_fps: number;

		/** If `true`, results in fractional delta calculation which has a smoother particles display effect. */
		fract_delta: boolean;

		/** The `AABB` that determines the area of the world part of which needs to be visible on screen for the particle system to be active.

		 **Note:** If the `ParticlesMaterial` in use is configured to cast shadows, you may want to enlarge this AABB to ensure the shadow is updated when particles are off-screen. */
		visibility_aabb: AABB;

		/** If `true`, particles use the parent node's coordinate space. If `false`, they use global coordinates. */
		local_coords: boolean;

		/** Particle draw order. Uses `DrawOrder` values. */
		draw_order: number;

		/** `Material` for processing particles. Can be a `ParticlesMaterial` or a `ShaderMaterial`. */
		process_material: Material;

		/** The number of draw passes when rendering particles. */
		draw_passes: number;

		/** `Mesh` that is drawn for the first draw pass. */
		draw_pass_1: Mesh;

		/** `Mesh` that is drawn for the second draw pass. */
		draw_pass_2: Mesh;

		/** `Mesh` that is drawn for the third draw pass. */
		draw_pass_3: Mesh;

		/** `Mesh` that is drawn for the fourth draw pass. */
		draw_pass_4: Mesh;

		/** Sets the `Mesh` that is drawn at index `pass`. */
		set_draw_pass_mesh(pass: number, mesh: Mesh) : void;

		/** Returns the `Mesh` that is drawn at index `pass`. */
		get_draw_pass_mesh(pass: number) : Mesh;

		/** Restarts the particle emission, clearing existing particles. */
		restart() : void;

		/** Returns the axis-aligned bounding box that contains all the particles that are active in the current frame. */
		capture_aabb() : AABB;

		/** Getter of `emitting` property */
		is_emitting() : boolean;

		/** Setter of `emitting` property */
		set_emitting(p_value: boolean) : void;

		/** Getter of `amount` property */
		get_amount() : number;

		/** Setter of `amount` property */
		set_amount(p_value: number) : void;

		/** Getter of `lifetime` property */
		get_lifetime() : number;

		/** Setter of `lifetime` property */
		set_lifetime(p_value: number) : void;

		/** Getter of `one_shot` property */
		get_one_shot() : boolean;

		/** Setter of `one_shot` property */
		set_one_shot(p_value: boolean) : void;

		/** Getter of `preprocess` property */
		get_pre_process_time() : number;

		/** Setter of `preprocess` property */
		set_pre_process_time(p_value: number) : void;

		/** Getter of `speed_scale` property */
		get_speed_scale() : number;

		/** Setter of `speed_scale` property */
		set_speed_scale(p_value: number) : void;

		/** Getter of `explosiveness` property */
		get_explosiveness_ratio() : number;

		/** Setter of `explosiveness` property */
		set_explosiveness_ratio(p_value: number) : void;

		/** Getter of `randomness` property */
		get_randomness_ratio() : number;

		/** Setter of `randomness` property */
		set_randomness_ratio(p_value: number) : void;

		/** Getter of `fixed_fps` property */
		get_fixed_fps() : number;

		/** Setter of `fixed_fps` property */
		set_fixed_fps(p_value: number) : void;

		/** Getter of `fract_delta` property */
		get_fractional_delta() : boolean;

		/** Setter of `fract_delta` property */
		set_fractional_delta(p_value: boolean) : void;

		/** Getter of `visibility_aabb` property */
		get_visibility_aabb() : AABB;

		/** Setter of `visibility_aabb` property */
		set_visibility_aabb(p_value: AABB) : void;

		/** Getter of `local_coords` property */
		get_use_local_coordinates() : boolean;

		/** Setter of `local_coords` property */
		set_use_local_coordinates(p_value: boolean) : void;

		/** Getter of `draw_order` property */
		get_draw_order() : number;

		/** Setter of `draw_order` property */
		set_draw_order(p_value: number) : void;

		/** Getter of `process_material` property */
		get_process_material() : Material;

		/** Setter of `process_material` property */
		set_process_material(p_value: Material) : void;

		/** Getter of `draw_passes` property */
		get_draw_passes() : number;

		/** Setter of `draw_passes` property */
		set_draw_passes(p_value: number) : void;

		/** Getter of `draw_pass_1` property */
		get_draw_pass_mesh() : Mesh;

		/** Setter of `draw_pass_1` property */
		set_draw_pass_mesh(p_value: Mesh) : void;

		/** Getter of `draw_pass_2` property */
		get_draw_pass_mesh() : Mesh;

		/** Setter of `draw_pass_2` property */
		set_draw_pass_mesh(p_value: Mesh) : void;

		/** Getter of `draw_pass_3` property */
		get_draw_pass_mesh() : Mesh;

		/** Setter of `draw_pass_3` property */
		set_draw_pass_mesh(p_value: Mesh) : void;

		/** Getter of `draw_pass_4` property */
		get_draw_pass_mesh() : Mesh;

		/** Setter of `draw_pass_4` property */
		set_draw_pass_mesh(p_value: Mesh) : void;
	}
	namespace Particles {
		enum DrawOrder {
			/** Particles are drawn in the order emitted. */
			DRAW_ORDER_INDEX = 0,
			/** Particles are drawn in order of remaining lifetime. */
			DRAW_ORDER_LIFETIME = 1,
			/** Particles are drawn in order of depth. */
			DRAW_ORDER_VIEW_DEPTH = 2,
		}

		/** Particles are drawn in the order emitted. */
		const DRAW_ORDER_INDEX: DrawOrder.DRAW_ORDER_INDEX;

		/** Particles are drawn in order of remaining lifetime. */
		const DRAW_ORDER_LIFETIME: DrawOrder.DRAW_ORDER_LIFETIME;

		/** Particles are drawn in order of depth. */
		const DRAW_ORDER_VIEW_DEPTH: DrawOrder.DRAW_ORDER_VIEW_DEPTH;

		/** Maximum number of draw passes supported. */
		const MAX_DRAW_PASSES: 4;
	}

	/** 2D particle emitter.
	 2D particle node used to create a variety of particle systems and effects. `Particles2D` features an emitter that generates some number of particles at a given rate.

	 Use the `process_material` property to add a `ParticlesMaterial` to configure particle appearance and behavior. Alternatively, you can add a `ShaderMaterial` which will be applied to all particles. */
	class Particles2D extends Node2D {

		/** If `true`, particles are being emitted. */
		emitting: boolean;

		/** Number of particles emitted in one emission cycle. */
		amount: number;

		/** Amount of time each particle will exist. */
		lifetime: number;

		/** If `true`, only one emission cycle occurs. If set `true` during a cycle, emission will stop at the cycle's end. */
		one_shot: boolean;

		/** Particle system starts as if it had already run for this many seconds. */
		preprocess: number;

		/** Particle system's running speed scaling ratio. A value of `0` can be used to pause the particles. */
		speed_scale: number;

		/** How rapidly particles in an emission cycle are emitted. If greater than `0`, there will be a gap in emissions before the next cycle begins. */
		explosiveness: number;

		/** Emission lifetime randomness ratio. */
		randomness: number;

		/** The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself. */
		fixed_fps: number;

		/** If `true`, results in fractional delta calculation which has a smoother particles display effect. */
		fract_delta: boolean;

		/** Editor visibility helper. */
		visibility_rect: Rect2;

		/** If `true`, particles use the parent node's coordinate space. If `false`, they use global coordinates. */
		local_coords: boolean;

		/** Particle draw order. Uses `DrawOrder` values. */
		draw_order: number;

		/** `Material` for processing particles. Can be a `ParticlesMaterial` or a `ShaderMaterial`. */
		process_material: Material;

		/** Particle texture. If `null`, particles will be squares. */
		texture: Texture;

		/** Normal map to be used for the `texture` property.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normal_map: Texture;

		/** Returns a rectangle containing the positions of all existing particles. */
		capture_rect() : Rect2;

		/** Restarts all the existing particles. */
		restart() : void;

		/** Getter of `emitting` property */
		is_emitting() : boolean;

		/** Setter of `emitting` property */
		set_emitting(p_value: boolean) : void;

		/** Getter of `amount` property */
		get_amount() : number;

		/** Setter of `amount` property */
		set_amount(p_value: number) : void;

		/** Getter of `lifetime` property */
		get_lifetime() : number;

		/** Setter of `lifetime` property */
		set_lifetime(p_value: number) : void;

		/** Getter of `one_shot` property */
		get_one_shot() : boolean;

		/** Setter of `one_shot` property */
		set_one_shot(p_value: boolean) : void;

		/** Getter of `preprocess` property */
		get_pre_process_time() : number;

		/** Setter of `preprocess` property */
		set_pre_process_time(p_value: number) : void;

		/** Getter of `speed_scale` property */
		get_speed_scale() : number;

		/** Setter of `speed_scale` property */
		set_speed_scale(p_value: number) : void;

		/** Getter of `explosiveness` property */
		get_explosiveness_ratio() : number;

		/** Setter of `explosiveness` property */
		set_explosiveness_ratio(p_value: number) : void;

		/** Getter of `randomness` property */
		get_randomness_ratio() : number;

		/** Setter of `randomness` property */
		set_randomness_ratio(p_value: number) : void;

		/** Getter of `fixed_fps` property */
		get_fixed_fps() : number;

		/** Setter of `fixed_fps` property */
		set_fixed_fps(p_value: number) : void;

		/** Getter of `fract_delta` property */
		get_fractional_delta() : boolean;

		/** Setter of `fract_delta` property */
		set_fractional_delta(p_value: boolean) : void;

		/** Getter of `visibility_rect` property */
		get_visibility_rect() : Rect2;

		/** Setter of `visibility_rect` property */
		set_visibility_rect(p_value: Rect2) : void;

		/** Getter of `local_coords` property */
		get_use_local_coordinates() : boolean;

		/** Setter of `local_coords` property */
		set_use_local_coordinates(p_value: boolean) : void;

		/** Getter of `draw_order` property */
		get_draw_order() : number;

		/** Setter of `draw_order` property */
		set_draw_order(p_value: number) : void;

		/** Getter of `process_material` property */
		get_process_material() : Material;

		/** Setter of `process_material` property */
		set_process_material(p_value: Material) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normal_map` property */
		get_normal_map() : Texture;

		/** Setter of `normal_map` property */
		set_normal_map(p_value: Texture) : void;
	}
	namespace Particles2D {
		enum DrawOrder {
			/** Particles are drawn in the order emitted. */
			DRAW_ORDER_INDEX = 0,
			/** Particles are drawn in order of remaining lifetime. */
			DRAW_ORDER_LIFETIME = 1,
		}

		/** Particles are drawn in the order emitted. */
		const DRAW_ORDER_INDEX: DrawOrder.DRAW_ORDER_INDEX;

		/** Particles are drawn in order of remaining lifetime. */
		const DRAW_ORDER_LIFETIME: DrawOrder.DRAW_ORDER_LIFETIME;
	}

	/** Particle properties for `Particles` and `Particles2D` nodes.
	 ParticlesMaterial defines particle properties and behavior. It is used in the `process_material` of `Particles` and `Particles2D` emitter nodes.

	 Some of this material's properties are applied to each particle when emitted, while others can have a `CurveTexture` applied to vary values over the lifetime of the particle.

	 When a randomness ratio is applied to a property it is used to scale that property by a random amount. The random ratio is used to interpolate between `1.0` and a random number less than one, the result is multiplied by the property to obtain the randomized property. For example a random ratio of `0.4` would scale the original property between `0.4-1.0` of its original value. */
	class ParticlesMaterial extends Material {

		/** Particle lifetime randomness ratio. */
		lifetime_randomness: number;

		/** Emitter will emit `amount` divided by `trail_divisor` particles. The remaining particles will be used as trail(s). */
		trail_divisor: number;

		/** Trail particles' size will vary along this `CurveTexture`. */
		trail_size_modifier: CurveTexture;

		/** Trail particles' color will vary along this `GradientTexture`. */
		trail_color_modifier: GradientTexture;

		/** Particles will be emitted inside this region. Use `EmissionShape` constants for values. */
		emission_shape: number;

		/** The sphere's radius if `emission_shape` is set to `EMISSION_SHAPE_SPHERE`. */
		emission_sphere_radius: number;

		/** The box's extents if `emission_shape` is set to `EMISSION_SHAPE_BOX`. */
		emission_box_extents: Vector3;

		/** Particles will be emitted at positions determined by sampling this texture at a random position. Used with `EMISSION_SHAPE_POINTS` and `EMISSION_SHAPE_DIRECTED_POINTS`. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar. */
		emission_point_texture: Texture;

		/** Particle velocity and rotation will be set by sampling this texture at the same point as the `emission_point_texture`. Used only in `EMISSION_SHAPE_DIRECTED_POINTS`. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar. */
		emission_normal_texture: Texture;

		/** Particle color will be modulated by color determined by sampling this texture at the same point as the `emission_point_texture`. */
		emission_color_texture: Texture;

		/** The number of emission points if `emission_shape` is set to `EMISSION_SHAPE_POINTS` or `EMISSION_SHAPE_DIRECTED_POINTS`. */
		emission_point_count: number;

		/** Align Y axis of particle with the direction of its velocity. */
		flag_align_y: boolean;

		/** If `true`, particles rotate around Y axis by `angle`. */
		flag_rotate_y: boolean;

		/** If `true`, particles will not move on the z axis. */
		flag_disable_z: boolean;

		/** Unit vector specifying the particles' emission direction. */
		direction: Vector3;

		/** Each particle's initial direction range from `+spread` to `-spread` degrees. Applied to X/Z plane and Y/Z planes. */
		spread: number;

		/** Amount of `spread` in Y/Z plane. A value of `1` restricts particles to X/Z plane. */
		flatness: number;

		/** Gravity applied to every particle. */
		gravity: Vector3;

		/** Initial velocity magnitude for each particle. Direction comes from `spread` and the node's orientation. */
		initial_velocity: number;

		/** Initial velocity randomness ratio. */
		initial_velocity_random: number;

		/** Initial angular velocity applied to each particle. Sets the speed of rotation of the particle.

		 Only applied when `flag_disable_z` or `flag_rotate_y` are `true` or the `SpatialMaterial` being used to draw the particle is using `SpatialMaterial.BILLBOARD_PARTICLES`. */
		angular_velocity: number;

		/** Angular velocity randomness ratio. */
		angular_velocity_random: number;

		/** Each particle's angular velocity will vary along this `CurveTexture`. */
		angular_velocity_curve: Texture;

		/** Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.

		 Only available when `flag_disable_z` is `true`. */
		orbit_velocity: number;

		/** Orbital velocity randomness ratio. */
		orbit_velocity_random: number;

		/** Each particle's orbital velocity will vary along this `CurveTexture`. */
		orbit_velocity_curve: Texture;

		/** Linear acceleration applied to each particle in the direction of motion. */
		linear_accel: number;

		/** Linear acceleration randomness ratio. */
		linear_accel_random: number;

		/** Each particle's linear acceleration will vary along this `CurveTexture`. */
		linear_accel_curve: Texture;

		/** Radial acceleration applied to each particle. Makes particle accelerate away from origin. */
		radial_accel: number;

		/** Radial acceleration randomness ratio. */
		radial_accel_random: number;

		/** Each particle's radial acceleration will vary along this `CurveTexture`. */
		radial_accel_curve: Texture;

		/** Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion. */
		tangential_accel: number;

		/** Tangential acceleration randomness ratio. */
		tangential_accel_random: number;

		/** Each particle's tangential acceleration will vary along this `CurveTexture`. */
		tangential_accel_curve: Texture;

		/** The rate at which particles lose velocity. */
		damping: number;

		/** Damping randomness ratio. */
		damping_random: number;

		/** Damping will vary along this `CurveTexture`. */
		damping_curve: Texture;

		/** Initial rotation applied to each particle, in degrees.

		 Only applied when `flag_disable_z` or `flag_rotate_y` are `true` or the `SpatialMaterial` being used to draw the particle is using `SpatialMaterial.BILLBOARD_PARTICLES`. */
		angle: number;

		/** Rotation randomness ratio. */
		angle_random: number;

		/** Each particle's rotation will be animated along this `CurveTexture`. */
		angle_curve: Texture;

		/** Initial scale applied to each particle. */
		scale: number;

		/** Scale randomness ratio. */
		scale_random: number;

		/** Each particle's scale will vary along this `CurveTexture`. */
		scale_curve: Texture;

		/** Each particle's initial color. If the `Particles2D`'s `texture` is defined, it will be multiplied by this color. To have particle display color in a `SpatialMaterial` make sure to set `SpatialMaterial.vertex_color_use_as_albedo` to `true`. */
		color: Color;

		/** Each particle's color will vary along this `GradientTexture`. */
		color_ramp: Texture;

		/** Initial hue variation applied to each particle. */
		hue_variation: number;

		/** Hue variation randomness ratio. */
		hue_variation_random: number;

		/** Each particle's hue will vary along this `CurveTexture`. */
		hue_variation_curve: Texture;

		/** Particle animation speed. */
		anim_speed: number;

		/** Animation speed randomness ratio. */
		anim_speed_random: number;

		/** Each particle's animation speed will vary along this `CurveTexture`. */
		anim_speed_curve: Texture;

		/** Particle animation offset. */
		anim_offset: number;

		/** Animation offset randomness ratio. */
		anim_offset_random: number;

		/** Each particle's animation offset will vary along this `CurveTexture`. */
		anim_offset_curve: Texture;

		/** Sets the specified `Parameter`. */
		set_param(param: ParticlesMaterial.Parameter, value: number) : void;

		/** Returns the value of the specified parameter. */
		get_param(param: ParticlesMaterial.Parameter) : number;

		/** Sets the randomness ratio for the specified `Parameter`. */
		set_param_randomness(param: ParticlesMaterial.Parameter, randomness: number) : void;

		/** Returns the randomness ratio associated with the specified parameter. */
		get_param_randomness(param: ParticlesMaterial.Parameter) : number;

		/** Sets the `Texture` for the specified `Parameter`. */
		set_param_texture(param: ParticlesMaterial.Parameter, texture: Texture) : void;

		/** Returns the `Texture` used by the specified parameter. */
		get_param_texture(param: ParticlesMaterial.Parameter) : Texture;

		/** If `true`, enables the specified flag. See `Flags` for options. */
		set_flag(flag: ParticlesMaterial.Flags, enable: boolean) : void;

		/** Returns `true` if the specified flag is enabled. */
		get_flag(flag: ParticlesMaterial.Flags) : boolean;

		/** Getter of `lifetime_randomness` property */
		get_lifetime_randomness() : number;

		/** Setter of `lifetime_randomness` property */
		set_lifetime_randomness(p_value: number) : void;

		/** Getter of `trail_divisor` property */
		get_trail_divisor() : number;

		/** Setter of `trail_divisor` property */
		set_trail_divisor(p_value: number) : void;

		/** Getter of `trail_size_modifier` property */
		get_trail_size_modifier() : CurveTexture;

		/** Setter of `trail_size_modifier` property */
		set_trail_size_modifier(p_value: CurveTexture) : void;

		/** Getter of `trail_color_modifier` property */
		get_trail_color_modifier() : GradientTexture;

		/** Setter of `trail_color_modifier` property */
		set_trail_color_modifier(p_value: GradientTexture) : void;

		/** Getter of `emission_shape` property */
		get_emission_shape() : number;

		/** Setter of `emission_shape` property */
		set_emission_shape(p_value: number) : void;

		/** Getter of `emission_sphere_radius` property */
		get_emission_sphere_radius() : number;

		/** Setter of `emission_sphere_radius` property */
		set_emission_sphere_radius(p_value: number) : void;

		/** Getter of `emission_box_extents` property */
		get_emission_box_extents() : Vector3;

		/** Setter of `emission_box_extents` property */
		set_emission_box_extents(p_value: Vector3) : void;

		/** Getter of `emission_point_texture` property */
		get_emission_point_texture() : Texture;

		/** Setter of `emission_point_texture` property */
		set_emission_point_texture(p_value: Texture) : void;

		/** Getter of `emission_normal_texture` property */
		get_emission_normal_texture() : Texture;

		/** Setter of `emission_normal_texture` property */
		set_emission_normal_texture(p_value: Texture) : void;

		/** Getter of `emission_color_texture` property */
		get_emission_color_texture() : Texture;

		/** Setter of `emission_color_texture` property */
		set_emission_color_texture(p_value: Texture) : void;

		/** Getter of `emission_point_count` property */
		get_emission_point_count() : number;

		/** Setter of `emission_point_count` property */
		set_emission_point_count(p_value: number) : void;

		/** Getter of `flag_align_y` property */
		get_flag() : boolean;

		/** Setter of `flag_align_y` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flag_rotate_y` property */
		get_flag() : boolean;

		/** Setter of `flag_rotate_y` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flag_disable_z` property */
		get_flag() : boolean;

		/** Setter of `flag_disable_z` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `direction` property */
		get_direction() : Vector3;

		/** Setter of `direction` property */
		set_direction(p_value: Vector3) : void;

		/** Getter of `spread` property */
		get_spread() : number;

		/** Setter of `spread` property */
		set_spread(p_value: number) : void;

		/** Getter of `flatness` property */
		get_flatness() : number;

		/** Setter of `flatness` property */
		set_flatness(p_value: number) : void;

		/** Getter of `gravity` property */
		get_gravity() : Vector3;

		/** Setter of `gravity` property */
		set_gravity(p_value: Vector3) : void;

		/** Getter of `initial_velocity` property */
		get_param() : number;

		/** Setter of `initial_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `initial_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `initial_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angular_velocity` property */
		get_param() : number;

		/** Setter of `angular_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `angular_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angular_velocity_curve` property */
		get_param_texture() : Texture;

		/** Setter of `angular_velocity_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `orbit_velocity` property */
		get_param() : number;

		/** Setter of `orbit_velocity` property */
		set_param(p_value: number) : void;

		/** Getter of `orbit_velocity_random` property */
		get_param_randomness() : number;

		/** Setter of `orbit_velocity_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `orbit_velocity_curve` property */
		get_param_texture() : Texture;

		/** Setter of `orbit_velocity_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `linear_accel` property */
		get_param() : number;

		/** Setter of `linear_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `linear_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `linear_accel_curve` property */
		get_param_texture() : Texture;

		/** Setter of `linear_accel_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `radial_accel` property */
		get_param() : number;

		/** Setter of `radial_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `radial_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `radial_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `radial_accel_curve` property */
		get_param_texture() : Texture;

		/** Setter of `radial_accel_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `tangential_accel` property */
		get_param() : number;

		/** Setter of `tangential_accel` property */
		set_param(p_value: number) : void;

		/** Getter of `tangential_accel_random` property */
		get_param_randomness() : number;

		/** Setter of `tangential_accel_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `tangential_accel_curve` property */
		get_param_texture() : Texture;

		/** Setter of `tangential_accel_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `damping` property */
		get_param() : number;

		/** Setter of `damping` property */
		set_param(p_value: number) : void;

		/** Getter of `damping_random` property */
		get_param_randomness() : number;

		/** Setter of `damping_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `damping_curve` property */
		get_param_texture() : Texture;

		/** Setter of `damping_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `angle` property */
		get_param() : number;

		/** Setter of `angle` property */
		set_param(p_value: number) : void;

		/** Getter of `angle_random` property */
		get_param_randomness() : number;

		/** Setter of `angle_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `angle_curve` property */
		get_param_texture() : Texture;

		/** Setter of `angle_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `scale` property */
		get_param() : number;

		/** Setter of `scale` property */
		set_param(p_value: number) : void;

		/** Getter of `scale_random` property */
		get_param_randomness() : number;

		/** Setter of `scale_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `scale_curve` property */
		get_param_texture() : Texture;

		/** Setter of `scale_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `color_ramp` property */
		get_color_ramp() : Texture;

		/** Setter of `color_ramp` property */
		set_color_ramp(p_value: Texture) : void;

		/** Getter of `hue_variation` property */
		get_param() : number;

		/** Setter of `hue_variation` property */
		set_param(p_value: number) : void;

		/** Getter of `hue_variation_random` property */
		get_param_randomness() : number;

		/** Setter of `hue_variation_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `hue_variation_curve` property */
		get_param_texture() : Texture;

		/** Setter of `hue_variation_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `anim_speed` property */
		get_param() : number;

		/** Setter of `anim_speed` property */
		set_param(p_value: number) : void;

		/** Getter of `anim_speed_random` property */
		get_param_randomness() : number;

		/** Setter of `anim_speed_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `anim_speed_curve` property */
		get_param_texture() : Texture;

		/** Setter of `anim_speed_curve` property */
		set_param_texture(p_value: Texture) : void;

		/** Getter of `anim_offset` property */
		get_param() : number;

		/** Setter of `anim_offset` property */
		set_param(p_value: number) : void;

		/** Getter of `anim_offset_random` property */
		get_param_randomness() : number;

		/** Setter of `anim_offset_random` property */
		set_param_randomness(p_value: number) : void;

		/** Getter of `anim_offset_curve` property */
		get_param_texture() : Texture;

		/** Setter of `anim_offset_curve` property */
		set_param_texture(p_value: Texture) : void;
	}
	namespace ParticlesMaterial {
		enum EmissionShape {
			/** All particles will be emitted from a single point. */
			EMISSION_SHAPE_POINT = 0,
			/** Particles will be emitted in the volume of a sphere. */
			EMISSION_SHAPE_SPHERE = 1,
			/** Particles will be emitted in the volume of a box. */
			EMISSION_SHAPE_BOX = 2,
			/** Particles will be emitted at a position determined by sampling a random point on the `emission_point_texture`. Particle color will be modulated by `emission_color_texture`. */
			EMISSION_SHAPE_POINTS = 3,
			/** Particles will be emitted at a position determined by sampling a random point on the `emission_point_texture`. Particle velocity and rotation will be set based on `emission_normal_texture`. Particle color will be modulated by `emission_color_texture`. */
			EMISSION_SHAPE_DIRECTED_POINTS = 4,
			/** Represents the size of the `EmissionShape` enum. */
			EMISSION_SHAPE_MAX = 5,
		}
		enum Flags {
			/** Use with `set_flag` to set `flag_align_y`. */
			FLAG_ALIGN_Y_TO_VELOCITY = 0,
			/** Use with `set_flag` to set `flag_rotate_y`. */
			FLAG_ROTATE_Y = 1,
			/** Use with `set_flag` to set `flag_disable_z`. */
			FLAG_DISABLE_Z = 2,
			/** Represents the size of the `Flags` enum. */
			FLAG_MAX = 3,
		}
		enum Parameter {
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set initial velocity properties. */
			PARAM_INITIAL_LINEAR_VELOCITY = 0,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set angular velocity properties. */
			PARAM_ANGULAR_VELOCITY = 1,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set orbital velocity properties. */
			PARAM_ORBIT_VELOCITY = 2,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set linear acceleration properties. */
			PARAM_LINEAR_ACCEL = 3,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set radial acceleration properties. */
			PARAM_RADIAL_ACCEL = 4,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set tangential acceleration properties. */
			PARAM_TANGENTIAL_ACCEL = 5,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set damping properties. */
			PARAM_DAMPING = 6,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set angle properties. */
			PARAM_ANGLE = 7,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set scale properties. */
			PARAM_SCALE = 8,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set hue variation properties. */
			PARAM_HUE_VARIATION = 9,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set animation speed properties. */
			PARAM_ANIM_SPEED = 10,
			/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set animation offset properties. */
			PARAM_ANIM_OFFSET = 11,
			/** Represents the size of the `Parameter` enum. */
			PARAM_MAX = 12,
		}

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set initial velocity properties. */
		const PARAM_INITIAL_LINEAR_VELOCITY: Parameter.PARAM_INITIAL_LINEAR_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set angular velocity properties. */
		const PARAM_ANGULAR_VELOCITY: Parameter.PARAM_ANGULAR_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set orbital velocity properties. */
		const PARAM_ORBIT_VELOCITY: Parameter.PARAM_ORBIT_VELOCITY;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set linear acceleration properties. */
		const PARAM_LINEAR_ACCEL: Parameter.PARAM_LINEAR_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set radial acceleration properties. */
		const PARAM_RADIAL_ACCEL: Parameter.PARAM_RADIAL_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set tangential acceleration properties. */
		const PARAM_TANGENTIAL_ACCEL: Parameter.PARAM_TANGENTIAL_ACCEL;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set damping properties. */
		const PARAM_DAMPING: Parameter.PARAM_DAMPING;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set angle properties. */
		const PARAM_ANGLE: Parameter.PARAM_ANGLE;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set scale properties. */
		const PARAM_SCALE: Parameter.PARAM_SCALE;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set hue variation properties. */
		const PARAM_HUE_VARIATION: Parameter.PARAM_HUE_VARIATION;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set animation speed properties. */
		const PARAM_ANIM_SPEED: Parameter.PARAM_ANIM_SPEED;

		/** Use with `set_param`, `set_param_randomness`, and `set_param_texture` to set animation offset properties. */
		const PARAM_ANIM_OFFSET: Parameter.PARAM_ANIM_OFFSET;

		/** Represents the size of the `Parameter` enum. */
		const PARAM_MAX: Parameter.PARAM_MAX;

		/** Use with `set_flag` to set `flag_align_y`. */
		const FLAG_ALIGN_Y_TO_VELOCITY: Flags.FLAG_ALIGN_Y_TO_VELOCITY;

		/** Use with `set_flag` to set `flag_rotate_y`. */
		const FLAG_ROTATE_Y: Flags.FLAG_ROTATE_Y;

		/** Use with `set_flag` to set `flag_disable_z`. */
		const FLAG_DISABLE_Z: Flags.FLAG_DISABLE_Z;

		/** Represents the size of the `Flags` enum. */
		const FLAG_MAX: Flags.FLAG_MAX;

		/** All particles will be emitted from a single point. */
		const EMISSION_SHAPE_POINT: EmissionShape.EMISSION_SHAPE_POINT;

		/** Particles will be emitted in the volume of a sphere. */
		const EMISSION_SHAPE_SPHERE: EmissionShape.EMISSION_SHAPE_SPHERE;

		/** Particles will be emitted in the volume of a box. */
		const EMISSION_SHAPE_BOX: EmissionShape.EMISSION_SHAPE_BOX;

		/** Particles will be emitted at a position determined by sampling a random point on the `emission_point_texture`. Particle color will be modulated by `emission_color_texture`. */
		const EMISSION_SHAPE_POINTS: EmissionShape.EMISSION_SHAPE_POINTS;

		/** Particles will be emitted at a position determined by sampling a random point on the `emission_point_texture`. Particle velocity and rotation will be set based on `emission_normal_texture`. Particle color will be modulated by `emission_color_texture`. */
		const EMISSION_SHAPE_DIRECTED_POINTS: EmissionShape.EMISSION_SHAPE_DIRECTED_POINTS;

		/** Represents the size of the `EmissionShape` enum. */
		const EMISSION_SHAPE_MAX: EmissionShape.EMISSION_SHAPE_MAX;
	}

	/** Contains a `Curve3D` path for `PathFollow` nodes to follow.
	 Can have `PathFollow` child nodes moving along the `Curve3D`. See `PathFollow` for more information on the usage.

	 Note that the path is considered as relative to the moved nodes (children of `PathFollow`). As such, the curve should usually start with a zero vector `(0, 0, 0)`. */
	class Path extends Spatial {

		/** A `Curve3D` describing the path. */
		curve: Curve3D;

		/** Getter of `curve` property */
		get_curve() : Curve3D;

		/** Setter of `curve` property */
		set_curve(p_value: Curve3D) : void;
	}
	namespace Path {

		/** Emitted when the `curve` changes. */
		const curve_changed: 'curve_changed';
	}

	/** Contains a `Curve2D` path for `PathFollow2D` nodes to follow.
	 Can have `PathFollow2D` child nodes moving along the `Curve2D`. See `PathFollow2D` for more information on usage.

	 **Note:** The path is considered as relative to the moved nodes (children of `PathFollow2D`). As such, the curve should usually start with a zero vector (`(0, 0)`). */
	class Path2D extends Node2D {

		/** A `Curve2D` describing the path. */
		curve: Curve2D;

		/**  */
		self_modulate: Color;

		/** Getter of `curve` property */
		get_curve() : Curve2D;

		/** Setter of `curve` property */
		set_curve(p_value: Curve2D) : void;

		/** Getter of `self_modulate` property */
		get_self_modulate() : Color;

		/** Setter of `self_modulate` property */
		set_self_modulate(p_value: Color) : void;
	}
	namespace Path2D {
	}

	/** Point sampler for a `Path`.
	 This node takes its parent `Path`, and returns the coordinates of a point within it, given a distance from the first vertex.

	 It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting an offset in this node. */
	class PathFollow extends Spatial {

		/** The distance from the first vertex, measured in 3D units along the path. This sets this node's position to a point within the path. */
		offset: number;

		/** The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length. */
		unit_offset: number;

		/** The node's offset along the curve. */
		h_offset: number;

		/** The node's offset perpendicular to the curve. */
		v_offset: number;

		/** Allows or forbids rotation on one or more axes, depending on the `RotationMode` constants being used. */
		rotation_mode: number;

		/** If `true`, the position between two cached points is interpolated cubically, and linearly otherwise.

		 The points along the `Curve3D` of the `Path` are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.

		 There are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations. */
		cubic_interp: boolean;

		/** If `true`, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths. */
		loop: boolean;

		/** Getter of `offset` property */
		get_offset() : number;

		/** Setter of `offset` property */
		set_offset(p_value: number) : void;

		/** Getter of `unit_offset` property */
		get_unit_offset() : number;

		/** Setter of `unit_offset` property */
		set_unit_offset(p_value: number) : void;

		/** Getter of `h_offset` property */
		get_h_offset() : number;

		/** Setter of `h_offset` property */
		set_h_offset(p_value: number) : void;

		/** Getter of `v_offset` property */
		get_v_offset() : number;

		/** Setter of `v_offset` property */
		set_v_offset(p_value: number) : void;

		/** Getter of `rotation_mode` property */
		get_rotation_mode() : number;

		/** Setter of `rotation_mode` property */
		set_rotation_mode(p_value: number) : void;

		/** Getter of `cubic_interp` property */
		get_cubic_interpolation() : boolean;

		/** Setter of `cubic_interp` property */
		set_cubic_interpolation(p_value: boolean) : void;

		/** Getter of `loop` property */
		has_loop() : boolean;

		/** Setter of `loop` property */
		set_loop(p_value: boolean) : void;
	}
	namespace PathFollow {
		enum RotationMode {
			/** Forbids the PathFollow to rotate. */
			ROTATION_NONE = 0,
			/** Allows the PathFollow to rotate in the Y axis only. */
			ROTATION_Y = 1,
			/** Allows the PathFollow to rotate in both the X, and Y axes. */
			ROTATION_XY = 2,
			/** Allows the PathFollow to rotate in any axis. */
			ROTATION_XYZ = 3,
			/** Uses the up vector information in a `Curve3D` to enforce orientation. This rotation mode requires the `Path`'s `Curve3D.up_vector_enabled` property to be set to `true`. */
			ROTATION_ORIENTED = 4,
		}

		/** Forbids the PathFollow to rotate. */
		const ROTATION_NONE: RotationMode.ROTATION_NONE;

		/** Allows the PathFollow to rotate in the Y axis only. */
		const ROTATION_Y: RotationMode.ROTATION_Y;

		/** Allows the PathFollow to rotate in both the X, and Y axes. */
		const ROTATION_XY: RotationMode.ROTATION_XY;

		/** Allows the PathFollow to rotate in any axis. */
		const ROTATION_XYZ: RotationMode.ROTATION_XYZ;

		/** Uses the up vector information in a `Curve3D` to enforce orientation. This rotation mode requires the `Path`'s `Curve3D.up_vector_enabled` property to be set to `true`. */
		const ROTATION_ORIENTED: RotationMode.ROTATION_ORIENTED;
	}

	/** Point sampler for a `Path2D`.
	 This node takes its parent `Path2D`, and returns the coordinates of a point within it, given a distance from the first vertex.

	 It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting an offset in this node. */
	//@ts-ignore
	class PathFollow2D extends Node2D {

		/** The distance along the path in pixels. */
		offset: number;

		/** The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the offset within the path, as the offset supplied is multiplied internally by the path's length. */
		unit_offset: number;

		/** The node's offset along the curve. */
		h_offset: number;

		/** The node's offset perpendicular to the curve. */
		v_offset: number;

		/** If `true`, this node rotates to follow the path, making its descendants rotate. */
		//@ts-ignore
		rotate: boolean;

		/** If `true`, the position between two cached points is interpolated cubically, and linearly otherwise.

		 The points along the `Curve2D` of the `Path2D` are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough.

		 There are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations. */
		cubic_interp: boolean;

		/** If `true`, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths. */
		loop: boolean;

		/** How far to look ahead of the curve to calculate the tangent if the node is rotating. E.g. shorter lookaheads will lead to faster rotations. */
		lookahead: number;

		/** Getter of `offset` property */
		get_offset() : number;

		/** Setter of `offset` property */
		set_offset(p_value: number) : void;

		/** Getter of `unit_offset` property */
		get_unit_offset() : number;

		/** Setter of `unit_offset` property */
		set_unit_offset(p_value: number) : void;

		/** Getter of `h_offset` property */
		get_h_offset() : number;

		/** Setter of `h_offset` property */
		set_h_offset(p_value: number) : void;

		/** Getter of `v_offset` property */
		get_v_offset() : number;

		/** Setter of `v_offset` property */
		set_v_offset(p_value: number) : void;

		/** Getter of `rotate` property */
		is_rotating() : boolean;

		/** Setter of `rotate` property */
		set_rotate(p_value: boolean) : void;

		/** Getter of `cubic_interp` property */
		get_cubic_interpolation() : boolean;

		/** Setter of `cubic_interp` property */
		set_cubic_interpolation(p_value: boolean) : void;

		/** Getter of `loop` property */
		has_loop() : boolean;

		/** Setter of `loop` property */
		set_loop(p_value: boolean) : void;

		/** Getter of `lookahead` property */
		get_lookahead() : number;

		/** Setter of `lookahead` property */
		set_lookahead(p_value: number) : void;
	}
	namespace PathFollow2D {
	}

	/** Exposes performance-related data.
	 This class provides access to a number of different monitors related to performance, such as memory usage, draw calls, and FPS. These are the same as the values displayed in the **Monitor** tab in the editor's **Debugger** panel. By using the `get_monitor` method of this class, you can access this data from your code.

	 **Note:** A few of these monitors are only available in debug mode and will always return 0 when used in a release build.

	 **Note:** Many of these monitors are not updated in real-time, so there may be a short delay between changes. */
	class Performance extends Object {

		/** Returns the value of one of the available monitors. You should provide one of the `Monitor` constants as the argument, like this:

		 ```gdscript
		 print(Performance.get_monitor(Performance.TIME_FPS)) # Prints the FPS to the console
		 ``` */
		static get_monitor(monitor: Performance.Monitor) : number;
	}
	namespace Performance {
		enum Monitor {
			/** Number of frames per second. */
			TIME_FPS = 0,
			/** Time it took to complete one frame, in seconds. */
			TIME_PROCESS = 1,
			/** Time it took to complete one physics frame, in seconds. */
			TIME_PHYSICS_PROCESS = 2,
			/** Static memory currently used, in bytes. Not available in release builds. */
			MEMORY_STATIC = 3,
			/** Dynamic memory currently used, in bytes. Not available in release builds. */
			MEMORY_DYNAMIC = 4,
			/** Available static memory. Not available in release builds. */
			MEMORY_STATIC_MAX = 5,
			/** Available dynamic memory. Not available in release builds. */
			MEMORY_DYNAMIC_MAX = 6,
			/** Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications. */
			MEMORY_MESSAGE_BUFFER_MAX = 7,
			/** Number of objects currently instanced (including nodes). */
			OBJECT_COUNT = 8,
			/** Number of resources currently used. */
			OBJECT_RESOURCE_COUNT = 9,
			/** Number of nodes currently instanced in the scene tree. This also includes the root node. */
			OBJECT_NODE_COUNT = 10,
			/** Number of orphan nodes, i.e. nodes which are not parented to a node of the scene tree. */
			OBJECT_ORPHAN_NODE_COUNT = 11,
			/** 3D objects drawn per frame. */
			RENDER_OBJECTS_IN_FRAME = 12,
			/** Vertices drawn per frame. 3D only. */
			RENDER_VERTICES_IN_FRAME = 13,
			/** Material changes per frame. 3D only. */
			RENDER_MATERIAL_CHANGES_IN_FRAME = 14,
			/** Shader changes per frame. 3D only. */
			RENDER_SHADER_CHANGES_IN_FRAME = 15,
			/** Render surface changes per frame. 3D only. */
			RENDER_SURFACE_CHANGES_IN_FRAME = 16,
			/** Draw calls per frame. 3D only. */
			RENDER_DRAW_CALLS_IN_FRAME = 17,
			/** Items or joined items drawn per frame. */
			RENDER_2D_ITEMS_IN_FRAME = 18,
			/** Draw calls per frame. */
			RENDER_2D_DRAW_CALLS_IN_FRAME = 19,
			/** The amount of video memory used, i.e. texture and vertex memory combined. */
			RENDER_VIDEO_MEM_USED = 20,
			/** The amount of texture memory used. */
			RENDER_TEXTURE_MEM_USED = 21,
			/** The amount of vertex memory used. */
			RENDER_VERTEX_MEM_USED = 22,
			/** Unimplemented in the GLES2 and GLES3 rendering backends, always returns 0. */
			RENDER_USAGE_VIDEO_MEM_TOTAL = 23,
			/** Number of active `RigidBody2D` nodes in the game. */
			PHYSICS_2D_ACTIVE_OBJECTS = 24,
			/** Number of collision pairs in the 2D physics engine. */
			PHYSICS_2D_COLLISION_PAIRS = 25,
			/** Number of islands in the 2D physics engine. */
			PHYSICS_2D_ISLAND_COUNT = 26,
			/** Number of active `RigidBody` and `VehicleBody` nodes in the game. */
			PHYSICS_3D_ACTIVE_OBJECTS = 27,
			/** Number of collision pairs in the 3D physics engine. */
			PHYSICS_3D_COLLISION_PAIRS = 28,
			/** Number of islands in the 3D physics engine. */
			PHYSICS_3D_ISLAND_COUNT = 29,
			/** Output latency of the `AudioServer`. */
			AUDIO_OUTPUT_LATENCY = 30,
			/** Represents the size of the `Monitor` enum. */
			MONITOR_MAX = 31,
		}

		/** Number of frames per second. */
		const TIME_FPS: Monitor.TIME_FPS;

		/** Time it took to complete one frame, in seconds. */
		const TIME_PROCESS: Monitor.TIME_PROCESS;

		/** Time it took to complete one physics frame, in seconds. */
		const TIME_PHYSICS_PROCESS: Monitor.TIME_PHYSICS_PROCESS;

		/** Static memory currently used, in bytes. Not available in release builds. */
		const MEMORY_STATIC: Monitor.MEMORY_STATIC;

		/** Dynamic memory currently used, in bytes. Not available in release builds. */
		const MEMORY_DYNAMIC: Monitor.MEMORY_DYNAMIC;

		/** Available static memory. Not available in release builds. */
		const MEMORY_STATIC_MAX: Monitor.MEMORY_STATIC_MAX;

		/** Available dynamic memory. Not available in release builds. */
		const MEMORY_DYNAMIC_MAX: Monitor.MEMORY_DYNAMIC_MAX;

		/** Largest amount of memory the message queue buffer has used, in bytes. The message queue is used for deferred functions calls and notifications. */
		const MEMORY_MESSAGE_BUFFER_MAX: Monitor.MEMORY_MESSAGE_BUFFER_MAX;

		/** Number of objects currently instanced (including nodes). */
		const OBJECT_COUNT: Monitor.OBJECT_COUNT;

		/** Number of resources currently used. */
		const OBJECT_RESOURCE_COUNT: Monitor.OBJECT_RESOURCE_COUNT;

		/** Number of nodes currently instanced in the scene tree. This also includes the root node. */
		const OBJECT_NODE_COUNT: Monitor.OBJECT_NODE_COUNT;

		/** Number of orphan nodes, i.e. nodes which are not parented to a node of the scene tree. */
		const OBJECT_ORPHAN_NODE_COUNT: Monitor.OBJECT_ORPHAN_NODE_COUNT;

		/** 3D objects drawn per frame. */
		const RENDER_OBJECTS_IN_FRAME: Monitor.RENDER_OBJECTS_IN_FRAME;

		/** Vertices drawn per frame. 3D only. */
		const RENDER_VERTICES_IN_FRAME: Monitor.RENDER_VERTICES_IN_FRAME;

		/** Material changes per frame. 3D only. */
		const RENDER_MATERIAL_CHANGES_IN_FRAME: Monitor.RENDER_MATERIAL_CHANGES_IN_FRAME;

		/** Shader changes per frame. 3D only. */
		const RENDER_SHADER_CHANGES_IN_FRAME: Monitor.RENDER_SHADER_CHANGES_IN_FRAME;

		/** Render surface changes per frame. 3D only. */
		const RENDER_SURFACE_CHANGES_IN_FRAME: Monitor.RENDER_SURFACE_CHANGES_IN_FRAME;

		/** Draw calls per frame. 3D only. */
		const RENDER_DRAW_CALLS_IN_FRAME: Monitor.RENDER_DRAW_CALLS_IN_FRAME;

		/** Items or joined items drawn per frame. */
		const RENDER_2D_ITEMS_IN_FRAME: Monitor.RENDER_2D_ITEMS_IN_FRAME;

		/** Draw calls per frame. */
		const RENDER_2D_DRAW_CALLS_IN_FRAME: Monitor.RENDER_2D_DRAW_CALLS_IN_FRAME;

		/** The amount of video memory used, i.e. texture and vertex memory combined. */
		const RENDER_VIDEO_MEM_USED: Monitor.RENDER_VIDEO_MEM_USED;

		/** The amount of texture memory used. */
		const RENDER_TEXTURE_MEM_USED: Monitor.RENDER_TEXTURE_MEM_USED;

		/** The amount of vertex memory used. */
		const RENDER_VERTEX_MEM_USED: Monitor.RENDER_VERTEX_MEM_USED;

		/** Unimplemented in the GLES2 and GLES3 rendering backends, always returns 0. */
		const RENDER_USAGE_VIDEO_MEM_TOTAL: Monitor.RENDER_USAGE_VIDEO_MEM_TOTAL;

		/** Number of active `RigidBody2D` nodes in the game. */
		const PHYSICS_2D_ACTIVE_OBJECTS: Monitor.PHYSICS_2D_ACTIVE_OBJECTS;

		/** Number of collision pairs in the 2D physics engine. */
		const PHYSICS_2D_COLLISION_PAIRS: Monitor.PHYSICS_2D_COLLISION_PAIRS;

		/** Number of islands in the 2D physics engine. */
		const PHYSICS_2D_ISLAND_COUNT: Monitor.PHYSICS_2D_ISLAND_COUNT;

		/** Number of active `RigidBody` and `VehicleBody` nodes in the game. */
		const PHYSICS_3D_ACTIVE_OBJECTS: Monitor.PHYSICS_3D_ACTIVE_OBJECTS;

		/** Number of collision pairs in the 3D physics engine. */
		const PHYSICS_3D_COLLISION_PAIRS: Monitor.PHYSICS_3D_COLLISION_PAIRS;

		/** Number of islands in the 3D physics engine. */
		const PHYSICS_3D_ISLAND_COUNT: Monitor.PHYSICS_3D_ISLAND_COUNT;

		/** Output latency of the `AudioServer`. */
		const AUDIO_OUTPUT_LATENCY: Monitor.AUDIO_OUTPUT_LATENCY;

		/** Represents the size of the `Monitor` enum. */
		const MONITOR_MAX: Monitor.MONITOR_MAX;
	}

	/** 
	  */
	class PhysicalBone extends PhysicsBody {

		/**  */
		joint_type: number;

		/**  */
		joint_offset: Transform;

		/**  */
		body_offset: Transform;

		/**  */
		mass: number;

		/**  */
		weight: number;

		/**  */
		friction: number;

		/**  */
		bounce: number;

		/**  */
		gravity_scale: number;

		/**  */
		apply_central_impulse(impulse: Vector3) : void;

		/**  */
		apply_impulse(position: Vector3, impulse: Vector3) : void;

		/**  */
		is_static_body() : boolean;

		/**  */
		get_simulate_physics() : boolean;

		/**  */
		is_simulating_physics() : boolean;

		/**  */
		get_bone_id() : number;

		/** Getter of `joint_type` property */
		get_joint_type() : number;

		/** Setter of `joint_type` property */
		set_joint_type(p_value: number) : void;

		/** Getter of `joint_offset` property */
		get_joint_offset() : Transform;

		/** Setter of `joint_offset` property */
		set_joint_offset(p_value: Transform) : void;

		/** Getter of `body_offset` property */
		get_body_offset() : Transform;

		/** Setter of `body_offset` property */
		set_body_offset(p_value: Transform) : void;

		/** Getter of `mass` property */
		get_mass() : number;

		/** Setter of `mass` property */
		set_mass(p_value: number) : void;

		/** Getter of `weight` property */
		get_weight() : number;

		/** Setter of `weight` property */
		set_weight(p_value: number) : void;

		/** Getter of `friction` property */
		get_friction() : number;

		/** Setter of `friction` property */
		set_friction(p_value: number) : void;

		/** Getter of `bounce` property */
		get_bounce() : number;

		/** Setter of `bounce` property */
		set_bounce(p_value: number) : void;

		/** Getter of `gravity_scale` property */
		get_gravity_scale() : number;

		/** Setter of `gravity_scale` property */
		set_gravity_scale(p_value: number) : void;
	}
	namespace PhysicalBone {
		enum JointType {
			/**  */
			JOINT_TYPE_NONE = 0,
			/**  */
			JOINT_TYPE_PIN = 1,
			/**  */
			JOINT_TYPE_CONE = 2,
			/**  */
			JOINT_TYPE_HINGE = 3,
			/**  */
			JOINT_TYPE_SLIDER = 4,
			/**  */
			JOINT_TYPE_6DOF = 5,
		}

		/**  */
		const JOINT_TYPE_NONE: JointType.JOINT_TYPE_NONE;

		/**  */
		const JOINT_TYPE_PIN: JointType.JOINT_TYPE_PIN;

		/**  */
		const JOINT_TYPE_CONE: JointType.JOINT_TYPE_CONE;

		/**  */
		const JOINT_TYPE_HINGE: JointType.JOINT_TYPE_HINGE;

		/**  */
		const JOINT_TYPE_SLIDER: JointType.JOINT_TYPE_SLIDER;

		/**  */
		const JOINT_TYPE_6DOF: JointType.JOINT_TYPE_6DOF;
	}

	/** Direct access object to a physics body in the `Physics2DServer`.
	 Provides direct access to a physics body in the `Physics2DServer`, allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See `RigidBody2D._integrate_forces`. */
	class Physics2DDirectBodyState extends Object {

		/** The timestep (delta) used for the simulation. */
		step: number;

		/** The inverse of the mass of the body. */
		inverse_mass: number;

		/** The inverse of the inertia of the body. */
		inverse_inertia: number;

		/** The rate at which the body stops rotating, if there are not any other forces moving it. */
		total_angular_damp: number;

		/** The rate at which the body stops moving, if there are not any other forces moving it. */
		total_linear_damp: number;

		/** The total gravity vector being currently applied to this body. */
		total_gravity: Vector2;

		/** The body's rotational velocity. */
		angular_velocity: number;

		/** The body's linear velocity. */
		linear_velocity: Vector2;

		/** If `true`, this body is currently sleeping (not active). */
		sleeping: boolean;

		/** The body's transformation matrix. */
		transform: Transform2D;

		/** Adds a constant directional force without affecting rotation. */
		add_central_force(force: Vector2) : void;

		/** Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates. */
		add_force(offset: Vector2, force: Vector2) : void;

		/** Adds a constant rotational force. */
		add_torque(torque: number) : void;

		/** Applies a directional impulse without affecting rotation. */
		apply_central_impulse(impulse: Vector2) : void;

		/** Applies a rotational impulse to the body. */
		apply_torque_impulse(impulse: number) : void;

		/** Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The offset uses the rotation of the global coordinate system, but is centered at the object's origin. */
		apply_impulse(offset: Vector2, impulse: Vector2) : void;

		/** Returns the number of contacts this body has with other bodies.

		 **Note:** By default, this returns 0 unless bodies are configured to monitor contacts. See `RigidBody2D.contact_monitor`. */
		get_contact_count() : number;

		/** Returns the local position of the contact point. */
		get_contact_local_position(contact_idx: number) : Vector2;

		/** Returns the local normal at the contact point. */
		get_contact_local_normal(contact_idx: number) : Vector2;

		/** Returns the local shape index of the collision. */
		get_contact_local_shape(contact_idx: number) : number;

		/** Returns the collider's `RID`. */
		get_contact_collider(contact_idx: number) : RID;

		/** Returns the contact position in the collider. */
		get_contact_collider_position(contact_idx: number) : Vector2;

		/** Returns the collider's object id. */
		get_contact_collider_id(contact_idx: number) : number;

		/** Returns the collider object. This depends on how it was created (will return a scene node if such was used to create it). */
		get_contact_collider_object(contact_idx: number) : Object;

		/** Returns the collider's shape index. */
		get_contact_collider_shape(contact_idx: number) : number;

		/** Returns the collided shape's metadata. This metadata is different from `Object.get_meta`, and is set with `Physics2DServer.shape_set_data`. */
		get_contact_collider_shape_metadata(contact_idx: number) : any;

		/** Returns the linear velocity vector at the collider's contact point. */
		get_contact_collider_velocity_at_position(contact_idx: number) : Vector2;

		/** Calls the built-in force integration code. */
		integrate_forces() : void;

		/** Returns the current state of the space, useful for queries. */
		get_space_state() : Physics2DDirectSpaceState;

		/** Getter of `step` property */
		get_step() : number;

		/** Getter of `inverse_mass` property */
		get_inverse_mass() : number;

		/** Getter of `inverse_inertia` property */
		get_inverse_inertia() : number;

		/** Getter of `total_angular_damp` property */
		get_total_angular_damp() : number;

		/** Getter of `total_linear_damp` property */
		get_total_linear_damp() : number;

		/** Getter of `total_gravity` property */
		get_total_gravity() : Vector2;

		/** Getter of `angular_velocity` property */
		get_angular_velocity() : number;

		/** Setter of `angular_velocity` property */
		set_angular_velocity(p_value: number) : void;

		/** Getter of `linear_velocity` property */
		get_linear_velocity() : Vector2;

		/** Setter of `linear_velocity` property */
		set_linear_velocity(p_value: Vector2) : void;

		/** Getter of `sleeping` property */
		is_sleeping() : boolean;

		/** Setter of `sleeping` property */
		set_sleep_state(p_value: boolean) : void;

		/** Getter of `transform` property */
		get_transform() : Transform2D;

		/** Setter of `transform` property */
		set_transform(p_value: Transform2D) : void;
	}
	namespace Physics2DDirectBodyState {
	}

	/** Direct access object to a space in the `Physics2DServer`.
	 Direct access object to a space in the `Physics2DServer`. It's used mainly to do queries against objects and areas residing in a given space. */
	class Physics2DDirectSpaceState extends Object {

		/** Checks whether a point is inside any shape. The shapes the point is inside of are returned in an array containing dictionaries with the following fields:

		 `collider`: The colliding object.

		 `collider_id`: The colliding object's ID.

		 `metadata`: The intersecting shape's metadata. This metadata is different from `Object.get_meta`, and is set with `Physics2DServer.shape_set_data`.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape.

		 Additionally, the method can take an `exclude` array of objects or `RID`s that are to be excluded from collisions, a `collision_mask` bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with `PhysicsBody`s or `Area`s, respectively. */
		//@ts-ignore
		intersect_point(point: Vector2, max_results: number = 32, exclude: any[] = [  ], collision_layer: number = 2147483647, collide_with_bodies: boolean = true, collide_with_areas: boolean = false) : any[];

		/**  */
		//@ts-ignore
		intersect_point_on_canvas(point: Vector2, canvas_instance_id: number, max_results: number = 32, exclude: any[] = [  ], collision_layer: number = 2147483647, collide_with_bodies: boolean = true, collide_with_areas: boolean = false) : any[];

		/** Intersects a ray in a given space. The returned object is a dictionary with the following fields:

		 `collider`: The colliding object.

		 `collider_id`: The colliding object's ID.

		 `metadata`: The intersecting shape's metadata. This metadata is different from `Object.get_meta`, and is set with `Physics2DServer.shape_set_data`.

		 `normal`: The object's surface normal at the intersection point.

		 `position`: The intersection point.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape.

		 If the ray did not intersect anything, then an empty dictionary is returned instead.

		 Additionally, the method can take an `exclude` array of objects or `RID`s that are to be excluded from collisions, a `collision_mask` bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with `PhysicsBody`s or `Area`s, respectively. */
		//@ts-ignore
		intersect_ray(p_from: Vector2, to: Vector2, exclude: any[] = [  ], collision_layer: number = 2147483647, collide_with_bodies: boolean = true, collide_with_areas: boolean = false) : object;

		/** Checks the intersections of a shape, given through a `Physics2DShapeQueryParameters` object, against the space.

		 **Note:** This method does not take into account the `motion` property of the object. The intersected shapes are returned in an array containing dictionaries with the following fields:

		 `collider`: The colliding object.

		 `collider_id`: The colliding object's ID.

		 `metadata`: The intersecting shape's metadata. This metadata is different from `Object.get_meta`, and is set with `Physics2DServer.shape_set_data`.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape.

		 The number of intersections can be limited with the `max_results` parameter, to reduce the processing time. */
		//@ts-ignore
		intersect_shape(shape: Physics2DShapeQueryParameters, max_results: number = 32) : any[];

		/** Checks how far the shape can travel toward a point. If the shape can not move, the array will be empty.

		 **Note:** Both the shape and the motion are supplied through a `Physics2DShapeQueryParameters` object. The method will return an array with two floats between 0 and 1, both representing a fraction of `motion`. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be ``1, 1``. */
		cast_motion(shape: Physics2DShapeQueryParameters) : any[];

		/** Checks the intersections of a shape, given through a `Physics2DShapeQueryParameters` object, against the space. The resulting array contains a list of points where the shape intersects another. Like with `intersect_shape`, the number of returned results can be limited to save processing time. */
		//@ts-ignore
		collide_shape(shape: Physics2DShapeQueryParameters, max_results: number = 32) : any[];

		/** Checks the intersections of a shape, given through a `Physics2DShapeQueryParameters` object, against the space. If it collides with more than one shape, the nearest one is selected. If the shape did not intersect anything, then an empty dictionary is returned instead.

		 **Note:** This method does not take into account the `motion` property of the object. The returned object is a dictionary containing the following fields:

		 `collider_id`: The colliding object's ID.

		 `linear_velocity`: The colliding object's velocity `Vector2`. If the object is an `Area2D`, the result is `(0, 0)`.

		 `metadata`: The intersecting shape's metadata. This metadata is different from `Object.get_meta`, and is set with `Physics2DServer.shape_set_data`.

		 `normal`: The object's surface normal at the intersection point.

		 `point`: The intersection point.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape. */
		get_rest_info(shape: Physics2DShapeQueryParameters) : object;
	}
	namespace Physics2DDirectSpaceState {
	}

	/** Server interface for low-level 2D physics access.
	 Physics2DServer is the server responsible for all 2D physics. It can create many kinds of physics objects, but does not insert them on the node tree. */
	class Physics2DServer extends Object {

		/**  */
		static line_shape_create() : RID;

		/**  */
		static ray_shape_create() : RID;

		/**  */
		static segment_shape_create() : RID;

		/**  */
		static circle_shape_create() : RID;

		/**  */
		static rectangle_shape_create() : RID;

		/**  */
		static capsule_shape_create() : RID;

		/**  */
		static convex_polygon_shape_create() : RID;

		/**  */
		static concave_polygon_shape_create() : RID;

		/** Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created `shape_get_type`. */
		static shape_set_data(shape: RID, data: any) : void;

		/** Returns a shape's type (see `ShapeType`). */
		static shape_get_type(shape: RID) : number;

		/** Returns the shape data. */
		static shape_get_data(shape: RID) : any;

		/** Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with `area_set_space`, or to a body with `body_set_space`. */
		static space_create() : RID;

		/** Marks a space as active. It will not have an effect, unless it is assigned to an area or body. */
		static space_set_active(space: RID, active: boolean) : void;

		/** Returns whether the space is active. */
		static space_is_active(space: RID) : boolean;

		/** Sets the value for a space parameter. See `SpaceParameter` for a list of available parameters. */
		static space_set_param(space: RID, param: Physics2DServer.SpaceParameter, value: number) : void;

		/** Returns the value of a space parameter. */
		static space_get_param(space: RID, param: Physics2DServer.SpaceParameter) : number;

		/** Returns the state of a space, a `Physics2DDirectSpaceState`. This object can be used to make collision/intersection queries. */
		static space_get_direct_state(space: RID) : Physics2DDirectSpaceState;

		/** Creates an `Area2D`. */
		static area_create() : RID;

		/** Assigns a space to the area. */
		static area_set_space(area: RID, space: RID) : void;

		/** Returns the space assigned to the area. */
		static area_get_space(area: RID) : RID;

		/** Sets the space override mode for the area. See `AreaSpaceOverrideMode` for a list of available modes. */
		static area_set_space_override_mode(area: RID, mode: Physics2DServer.AreaSpaceOverrideMode) : void;

		/** Returns the space override mode for the area. */
		static area_get_space_override_mode(area: RID) : number;

		/** Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index. */
		//@ts-ignore
		static area_add_shape(area: RID, shape: RID, transform: Transform2D = Transform2D( 1, 0, 0, 1, 0, 0 ), disabled: boolean = false) : void;

		/** Substitutes a given area shape by another. The old shape is selected by its index, the new one by its `RID`. */
		static area_set_shape(area: RID, shape_idx: number, shape: RID) : void;

		/** Sets the transform matrix for an area shape. */
		static area_set_shape_transform(area: RID, shape_idx: number, transform: Transform2D) : void;

		/** Disables a given shape in an area. */
		static area_set_shape_disabled(area: RID, shape_idx: number, disabled: boolean) : void;

		/** Returns the number of shapes assigned to an area. */
		static area_get_shape_count(area: RID) : number;

		/** Returns the `RID` of the nth shape of an area. */
		static area_get_shape(area: RID, shape_idx: number) : RID;

		/** Returns the transform matrix of a shape within an area. */
		static area_get_shape_transform(area: RID, shape_idx: number) : Transform2D;

		/** Removes a shape from an area. It does not delete the shape, so it can be reassigned later. */
		static area_remove_shape(area: RID, shape_idx: number) : void;

		/** Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later. */
		static area_clear_shapes(area: RID) : void;

		/** Assigns the area to one or many physics layers. */
		static area_set_collision_layer(area: RID, layer: number) : void;

		/** Sets which physics layers the area will monitor. */
		static area_set_collision_mask(area: RID, mask: number) : void;

		/** Sets the value for an area parameter. See `AreaParameter` for a list of available parameters. */
		static area_set_param(area: RID, param: Physics2DServer.AreaParameter, value: any) : void;

		/** Sets the transform matrix for an area. */
		static area_set_transform(area: RID, transform: Transform2D) : void;

		/** Returns an area parameter value. See `AreaParameter` for a list of available parameters. */
		static area_get_param(area: RID, param: Physics2DServer.AreaParameter) : any;

		/** Returns the transform matrix for an area. */
		static area_get_transform(area: RID) : Transform2D;

		/** Assigns the area to a descendant of `Object`, so it can exist in the node tree. */
		static area_attach_object_instance_id(area: RID, id: number) : void;

		/** Gets the instance ID of the object the area is assigned to. */
		static area_get_object_instance_id(area: RID) : number;

		/**  */
		static area_attach_canvas_instance_id(area: RID, id: number) : void;

		/**  */
		static area_get_canvas_instance_id(area: RID) : number;

		/** Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:

		 1: `AREA_BODY_ADDED` or `AREA_BODY_REMOVED`, depending on whether the object entered or exited the area.

		 2: `RID` of the object that entered/exited the area.

		 3: Instance ID of the object that entered/exited the area.

		 4: The shape index of the object that entered/exited the area.

		 5: The shape index of the area where the object entered/exited. */
		static area_set_monitor_callback(area: RID, receiver: Object, method: string) : void;

		/**  */
		static area_set_area_monitor_callback(area: RID, receiver: Object, method: string) : void;

		/**  */
		static area_set_monitorable(area: RID, monitorable: boolean) : void;

		/** Creates a physics body. */
		static body_create() : RID;

		/** Assigns a space to the body (see `space_create`). */
		static body_set_space(body: RID, space: RID) : void;

		/** Returns the `RID` of the space assigned to a body. */
		static body_get_space(body: RID) : RID;

		/** Sets the body mode using one of the `BodyMode` constants. */
		static body_set_mode(body: RID, mode: Physics2DServer.BodyMode) : void;

		/** Returns the body mode. */
		static body_get_mode(body: RID) : number;

		/** Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index. */
		//@ts-ignore
		static body_add_shape(body: RID, shape: RID, transform: Transform2D = Transform2D( 1, 0, 0, 1, 0, 0 ), disabled: boolean = false) : void;

		/** Substitutes a given body shape by another. The old shape is selected by its index, the new one by its `RID`. */
		static body_set_shape(body: RID, shape_idx: number, shape: RID) : void;

		/** Sets the transform matrix for a body shape. */
		static body_set_shape_transform(body: RID, shape_idx: number, transform: Transform2D) : void;

		/** Sets metadata of a shape within a body. This metadata is different from `Object.set_meta`, and can be retrieved on shape queries. */
		static body_set_shape_metadata(body: RID, shape_idx: number, metadata: any) : void;

		/** Returns the number of shapes assigned to a body. */
		static body_get_shape_count(body: RID) : number;

		/** Returns the `RID` of the nth shape of a body. */
		static body_get_shape(body: RID, shape_idx: number) : RID;

		/** Returns the transform matrix of a body shape. */
		static body_get_shape_transform(body: RID, shape_idx: number) : Transform2D;

		/** Returns the metadata of a shape of a body. */
		static body_get_shape_metadata(body: RID, shape_idx: number) : any;

		/** Removes a shape from a body. The shape is not deleted, so it can be reused afterwards. */
		static body_remove_shape(body: RID, shape_idx: number) : void;

		/** Removes all shapes from a body. */
		static body_clear_shapes(body: RID) : void;

		/** Disables shape in body if `disable` is `true`. */
		static body_set_shape_disabled(body: RID, shape_idx: number, disabled: boolean) : void;

		/** Enables one way collision on body if `enable` is `true`. */
		static body_set_shape_as_one_way_collision(body: RID, shape_idx: number, enable: boolean, margin: number) : void;

		/** Assigns the area to a descendant of `Object`, so it can exist in the node tree. */
		static body_attach_object_instance_id(body: RID, id: number) : void;

		/** Gets the instance ID of the object the area is assigned to. */
		static body_get_object_instance_id(body: RID) : number;

		/**  */
		static body_attach_canvas_instance_id(body: RID, id: number) : void;

		/**  */
		static body_get_canvas_instance_id(body: RID) : number;

		/** Sets the continuous collision detection mode using one of the `CCDMode` constants.

		 Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. */
		static body_set_continuous_collision_detection_mode(body: RID, mode: Physics2DServer.CCDMode) : void;

		/** Returns the continuous collision detection mode. */
		static body_get_continuous_collision_detection_mode(body: RID) : number;

		/** Sets the physics layer or layers a body belongs to. */
		static body_set_collision_layer(body: RID, layer: number) : void;

		/** Returns the physics layer or layers a body belongs to. */
		static body_get_collision_layer(body: RID) : number;

		/** Sets the physics layer or layers a body can collide with. */
		static body_set_collision_mask(body: RID, mask: number) : void;

		/** Returns the physics layer or layers a body can collide with. */
		static body_get_collision_mask(body: RID) : number;

		/** Sets a body parameter. See `BodyParameter` for a list of available parameters. */
		static body_set_param(body: RID, param: Physics2DServer.BodyParameter, value: number) : void;

		/** Returns the value of a body parameter. See `BodyParameter` for a list of available parameters. */
		static body_get_param(body: RID, param: Physics2DServer.BodyParameter) : number;

		/** Sets a body state using one of the `BodyState` constants. */
		static body_set_state(body: RID, state: Physics2DServer.BodyState, value: any) : void;

		/** Returns a body state. */
		static body_get_state(body: RID, state: Physics2DServer.BodyState) : any;

		/**  */
		static body_apply_central_impulse(body: RID, impulse: Vector2) : void;

		/**  */
		static body_apply_torque_impulse(body: RID, impulse: number) : void;

		/** Adds a positioned impulse to the applied force and torque. Both the force and the offset from the body origin are in global coordinates. */
		static body_apply_impulse(body: RID, position: Vector2, impulse: Vector2) : void;

		/**  */
		static body_add_central_force(body: RID, force: Vector2) : void;

		/** Adds a positioned force to the applied force and torque. As with `body_apply_impulse`, both the force and the offset from the body origin are in global coordinates. A force differs from an impulse in that, while the two are forces, the impulse clears itself after being applied. */
		static body_add_force(body: RID, offset: Vector2, force: Vector2) : void;

		/**  */
		static body_add_torque(body: RID, torque: number) : void;

		/** Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior. */
		static body_set_axis_velocity(body: RID, axis_velocity: Vector2) : void;

		/** Adds a body to the list of bodies exempt from collisions. */
		static body_add_collision_exception(body: RID, excepted_body: RID) : void;

		/** Removes a body from the list of bodies exempt from collisions. */
		static body_remove_collision_exception(body: RID, excepted_body: RID) : void;

		/** Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0. */
		static body_set_max_contacts_reported(body: RID, amount: number) : void;

		/** Returns the maximum contacts that can be reported. See `body_set_max_contacts_reported`. */
		static body_get_max_contacts_reported(body: RID) : number;

		/** Sets whether a body uses a callback function to calculate its own physics (see `body_set_force_integration_callback`). */
		static body_set_omit_force_integration(body: RID, enable: boolean) : void;

		/** Returns whether a body uses a callback function to calculate its own physics (see `body_set_force_integration_callback`). */
		static body_is_omitting_force_integration(body: RID) : boolean;

		/** Sets the function used to calculate physics for an object, if that object allows it (see `body_set_omit_force_integration`). */
		//@ts-ignore
		static body_set_force_integration_callback(body: RID, receiver: Object, method: string, userdata: any = null) : void;

		/** Returns `true` if a collision would result from moving in the given direction from a given point in space. Margin increases the size of the shapes involved in the collision detection. `Physics2DTestMotionResult` can be passed to return additional information in. */
		//@ts-ignore
		static body_test_motion(body: RID, p_from: Transform2D, motion: Vector2, infinite_inertia: boolean, margin: number = 0.08, result: Physics2DTestMotionResult = null) : boolean;

		/** Returns the `Physics2DDirectBodyState` of the body. */
		static body_get_direct_state(body: RID) : Physics2DDirectBodyState;

		/** Sets a joint parameter. See `JointParam` for a list of available parameters. */
		static joint_set_param(joint: RID, param: Physics2DServer.JointParam, value: number) : void;

		/** Returns the value of a joint parameter. */
		static joint_get_param(joint: RID, param: Physics2DServer.JointParam) : number;

		/** Creates a pin joint between two bodies. If not specified, the second body is assumed to be the joint itself. */
		static pin_joint_create(anchor: Vector2, body_a: RID, body_b: RID) : RID;

		/** Creates a groove joint between two bodies. If not specified, the bodies are assumed to be the joint itself. */
		static groove_joint_create(groove1_a: Vector2, groove2_a: Vector2, anchor_b: Vector2, body_a: RID, body_b: RID) : RID;

		/** Creates a damped spring joint between two bodies. If not specified, the second body is assumed to be the joint itself. */
		static damped_spring_joint_create(anchor_a: Vector2, anchor_b: Vector2, body_a: RID, body_b: RID) : RID;

		/** Sets a damped spring joint parameter. See `DampedStringParam` for a list of available parameters. */
		static damped_string_joint_set_param(joint: RID, param: Physics2DServer.DampedStringParam, value: number) : void;

		/** Returns the value of a damped spring joint parameter. */
		static damped_string_joint_get_param(joint: RID, param: Physics2DServer.DampedStringParam) : number;

		/** Returns a joint's type (see `JointType`). */
		static joint_get_type(joint: RID) : number;

		/** Destroys any of the objects created by Physics2DServer. If the `RID` passed is not one of the objects that can be created by Physics2DServer, an error will be sent to the console. */
		static free_rid(rid: RID) : void;

		/** Activates or deactivates the 2D physics engine. */
		static set_active(active: boolean) : void;

		/** Returns information about the current state of the 2D physics engine. See `ProcessInfo` for a list of available states. */
		static get_process_info(process_info: Physics2DServer.ProcessInfo) : number;
	}
	namespace Physics2DServer {
		enum AreaBodyStatus {
			/** The value of the first parameter and area callback function receives, when an object enters one of its shapes. */
			AREA_BODY_ADDED = 0,
			/** The value of the first parameter and area callback function receives, when an object exits one of its shapes. */
			AREA_BODY_REMOVED = 1,
		}
		enum AreaParameter {
			/** Constant to set/get gravity strength in an area. */
			AREA_PARAM_GRAVITY = 0,
			/** Constant to set/get gravity vector/center in an area. */
			AREA_PARAM_GRAVITY_VECTOR = 1,
			/** Constant to set/get whether the gravity vector of an area is a direction, or a center point. */
			AREA_PARAM_GRAVITY_IS_POINT = 2,
			/** Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance. */
			AREA_PARAM_GRAVITY_DISTANCE_SCALE = 3,
			/** This constant was used to set/get the falloff factor for point gravity. It has been superseded by `AREA_PARAM_GRAVITY_DISTANCE_SCALE`. */
			AREA_PARAM_GRAVITY_POINT_ATTENUATION = 4,
			/** Constant to set/get the linear dampening factor of an area. */
			AREA_PARAM_LINEAR_DAMP = 5,
			/** Constant to set/get the angular dampening factor of an area. */
			AREA_PARAM_ANGULAR_DAMP = 6,
			/** Constant to set/get the priority (order of processing) of an area. */
			AREA_PARAM_PRIORITY = 7,
		}
		enum AreaSpaceOverrideMode {
			/** This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them. */
			AREA_SPACE_OVERRIDE_DISABLED = 0,
			/** This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects. */
			AREA_SPACE_OVERRIDE_COMBINE = 1,
			/** This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one. */
			AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2,
			/** This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas. */
			AREA_SPACE_OVERRIDE_REPLACE = 3,
			/** This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one. */
			AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4,
		}
		enum BodyMode {
			/** Constant for static bodies. */
			BODY_MODE_STATIC = 0,
			/** Constant for kinematic bodies. */
			BODY_MODE_KINEMATIC = 1,
			/** Constant for rigid bodies. */
			BODY_MODE_RIGID = 2,
			/** Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics. */
			BODY_MODE_CHARACTER = 3,
		}
		enum BodyParameter {
			/** Constant to set/get a body's bounce factor. */
			BODY_PARAM_BOUNCE = 0,
			/** Constant to set/get a body's friction. */
			BODY_PARAM_FRICTION = 1,
			/** Constant to set/get a body's mass. */
			BODY_PARAM_MASS = 2,
			/** Constant to set/get a body's inertia. */
			BODY_PARAM_INERTIA = 3,
			/** Constant to set/get a body's gravity multiplier. */
			BODY_PARAM_GRAVITY_SCALE = 4,
			/** Constant to set/get a body's linear dampening factor. */
			BODY_PARAM_LINEAR_DAMP = 5,
			/** Constant to set/get a body's angular dampening factor. */
			BODY_PARAM_ANGULAR_DAMP = 6,
			/** Represents the size of the `BodyParameter` enum. */
			BODY_PARAM_MAX = 7,
		}
		enum BodyState {
			/** Constant to set/get the current transform matrix of the body. */
			BODY_STATE_TRANSFORM = 0,
			/** Constant to set/get the current linear velocity of the body. */
			BODY_STATE_LINEAR_VELOCITY = 1,
			/** Constant to set/get the current angular velocity of the body. */
			BODY_STATE_ANGULAR_VELOCITY = 2,
			/** Constant to sleep/wake up a body, or to get whether it is sleeping. */
			BODY_STATE_SLEEPING = 3,
			/** Constant to set/get whether the body can sleep. */
			BODY_STATE_CAN_SLEEP = 4,
		}
		enum CCDMode {
			/** Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects. */
			CCD_MODE_DISABLED = 0,
			/** Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise. */
			CCD_MODE_CAST_RAY = 1,
			/** Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise. */
			CCD_MODE_CAST_SHAPE = 2,
		}
		enum DampedStringParam {
			/** Sets the resting length of the spring joint. The joint will always try to go to back this length when pulled apart. */
			DAMPED_STRING_REST_LENGTH = 0,
			/** Sets the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length. */
			DAMPED_STRING_STIFFNESS = 1,
			/** Sets the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping). */
			DAMPED_STRING_DAMPING = 2,
		}
		enum JointParam {
			/**  */
			JOINT_PARAM_BIAS = 0,
			/**  */
			JOINT_PARAM_MAX_BIAS = 1,
			/**  */
			JOINT_PARAM_MAX_FORCE = 2,
		}
		enum JointType {
			/** Constant to create pin joints. */
			JOINT_PIN = 0,
			/** Constant to create groove joints. */
			JOINT_GROOVE = 1,
			/** Constant to create damped spring joints. */
			JOINT_DAMPED_SPRING = 2,
		}
		enum ProcessInfo {
			/** Constant to get the number of objects that are not sleeping. */
			INFO_ACTIVE_OBJECTS = 0,
			/** Constant to get the number of possible collisions. */
			INFO_COLLISION_PAIRS = 1,
			/** Constant to get the number of space regions where a collision could occur. */
			INFO_ISLAND_COUNT = 2,
		}
		enum ShapeType {
			/** This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks. */
			SHAPE_LINE = 0,
			/**  */
			SHAPE_RAY = 1,
			/** This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections. */
			SHAPE_SEGMENT = 2,
			/** This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks. */
			SHAPE_CIRCLE = 3,
			/** This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks. */
			SHAPE_RECTANGLE = 4,
			/** This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks. */
			SHAPE_CAPSULE = 5,
			/** This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the `CollisionPolygon2D.polygon` property, polygons modified with `shape_set_data` do not verify that the points supplied form is a convex polygon. */
			SHAPE_CONVEX_POLYGON = 6,
			/** This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks. */
			SHAPE_CONCAVE_POLYGON = 7,
			/** This constant is used internally by the engine. Any attempt to create this kind of shape results in an error. */
			SHAPE_CUSTOM = 8,
		}
		enum SpaceParameter {
			/** Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated. */
			SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0,
			/** Constant to set/get the maximum distance a shape can be from another before they are considered separated. */
			SPACE_PARAM_CONTACT_MAX_SEPARATION = 1,
			/** Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision. */
			SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION = 2,
			/** Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
			SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 3,
			/** Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
			SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 4,
			/** Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time. */
			SPACE_PARAM_BODY_TIME_TO_SLEEP = 5,
			/** Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision. */
			SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS = 6,
			/**  */
			SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH = 7,
		}

		/** Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated. */
		const SPACE_PARAM_CONTACT_RECYCLE_RADIUS: SpaceParameter.SPACE_PARAM_CONTACT_RECYCLE_RADIUS;

		/** Constant to set/get the maximum distance a shape can be from another before they are considered separated. */
		const SPACE_PARAM_CONTACT_MAX_SEPARATION: SpaceParameter.SPACE_PARAM_CONTACT_MAX_SEPARATION;

		/** Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision. */
		const SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION: SpaceParameter.SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION;

		/** Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
		const SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD: SpaceParameter.SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD;

		/** Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
		const SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD: SpaceParameter.SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD;

		/** Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time. */
		const SPACE_PARAM_BODY_TIME_TO_SLEEP: SpaceParameter.SPACE_PARAM_BODY_TIME_TO_SLEEP;

		/** Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision. */
		const SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS: SpaceParameter.SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS;

		/**  */
		const SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH: SpaceParameter.SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH;

		/** This is the constant for creating line shapes. A line shape is an infinite line with an origin point, and a normal. Thus, it can be used for front/behind checks. */
		const SHAPE_LINE: ShapeType.SHAPE_LINE;

		/**  */
		const SHAPE_RAY: ShapeType.SHAPE_RAY;

		/** This is the constant for creating segment shapes. A segment shape is a line from a point A to a point B. It can be checked for intersections. */
		const SHAPE_SEGMENT: ShapeType.SHAPE_SEGMENT;

		/** This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks. */
		const SHAPE_CIRCLE: ShapeType.SHAPE_CIRCLE;

		/** This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks. */
		const SHAPE_RECTANGLE: ShapeType.SHAPE_RECTANGLE;

		/** This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks. */
		const SHAPE_CAPSULE: ShapeType.SHAPE_CAPSULE;

		/** This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks. Unlike the `CollisionPolygon2D.polygon` property, polygons modified with `shape_set_data` do not verify that the points supplied form is a convex polygon. */
		const SHAPE_CONVEX_POLYGON: ShapeType.SHAPE_CONVEX_POLYGON;

		/** This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks. */
		const SHAPE_CONCAVE_POLYGON: ShapeType.SHAPE_CONCAVE_POLYGON;

		/** This constant is used internally by the engine. Any attempt to create this kind of shape results in an error. */
		const SHAPE_CUSTOM: ShapeType.SHAPE_CUSTOM;

		/** Constant to set/get gravity strength in an area. */
		const AREA_PARAM_GRAVITY: AreaParameter.AREA_PARAM_GRAVITY;

		/** Constant to set/get gravity vector/center in an area. */
		const AREA_PARAM_GRAVITY_VECTOR: AreaParameter.AREA_PARAM_GRAVITY_VECTOR;

		/** Constant to set/get whether the gravity vector of an area is a direction, or a center point. */
		const AREA_PARAM_GRAVITY_IS_POINT: AreaParameter.AREA_PARAM_GRAVITY_IS_POINT;

		/** Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance. */
		const AREA_PARAM_GRAVITY_DISTANCE_SCALE: AreaParameter.AREA_PARAM_GRAVITY_DISTANCE_SCALE;

		/** This constant was used to set/get the falloff factor for point gravity. It has been superseded by `AREA_PARAM_GRAVITY_DISTANCE_SCALE`. */
		const AREA_PARAM_GRAVITY_POINT_ATTENUATION: AreaParameter.AREA_PARAM_GRAVITY_POINT_ATTENUATION;

		/** Constant to set/get the linear dampening factor of an area. */
		const AREA_PARAM_LINEAR_DAMP: AreaParameter.AREA_PARAM_LINEAR_DAMP;

		/** Constant to set/get the angular dampening factor of an area. */
		const AREA_PARAM_ANGULAR_DAMP: AreaParameter.AREA_PARAM_ANGULAR_DAMP;

		/** Constant to set/get the priority (order of processing) of an area. */
		const AREA_PARAM_PRIORITY: AreaParameter.AREA_PARAM_PRIORITY;

		/** This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them. */
		const AREA_SPACE_OVERRIDE_DISABLED: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_DISABLED;

		/** This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects. */
		const AREA_SPACE_OVERRIDE_COMBINE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_COMBINE;

		/** This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one. */
		const AREA_SPACE_OVERRIDE_COMBINE_REPLACE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_COMBINE_REPLACE;

		/** This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas. */
		const AREA_SPACE_OVERRIDE_REPLACE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_REPLACE;

		/** This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one. */
		const AREA_SPACE_OVERRIDE_REPLACE_COMBINE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_REPLACE_COMBINE;

		/** Constant for static bodies. */
		const BODY_MODE_STATIC: BodyMode.BODY_MODE_STATIC;

		/** Constant for kinematic bodies. */
		const BODY_MODE_KINEMATIC: BodyMode.BODY_MODE_KINEMATIC;

		/** Constant for rigid bodies. */
		const BODY_MODE_RIGID: BodyMode.BODY_MODE_RIGID;

		/** Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics. */
		const BODY_MODE_CHARACTER: BodyMode.BODY_MODE_CHARACTER;

		/** Constant to set/get a body's bounce factor. */
		const BODY_PARAM_BOUNCE: BodyParameter.BODY_PARAM_BOUNCE;

		/** Constant to set/get a body's friction. */
		const BODY_PARAM_FRICTION: BodyParameter.BODY_PARAM_FRICTION;

		/** Constant to set/get a body's mass. */
		const BODY_PARAM_MASS: BodyParameter.BODY_PARAM_MASS;

		/** Constant to set/get a body's inertia. */
		const BODY_PARAM_INERTIA: BodyParameter.BODY_PARAM_INERTIA;

		/** Constant to set/get a body's gravity multiplier. */
		const BODY_PARAM_GRAVITY_SCALE: BodyParameter.BODY_PARAM_GRAVITY_SCALE;

		/** Constant to set/get a body's linear dampening factor. */
		const BODY_PARAM_LINEAR_DAMP: BodyParameter.BODY_PARAM_LINEAR_DAMP;

		/** Constant to set/get a body's angular dampening factor. */
		const BODY_PARAM_ANGULAR_DAMP: BodyParameter.BODY_PARAM_ANGULAR_DAMP;

		/** Represents the size of the `BodyParameter` enum. */
		const BODY_PARAM_MAX: BodyParameter.BODY_PARAM_MAX;

		/** Constant to set/get the current transform matrix of the body. */
		const BODY_STATE_TRANSFORM: BodyState.BODY_STATE_TRANSFORM;

		/** Constant to set/get the current linear velocity of the body. */
		const BODY_STATE_LINEAR_VELOCITY: BodyState.BODY_STATE_LINEAR_VELOCITY;

		/** Constant to set/get the current angular velocity of the body. */
		const BODY_STATE_ANGULAR_VELOCITY: BodyState.BODY_STATE_ANGULAR_VELOCITY;

		/** Constant to sleep/wake up a body, or to get whether it is sleeping. */
		const BODY_STATE_SLEEPING: BodyState.BODY_STATE_SLEEPING;

		/** Constant to set/get whether the body can sleep. */
		const BODY_STATE_CAN_SLEEP: BodyState.BODY_STATE_CAN_SLEEP;

		/** Constant to create pin joints. */
		const JOINT_PIN: JointType.JOINT_PIN;

		/** Constant to create groove joints. */
		const JOINT_GROOVE: JointType.JOINT_GROOVE;

		/** Constant to create damped spring joints. */
		const JOINT_DAMPED_SPRING: JointType.JOINT_DAMPED_SPRING;

		/**  */
		const JOINT_PARAM_BIAS: JointParam.JOINT_PARAM_BIAS;

		/**  */
		const JOINT_PARAM_MAX_BIAS: JointParam.JOINT_PARAM_MAX_BIAS;

		/**  */
		const JOINT_PARAM_MAX_FORCE: JointParam.JOINT_PARAM_MAX_FORCE;

		/** Sets the resting length of the spring joint. The joint will always try to go to back this length when pulled apart. */
		const DAMPED_STRING_REST_LENGTH: DampedStringParam.DAMPED_STRING_REST_LENGTH;

		/** Sets the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length. */
		const DAMPED_STRING_STIFFNESS: DampedStringParam.DAMPED_STRING_STIFFNESS;

		/** Sets the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping). */
		const DAMPED_STRING_DAMPING: DampedStringParam.DAMPED_STRING_DAMPING;

		/** Disables continuous collision detection. This is the fastest way to detect body collisions, but can miss small, fast-moving objects. */
		const CCD_MODE_DISABLED: CCDMode.CCD_MODE_DISABLED;

		/** Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise. */
		const CCD_MODE_CAST_RAY: CCDMode.CCD_MODE_CAST_RAY;

		/** Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise. */
		const CCD_MODE_CAST_SHAPE: CCDMode.CCD_MODE_CAST_SHAPE;

		/** The value of the first parameter and area callback function receives, when an object enters one of its shapes. */
		const AREA_BODY_ADDED: AreaBodyStatus.AREA_BODY_ADDED;

		/** The value of the first parameter and area callback function receives, when an object exits one of its shapes. */
		const AREA_BODY_REMOVED: AreaBodyStatus.AREA_BODY_REMOVED;

		/** Constant to get the number of objects that are not sleeping. */
		const INFO_ACTIVE_OBJECTS: ProcessInfo.INFO_ACTIVE_OBJECTS;

		/** Constant to get the number of possible collisions. */
		const INFO_COLLISION_PAIRS: ProcessInfo.INFO_COLLISION_PAIRS;

		/** Constant to get the number of space regions where a collision could occur. */
		const INFO_ISLAND_COUNT: ProcessInfo.INFO_ISLAND_COUNT;
	}

	/** Parameters to be sent to a 2D shape physics query.
	 This class contains the shape and other parameters for 2D intersection/collision queries. See also `Physics2DShapeQueryResult`. */
	class Physics2DShapeQueryParameters extends Reference {

		/** The physics layer(s) the query will take into account (as a bitmask). */
		collision_layer: number;

		/** The list of objects or object `RID`s that will be excluded from collisions. */
		exclude: any[];

		/** The collision margin for the shape. */
		margin: number;

		/** The motion of the shape being queried for. */
		motion: Vector2;

		/** The queried shape's `RID`. See also `set_shape`. */
		shape_rid: RID;

		/** The queried shape's transform matrix. */
		transform: Transform2D;

		/** If `true`, the query will take `PhysicsBody2D`s into account. */
		collide_with_bodies: boolean;

		/** If `true`, the query will take `Area2D`s into account. */
		collide_with_areas: boolean;

		/** Sets the `Shape2D` that will be used for collision/intersection queries. */
		set_shape(shape: Resource) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `exclude` property */
		get_exclude() : any[];

		/** Setter of `exclude` property */
		set_exclude(p_value: any[]) : void;

		/** Getter of `margin` property */
		get_margin() : number;

		/** Setter of `margin` property */
		set_margin(p_value: number) : void;

		/** Getter of `motion` property */
		get_motion() : Vector2;

		/** Setter of `motion` property */
		set_motion(p_value: Vector2) : void;

		/** Getter of `shape_rid` property */
		get_shape_rid() : RID;

		/** Setter of `shape_rid` property */
		set_shape_rid(p_value: RID) : void;

		/** Getter of `transform` property */
		get_transform() : Transform2D;

		/** Setter of `transform` property */
		set_transform(p_value: Transform2D) : void;

		/** Getter of `collide_with_bodies` property */
		is_collide_with_bodies_enabled() : boolean;

		/** Setter of `collide_with_bodies` property */
		set_collide_with_bodies(p_value: boolean) : void;

		/** Getter of `collide_with_areas` property */
		is_collide_with_areas_enabled() : boolean;

		/** Setter of `collide_with_areas` property */
		set_collide_with_areas(p_value: boolean) : void;
	}
	namespace Physics2DShapeQueryParameters {
	}

	/** Result of a 2D shape query in `Physics2DServer`.
	 The result of a 2D shape query in `Physics2DServer`. See also `Physics2DShapeQueryParameters`. */
	class Physics2DShapeQueryResult extends Reference {

		/** Returns the number of objects that intersected with the shape. */
		get_result_count() : number;

		/** Returns the `RID` of the object that intersected with the shape at index `idx`. */
		get_result_rid(idx: number) : RID;

		/** Returns the instance ID of the `Object` that intersected with the shape at index `idx`. */
		get_result_object_id(idx: number) : number;

		/** Returns the `Object` that intersected with the shape at index `idx`. */
		get_result_object(idx: number) : Object;

		/** Returns the child index of the object's `Shape` that intersected with the shape at index `idx`. */
		get_result_object_shape(idx: number) : number;
	}
	namespace Physics2DShapeQueryResult {
	}

	/** 
	  */
	class Physics2DTestMotionResult extends Reference {

		/**  */
		motion: Vector2;

		/**  */
		motion_remainder: Vector2;

		/**  */
		collision_point: Vector2;

		/**  */
		collision_normal: Vector2;

		/**  */
		collider_velocity: Vector2;

		/**  */
		collider_id: number;

		/**  */
		collider_rid: RID;

		/**  */
		collider: Object;

		/**  */
		collider_shape: number;

		/** Getter of `motion` property */
		get_motion() : Vector2;

		/** Getter of `motion_remainder` property */
		get_motion_remainder() : Vector2;

		/** Getter of `collision_point` property */
		get_collision_point() : Vector2;

		/** Getter of `collision_normal` property */
		get_collision_normal() : Vector2;

		/** Getter of `collider_velocity` property */
		get_collider_velocity() : Vector2;

		/** Getter of `collider_id` property */
		get_collider_id() : number;

		/** Getter of `collider_rid` property */
		get_collider_rid() : RID;

		/** Getter of `collider` property */
		get_collider() : Object;

		/** Getter of `collider_shape` property */
		get_collider_shape() : number;
	}
	namespace Physics2DTestMotionResult {
	}

	/** Base class for all objects affected by physics in 3D space.
	 PhysicsBody is an abstract base class for implementing a physics body. All *Body types inherit from it. */
	class PhysicsBody extends CollisionObject {

		/** The physics layers this area is in.

		 Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the `collision_mask` property.

		 A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. */
		collision_layer: number;

		/** The physics layers this area scans for collisions. */
		collision_mask: number;

		/** Sets individual bits on the `collision_mask` bitmask. Use this if you only need to change one layer's value. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the `collision_mask`. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Sets individual bits on the `collision_layer` bitmask. Use this if you only need to change one layer's value. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the `collision_layer`. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Returns an array of nodes that were added as collision exceptions for this body. */
		get_collision_exceptions() : any[];

		/** Adds a body to the list of bodies that this body can't collide with. */
		add_collision_exception_with(body: Node) : void;

		/** Removes a body from the list of bodies that this body can't collide with. */
		remove_collision_exception_with(body: Node) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;
	}
	namespace PhysicsBody {
	}

	/** Base class for all objects affected by physics in 2D space.
	 PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it. */
	class PhysicsBody2D extends CollisionObject2D {

		/** Both `collision_layer` and `collision_mask`. Returns `collision_layer` when accessed. Updates `collision_layer` and `collision_mask` when modified. */
		layers: number;

		/** The physics layers this area is in.

		 Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the `collision_mask` property.

		 A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. */
		collision_layer: number;

		/** The physics layers this area scans for collisions. */
		collision_mask: number;

		/**  */
		input_pickable: boolean;

		/** Sets individual bits on the `collision_mask` bitmask. Use this if you only need to change one layer's value. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the `collision_mask`. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Sets individual bits on the `collision_layer` bitmask. Use this if you only need to change one layer's value. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the `collision_layer`. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Returns an array of nodes that were added as collision exceptions for this body. */
		get_collision_exceptions() : any[];

		/** Adds a body to the list of bodies that this body can't collide with. */
		add_collision_exception_with(body: Node) : void;

		/** Removes a body from the list of bodies that this body can't collide with. */
		remove_collision_exception_with(body: Node) : void;

		/** Getter of `layers` property */
		_get_layers() : number;

		/** Setter of `layers` property */
		_set_layers(p_value: number) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `input_pickable` property */
		is_pickable() : boolean;

		/** Setter of `input_pickable` property */
		set_pickable(p_value: boolean) : void;
	}
	namespace PhysicsBody2D {
	}

	/** Direct access object to a physics body in the `PhysicsServer`.
	 Provides direct access to a physics body in the `PhysicsServer`, allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See `RigidBody._integrate_forces`. */
	class PhysicsDirectBodyState extends Object {

		/** The timestep (delta) used for the simulation. */
		step: number;

		/** The inverse of the mass of the body. */
		inverse_mass: number;

		/** The rate at which the body stops rotating, if there are not any other forces moving it. */
		total_angular_damp: number;

		/** The rate at which the body stops moving, if there are not any other forces moving it. */
		total_linear_damp: number;

		/** The inverse of the inertia of the body. */
		inverse_inertia: Vector3;

		/** The total gravity vector being currently applied to this body. */
		total_gravity: Vector3;

		/**  */
		center_of_mass: Vector3;

		/**  */
		principal_inertia_axes: Basis;

		/** The body's rotational velocity. */
		angular_velocity: Vector3;

		/** The body's linear velocity. */
		linear_velocity: Vector3;

		/** If `true`, this body is currently sleeping (not active). */
		sleeping: boolean;

		/** The body's transformation matrix. */
		transform: Transform;

		/** Adds a constant directional force without affecting rotation.

		 This is equivalent to `add_force(force, Vector3(0,0,0))`. */
		add_central_force(force: Vector3) : void;

		/** Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates. */
		add_force(force: Vector3, position: Vector3) : void;

		/** Adds a constant rotational force without affecting position. */
		add_torque(torque: Vector3) : void;

		/** Applies a single directional impulse without affecting rotation.

		 This is equivalent to `apply_impulse(Vector3(0, 0, 0), impulse)`. */
		apply_central_impulse(j: Vector3) : void;

		/** Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin. */
		apply_impulse(position: Vector3, j: Vector3) : void;

		/** Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the vector `j` passed as parameter. */
		apply_torque_impulse(j: Vector3) : void;

		/** Returns the number of contacts this body has with other bodies.

		 **Note:** By default, this returns 0 unless bodies are configured to monitor contacts. See `RigidBody.contact_monitor`. */
		get_contact_count() : number;

		/** Returns the local position of the contact point. */
		get_contact_local_position(contact_idx: number) : Vector3;

		/** Returns the local normal at the contact point. */
		get_contact_local_normal(contact_idx: number) : Vector3;

		/** Impulse created by the contact. Only implemented for Bullet physics. */
		get_contact_impulse(contact_idx: number) : number;

		/** Returns the local shape index of the collision. */
		get_contact_local_shape(contact_idx: number) : number;

		/** Returns the collider's `RID`. */
		get_contact_collider(contact_idx: number) : RID;

		/** Returns the contact position in the collider. */
		get_contact_collider_position(contact_idx: number) : Vector3;

		/** Returns the collider's object id. */
		get_contact_collider_id(contact_idx: number) : number;

		/** Returns the collider object. */
		get_contact_collider_object(contact_idx: number) : Object;

		/** Returns the collider's shape index. */
		get_contact_collider_shape(contact_idx: number) : number;

		/** Returns the linear velocity vector at the collider's contact point. */
		get_contact_collider_velocity_at_position(contact_idx: number) : Vector3;

		/** Calls the built-in force integration code. */
		integrate_forces() : void;

		/** Returns the current state of the space, useful for queries. */
		get_space_state() : PhysicsDirectSpaceState;

		/** Getter of `step` property */
		get_step() : number;

		/** Getter of `inverse_mass` property */
		get_inverse_mass() : number;

		/** Getter of `total_angular_damp` property */
		get_total_angular_damp() : number;

		/** Getter of `total_linear_damp` property */
		get_total_linear_damp() : number;

		/** Getter of `inverse_inertia` property */
		get_inverse_inertia() : Vector3;

		/** Getter of `total_gravity` property */
		get_total_gravity() : Vector3;

		/** Getter of `center_of_mass` property */
		get_center_of_mass() : Vector3;

		/** Getter of `principal_inertia_axes` property */
		get_principal_inertia_axes() : Basis;

		/** Getter of `angular_velocity` property */
		get_angular_velocity() : Vector3;

		/** Setter of `angular_velocity` property */
		set_angular_velocity(p_value: Vector3) : void;

		/** Getter of `linear_velocity` property */
		get_linear_velocity() : Vector3;

		/** Setter of `linear_velocity` property */
		set_linear_velocity(p_value: Vector3) : void;

		/** Getter of `sleeping` property */
		is_sleeping() : boolean;

		/** Setter of `sleeping` property */
		set_sleep_state(p_value: boolean) : void;

		/** Getter of `transform` property */
		get_transform() : Transform;

		/** Setter of `transform` property */
		set_transform(p_value: Transform) : void;
	}
	namespace PhysicsDirectBodyState {
	}

	/** Direct access object to a space in the `PhysicsServer`.
	 Direct access object to a space in the `PhysicsServer`. It's used mainly to do queries against objects and areas residing in a given space. */
	class PhysicsDirectSpaceState extends Object {

		/** Intersects a ray in a given space. The returned object is a dictionary with the following fields:

		 `collider`: The colliding object.

		 `collider_id`: The colliding object's ID.

		 `normal`: The object's surface normal at the intersection point.

		 `position`: The intersection point.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape.

		 If the ray did not intersect anything, then an empty dictionary is returned instead.

		 Additionally, the method can take an `exclude` array of objects or `RID`s that are to be excluded from collisions, a `collision_mask` bitmask representing the physics layers to check in, or booleans to determine if the ray should collide with `PhysicsBody`s or `Area`s, respectively. */
		//@ts-ignore
		intersect_ray(p_from: Vector3, to: Vector3, exclude: any[] = [  ], collision_mask: number = 2147483647, collide_with_bodies: boolean = true, collide_with_areas: boolean = false) : object;

		/** Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters` object, against the space. The intersected shapes are returned in an array containing dictionaries with the following fields:

		 `collider`: The colliding object.

		 `collider_id`: The colliding object's ID.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape.

		 The number of intersections can be limited with the `max_results` parameter, to reduce the processing time. */
		//@ts-ignore
		intersect_shape(shape: PhysicsShapeQueryParameters, max_results: number = 32) : any[];

		/** Checks whether the shape can travel to a point. The method will return an array with two floats between 0 and 1, both representing a fraction of `motion`. The first is how far the shape can move without triggering a collision, and the second is the point at which a collision will occur. If no collision is detected, the returned array will be ``1, 1``.

		 If the shape can not move, the returned array will be ``0, 0`` under Bullet, and empty under GodotPhysics. */
		cast_motion(shape: PhysicsShapeQueryParameters, motion: Vector3) : any[];

		/** Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters` object, against the space. The resulting array contains a list of points where the shape intersects another. Like with `intersect_shape`, the number of returned results can be limited to save processing time. */
		//@ts-ignore
		collide_shape(shape: PhysicsShapeQueryParameters, max_results: number = 32) : any[];

		/** Checks the intersections of a shape, given through a `PhysicsShapeQueryParameters` object, against the space. If it collides with more than one shape, the nearest one is selected. The returned object is a dictionary containing the following fields:

		 `collider_id`: The colliding object's ID.

		 `linear_velocity`: The colliding object's velocity `Vector3`. If the object is an `Area`, the result is `(0, 0, 0)`.

		 `normal`: The object's surface normal at the intersection point.

		 `point`: The intersection point.

		 `rid`: The intersecting object's `RID`.

		 `shape`: The shape index of the colliding shape.

		 If the shape did not intersect anything, then an empty dictionary is returned instead. */
		get_rest_info(shape: PhysicsShapeQueryParameters) : object;
	}
	namespace PhysicsDirectSpaceState {
	}

	/** A material for physics properties.
	 Provides a means of modifying the collision properties of a `PhysicsBody`. */
	class PhysicsMaterial extends Resource {

		/** The body's friction. Values range from `0` (frictionless) to `1` (maximum friction). */
		friction: number;

		/** If `true`, the physics engine will use the friction of the object marked as "rough" when two objects collide. If `false`, the physics engine will use the lowest friction of all colliding objects instead. If `true` for both colliding objects, the physics engine will use the highest friction. */
		rough: boolean;

		/** The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness). */
		bounce: number;

		/** If `true`, subtracts the bounciness from the colliding object's bounciness instead of adding it. */
		absorbent: boolean;

		/** Getter of `friction` property */
		get_friction() : number;

		/** Setter of `friction` property */
		set_friction(p_value: number) : void;

		/** Getter of `rough` property */
		is_rough() : boolean;

		/** Setter of `rough` property */
		set_rough(p_value: boolean) : void;

		/** Getter of `bounce` property */
		get_bounce() : number;

		/** Setter of `bounce` property */
		set_bounce(p_value: number) : void;

		/** Getter of `absorbent` property */
		is_absorbent() : boolean;

		/** Setter of `absorbent` property */
		set_absorbent(p_value: boolean) : void;
	}
	namespace PhysicsMaterial {
	}

	/** Server interface for low-level physics access.
	 PhysicsServer is the server responsible for all 3D physics. It can create many kinds of physics objects, but does not insert them on the node tree. */
	class PhysicsServer extends Object {

		/** Creates a shape of a type from `ShapeType`. Does not assign it to a body or an area. To do so, you must use `area_set_shape` or `body_set_shape`. */
		static shape_create(type: PhysicsServer.ShapeType) : RID;

		/** Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created `shape_get_type`. */
		static shape_set_data(shape: RID, data: any) : void;

		/** Returns the type of shape (see `ShapeType` constants). */
		static shape_get_type(shape: RID) : number;

		/** Returns the shape data. */
		static shape_get_data(shape: RID) : any;

		/** Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with `area_set_space`, or to a body with `body_set_space`. */
		static space_create() : RID;

		/** Marks a space as active. It will not have an effect, unless it is assigned to an area or body. */
		static space_set_active(space: RID, active: boolean) : void;

		/** Returns whether the space is active. */
		static space_is_active(space: RID) : boolean;

		/** Sets the value for a space parameter. A list of available parameters is on the `SpaceParameter` constants. */
		static space_set_param(space: RID, param: PhysicsServer.SpaceParameter, value: number) : void;

		/** Returns the value of a space parameter. */
		static space_get_param(space: RID, param: PhysicsServer.SpaceParameter) : number;

		/** Returns the state of a space, a `PhysicsDirectSpaceState`. This object can be used to make collision/intersection queries. */
		static space_get_direct_state(space: RID) : PhysicsDirectSpaceState;

		/** Creates an `Area`. */
		static area_create() : RID;

		/** Assigns a space to the area. */
		static area_set_space(area: RID, space: RID) : void;

		/** Returns the space assigned to the area. */
		static area_get_space(area: RID) : RID;

		/** Sets the space override mode for the area. The modes are described in the `AreaSpaceOverrideMode` constants. */
		static area_set_space_override_mode(area: RID, mode: PhysicsServer.AreaSpaceOverrideMode) : void;

		/** Returns the space override mode for the area. */
		static area_get_space_override_mode(area: RID) : number;

		/** Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index. */
		//@ts-ignore
		static area_add_shape(area: RID, shape: RID, transform: Transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), disabled: boolean = false) : void;

		/** Substitutes a given area shape by another. The old shape is selected by its index, the new one by its `RID`. */
		static area_set_shape(area: RID, shape_idx: number, shape: RID) : void;

		/** Sets the transform matrix for an area shape. */
		static area_set_shape_transform(area: RID, shape_idx: number, transform: Transform) : void;

		/**  */
		static area_set_shape_disabled(area: RID, shape_idx: number, disabled: boolean) : void;

		/** Returns the number of shapes assigned to an area. */
		static area_get_shape_count(area: RID) : number;

		/** Returns the `RID` of the nth shape of an area. */
		static area_get_shape(area: RID, shape_idx: number) : RID;

		/** Returns the transform matrix of a shape within an area. */
		static area_get_shape_transform(area: RID, shape_idx: number) : Transform;

		/** Removes a shape from an area. It does not delete the shape, so it can be reassigned later. */
		static area_remove_shape(area: RID, shape_idx: number) : void;

		/** Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later. */
		static area_clear_shapes(area: RID) : void;

		/** Assigns the area to one or many physics layers. */
		static area_set_collision_layer(area: RID, layer: number) : void;

		/** Sets which physics layers the area will monitor. */
		static area_set_collision_mask(area: RID, mask: number) : void;

		/** Sets the value for an area parameter. A list of available parameters is on the `AreaParameter` constants. */
		static area_set_param(area: RID, param: PhysicsServer.AreaParameter, value: any) : void;

		/** Sets the transform matrix for an area. */
		static area_set_transform(area: RID, transform: Transform) : void;

		/** Returns an area parameter value. A list of available parameters is on the `AreaParameter` constants. */
		static area_get_param(area: RID, param: PhysicsServer.AreaParameter) : any;

		/** Returns the transform matrix for an area. */
		static area_get_transform(area: RID) : Transform;

		/** Assigns the area to a descendant of `Object`, so it can exist in the node tree. */
		static area_attach_object_instance_id(area: RID, id: number) : void;

		/** Gets the instance ID of the object the area is assigned to. */
		static area_get_object_instance_id(area: RID) : number;

		/** Sets the function to call when any body/area enters or exits the area. This callback will be called for any object interacting with the area, and takes five parameters:

		 1: `AREA_BODY_ADDED` or `AREA_BODY_REMOVED`, depending on whether the object entered or exited the area.

		 2: `RID` of the object that entered/exited the area.

		 3: Instance ID of the object that entered/exited the area.

		 4: The shape index of the object that entered/exited the area.

		 5: The shape index of the area where the object entered/exited. */
		static area_set_monitor_callback(area: RID, receiver: Object, method: string) : void;

		/**  */
		static area_set_area_monitor_callback(area: RID, receiver: Object, method: string) : void;

		/**  */
		static area_set_monitorable(area: RID, monitorable: boolean) : void;

		/** Sets object pickable with rays. */
		static area_set_ray_pickable(area: RID, enable: boolean) : void;

		/** If `true`, area collides with rays. */
		static area_is_ray_pickable(area: RID) : boolean;

		/** Creates a physics body. The first parameter can be any value from `BodyMode` constants, for the type of body created. Additionally, the body can be created in sleeping state to save processing time. */
		//@ts-ignore
		static body_create(mode: PhysicsServer.BodyMode = 2, init_sleeping: boolean = false) : RID;

		/** Assigns a space to the body (see `space_create`). */
		static body_set_space(body: RID, space: RID) : void;

		/** Returns the `RID` of the space assigned to a body. */
		static body_get_space(body: RID) : RID;

		/** Sets the body mode, from one of the `BodyMode` constants. */
		static body_set_mode(body: RID, mode: PhysicsServer.BodyMode) : void;

		/** Returns the body mode. */
		static body_get_mode(body: RID) : number;

		/** Sets the physics layer or layers a body belongs to. */
		static body_set_collision_layer(body: RID, layer: number) : void;

		/** Returns the physics layer or layers a body belongs to. */
		static body_get_collision_layer(body: RID) : number;

		/** Sets the physics layer or layers a body can collide with. */
		static body_set_collision_mask(body: RID, mask: number) : void;

		/** Returns the physics layer or layers a body can collide with.

		 - */
		static body_get_collision_mask(body: RID) : number;

		/** Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index. */
		//@ts-ignore
		static body_add_shape(body: RID, shape: RID, transform: Transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 ), disabled: boolean = false) : void;

		/** Substitutes a given body shape by another. The old shape is selected by its index, the new one by its `RID`. */
		static body_set_shape(body: RID, shape_idx: number, shape: RID) : void;

		/** Sets the transform matrix for a body shape. */
		static body_set_shape_transform(body: RID, shape_idx: number, transform: Transform) : void;

		/**  */
		static body_set_shape_disabled(body: RID, shape_idx: number, disabled: boolean) : void;

		/** Returns the number of shapes assigned to a body. */
		static body_get_shape_count(body: RID) : number;

		/** Returns the `RID` of the nth shape of a body. */
		static body_get_shape(body: RID, shape_idx: number) : RID;

		/** Returns the transform matrix of a body shape. */
		static body_get_shape_transform(body: RID, shape_idx: number) : Transform;

		/** Removes a shape from a body. The shape is not deleted, so it can be reused afterwards. */
		static body_remove_shape(body: RID, shape_idx: number) : void;

		/** Removes all shapes from a body. */
		static body_clear_shapes(body: RID) : void;

		/** Assigns the area to a descendant of `Object`, so it can exist in the node tree. */
		static body_attach_object_instance_id(body: RID, id: number) : void;

		/** Gets the instance ID of the object the area is assigned to. */
		static body_get_object_instance_id(body: RID) : number;

		/** If `true`, the continuous collision detection mode is enabled.

		 Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. */
		static body_set_enable_continuous_collision_detection(body: RID, enable: boolean) : void;

		/** If `true`, the continuous collision detection mode is enabled. */
		static body_is_continuous_collision_detection_enabled(body: RID) : boolean;

		/** Sets a body parameter. A list of available parameters is on the `BodyParameter` constants. */
		static body_set_param(body: RID, param: PhysicsServer.BodyParameter, value: number) : void;

		/** Returns the value of a body parameter. A list of available parameters is on the `BodyParameter` constants. */
		static body_get_param(body: RID, param: PhysicsServer.BodyParameter) : number;

		/**  */
		static body_set_kinematic_safe_margin(body: RID, margin: number) : void;

		/**  */
		static body_get_kinematic_safe_margin(body: RID) : number;

		/** Sets a body state (see `BodyState` constants). */
		static body_set_state(body: RID, state: PhysicsServer.BodyState, value: any) : void;

		/** Returns a body state. */
		static body_get_state(body: RID, state: PhysicsServer.BodyState) : any;

		/**  */
		static body_add_central_force(body: RID, force: Vector3) : void;

		/**  */
		static body_add_force(body: RID, force: Vector3, position: Vector3) : void;

		/**  */
		static body_add_torque(body: RID, torque: Vector3) : void;

		/**  */
		static body_apply_central_impulse(body: RID, impulse: Vector3) : void;

		/** Gives the body a push at a `position` in the direction of the `impulse`. */
		static body_apply_impulse(body: RID, position: Vector3, impulse: Vector3) : void;

		/** Gives the body a push to rotate it. */
		static body_apply_torque_impulse(body: RID, impulse: Vector3) : void;

		/** Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior. */
		static body_set_axis_velocity(body: RID, axis_velocity: Vector3) : void;

		/**  */
		static body_set_axis_lock(body: RID, axis: PhysicsServer.BodyAxis, lock: boolean) : void;

		/**  */
		static body_is_axis_locked(body: RID, axis: PhysicsServer.BodyAxis) : boolean;

		/** Adds a body to the list of bodies exempt from collisions. */
		static body_add_collision_exception(body: RID, excepted_body: RID) : void;

		/** Removes a body from the list of bodies exempt from collisions.

		 Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. */
		static body_remove_collision_exception(body: RID, excepted_body: RID) : void;

		/** Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0. */
		static body_set_max_contacts_reported(body: RID, amount: number) : void;

		/** Returns the maximum contacts that can be reported. See `body_set_max_contacts_reported`. */
		static body_get_max_contacts_reported(body: RID) : number;

		/** Sets whether a body uses a callback function to calculate its own physics (see `body_set_force_integration_callback`). */
		static body_set_omit_force_integration(body: RID, enable: boolean) : void;

		/** Returns whether a body uses a callback function to calculate its own physics (see `body_set_force_integration_callback`). */
		static body_is_omitting_force_integration(body: RID) : boolean;

		/** Sets the function used to calculate physics for an object, if that object allows it (see `body_set_omit_force_integration`). */
		//@ts-ignore
		static body_set_force_integration_callback(body: RID, receiver: Object, method: string, userdata: any = null) : void;

		/** Sets the body pickable with rays if `enabled` is set. */
		static body_set_ray_pickable(body: RID, enable: boolean) : void;

		/** If `true`, the body can be detected by rays. */
		static body_is_ray_pickable(body: RID) : boolean;

		/** Returns the `PhysicsDirectBodyState` of the body. */
		static body_get_direct_state(body: RID) : PhysicsDirectBodyState;

		/** Creates a `PinJoint`. */
		static joint_create_pin(body_A: RID, local_A: Vector3, body_B: RID, local_B: Vector3) : RID;

		/** Sets a pin_joint parameter (see `PinJointParam` constants). */
		static pin_joint_set_param(joint: RID, param: PhysicsServer.PinJointParam, value: number) : void;

		/** Gets a pin_joint parameter (see `PinJointParam` constants). */
		static pin_joint_get_param(joint: RID, param: PhysicsServer.PinJointParam) : number;

		/** Sets position of the joint in the local space of body a of the joint. */
		static pin_joint_set_local_a(joint: RID, local_A: Vector3) : void;

		/** Returns position of the joint in the local space of body a of the joint. */
		static pin_joint_get_local_a(joint: RID) : Vector3;

		/** Sets position of the joint in the local space of body b of the joint. */
		static pin_joint_set_local_b(joint: RID, local_B: Vector3) : void;

		/** Returns position of the joint in the local space of body b of the joint. */
		static pin_joint_get_local_b(joint: RID) : Vector3;

		/** Creates a `HingeJoint`. */
		static joint_create_hinge(body_A: RID, hinge_A: Transform, body_B: RID, hinge_B: Transform) : RID;

		/** Sets a hinge_joint parameter (see `HingeJointParam` constants). */
		static hinge_joint_set_param(joint: RID, param: PhysicsServer.HingeJointParam, value: number) : void;

		/** Gets a hinge_joint parameter (see `HingeJointParam`). */
		static hinge_joint_get_param(joint: RID, param: PhysicsServer.HingeJointParam) : number;

		/** Sets a hinge_joint flag (see `HingeJointFlag` constants). */
		static hinge_joint_set_flag(joint: RID, flag: PhysicsServer.HingeJointFlag, enabled: boolean) : void;

		/** Gets a hinge_joint flag (see `HingeJointFlag` constants). */
		static hinge_joint_get_flag(joint: RID, flag: PhysicsServer.HingeJointFlag) : boolean;

		/** Creates a `SliderJoint`. */
		static joint_create_slider(body_A: RID, local_ref_A: Transform, body_B: RID, local_ref_B: Transform) : RID;

		/** Gets a slider_joint parameter (see `SliderJointParam` constants). */
		static slider_joint_set_param(joint: RID, param: PhysicsServer.SliderJointParam, value: number) : void;

		/** Gets a slider_joint parameter (see `SliderJointParam` constants). */
		static slider_joint_get_param(joint: RID, param: PhysicsServer.SliderJointParam) : number;

		/** Creates a `ConeTwistJoint`. */
		static joint_create_cone_twist(body_A: RID, local_ref_A: Transform, body_B: RID, local_ref_B: Transform) : RID;

		/** Sets a cone_twist_joint parameter (see `ConeTwistJointParam` constants). */
		static cone_twist_joint_set_param(joint: RID, param: PhysicsServer.ConeTwistJointParam, value: number) : void;

		/** Gets a cone_twist_joint parameter (see `ConeTwistJointParam` constants). */
		static cone_twist_joint_get_param(joint: RID, param: PhysicsServer.ConeTwistJointParam) : number;

		/** Returns the type of the Joint. */
		static joint_get_type(joint: RID) : number;

		/** Sets the priority value of the Joint. */
		static joint_set_solver_priority(joint: RID, priority: number) : void;

		/** Gets the priority value of the Joint. */
		static joint_get_solver_priority(joint: RID) : number;

		/** Creates a `Generic6DOFJoint`. */
		static joint_create_generic_6dof(body_A: RID, local_ref_A: Transform, body_B: RID, local_ref_B: Transform) : RID;

		/** Sets a generic_6_DOF_joint parameter (see `G6DOFJointAxisParam` constants). */
		static generic_6dof_joint_set_param(joint: RID, axis: Vector3.Axis, param: PhysicsServer.G6DOFJointAxisParam, value: number) : void;

		/** Gets a generic_6_DOF_joint parameter (see `G6DOFJointAxisParam` constants). */
		static generic_6dof_joint_get_param(joint: RID, axis: Vector3.Axis, param: PhysicsServer.G6DOFJointAxisParam) : number;

		/** Sets a generic_6_DOF_joint flag (see `G6DOFJointAxisFlag` constants). */
		static generic_6dof_joint_set_flag(joint: RID, axis: Vector3.Axis, flag: PhysicsServer.G6DOFJointAxisFlag, enable: boolean) : void;

		/** Gets a generic_6_DOF_joint flag (see `G6DOFJointAxisFlag` constants). */
		static generic_6dof_joint_get_flag(joint: RID, axis: Vector3.Axis, flag: PhysicsServer.G6DOFJointAxisFlag) : boolean;

		/** Destroys any of the objects created by PhysicsServer. If the `RID` passed is not one of the objects that can be created by PhysicsServer, an error will be sent to the console. */
		static free_rid(rid: RID) : void;

		/** Activates or deactivates the 3D physics engine. */
		static set_active(active: boolean) : void;

		/** Returns an Info defined by the `ProcessInfo` input given. */
		static get_process_info(process_info: PhysicsServer.ProcessInfo) : number;
	}
	namespace PhysicsServer {
		enum AreaBodyStatus {
			/** The value of the first parameter and area callback function receives, when an object enters one of its shapes. */
			AREA_BODY_ADDED = 0,
			/** The value of the first parameter and area callback function receives, when an object exits one of its shapes. */
			AREA_BODY_REMOVED = 1,
		}
		enum AreaParameter {
			/** Constant to set/get gravity strength in an area. */
			AREA_PARAM_GRAVITY = 0,
			/** Constant to set/get gravity vector/center in an area. */
			AREA_PARAM_GRAVITY_VECTOR = 1,
			/** Constant to set/get whether the gravity vector of an area is a direction, or a center point. */
			AREA_PARAM_GRAVITY_IS_POINT = 2,
			/** Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance. */
			AREA_PARAM_GRAVITY_DISTANCE_SCALE = 3,
			/** This constant was used to set/get the falloff factor for point gravity. It has been superseded by `AREA_PARAM_GRAVITY_DISTANCE_SCALE`. */
			AREA_PARAM_GRAVITY_POINT_ATTENUATION = 4,
			/** Constant to set/get the linear dampening factor of an area. */
			AREA_PARAM_LINEAR_DAMP = 5,
			/** Constant to set/get the angular dampening factor of an area. */
			AREA_PARAM_ANGULAR_DAMP = 6,
			/** Constant to set/get the priority (order of processing) of an area. */
			AREA_PARAM_PRIORITY = 7,
		}
		enum AreaSpaceOverrideMode {
			/** This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them. */
			AREA_SPACE_OVERRIDE_DISABLED = 0,
			/** This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects. */
			AREA_SPACE_OVERRIDE_COMBINE = 1,
			/** This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one. */
			AREA_SPACE_OVERRIDE_COMBINE_REPLACE = 2,
			/** This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas. */
			AREA_SPACE_OVERRIDE_REPLACE = 3,
			/** This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one. */
			AREA_SPACE_OVERRIDE_REPLACE_COMBINE = 4,
		}
		enum BodyAxis {
			/**  */
			BODY_AXIS_LINEAR_X = 1,
			/**  */
			BODY_AXIS_LINEAR_Y = 2,
			/**  */
			BODY_AXIS_LINEAR_Z = 4,
			/**  */
			BODY_AXIS_ANGULAR_X = 8,
			/**  */
			BODY_AXIS_ANGULAR_Y = 16,
			/**  */
			BODY_AXIS_ANGULAR_Z = 32,
		}
		enum BodyMode {
			/** Constant for static bodies. */
			BODY_MODE_STATIC = 0,
			/** Constant for kinematic bodies. */
			BODY_MODE_KINEMATIC = 1,
			/** Constant for rigid bodies. */
			BODY_MODE_RIGID = 2,
			/** Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics. */
			BODY_MODE_CHARACTER = 3,
		}
		enum BodyParameter {
			/** Constant to set/get a body's bounce factor. */
			BODY_PARAM_BOUNCE = 0,
			/** Constant to set/get a body's friction. */
			BODY_PARAM_FRICTION = 1,
			/** Constant to set/get a body's mass. */
			BODY_PARAM_MASS = 2,
			/** Constant to set/get a body's gravity multiplier. */
			BODY_PARAM_GRAVITY_SCALE = 3,
			/** Constant to set/get a body's linear dampening factor. */
			BODY_PARAM_LINEAR_DAMP = 4,
			/** Constant to set/get a body's angular dampening factor. */
			BODY_PARAM_ANGULAR_DAMP = 5,
			/** Represents the size of the `BodyParameter` enum. */
			BODY_PARAM_MAX = 6,
		}
		enum BodyState {
			/** Constant to set/get the current transform matrix of the body. */
			BODY_STATE_TRANSFORM = 0,
			/** Constant to set/get the current linear velocity of the body. */
			BODY_STATE_LINEAR_VELOCITY = 1,
			/** Constant to set/get the current angular velocity of the body. */
			BODY_STATE_ANGULAR_VELOCITY = 2,
			/** Constant to sleep/wake up a body, or to get whether it is sleeping. */
			BODY_STATE_SLEEPING = 3,
			/** Constant to set/get whether the body can sleep. */
			BODY_STATE_CAN_SLEEP = 4,
		}
		enum ConeTwistJointParam {
			/** Swing is rotation from side to side, around the axis perpendicular to the twist axis.

			 The swing span defines, how much rotation will not get corrected allong the swing axis.

			 Could be defined as looseness in the `ConeTwistJoint`.

			 If below 0.05, this behavior is locked. */
			CONE_TWIST_JOINT_SWING_SPAN = 0,
			/** Twist is the rotation around the twist axis, this value defined how far the joint can twist.

			 Twist is locked if below 0.05. */
			CONE_TWIST_JOINT_TWIST_SPAN = 1,
			/** The speed with which the swing or twist will take place.

			 The higher, the faster. */
			CONE_TWIST_JOINT_BIAS = 2,
			/** The ease with which the Joint twists, if it's too low, it takes more force to twist the joint. */
			CONE_TWIST_JOINT_SOFTNESS = 3,
			/** Defines, how fast the swing- and twist-speed-difference on both sides gets synced. */
			CONE_TWIST_JOINT_RELAXATION = 4,
		}
		enum G6DOFJointAxisFlag {
			/** If `set` there is linear motion possible within the given limits. */
			G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT = 0,
			/** If `set` there is rotational motion possible. */
			G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT = 1,
			/** If `set` there is a rotational motor across these axes. */
			G6DOF_JOINT_FLAG_ENABLE_MOTOR = 4,
			/** If `set` there is a linear motor on this axis that targets a specific velocity. */
			G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR = 5,
		}
		enum G6DOFJointAxisParam {
			/** The minimum difference between the pivot points' axes. */
			G6DOF_JOINT_LINEAR_LOWER_LIMIT = 0,
			/** The maximum difference between the pivot points' axes. */
			G6DOF_JOINT_LINEAR_UPPER_LIMIT = 1,
			/** A factor that gets applied to the movement across the axes. The lower, the slower the movement. */
			G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS = 2,
			/** The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost. */
			G6DOF_JOINT_LINEAR_RESTITUTION = 3,
			/** The amount of damping that happens at the linear motion across the axes. */
			G6DOF_JOINT_LINEAR_DAMPING = 4,
			/** The velocity that the joint's linear motor will attempt to reach. */
			G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY = 5,
			/** The maximum force that the linear motor can apply while trying to reach the target velocity. */
			G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT = 6,
			/** The minimum rotation in negative direction to break loose and rotate around the axes. */
			G6DOF_JOINT_ANGULAR_LOWER_LIMIT = 10,
			/** The minimum rotation in positive direction to break loose and rotate around the axes. */
			G6DOF_JOINT_ANGULAR_UPPER_LIMIT = 11,
			/** A factor that gets multiplied onto all rotations across the axes. */
			G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS = 12,
			/** The amount of rotational damping across the axes. The lower, the more dampening occurs. */
			G6DOF_JOINT_ANGULAR_DAMPING = 13,
			/** The amount of rotational restitution across the axes. The lower, the more restitution occurs. */
			G6DOF_JOINT_ANGULAR_RESTITUTION = 14,
			/** The maximum amount of force that can occur, when rotating around the axes. */
			G6DOF_JOINT_ANGULAR_FORCE_LIMIT = 15,
			/** When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
			G6DOF_JOINT_ANGULAR_ERP = 16,
			/** Target speed for the motor at the axes. */
			G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY = 17,
			/** Maximum acceleration for the motor at the axes. */
			G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT = 18,
		}
		enum HingeJointFlag {
			/** If `true`, the Hinge has a maximum and a minimum rotation. */
			HINGE_JOINT_FLAG_USE_LIMIT = 0,
			/** If `true`, a motor turns the Hinge. */
			HINGE_JOINT_FLAG_ENABLE_MOTOR = 1,
		}
		enum HingeJointParam {
			/** The speed with which the two bodies get pulled together when they move in different directions. */
			HINGE_JOINT_BIAS = 0,
			/** The maximum rotation across the Hinge. */
			HINGE_JOINT_LIMIT_UPPER = 1,
			/** The minimum rotation across the Hinge. */
			HINGE_JOINT_LIMIT_LOWER = 2,
			/** The speed with which the rotation across the axis perpendicular to the hinge gets corrected. */
			HINGE_JOINT_LIMIT_BIAS = 3,
			/**  */
			HINGE_JOINT_LIMIT_SOFTNESS = 4,
			/** The lower this value, the more the rotation gets slowed down. */
			HINGE_JOINT_LIMIT_RELAXATION = 5,
			/** Target speed for the motor. */
			HINGE_JOINT_MOTOR_TARGET_VELOCITY = 6,
			/** Maximum acceleration for the motor. */
			HINGE_JOINT_MOTOR_MAX_IMPULSE = 7,
		}
		enum JointType {
			/** The `Joint` is a `PinJoint`. */
			JOINT_PIN = 0,
			/** The `Joint` is a `HingeJoint`. */
			JOINT_HINGE = 1,
			/** The `Joint` is a `SliderJoint`. */
			JOINT_SLIDER = 2,
			/** The `Joint` is a `ConeTwistJoint`. */
			JOINT_CONE_TWIST = 3,
			/** The `Joint` is a `Generic6DOFJoint`. */
			JOINT_6DOF = 4,
		}
		enum PinJointParam {
			/** The strength with which the pinned objects try to stay in positional relation to each other.

			 The higher, the stronger. */
			PIN_JOINT_BIAS = 0,
			/** The strength with which the pinned objects try to stay in velocity relation to each other.

			 The higher, the stronger. */
			PIN_JOINT_DAMPING = 1,
			/** If above 0, this value is the maximum value for an impulse that this Joint puts on its ends. */
			PIN_JOINT_IMPULSE_CLAMP = 2,
		}
		enum ProcessInfo {
			/** Constant to get the number of objects that are not sleeping. */
			INFO_ACTIVE_OBJECTS = 0,
			/** Constant to get the number of possible collisions. */
			INFO_COLLISION_PAIRS = 1,
			/** Constant to get the number of space regions where a collision could occur. */
			INFO_ISLAND_COUNT = 2,
		}
		enum ShapeType {
			/** The `Shape` is a `PlaneShape`. */
			SHAPE_PLANE = 0,
			/** The `Shape` is a `RayShape`. */
			SHAPE_RAY = 1,
			/** The `Shape` is a `SphereShape`. */
			SHAPE_SPHERE = 2,
			/** The `Shape` is a `BoxShape`. */
			SHAPE_BOX = 3,
			/** The `Shape` is a `CapsuleShape`. */
			SHAPE_CAPSULE = 4,
			/** The `Shape` is a `CylinderShape`. */
			SHAPE_CYLINDER = 5,
			/** The `Shape` is a `ConvexPolygonShape`. */
			SHAPE_CONVEX_POLYGON = 6,
			/** The `Shape` is a `ConcavePolygonShape`. */
			SHAPE_CONCAVE_POLYGON = 7,
			/** The `Shape` is a `HeightMapShape`. */
			SHAPE_HEIGHTMAP = 8,
			/** This constant is used internally by the engine. Any attempt to create this kind of shape results in an error. */
			SHAPE_CUSTOM = 9,
		}
		enum SliderJointParam {
			/** The maximum difference between the pivot points on their X axis before damping happens. */
			SLIDER_JOINT_LINEAR_LIMIT_UPPER = 0,
			/** The minimum difference between the pivot points on their X axis before damping happens. */
			SLIDER_JOINT_LINEAR_LIMIT_LOWER = 1,
			/** A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. */
			SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS = 2,
			/** The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost. */
			SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION = 3,
			/** The amount of damping once the slider limits are surpassed. */
			SLIDER_JOINT_LINEAR_LIMIT_DAMPING = 4,
			/** A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. */
			SLIDER_JOINT_LINEAR_MOTION_SOFTNESS = 5,
			/** The amount of restitution inside the slider limits. */
			SLIDER_JOINT_LINEAR_MOTION_RESTITUTION = 6,
			/** The amount of damping inside the slider limits. */
			SLIDER_JOINT_LINEAR_MOTION_DAMPING = 7,
			/** A factor applied to the movement across axes orthogonal to the slider. */
			SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS = 8,
			/** The amount of restitution when movement is across axes orthogonal to the slider. */
			SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION = 9,
			/** The amount of damping when movement is across axes orthogonal to the slider. */
			SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING = 10,
			/** The upper limit of rotation in the slider. */
			SLIDER_JOINT_ANGULAR_LIMIT_UPPER = 11,
			/** The lower limit of rotation in the slider. */
			SLIDER_JOINT_ANGULAR_LIMIT_LOWER = 12,
			/** A factor applied to the all rotation once the limit is surpassed. */
			SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS = 13,
			/** The amount of restitution of the rotation when the limit is surpassed. */
			SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION = 14,
			/** The amount of damping of the rotation when the limit is surpassed. */
			SLIDER_JOINT_ANGULAR_LIMIT_DAMPING = 15,
			/** A factor that gets applied to the all rotation in the limits. */
			SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS = 16,
			/** The amount of restitution of the rotation in the limits. */
			SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION = 17,
			/** The amount of damping of the rotation in the limits. */
			SLIDER_JOINT_ANGULAR_MOTION_DAMPING = 18,
			/** A factor that gets applied to the all rotation across axes orthogonal to the slider. */
			SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS = 19,
			/** The amount of restitution of the rotation across axes orthogonal to the slider. */
			SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION = 20,
			/** The amount of damping of the rotation across axes orthogonal to the slider. */
			SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING = 21,
			/** Represents the size of the `SliderJointParam` enum. */
			SLIDER_JOINT_MAX = 22,
		}
		enum SpaceParameter {
			/** Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated. */
			SPACE_PARAM_CONTACT_RECYCLE_RADIUS = 0,
			/** Constant to set/get the maximum distance a shape can be from another before they are considered separated. */
			SPACE_PARAM_CONTACT_MAX_SEPARATION = 1,
			/** Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision. */
			SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION = 2,
			/** Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
			SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD = 3,
			/** Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
			SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD = 4,
			/** Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time. */
			SPACE_PARAM_BODY_TIME_TO_SLEEP = 5,
			/**  */
			SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO = 6,
			/** Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision. */
			SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS = 7,
			/**  */
			SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH = 8,
		}

		/** The `Joint` is a `PinJoint`. */
		const JOINT_PIN: JointType.JOINT_PIN;

		/** The `Joint` is a `HingeJoint`. */
		const JOINT_HINGE: JointType.JOINT_HINGE;

		/** The `Joint` is a `SliderJoint`. */
		const JOINT_SLIDER: JointType.JOINT_SLIDER;

		/** The `Joint` is a `ConeTwistJoint`. */
		const JOINT_CONE_TWIST: JointType.JOINT_CONE_TWIST;

		/** The `Joint` is a `Generic6DOFJoint`. */
		const JOINT_6DOF: JointType.JOINT_6DOF;

		/** The strength with which the pinned objects try to stay in positional relation to each other.

		 The higher, the stronger. */
		const PIN_JOINT_BIAS: PinJointParam.PIN_JOINT_BIAS;

		/** The strength with which the pinned objects try to stay in velocity relation to each other.

		 The higher, the stronger. */
		const PIN_JOINT_DAMPING: PinJointParam.PIN_JOINT_DAMPING;

		/** If above 0, this value is the maximum value for an impulse that this Joint puts on its ends. */
		const PIN_JOINT_IMPULSE_CLAMP: PinJointParam.PIN_JOINT_IMPULSE_CLAMP;

		/** The speed with which the two bodies get pulled together when they move in different directions. */
		const HINGE_JOINT_BIAS: HingeJointParam.HINGE_JOINT_BIAS;

		/** The maximum rotation across the Hinge. */
		const HINGE_JOINT_LIMIT_UPPER: HingeJointParam.HINGE_JOINT_LIMIT_UPPER;

		/** The minimum rotation across the Hinge. */
		const HINGE_JOINT_LIMIT_LOWER: HingeJointParam.HINGE_JOINT_LIMIT_LOWER;

		/** The speed with which the rotation across the axis perpendicular to the hinge gets corrected. */
		const HINGE_JOINT_LIMIT_BIAS: HingeJointParam.HINGE_JOINT_LIMIT_BIAS;

		/**  */
		const HINGE_JOINT_LIMIT_SOFTNESS: HingeJointParam.HINGE_JOINT_LIMIT_SOFTNESS;

		/** The lower this value, the more the rotation gets slowed down. */
		const HINGE_JOINT_LIMIT_RELAXATION: HingeJointParam.HINGE_JOINT_LIMIT_RELAXATION;

		/** Target speed for the motor. */
		const HINGE_JOINT_MOTOR_TARGET_VELOCITY: HingeJointParam.HINGE_JOINT_MOTOR_TARGET_VELOCITY;

		/** Maximum acceleration for the motor. */
		const HINGE_JOINT_MOTOR_MAX_IMPULSE: HingeJointParam.HINGE_JOINT_MOTOR_MAX_IMPULSE;

		/** If `true`, the Hinge has a maximum and a minimum rotation. */
		const HINGE_JOINT_FLAG_USE_LIMIT: HingeJointFlag.HINGE_JOINT_FLAG_USE_LIMIT;

		/** If `true`, a motor turns the Hinge. */
		const HINGE_JOINT_FLAG_ENABLE_MOTOR: HingeJointFlag.HINGE_JOINT_FLAG_ENABLE_MOTOR;

		/** The maximum difference between the pivot points on their X axis before damping happens. */
		const SLIDER_JOINT_LINEAR_LIMIT_UPPER: SliderJointParam.SLIDER_JOINT_LINEAR_LIMIT_UPPER;

		/** The minimum difference between the pivot points on their X axis before damping happens. */
		const SLIDER_JOINT_LINEAR_LIMIT_LOWER: SliderJointParam.SLIDER_JOINT_LINEAR_LIMIT_LOWER;

		/** A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. */
		const SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS: SliderJointParam.SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS;

		/** The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost. */
		const SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION: SliderJointParam.SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION;

		/** The amount of damping once the slider limits are surpassed. */
		const SLIDER_JOINT_LINEAR_LIMIT_DAMPING: SliderJointParam.SLIDER_JOINT_LINEAR_LIMIT_DAMPING;

		/** A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. */
		const SLIDER_JOINT_LINEAR_MOTION_SOFTNESS: SliderJointParam.SLIDER_JOINT_LINEAR_MOTION_SOFTNESS;

		/** The amount of restitution inside the slider limits. */
		const SLIDER_JOINT_LINEAR_MOTION_RESTITUTION: SliderJointParam.SLIDER_JOINT_LINEAR_MOTION_RESTITUTION;

		/** The amount of damping inside the slider limits. */
		const SLIDER_JOINT_LINEAR_MOTION_DAMPING: SliderJointParam.SLIDER_JOINT_LINEAR_MOTION_DAMPING;

		/** A factor applied to the movement across axes orthogonal to the slider. */
		const SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS: SliderJointParam.SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS;

		/** The amount of restitution when movement is across axes orthogonal to the slider. */
		const SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION: SliderJointParam.SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION;

		/** The amount of damping when movement is across axes orthogonal to the slider. */
		const SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING: SliderJointParam.SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING;

		/** The upper limit of rotation in the slider. */
		const SLIDER_JOINT_ANGULAR_LIMIT_UPPER: SliderJointParam.SLIDER_JOINT_ANGULAR_LIMIT_UPPER;

		/** The lower limit of rotation in the slider. */
		const SLIDER_JOINT_ANGULAR_LIMIT_LOWER: SliderJointParam.SLIDER_JOINT_ANGULAR_LIMIT_LOWER;

		/** A factor applied to the all rotation once the limit is surpassed. */
		const SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS: SliderJointParam.SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS;

		/** The amount of restitution of the rotation when the limit is surpassed. */
		const SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION: SliderJointParam.SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION;

		/** The amount of damping of the rotation when the limit is surpassed. */
		const SLIDER_JOINT_ANGULAR_LIMIT_DAMPING: SliderJointParam.SLIDER_JOINT_ANGULAR_LIMIT_DAMPING;

		/** A factor that gets applied to the all rotation in the limits. */
		const SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS: SliderJointParam.SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS;

		/** The amount of restitution of the rotation in the limits. */
		const SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION: SliderJointParam.SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION;

		/** The amount of damping of the rotation in the limits. */
		const SLIDER_JOINT_ANGULAR_MOTION_DAMPING: SliderJointParam.SLIDER_JOINT_ANGULAR_MOTION_DAMPING;

		/** A factor that gets applied to the all rotation across axes orthogonal to the slider. */
		const SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS: SliderJointParam.SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS;

		/** The amount of restitution of the rotation across axes orthogonal to the slider. */
		const SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION: SliderJointParam.SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION;

		/** The amount of damping of the rotation across axes orthogonal to the slider. */
		const SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING: SliderJointParam.SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING;

		/** Represents the size of the `SliderJointParam` enum. */
		const SLIDER_JOINT_MAX: SliderJointParam.SLIDER_JOINT_MAX;

		/** Swing is rotation from side to side, around the axis perpendicular to the twist axis.

		 The swing span defines, how much rotation will not get corrected allong the swing axis.

		 Could be defined as looseness in the `ConeTwistJoint`.

		 If below 0.05, this behavior is locked. */
		const CONE_TWIST_JOINT_SWING_SPAN: ConeTwistJointParam.CONE_TWIST_JOINT_SWING_SPAN;

		/** Twist is the rotation around the twist axis, this value defined how far the joint can twist.

		 Twist is locked if below 0.05. */
		const CONE_TWIST_JOINT_TWIST_SPAN: ConeTwistJointParam.CONE_TWIST_JOINT_TWIST_SPAN;

		/** The speed with which the swing or twist will take place.

		 The higher, the faster. */
		const CONE_TWIST_JOINT_BIAS: ConeTwistJointParam.CONE_TWIST_JOINT_BIAS;

		/** The ease with which the Joint twists, if it's too low, it takes more force to twist the joint. */
		const CONE_TWIST_JOINT_SOFTNESS: ConeTwistJointParam.CONE_TWIST_JOINT_SOFTNESS;

		/** Defines, how fast the swing- and twist-speed-difference on both sides gets synced. */
		const CONE_TWIST_JOINT_RELAXATION: ConeTwistJointParam.CONE_TWIST_JOINT_RELAXATION;

		/** The minimum difference between the pivot points' axes. */
		const G6DOF_JOINT_LINEAR_LOWER_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_LOWER_LIMIT;

		/** The maximum difference between the pivot points' axes. */
		const G6DOF_JOINT_LINEAR_UPPER_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_UPPER_LIMIT;

		/** A factor that gets applied to the movement across the axes. The lower, the slower the movement. */
		const G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS;

		/** The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost. */
		const G6DOF_JOINT_LINEAR_RESTITUTION: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_RESTITUTION;

		/** The amount of damping that happens at the linear motion across the axes. */
		const G6DOF_JOINT_LINEAR_DAMPING: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_DAMPING;

		/** The velocity that the joint's linear motor will attempt to reach. */
		const G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY;

		/** The maximum force that the linear motor can apply while trying to reach the target velocity. */
		const G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT;

		/** The minimum rotation in negative direction to break loose and rotate around the axes. */
		const G6DOF_JOINT_ANGULAR_LOWER_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_LOWER_LIMIT;

		/** The minimum rotation in positive direction to break loose and rotate around the axes. */
		const G6DOF_JOINT_ANGULAR_UPPER_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_UPPER_LIMIT;

		/** A factor that gets multiplied onto all rotations across the axes. */
		const G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS;

		/** The amount of rotational damping across the axes. The lower, the more dampening occurs. */
		const G6DOF_JOINT_ANGULAR_DAMPING: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_DAMPING;

		/** The amount of rotational restitution across the axes. The lower, the more restitution occurs. */
		const G6DOF_JOINT_ANGULAR_RESTITUTION: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_RESTITUTION;

		/** The maximum amount of force that can occur, when rotating around the axes. */
		const G6DOF_JOINT_ANGULAR_FORCE_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_FORCE_LIMIT;

		/** When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. */
		const G6DOF_JOINT_ANGULAR_ERP: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_ERP;

		/** Target speed for the motor at the axes. */
		const G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY;

		/** Maximum acceleration for the motor at the axes. */
		const G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT: G6DOFJointAxisParam.G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT;

		/** If `set` there is linear motion possible within the given limits. */
		const G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT: G6DOFJointAxisFlag.G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT;

		/** If `set` there is rotational motion possible. */
		const G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT: G6DOFJointAxisFlag.G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT;

		/** If `set` there is a rotational motor across these axes. */
		const G6DOF_JOINT_FLAG_ENABLE_MOTOR: G6DOFJointAxisFlag.G6DOF_JOINT_FLAG_ENABLE_MOTOR;

		/** If `set` there is a linear motor on this axis that targets a specific velocity. */
		const G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR: G6DOFJointAxisFlag.G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR;

		/** The `Shape` is a `PlaneShape`. */
		const SHAPE_PLANE: ShapeType.SHAPE_PLANE;

		/** The `Shape` is a `RayShape`. */
		const SHAPE_RAY: ShapeType.SHAPE_RAY;

		/** The `Shape` is a `SphereShape`. */
		const SHAPE_SPHERE: ShapeType.SHAPE_SPHERE;

		/** The `Shape` is a `BoxShape`. */
		const SHAPE_BOX: ShapeType.SHAPE_BOX;

		/** The `Shape` is a `CapsuleShape`. */
		const SHAPE_CAPSULE: ShapeType.SHAPE_CAPSULE;

		/** The `Shape` is a `CylinderShape`. */
		const SHAPE_CYLINDER: ShapeType.SHAPE_CYLINDER;

		/** The `Shape` is a `ConvexPolygonShape`. */
		const SHAPE_CONVEX_POLYGON: ShapeType.SHAPE_CONVEX_POLYGON;

		/** The `Shape` is a `ConcavePolygonShape`. */
		const SHAPE_CONCAVE_POLYGON: ShapeType.SHAPE_CONCAVE_POLYGON;

		/** The `Shape` is a `HeightMapShape`. */
		const SHAPE_HEIGHTMAP: ShapeType.SHAPE_HEIGHTMAP;

		/** This constant is used internally by the engine. Any attempt to create this kind of shape results in an error. */
		const SHAPE_CUSTOM: ShapeType.SHAPE_CUSTOM;

		/** Constant to set/get gravity strength in an area. */
		const AREA_PARAM_GRAVITY: AreaParameter.AREA_PARAM_GRAVITY;

		/** Constant to set/get gravity vector/center in an area. */
		const AREA_PARAM_GRAVITY_VECTOR: AreaParameter.AREA_PARAM_GRAVITY_VECTOR;

		/** Constant to set/get whether the gravity vector of an area is a direction, or a center point. */
		const AREA_PARAM_GRAVITY_IS_POINT: AreaParameter.AREA_PARAM_GRAVITY_IS_POINT;

		/** Constant to set/get the falloff factor for point gravity of an area. The greater this value is, the faster the strength of gravity decreases with the square of distance. */
		const AREA_PARAM_GRAVITY_DISTANCE_SCALE: AreaParameter.AREA_PARAM_GRAVITY_DISTANCE_SCALE;

		/** This constant was used to set/get the falloff factor for point gravity. It has been superseded by `AREA_PARAM_GRAVITY_DISTANCE_SCALE`. */
		const AREA_PARAM_GRAVITY_POINT_ATTENUATION: AreaParameter.AREA_PARAM_GRAVITY_POINT_ATTENUATION;

		/** Constant to set/get the linear dampening factor of an area. */
		const AREA_PARAM_LINEAR_DAMP: AreaParameter.AREA_PARAM_LINEAR_DAMP;

		/** Constant to set/get the angular dampening factor of an area. */
		const AREA_PARAM_ANGULAR_DAMP: AreaParameter.AREA_PARAM_ANGULAR_DAMP;

		/** Constant to set/get the priority (order of processing) of an area. */
		const AREA_PARAM_PRIORITY: AreaParameter.AREA_PARAM_PRIORITY;

		/** This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them. */
		const AREA_SPACE_OVERRIDE_DISABLED: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_DISABLED;

		/** This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects. */
		const AREA_SPACE_OVERRIDE_COMBINE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_COMBINE;

		/** This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one. */
		const AREA_SPACE_OVERRIDE_COMBINE_REPLACE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_COMBINE_REPLACE;

		/** This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas. */
		const AREA_SPACE_OVERRIDE_REPLACE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_REPLACE;

		/** This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one. */
		const AREA_SPACE_OVERRIDE_REPLACE_COMBINE: AreaSpaceOverrideMode.AREA_SPACE_OVERRIDE_REPLACE_COMBINE;

		/** Constant for static bodies. */
		const BODY_MODE_STATIC: BodyMode.BODY_MODE_STATIC;

		/** Constant for kinematic bodies. */
		const BODY_MODE_KINEMATIC: BodyMode.BODY_MODE_KINEMATIC;

		/** Constant for rigid bodies. */
		const BODY_MODE_RIGID: BodyMode.BODY_MODE_RIGID;

		/** Constant for rigid bodies in character mode. In this mode, a body can not rotate, and only its linear velocity is affected by physics. */
		const BODY_MODE_CHARACTER: BodyMode.BODY_MODE_CHARACTER;

		/** Constant to set/get a body's bounce factor. */
		const BODY_PARAM_BOUNCE: BodyParameter.BODY_PARAM_BOUNCE;

		/** Constant to set/get a body's friction. */
		const BODY_PARAM_FRICTION: BodyParameter.BODY_PARAM_FRICTION;

		/** Constant to set/get a body's mass. */
		const BODY_PARAM_MASS: BodyParameter.BODY_PARAM_MASS;

		/** Constant to set/get a body's gravity multiplier. */
		const BODY_PARAM_GRAVITY_SCALE: BodyParameter.BODY_PARAM_GRAVITY_SCALE;

		/** Constant to set/get a body's linear dampening factor. */
		const BODY_PARAM_LINEAR_DAMP: BodyParameter.BODY_PARAM_LINEAR_DAMP;

		/** Constant to set/get a body's angular dampening factor. */
		const BODY_PARAM_ANGULAR_DAMP: BodyParameter.BODY_PARAM_ANGULAR_DAMP;

		/** Represents the size of the `BodyParameter` enum. */
		const BODY_PARAM_MAX: BodyParameter.BODY_PARAM_MAX;

		/** Constant to set/get the current transform matrix of the body. */
		const BODY_STATE_TRANSFORM: BodyState.BODY_STATE_TRANSFORM;

		/** Constant to set/get the current linear velocity of the body. */
		const BODY_STATE_LINEAR_VELOCITY: BodyState.BODY_STATE_LINEAR_VELOCITY;

		/** Constant to set/get the current angular velocity of the body. */
		const BODY_STATE_ANGULAR_VELOCITY: BodyState.BODY_STATE_ANGULAR_VELOCITY;

		/** Constant to sleep/wake up a body, or to get whether it is sleeping. */
		const BODY_STATE_SLEEPING: BodyState.BODY_STATE_SLEEPING;

		/** Constant to set/get whether the body can sleep. */
		const BODY_STATE_CAN_SLEEP: BodyState.BODY_STATE_CAN_SLEEP;

		/** The value of the first parameter and area callback function receives, when an object enters one of its shapes. */
		const AREA_BODY_ADDED: AreaBodyStatus.AREA_BODY_ADDED;

		/** The value of the first parameter and area callback function receives, when an object exits one of its shapes. */
		const AREA_BODY_REMOVED: AreaBodyStatus.AREA_BODY_REMOVED;

		/** Constant to get the number of objects that are not sleeping. */
		const INFO_ACTIVE_OBJECTS: ProcessInfo.INFO_ACTIVE_OBJECTS;

		/** Constant to get the number of possible collisions. */
		const INFO_COLLISION_PAIRS: ProcessInfo.INFO_COLLISION_PAIRS;

		/** Constant to get the number of space regions where a collision could occur. */
		const INFO_ISLAND_COUNT: ProcessInfo.INFO_ISLAND_COUNT;

		/** Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated. */
		const SPACE_PARAM_CONTACT_RECYCLE_RADIUS: SpaceParameter.SPACE_PARAM_CONTACT_RECYCLE_RADIUS;

		/** Constant to set/get the maximum distance a shape can be from another before they are considered separated. */
		const SPACE_PARAM_CONTACT_MAX_SEPARATION: SpaceParameter.SPACE_PARAM_CONTACT_MAX_SEPARATION;

		/** Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision. */
		const SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION: SpaceParameter.SPACE_PARAM_BODY_MAX_ALLOWED_PENETRATION;

		/** Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
		const SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD: SpaceParameter.SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD;

		/** Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. */
		const SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD: SpaceParameter.SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD;

		/** Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time. */
		const SPACE_PARAM_BODY_TIME_TO_SLEEP: SpaceParameter.SPACE_PARAM_BODY_TIME_TO_SLEEP;

		/**  */
		const SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO: SpaceParameter.SPACE_PARAM_BODY_ANGULAR_VELOCITY_DAMP_RATIO;

		/** Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision. */
		const SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS: SpaceParameter.SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS;

		/**  */
		const SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH: SpaceParameter.SPACE_PARAM_TEST_MOTION_MIN_CONTACT_DEPTH;

		/**  */
		const BODY_AXIS_LINEAR_X: BodyAxis.BODY_AXIS_LINEAR_X;

		/**  */
		const BODY_AXIS_LINEAR_Y: BodyAxis.BODY_AXIS_LINEAR_Y;

		/**  */
		const BODY_AXIS_LINEAR_Z: BodyAxis.BODY_AXIS_LINEAR_Z;

		/**  */
		const BODY_AXIS_ANGULAR_X: BodyAxis.BODY_AXIS_ANGULAR_X;

		/**  */
		const BODY_AXIS_ANGULAR_Y: BodyAxis.BODY_AXIS_ANGULAR_Y;

		/**  */
		const BODY_AXIS_ANGULAR_Z: BodyAxis.BODY_AXIS_ANGULAR_Z;
	}

	/** Parameters to be sent to a 3D shape physics query.
	 This class contains the shape and other parameters for 3D intersection/collision queries. See also `PhysicsShapeQueryResult`. */
	class PhysicsShapeQueryParameters extends Reference {

		/** The physics layer(s) the query will take into account (as a bitmask). */
		collision_mask: number;

		/** The list of objects or object `RID`s that will be excluded from collisions. */
		exclude: any[];

		/** The collision margin for the shape. */
		margin: number;

		/** The queried shape's `RID`. See also `set_shape`. */
		shape_rid: RID;

		/** The queried shape's transform matrix. */
		transform: Transform;

		/** If `true`, the query will take `PhysicsBody`s into account. */
		collide_with_bodies: boolean;

		/** If `true`, the query will take `Area`s into account. */
		collide_with_areas: boolean;

		/** Sets the `Shape` that will be used for collision/intersection queries. */
		set_shape(shape: Resource) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `exclude` property */
		get_exclude() : any[];

		/** Setter of `exclude` property */
		set_exclude(p_value: any[]) : void;

		/** Getter of `margin` property */
		get_margin() : number;

		/** Setter of `margin` property */
		set_margin(p_value: number) : void;

		/** Getter of `shape_rid` property */
		get_shape_rid() : RID;

		/** Setter of `shape_rid` property */
		set_shape_rid(p_value: RID) : void;

		/** Getter of `transform` property */
		get_transform() : Transform;

		/** Setter of `transform` property */
		set_transform(p_value: Transform) : void;

		/** Getter of `collide_with_bodies` property */
		is_collide_with_bodies_enabled() : boolean;

		/** Setter of `collide_with_bodies` property */
		set_collide_with_bodies(p_value: boolean) : void;

		/** Getter of `collide_with_areas` property */
		is_collide_with_areas_enabled() : boolean;

		/** Setter of `collide_with_areas` property */
		set_collide_with_areas(p_value: boolean) : void;
	}
	namespace PhysicsShapeQueryParameters {
	}

	/** Result of a 3D shape query in `PhysicsServer`.
	 The result of a 3D shape query in `PhysicsServer`. See also `PhysicsShapeQueryParameters`. */
	class PhysicsShapeQueryResult extends Reference {

		/** Returns the number of objects that intersected with the shape. */
		get_result_count() : number;

		/** Returns the `RID` of the object that intersected with the shape at index `idx`. */
		get_result_rid(idx: number) : RID;

		/** Returns the instance ID of the `Object` that intersected with the shape at index `idx`. */
		get_result_object_id(idx: number) : number;

		/** Returns the `Object` that intersected with the shape at index `idx`. */
		get_result_object(idx: number) : Object;

		/** Returns the child index of the object's `Shape` that intersected with the shape at index `idx`. */
		get_result_object_shape(idx: number) : number;
	}
	namespace PhysicsShapeQueryResult {
	}

	/** Pin joint for 3D shapes.
	 Pin joint for 3D rigid bodies. It pins 2 bodies (rigid or static) together. */
	class PinJoint extends Joint {

		/** The force with which the pinned objects stay in positional relation to each other. The higher, the stronger. */
		'params/bias': number;

		/** The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger. */
		'params/damping': number;

		/** If above 0, this value is the maximum value for an impulse that this Joint produces. */
		'params/impulse_clamp': number;

		/** Sets the value of the specified parameter. */
		set_param(param: PinJoint.Param, value: number) : void;

		/** Returns the value of the specified parameter. */
		get_param(param: PinJoint.Param) : number;

		/** Getter of `params/bias` property */
		get_param() : number;

		/** Setter of `params/bias` property */
		set_param(p_value: number) : void;

		/** Getter of `params/damping` property */
		get_param() : number;

		/** Setter of `params/damping` property */
		set_param(p_value: number) : void;

		/** Getter of `params/impulse_clamp` property */
		get_param() : number;

		/** Setter of `params/impulse_clamp` property */
		set_param(p_value: number) : void;
	}
	namespace PinJoint {
		enum Param {
			/** The force with which the pinned objects stay in positional relation to each other. The higher, the stronger. */
			PARAM_BIAS = 0,
			/** The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger. */
			PARAM_DAMPING = 1,
			/** If above 0, this value is the maximum value for an impulse that this Joint produces. */
			PARAM_IMPULSE_CLAMP = 2,
		}

		/** The force with which the pinned objects stay in positional relation to each other. The higher, the stronger. */
		const PARAM_BIAS: Param.PARAM_BIAS;

		/** The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger. */
		const PARAM_DAMPING: Param.PARAM_DAMPING;

		/** If above 0, this value is the maximum value for an impulse that this Joint produces. */
		const PARAM_IMPULSE_CLAMP: Param.PARAM_IMPULSE_CLAMP;
	}

	/** Pin Joint for 2D shapes.
	 Pin Joint for 2D rigid bodies. It pins two bodies (rigid or static) together. */
	class PinJoint2D extends Joint2D {

		/** The higher this value, the more the bond to the pinned partner can flex. */
		softness: number;

		/** Getter of `softness` property */
		get_softness() : number;

		/** Setter of `softness` property */
		set_softness(p_value: number) : void;
	}
	namespace PinJoint2D {
	}

	/** Class representing a planar `PrimitiveMesh`.
	 Class representing a planar `PrimitiveMesh`. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Z axes; this default rotation isn't suited for use with billboarded materials. For billboarded materials, use `QuadMesh` instead. */
	class PlaneMesh extends PrimitiveMesh {

		/** Size of the generated plane. */
		size: Vector2;

		/** Number of subdivision along the X axis. */
		subdivide_width: number;

		/** Number of subdivision along the Z axis. */
		subdivide_depth: number;

		/** Getter of `size` property */
		get_size() : Vector2;

		/** Setter of `size` property */
		set_size(p_value: Vector2) : void;

		/** Getter of `subdivide_width` property */
		get_subdivide_width() : number;

		/** Setter of `subdivide_width` property */
		set_subdivide_width(p_value: number) : void;

		/** Getter of `subdivide_depth` property */
		get_subdivide_depth() : number;

		/** Setter of `subdivide_depth` property */
		set_subdivide_depth(p_value: number) : void;
	}
	namespace PlaneMesh {
	}

	/** Infinite plane shape for 3D collisions.
	 An infinite plane shape for 3D collisions. Note that the `Plane`'s normal matters; anything "below" the plane will collide with it. If the `PlaneShape` is used in a `PhysicsBody`, it will cause colliding objects placed "below" it to teleport "above" the plane. */
	class PlaneShape extends Shape {

		/** The `Plane` used by the `PlaneShape` for collision. */
		plane: Plane;

		/** Getter of `plane` property */
		get_plane() : Plane;

		/** Setter of `plane` property */
		set_plane(p_value: Plane) : void;
	}
	namespace PlaneShape {
	}

	/** 
	  */
	class PluginScript extends Script {

		/** Returns a new instance of the script. */
		'new'(...args) : any;
	}
	namespace PluginScript {
	}

	/** Mesh with a single Point primitive.
	 The PointMesh is made from a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with Particle systems, but can be used as a cheap way to render constant size billboarded sprites (for example in a point cloud).

	 PointMeshes, must be used with a material that has a point size. Point size can be accessed in a shader with `POINT_SIZE`, or in a `SpatialMaterial` by setting `SpatialMaterial.flags_use_point_size` and the variable `SpatialMaterial.params_point_size`.

	 When using PointMeshes, properties that normally alter vertices will be ignored, including billboard mode, grow, and cull face. */
	class PointMesh extends PrimitiveMesh {
	}
	namespace PointMesh {
	}

	/** A 2D polygon.
	 A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.

	 **Note:** By default, Godot can only draw up to 4,096 polygon points at a time. To increase this limit, open the Project Settings and increase `ProjectSettings.rendering/limits/buffers/canvas_polygon_buffer_size_kb` and `ProjectSettings.rendering/limits/buffers/canvas_polygon_index_buffer_size_kb`. */
	class Polygon2D extends Node2D {

		/** The polygon's fill color. If `texture` is defined, it will be multiplied by this color. It will also be the default color for vertices not set in `vertex_colors`. */
		color: Color;

		/** The offset applied to each vertex. */
		offset: Vector2;

		/** If `true`, polygon edges will be anti-aliased. */
		antialiased: boolean;

		/** The polygon's fill texture. Use `uv` to set texture coordinates. */
		texture: Texture;

		/** Amount to offset the polygon's `texture`. If `(0, 0)` the texture's origin (its top-left corner) will be placed at the polygon's `position`. */
		texture_offset: Vector2;

		/** Amount to multiply the `uv` coordinates when using a `texture`. Larger values make the texture smaller, and vice versa. */
		texture_scale: Vector2;

		/** The texture's rotation in degrees. */
		texture_rotation_degrees: number;

		/** The texture's rotation in radians. */
		texture_rotation: number;

		/**  */
		skeleton: string;

		/** If `true`, polygon will be inverted, containing the area outside the defined points and extending to the `invert_border`. */
		invert_enable: boolean;

		/** Added padding applied to the bounding box when using `invert`. Setting this value too small may result in a "Bad Polygon" error. */
		invert_border: number;

		/** The polygon's list of vertices. The final point will be connected to the first.

		 **Note:** This returns a copy of the `PoolVector2Array` rather than a reference. */
		polygon: PoolVector2Array;

		/** Texture coordinates for each vertex of the polygon. There should be one `uv` per polygon vertex. If there are fewer, undefined vertices will use `(0, 0)`. */
		uv: PoolVector2Array;

		/** Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use `color`. */
		vertex_colors: PoolColorArray;

		/**  */
		polygons: any[];

		/**  */
		bones: any[];

		/**  */
		internal_vertex_count: number;

		/** Adds a bone with the specified `path` and `weights`. */
		add_bone(path: string, weights: PoolRealArray) : void;

		/** Returns the number of bones in this `Polygon2D`. */
		get_bone_count() : number;

		/** Returns the path to the node associated with the specified bone. */
		get_bone_path(index: number) : string;

		/** Returns the height values of the specified bone. */
		get_bone_weights(index: number) : PoolRealArray;

		/** Removes the specified bone from this `Polygon2D`. */
		erase_bone(index: number) : void;

		/** Removes all bones from this `Polygon2D`. */
		clear_bones() : void;

		/** Sets the path to the node associated with the specified bone. */
		set_bone_path(index: number, path: string) : void;

		/** Sets the weight values for the specified bone. */
		set_bone_weights(index: number, weights: PoolRealArray) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `antialiased` property */
		get_antialiased() : boolean;

		/** Setter of `antialiased` property */
		set_antialiased(p_value: boolean) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `texture_offset` property */
		get_texture_offset() : Vector2;

		/** Setter of `texture_offset` property */
		set_texture_offset(p_value: Vector2) : void;

		/** Getter of `texture_scale` property */
		get_texture_scale() : Vector2;

		/** Setter of `texture_scale` property */
		set_texture_scale(p_value: Vector2) : void;

		/** Getter of `texture_rotation_degrees` property */
		get_texture_rotation_degrees() : number;

		/** Setter of `texture_rotation_degrees` property */
		set_texture_rotation_degrees(p_value: number) : void;

		/** Getter of `texture_rotation` property */
		get_texture_rotation() : number;

		/** Setter of `texture_rotation` property */
		set_texture_rotation(p_value: number) : void;

		/** Getter of `skeleton` property */
		get_skeleton() : string;

		/** Setter of `skeleton` property */
		set_skeleton(p_value: string) : void;

		/** Getter of `invert_enable` property */
		get_invert() : boolean;

		/** Setter of `invert_enable` property */
		set_invert(p_value: boolean) : void;

		/** Getter of `invert_border` property */
		get_invert_border() : number;

		/** Setter of `invert_border` property */
		set_invert_border(p_value: number) : void;

		/** Getter of `polygon` property */
		get_polygon() : PoolVector2Array;

		/** Setter of `polygon` property */
		set_polygon(p_value: PoolVector2Array) : void;

		/** Getter of `uv` property */
		get_uv() : PoolVector2Array;

		/** Setter of `uv` property */
		set_uv(p_value: PoolVector2Array) : void;

		/** Getter of `vertex_colors` property */
		get_vertex_colors() : PoolColorArray;

		/** Setter of `vertex_colors` property */
		set_vertex_colors(p_value: PoolColorArray) : void;

		/** Getter of `polygons` property */
		get_polygons() : any[];

		/** Setter of `polygons` property */
		set_polygons(p_value: any[]) : void;

		/** Getter of `bones` property */
		_get_bones() : any[];

		/** Setter of `bones` property */
		_set_bones(p_value: any[]) : void;

		/** Getter of `internal_vertex_count` property */
		get_internal_vertex_count() : number;

		/** Setter of `internal_vertex_count` property */
		set_internal_vertex_count(p_value: number) : void;
	}
	namespace Polygon2D {
	}

	/** 
	  */
	class PolygonPathFinder extends Resource {

		/**  */
		setup(points: PoolVector2Array, connections: PoolIntArray) : void;

		/**  */
		find_path(p_from: Vector2, to: Vector2) : PoolVector2Array;

		/**  */
		get_intersections(p_from: Vector2, to: Vector2) : PoolVector2Array;

		/**  */
		get_closest_point(point: Vector2) : Vector2;

		/**  */
		is_point_inside(point: Vector2) : boolean;

		/**  */
		set_point_penalty(idx: number, penalty: number) : void;

		/**  */
		get_point_penalty(idx: number) : number;

		/**  */
		get_bounds() : Rect2;
	}
	namespace PolygonPathFinder {
	}

	/** Base container control for popups and dialogs.
	 Popup is a base `Control` used to show dialogs and popups. It's a subwindow and modal by default (see `Control`) and has helpers for custom popup behavior. All popup methods ensure correct placement within the viewport. */
	class Popup extends Control {

		/** If `true`, the popup will not be hidden when a click event occurs outside of it, or when it receives the `ui_cancel` action event. */
		popup_exclusive: boolean;

		/**  */
		visible: boolean;

		/** Shrink popup to keep to the minimum size of content. */
		set_as_minsize() : void;

		/** Popup (show the control in modal form) in the center of the screen relative to its current canvas transform, at the current size, or at a size determined by `size`. */
		//@ts-ignore
		popup_centered(size: Vector2 = Vector2( 0, 0 )) : void;

		/** Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, scaled at a ratio of size of the screen. */
		//@ts-ignore
		popup_centered_ratio(ratio: number = 0.75) : void;

		/** Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, ensuring the size is never smaller than `minsize`. */
		//@ts-ignore
		popup_centered_minsize(minsize: Vector2 = Vector2( 0, 0 )) : void;

		/** Popup (show the control in modal form) in the center of the screen relative to the current canvas transform, clamping the size to `size`, then ensuring the popup is no larger than the viewport size multiplied by `fallback_ratio`. */
		//@ts-ignore
		popup_centered_clamped(size: Vector2 = Vector2( 0, 0 ), fallback_ratio: number = 0.75) : void;

		/** Popup (show the control in modal form). */
		//@ts-ignore
		popup(bounds: Rect2 = Rect2( 0, 0, 0, 0 )) : void;

		/** Getter of `popup_exclusive` property */
		is_exclusive() : boolean;

		/** Setter of `popup_exclusive` property */
		set_exclusive(p_value: boolean) : void;

		/** Getter of `visible` property */
		is_visible() : boolean;

		/** Setter of `visible` property */
		set_visible(p_value: boolean) : void;
	}
	namespace Popup {

		/** Emitted when a popup is hidden. */
		const popup_hide: 'popup_hide';

		/** Emitted when a popup is about to be shown. This is often used in `PopupMenu` to clear the list of options then create a new one according to the current context. */
		const about_to_show: 'about_to_show';

		/** Notification sent right after the popup is shown. */
		const NOTIFICATION_POST_POPUP: 80;

		/** Notification sent right after the popup is hidden. */
		const NOTIFICATION_POPUP_HIDE: 81;
	}

	/** Base class for popup dialogs.
	 PopupDialog is a base class for popup dialogs, along with `WindowDialog`. */
	class PopupDialog extends Popup {
	}
	namespace PopupDialog {
	}

	/** PopupMenu displays a list of options.
	 `PopupMenu` is a `Control` that displays a list of options. They are popular in toolbars or context menus. */
	class PopupMenu extends Popup {

		/** If `true`, hides the `PopupMenu` when an item is selected. */
		hide_on_item_selection: boolean;

		/** If `true`, hides the `PopupMenu` when a checkbox or radio button is selected. */
		hide_on_checkable_item_selection: boolean;

		/** If `true`, hides the `PopupMenu` when a state item is selected. */
		hide_on_state_item_selection: boolean;

		/** Sets the delay time in seconds for the submenu item to popup on mouse hovering. If the popup menu is added as a child of another (acting as a submenu), it will inherit the delay time of the parent menu item. */
		submenu_popup_delay: number;

		/** If `true`, allows to navigate `PopupMenu` with letter keys. */
		allow_search: boolean;

		/**  */
		focus_mode: number;

		/** Adds a new item with text `label`.

		 An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided then the default `0` will be assigned to it. See `get_item_accelerator` for more info on accelerators. */
		//@ts-ignore
		add_item(label: string, id: number = -1, accel: number = 0) : void;

		/** Adds a new item with text `label` and icon `texture`.

		 An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided then the default `0` will be assigned to it. See `get_item_accelerator` for more info on accelerators. */
		//@ts-ignore
		add_icon_item(texture: Texture, label: string, id: number = -1, accel: number = 0) : void;

		/** Adds a new checkable item with text `label`.

		 An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided then the default `0` will be assigned to it. See `get_item_accelerator` for more info on accelerators.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it. */
		//@ts-ignore
		add_check_item(label: string, id: number = -1, accel: number = 0) : void;

		/** Adds a new checkable item with text `label` and icon `texture`.

		 An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided then the default `0` will be assigned to it. See `get_item_accelerator` for more info on accelerators.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it. */
		//@ts-ignore
		add_icon_check_item(texture: Texture, label: string, id: number = -1, accel: number = 0) : void;

		/** Adds a new radio check button with text `label`.

		 An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided then the default `0` will be assigned to it. See `get_item_accelerator` for more info on accelerators.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it. */
		//@ts-ignore
		add_radio_check_item(label: string, id: number = -1, accel: number = 0) : void;

		/** Same as `add_icon_check_item`, but uses a radio check button. */
		//@ts-ignore
		add_icon_radio_check_item(texture: Texture, label: string, id: number = -1, accel: number = 0) : void;

		/** Adds a new multistate item with text `label`.

		 Contrarily to normal binary items, multistate items can have more than two states, as defined by `max_states`. Each press or activate of the item will increase the state by one. The default value is defined by `default_state`.

		 An `id` can optionally be provided, as well as an accelerator (`accel`). If no `id` is provided, one will be created from the index. If no `accel` is provided then the default `0` will be assigned to it. See `get_item_accelerator` for more info on accelerators. */
		//@ts-ignore
		add_multistate_item(label: string, max_states: number, default_state: number = 0, id: number = -1, accel: number = 0) : void;

		/** Adds a `ShortCut`.

		 An `id` can optionally be provided. If no `id` is provided, one will be created from the index. */
		//@ts-ignore
		add_shortcut(shortcut: ShortCut, id: number = -1, p_global: boolean = false) : void;

		/** Adds a new item and assigns the specified `ShortCut` and icon `texture` to it. Sets the label of the checkbox to the `ShortCut`'s name.

		 An `id` can optionally be provided. If no `id` is provided, one will be created from the index. */
		//@ts-ignore
		add_icon_shortcut(texture: Texture, shortcut: ShortCut, id: number = -1, p_global: boolean = false) : void;

		/** Adds a new checkable item and assigns the specified `ShortCut` to it. Sets the label of the checkbox to the `ShortCut`'s name.

		 An `id` can optionally be provided. If no `id` is provided, one will be created from the index.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it. */
		//@ts-ignore
		add_check_shortcut(shortcut: ShortCut, id: number = -1, p_global: boolean = false) : void;

		/** Adds a new checkable item and assigns the specified `ShortCut` and icon `texture` to it. Sets the label of the checkbox to the `ShortCut`'s name.

		 An `id` can optionally be provided. If no `id` is provided, one will be created from the index.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it. */
		//@ts-ignore
		add_icon_check_shortcut(texture: Texture, shortcut: ShortCut, id: number = -1, p_global: boolean = false) : void;

		/** Adds a new radio check button and assigns a `ShortCut` to it. Sets the label of the checkbox to the `ShortCut`'s name.

		 An `id` can optionally be provided. If no `id` is provided, one will be created from the index.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See `set_item_checked` for more info on how to control it. */
		//@ts-ignore
		add_radio_check_shortcut(shortcut: ShortCut, id: number = -1, p_global: boolean = false) : void;

		/** Same as `add_icon_check_shortcut`, but uses a radio check button. */
		//@ts-ignore
		add_icon_radio_check_shortcut(texture: Texture, shortcut: ShortCut, id: number = -1, p_global: boolean = false) : void;

		/** Adds an item that will act as a submenu of the parent `PopupMenu` node when clicked. The `submenu` argument is the name of the child `PopupMenu` node that will be shown when the item is clicked.

		 An `id` can optionally be provided. If no `id` is provided, one will be created from the index. */
		//@ts-ignore
		add_submenu_item(label: string, submenu: string, id: number = -1) : void;

		/** Sets the text of the item at index `idx`. */
		set_item_text(idx: number, text: string) : void;

		/** Replaces the `Texture` icon of the specified `idx`. */
		set_item_icon(idx: number, icon: Texture) : void;

		/** Sets the checkstate status of the item at index `idx`. */
		set_item_checked(idx: number, checked: boolean) : void;

		/** Sets the `id` of the item at index `idx`. */
		set_item_id(idx: number, id: number) : void;

		/** Sets the accelerator of the item at index `idx`. Accelerators are special combinations of keys that activate the item, no matter which control is focused. */
		set_item_accelerator(idx: number, accel: number) : void;

		/** Sets the metadata of an item, which may be of any type. You can later get it with `get_item_metadata`, which provides a simple way of assigning context data to items. */
		set_item_metadata(idx: number, metadata: any) : void;

		/** Enables/disables the item at index `idx`. When it is disabled, it can't be selected and its action can't be invoked. */
		set_item_disabled(idx: number, disabled: boolean) : void;

		/** Sets the submenu of the item at index `idx`. The submenu is the name of a child `PopupMenu` node that would be shown when the item is clicked. */
		set_item_submenu(idx: number, submenu: string) : void;

		/** Mark the item at index `idx` as a separator, which means that it would be displayed as a line. If `false`, sets the type of the item to plain text. */
		set_item_as_separator(idx: number, enable: boolean) : void;

		/** Sets whether the item at index `idx` has a checkbox. If `false`, sets the type of the item to plain text.

		 **Note:** Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. */
		set_item_as_checkable(idx: number, enable: boolean) : void;

		/** Sets the type of the item at the specified index `idx` to radio button. If `false`, sets the type of the item to plain text. */
		set_item_as_radio_checkable(idx: number, enable: boolean) : void;

		/** Sets the `String` tooltip of the item at the specified index `idx`. */
		set_item_tooltip(idx: number, tooltip: string) : void;

		/** Sets a `ShortCut` for the specified item `idx`. */
		//@ts-ignore
		set_item_shortcut(idx: number, shortcut: ShortCut, p_global: boolean = false) : void;

		/** Sets the state of an multistate item. See `add_multistate_item` for details. */
		set_item_multistate(idx: number, state: number) : void;

		/** Disables the `ShortCut` of the specified index `idx`. */
		set_item_shortcut_disabled(idx: number, disabled: boolean) : void;

		/** Toggles the check state of the item of the specified index `idx`. */
		toggle_item_checked(idx: number) : void;

		/** Cycle to the next state of an multistate item. See `add_multistate_item` for details. */
		toggle_item_multistate(idx: number) : void;

		/** Returns the text of the item at index `idx`. */
		get_item_text(idx: number) : string;

		/** Returns the icon of the item at index `idx`. */
		get_item_icon(idx: number) : Texture;

		/** Returns `true` if the item at index `idx` is checked. */
		is_item_checked(idx: number) : boolean;

		/** Returns the id of the item at index `idx`. `id` can be manually assigned, while index can not. */
		get_item_id(idx: number) : number;

		/** Returns the index of the item containing the specified `id`. Index is automatically assigned to each item by the engine. Index can not be set manually. */
		get_item_index(id: number) : number;

		/** Returns the accelerator of the item at index `idx`. Accelerators are special combinations of keys that activate the item, no matter which control is focused. */
		get_item_accelerator(idx: number) : number;

		/** Returns the metadata of the specified item, which might be of any type. You can set it with `set_item_metadata`, which provides a simple way of assigning context data to items. */
		get_item_metadata(idx: number) : any;

		/** Returns `true` if the item at index `idx` is disabled. When it is disabled it can't be selected, or its action invoked.

		 See `set_item_disabled` for more info on how to disable an item. */
		is_item_disabled(idx: number) : boolean;

		/** Returns the submenu name of the item at index `idx`. See `add_submenu_item` for more info on how to add a submenu. */
		get_item_submenu(idx: number) : string;

		/** Returns `true` if the item is a separator. If it is, it will be displayed as a line. See `add_separator` for more info on how to add a separator. */
		is_item_separator(idx: number) : boolean;

		/** Returns `true` if the item at index `idx` is checkable in some way, i.e. if it has a checkbox or radio button.

		 **Note:** Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually. */
		is_item_checkable(idx: number) : boolean;

		/** Returns `true` if the item at index `idx` has radio button-style checkability.

		 **Note:** This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups. */
		is_item_radio_checkable(idx: number) : boolean;

		/** Returns `true` if the specified item's shortcut is disabled. */
		is_item_shortcut_disabled(idx: number) : boolean;

		/** Returns the tooltip associated with the specified index index `idx`. */
		get_item_tooltip(idx: number) : string;

		/** Returns the `ShortCut` associated with the specified `idx` item. */
		get_item_shortcut(idx: number) : ShortCut;

		/**  */
		get_current_index() : number;

		/** Returns the number of items in the `PopupMenu`. */
		get_item_count() : number;

		/** Removes the item at index `idx` from the menu.

		 **Note:** The indices of items after the removed item will be shifted by one. */
		remove_item(idx: number) : void;

		/** Adds a separator between items. Separators also occupy an index. */
		//@ts-ignore
		add_separator(label: string = "") : void;

		/** Removes all items from the `PopupMenu`. */
		clear() : void;

		/** Hides the `PopupMenu` when the window loses focus. */
		set_hide_on_window_lose_focus(enable: boolean) : void;

		/** Returns `true` if the popup will be hidden when the window loses focus or not. */
		is_hide_on_window_lose_focus() : boolean;

		/** Getter of `hide_on_item_selection` property */
		is_hide_on_item_selection() : boolean;

		/** Setter of `hide_on_item_selection` property */
		set_hide_on_item_selection(p_value: boolean) : void;

		/** Getter of `hide_on_checkable_item_selection` property */
		is_hide_on_checkable_item_selection() : boolean;

		/** Setter of `hide_on_checkable_item_selection` property */
		set_hide_on_checkable_item_selection(p_value: boolean) : void;

		/** Getter of `hide_on_state_item_selection` property */
		is_hide_on_state_item_selection() : boolean;

		/** Setter of `hide_on_state_item_selection` property */
		set_hide_on_state_item_selection(p_value: boolean) : void;

		/** Getter of `submenu_popup_delay` property */
		get_submenu_popup_delay() : number;

		/** Setter of `submenu_popup_delay` property */
		set_submenu_popup_delay(p_value: number) : void;

		/** Getter of `allow_search` property */
		get_allow_search() : boolean;

		/** Setter of `allow_search` property */
		set_allow_search(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace PopupMenu {

		/** Emitted when an item of some `index` is pressed or its accelerator is activated. */
		const index_pressed: 'index_pressed';

		/** Emitted when user navigated to an item of some `id` using `ui_up` or `ui_down` action. */
		const id_focused: 'id_focused';

		/** Emitted when an item of some `id` is pressed or its accelerator is activated. */
		const id_pressed: 'id_pressed';
	}

	/** Class for displaying popups with a panel background.
	 Class for displaying popups with a panel background. In some cases it might be simpler to use than `Popup`, since it provides a configurable background. If you are making windows, better check `WindowDialog`. */
	class PopupPanel extends Popup {
	}
	namespace PopupPanel {
	}

	/** Generic 2D position hint for editing.
	 Generic 2D position hint for editing. It's just like a plain `Node2D`, but it displays as a cross in the 2D editor at all times. You can set cross' visual size by using the gizmo in the 2D editor while the node is selected. */
	class Position2D extends Node2D {
	}
	namespace Position2D {
	}

	/** Generic 3D position hint for editing.
	 Generic 3D position hint for editing. It's just like a plain `Spatial`, but it displays as a cross in the 3D editor at all times. */
	class Position3D extends Spatial {
	}
	namespace Position3D {
	}

	/** Base class for all primitive meshes. Handles applying a `Material` to a primitive mesh.
	 Base class for all primitive meshes. Handles applying a `Material` to a primitive mesh. Examples include `CapsuleMesh`, `CubeMesh`, `CylinderMesh`, `PlaneMesh`, `PrismMesh`, `QuadMesh`, and `SphereMesh`. */
	class PrimitiveMesh extends Mesh {

		/** The current `Material` of the primitive mesh. */
		material: Material;

		/** Overrides the `AABB` with one defined by user for use with frustum culling. Especially useful to avoid unnexpected culling when  using a shader to offset vertices. */
		custom_aabb: AABB;

		/** If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn.

		 This gives the same result as using `SpatialMaterial.CULL_BACK` in `SpatialMaterial.params_cull_mode`. */
		flip_faces: boolean;

		/** Returns mesh arrays used to constitute surface of `Mesh`. Mesh arrays can be used with `ArrayMesh` to create new surfaces. */
		get_mesh_arrays() : any[];

		/** Getter of `material` property */
		get_material() : Material;

		/** Setter of `material` property */
		set_material(p_value: Material) : void;

		/** Getter of `custom_aabb` property */
		get_custom_aabb() : AABB;

		/** Setter of `custom_aabb` property */
		set_custom_aabb(p_value: AABB) : void;

		/** Getter of `flip_faces` property */
		get_flip_faces() : boolean;

		/** Setter of `flip_faces` property */
		set_flip_faces(p_value: boolean) : void;
	}
	namespace PrimitiveMesh {
	}

	/** Class representing a prism-shaped `PrimitiveMesh`.
	  */
	class PrismMesh extends PrimitiveMesh {

		/** Displacement of the upper edge along the X axis. 0.0 positions edge straight above the bottom-left edge. */
		left_to_right: number;

		/** Size of the prism. */
		size: Vector3;

		/** Number of added edge loops along the X axis. */
		subdivide_width: number;

		/** Number of added edge loops along the Y axis. */
		subdivide_height: number;

		/** Number of added edge loops along the Z axis. */
		subdivide_depth: number;

		/** Getter of `left_to_right` property */
		get_left_to_right() : number;

		/** Setter of `left_to_right` property */
		set_left_to_right(p_value: number) : void;

		/** Getter of `size` property */
		get_size() : Vector3;

		/** Setter of `size` property */
		set_size(p_value: Vector3) : void;

		/** Getter of `subdivide_width` property */
		get_subdivide_width() : number;

		/** Setter of `subdivide_width` property */
		set_subdivide_width(p_value: number) : void;

		/** Getter of `subdivide_height` property */
		get_subdivide_height() : number;

		/** Setter of `subdivide_height` property */
		set_subdivide_height(p_value: number) : void;

		/** Getter of `subdivide_depth` property */
		get_subdivide_depth() : number;

		/** Setter of `subdivide_depth` property */
		set_subdivide_depth(p_value: number) : void;
	}
	namespace PrismMesh {
	}

	/** Type of `Sky` that is generated procedurally based on user input parameters.
	 ProceduralSky provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are very similar, they are defined by a color at the horizon, another color, and finally an easing curve to interpolate between these two colors. Similarly, the sun is described by a position in the sky, a color, and an easing curve. However, the sun also defines a minimum and maximum angle, these two values define at what distance the easing curve begins and ends from the sun, and thus end up defining the size of the sun in the sky.

	 The ProceduralSky is updated on the CPU after the parameters change. It is stored in a texture and then displayed as a background in the scene. This makes it relatively unsuitable for real-time updates during gameplay. However, with a small enough texture size, it can still be updated relatively frequently, as it is updated on a background thread when multi-threading is available. */
	class ProceduralSky extends Sky {

		/** Color of the sky at the top. */
		sky_top_color: Color;

		/** Color of the sky at the horizon. */
		sky_horizon_color: Color;

		/** How quickly the `sky_horizon_color` fades into the `sky_top_color`. */
		sky_curve: number;

		/** Amount of energy contribution from the sky. */
		sky_energy: number;

		/** Color of the ground at the bottom. */
		ground_bottom_color: Color;

		/** Color of the ground at the horizon. */
		ground_horizon_color: Color;

		/** How quickly the `ground_horizon_color` fades into the `ground_bottom_color`. */
		ground_curve: number;

		/** Amount of energy contribution from the ground. */
		ground_energy: number;

		/** The sun's color. */
		sun_color: Color;

		/** The sun's height using polar coordinates. */
		sun_latitude: number;

		/** The direction of the sun using polar coordinates. */
		sun_longitude: number;

		/** Distance from sun where it goes from solid to starting to fade. */
		sun_angle_min: number;

		/** Distance from center of sun where it fades out completely. */
		sun_angle_max: number;

		/** How quickly the sun fades away between `sun_angle_min` and `sun_angle_max`. */
		sun_curve: number;

		/** Amount of energy contribution from the sun. */
		sun_energy: number;

		/** Size of `Texture` that the ProceduralSky will generate. The size is set using `TextureSize`. */
		texture_size: number;

		/** Getter of `sky_top_color` property */
		get_sky_top_color() : Color;

		/** Setter of `sky_top_color` property */
		set_sky_top_color(p_value: Color) : void;

		/** Getter of `sky_horizon_color` property */
		get_sky_horizon_color() : Color;

		/** Setter of `sky_horizon_color` property */
		set_sky_horizon_color(p_value: Color) : void;

		/** Getter of `sky_curve` property */
		get_sky_curve() : number;

		/** Setter of `sky_curve` property */
		set_sky_curve(p_value: number) : void;

		/** Getter of `sky_energy` property */
		get_sky_energy() : number;

		/** Setter of `sky_energy` property */
		set_sky_energy(p_value: number) : void;

		/** Getter of `ground_bottom_color` property */
		get_ground_bottom_color() : Color;

		/** Setter of `ground_bottom_color` property */
		set_ground_bottom_color(p_value: Color) : void;

		/** Getter of `ground_horizon_color` property */
		get_ground_horizon_color() : Color;

		/** Setter of `ground_horizon_color` property */
		set_ground_horizon_color(p_value: Color) : void;

		/** Getter of `ground_curve` property */
		get_ground_curve() : number;

		/** Setter of `ground_curve` property */
		set_ground_curve(p_value: number) : void;

		/** Getter of `ground_energy` property */
		get_ground_energy() : number;

		/** Setter of `ground_energy` property */
		set_ground_energy(p_value: number) : void;

		/** Getter of `sun_color` property */
		get_sun_color() : Color;

		/** Setter of `sun_color` property */
		set_sun_color(p_value: Color) : void;

		/** Getter of `sun_latitude` property */
		get_sun_latitude() : number;

		/** Setter of `sun_latitude` property */
		set_sun_latitude(p_value: number) : void;

		/** Getter of `sun_longitude` property */
		get_sun_longitude() : number;

		/** Setter of `sun_longitude` property */
		set_sun_longitude(p_value: number) : void;

		/** Getter of `sun_angle_min` property */
		get_sun_angle_min() : number;

		/** Setter of `sun_angle_min` property */
		set_sun_angle_min(p_value: number) : void;

		/** Getter of `sun_angle_max` property */
		get_sun_angle_max() : number;

		/** Setter of `sun_angle_max` property */
		set_sun_angle_max(p_value: number) : void;

		/** Getter of `sun_curve` property */
		get_sun_curve() : number;

		/** Setter of `sun_curve` property */
		set_sun_curve(p_value: number) : void;

		/** Getter of `sun_energy` property */
		get_sun_energy() : number;

		/** Setter of `sun_energy` property */
		set_sun_energy(p_value: number) : void;

		/** Getter of `texture_size` property */
		get_texture_size() : number;

		/** Setter of `texture_size` property */
		set_texture_size(p_value: number) : void;
	}
	namespace ProceduralSky {
		enum TextureSize {
			/** Sky texture will be 256x128. */
			TEXTURE_SIZE_256 = 0,
			/** Sky texture will be 512x256. */
			TEXTURE_SIZE_512 = 1,
			/** Sky texture will be 1024x512. This is the default size. */
			TEXTURE_SIZE_1024 = 2,
			/** Sky texture will be 2048x1024. */
			TEXTURE_SIZE_2048 = 3,
			/** Sky texture will be 4096x2048. */
			TEXTURE_SIZE_4096 = 4,
			/** Represents the size of the `TextureSize` enum. */
			TEXTURE_SIZE_MAX = 5,
		}

		/** Sky texture will be 256x128. */
		const TEXTURE_SIZE_256: TextureSize.TEXTURE_SIZE_256;

		/** Sky texture will be 512x256. */
		const TEXTURE_SIZE_512: TextureSize.TEXTURE_SIZE_512;

		/** Sky texture will be 1024x512. This is the default size. */
		const TEXTURE_SIZE_1024: TextureSize.TEXTURE_SIZE_1024;

		/** Sky texture will be 2048x1024. */
		const TEXTURE_SIZE_2048: TextureSize.TEXTURE_SIZE_2048;

		/** Sky texture will be 4096x2048. */
		const TEXTURE_SIZE_4096: TextureSize.TEXTURE_SIZE_4096;

		/** Represents the size of the `TextureSize` enum. */
		const TEXTURE_SIZE_MAX: TextureSize.TEXTURE_SIZE_MAX;
	}

	/** General-purpose progress bar.
	 General-purpose progress bar. Shows fill percentage from right to left. */
	class ProgressBar extends Range {

		/** If `true`, the fill percentage is displayed on the bar. */
		percent_visible: boolean;

		/**  */
		step: number;

		/**  */
		size_flags_vertical: number;

		/** Getter of `percent_visible` property */
		is_percent_visible() : boolean;

		/** Setter of `percent_visible` property */
		set_percent_visible(p_value: boolean) : void;

		/** Getter of `step` property */
		get_step() : number;

		/** Setter of `step` property */
		set_step(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;
	}
	namespace ProgressBar {
	}

	/** Contains global variables accessible from everywhere.
	 Contains global variables accessible from everywhere. Use `get_setting`, `set_setting` or `has_setting` to access them. Variables stored in `project.godot` are also loaded into ProjectSettings, making this object very useful for reading custom game configuration options.

	 When naming a Project Settings property, use the full path to the setting including the category. For example, `"application/config/name"` for the project name. Category and property names can be viewed in the Project Settings dialog.

	 **Overriding:** Any project setting can be overridden by creating a file named `override.cfg` in the project's root directory. This can also be used in exported projects by placing this file in the same directory as the project binary. */
	class ProjectSettings extends Object {

		/** The project's name. It is used both by the Project Manager and by exporters. The project name can be translated by translating its value in localization files. */
		static 'application/config/name': string;

		/** The project's description, displayed as a tooltip in the Project Manager when hovering the project. */
		static 'application/config/description': string;

		/** Path to the main scene file that will be loaded when the project runs. */
		static 'application/run/main_scene': string;

		/** If `true`, disables printing to standard output in an exported build. */
		static 'application/run/disable_stdout': boolean;

		/** If `true`, disables printing to standard error in an exported build. */
		static 'application/run/disable_stderr': boolean;

		/** If `true`, the project will save user data to its own user directory (see `application/config/custom_user_dir_name`). This setting is only effective on desktop platforms. A name must be set in the `application/config/custom_user_dir_name` setting for this to take effect. If `false`, the project will save user data to `(OS user data directory)/Godot/app_userdata/(project name)`. */
		static 'application/config/use_custom_user_dir': boolean;

		/** This user directory is used for storing persistent data (`user://` filesystem). If left empty, `user://` resolves to a project-specific folder in Godot's own configuration folder (see `OS.get_user_data_dir`). If a custom directory name is defined, this name will be used instead and appended to the system-specific user data directory (same parent folder as the Godot configuration folder documented in `OS.get_user_data_dir`).

		 The `application/config/use_custom_user_dir` setting must be enabled for this to take effect. */
		static 'application/config/custom_user_dir_name': string;

		/** Specifies a file to override project settings. For example: `user://custom_settings.cfg`.

		 **Note:** Regardless of this setting's value, `res://override.cfg` will still be read to override the project settings (see this class' description at the top). */
		static 'application/config/project_settings_override': string;

		/** Default `AudioBusLayout` resource file to use in the project, unless overridden by the scene. */
		static 'audio/default_bus_layout': string;

		/** Text-based file extensions to include in the script editor's "Find in Files" feature. You can add e.g. `tscn` if you wish to also parse your scene files, especially if you use built-in scripts which are serialized in the scene files. */
		static 'editor/search_in_file_extensions': PoolStringArray;

		/** Search path for project-specific script templates. Script templates will be search both in the editor-specific path and in this project-specific path. */
		static 'editor/script_templates_search_path': string;

		/** Default `InputEventAction` to confirm a focused button, menu or list item, or validate input.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_accept': object;

		/** Default `InputEventAction` to select an item in a `Control` (e.g. in an `ItemList` or a `Tree`).

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_select': object;

		/** Default `InputEventAction` to discard a modal or pending input.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_cancel': object;

		/** Default `InputEventAction` to focus the next `Control` in the scene. The focus behavior can be configured via `Control.focus_next`.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_focus_next': object;

		/** Default `InputEventAction` to focus the previous `Control` in the scene. The focus behavior can be configured via `Control.focus_previous`.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_focus_prev': object;

		/** Default `InputEventAction` to move left in the UI.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_left': object;

		/** Default `InputEventAction` to move right in the UI.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_right': object;

		/** Default `InputEventAction` to move up in the UI.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_up': object;

		/** Default `InputEventAction` to move down in the UI.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_down': object;

		/** Default `InputEventAction` to go up a page in a `Control` (e.g. in an `ItemList` or a `Tree`), matching the behavior of `KEY_PAGEUP` on typical desktop UI systems.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_page_up': object;

		/** Default `InputEventAction` to go down a page in a `Control` (e.g. in an `ItemList` or a `Tree`), matching the behavior of `KEY_PAGEDOWN` on typical desktop UI systems.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_page_down': object;

		/** Default `InputEventAction` to go to the start position of a `Control` (e.g. first item in an `ItemList` or a `Tree`), matching the behavior of `KEY_HOME` on typical desktop UI systems.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_home': object;

		/** Default `InputEventAction` to go to the end position of a `Control` (e.g. last item in an `ItemList` or a `Tree`), matching the behavior of `KEY_END` on typical desktop UI systems.

		 **Note:** Default `ui_*` actions cannot be removed as they are necessary for the internal logic of several `Control`s. The events assigned to the action can however be modified. */
		static 'input/ui_end': object;

		/** Maximum amount of functions per frame allowed when profiling. */
		static 'debug/settings/profiler/max_functions': number;

		/** Enables `url=https://github.com/facebook/zstd/releases/tag/v1.3.2`long-distance matching`/url` in Zstandard. */
		static 'compression/formats/zstd/long_distance_matching': boolean;

		/** The default compression level for Zstandard. Affects compressed scenes and resources. Higher levels result in smaller files at the cost of compression speed. Decompression speed is mostly unaffected by the compression level. */
		static 'compression/formats/zstd/compression_level': number;

		/** Largest size limit (in power of 2) allowed when compressing using long-distance matching with Zstandard. Higher values can result in better compression, but will require more memory when compressing and decompressing. */
		static 'compression/formats/zstd/window_log_size': number;

		/** The default compression level for Zlib. Affects compressed scenes and resources. Higher levels result in smaller files at the cost of compression speed. Decompression speed is mostly unaffected by the compression level. `-1` uses the default gzip compression level, which is identical to `6` but could change in the future due to underlying zlib updates. */
		static 'compression/formats/zlib/compression_level': number;

		/** The default compression level for gzip. Affects compressed scenes and resources. Higher levels result in smaller files at the cost of compression speed. Decompression speed is mostly unaffected by the compression level. `-1` uses the default gzip compression level, which is identical to `6` but could change in the future due to underlying zlib updates. */
		static 'compression/formats/gzip/compression_level': number;

		/** Comma-separated list of custom Android modules (which must have been built in the Android export templates) using their Java package path, e.g. `"org/godotengine/godot/MyCustomSingleton,com/example/foo/FrenchFriesFactory"`.

		 **Note:** Since Godot 3.2.2, the `org/godotengine/godot/GodotPaymentV3` module was deprecated and replaced by the `GodotPayment` plugin which should be enabled in the Android export preset under `Plugins` section. The singleton to access in code was also renamed to `GodotPayment`. */
		static 'android/modules': string;

		/** Timeout (in seconds) for connection attempts using TCP. */
		static 'network/limits/tcp/connect_timeout_seconds': number;

		/** Default size of packet peer stream for deserializing Godot data. Over this size, data is dropped. */
		static 'network/limits/packet_peer_stream/max_buffer_po2': number;

		/** The CA certificates bundle to use for SSL connections. If this is set to a non-empty value, this will *override* Godot's default `url=https://github.com/godotengine/godot/blob/master/thirdparty/certs/ca-certificates.crt`Mozilla certificate bundle`/url`. If left empty, the default certificate bundle will be used.

		 If in doubt, leave this setting empty. */
		static 'network/ssl/certificates': string;

		/** Message to be displayed before the backtrace when the engine crashes. */
		static 'debug/settings/crash_handler/message': string;

		/** Page size used by remote filesystem (in bytes). */
		static 'network/remote_fs/page_size': number;

		/** Amount of read ahead used by remote filesystem. Higher values decrease the effects of latency at the cost of higher bandwidth usage. */
		static 'network/remote_fs/page_read_ahead': number;

		/** This is used by servers when used in multi-threading mode (servers and visual). RIDs are preallocated to avoid stalling the server requesting them on threads. If servers get stalled too often when loading resources in a thread, increase this number. */
		static 'memory/limits/multithreaded_server/rid_pool_prealloc': number;

		/** Maximum amount of characters allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection. */
		static 'network/limits/debugger_stdout/max_chars_per_second': number;

		/** Maximum amount of messages allowed to send as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection. */
		static 'network/limits/debugger_stdout/max_messages_per_frame': number;

		/** Maximum number of errors allowed to be sent as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection. */
		static 'network/limits/debugger_stdout/max_errors_per_second': number;

		/** Maximum number of warnings allowed to be sent as output from the debugger. Over this value, content is dropped. This helps not to stall the debugger connection. */
		static 'network/limits/debugger_stdout/max_warnings_per_second': number;

		/** If `true`, logs all output to files. */
		static 'logging/file_logging/enable_file_logging': boolean;

		/**  */
		static 'logging/file_logging/enable_file_logging.pc': boolean;

		/** Path to logs within the project. Using an `user://` path is recommended. */
		static 'logging/file_logging/log_path': string;

		/** Specifies the maximum amount of log files allowed (used for rotation). */
		static 'logging/file_logging/max_log_files': number;

		/** The video driver to use ("GLES2" or "GLES3").

		 **Note:** The backend in use can be overridden at runtime via the `--video-driver` command line argument, or by the `rendering/quality/driver/fallback_to_gles2` option if the target system does not support GLES3 and falls back to GLES2. In such cases, this property is not updated, so use `OS.get_current_video_driver` to query it at run-time. */
		static 'rendering/quality/driver/driver_name': string;

		/** If `true`, allows falling back to the GLES2 driver if the GLES3 driver is not supported.

		 **Note:** The two video drivers are not drop-in replacements for each other, so a game designed for GLES3 might not work properly when falling back to GLES2. In particular, some features of the GLES3 backend are not available in GLES2. Enabling this setting also means that both ETC and ETC2 VRAM-compressed textures will be exported on Android and iOS, increasing the data pack's size. */
		static 'rendering/quality/driver/fallback_to_gles2': boolean;

		/** Some NVIDIA GPU drivers have a bug which produces flickering issues for the `draw_rect` method, especially as used in `TileMap`. Refer to `url=https://github.com/godotengine/godot/issues/9913`GitHub issue 9913`/url` for details.

		 If `true`, this option enables a "safe" code path for such NVIDIA GPUs at the cost of performance. This option affects GLES2 and GLES3 rendering, but only on desktop platforms. */
		static 'rendering/quality/2d/use_nvidia_rect_flicker_workaround': boolean;

		/** Sets the game's main viewport width. On desktop platforms, this is the default window size. Stretch mode settings also use this as a reference when enabled. */
		static 'display/window/size/width': number;

		/** Sets the game's main viewport height. On desktop platforms, this is the default window size. Stretch mode settings also use this as a reference when enabled. */
		static 'display/window/size/height': number;

		/** Allows the window to be resizable by default. */
		static 'display/window/size/resizable': boolean;

		/** Force the window to be borderless. */
		static 'display/window/size/borderless': boolean;

		/** Sets the window to full screen when it starts. */
		static 'display/window/size/fullscreen': boolean;

		/** Force the window to be always on top. */
		static 'display/window/size/always_on_top': boolean;

		/** If greater than zero, overrides the window width when running the game. Useful for testing stretch modes. */
		static 'display/window/size/test_width': number;

		/** If greater than zero, overrides the window height when running the game. Useful for testing stretch modes. */
		static 'display/window/size/test_height': number;

		/** If `true`, allows HiDPI display on Windows and macOS. This setting has no effect on desktop Linux, as DPI-awareness fallbacks are not supported there. */
		static 'display/window/dpi/allow_hidpi': boolean;

		/** If `true`, enables vertical synchronization. This eliminates tearing that may appear in moving scenes, at the cost of higher input latency and stuttering at lower framerates. If `false`, vertical synchronization will be disabled, however, many platforms will enforce it regardless (such as mobile platforms and HTML5). */
		static 'display/window/vsync/use_vsync': boolean;

		/** If `Use Vsync` is enabled and this setting is `true`, enables vertical synchronization via the operating system's window compositor when in windowed mode and the compositor is enabled. This will prevent stutter in certain situations. (Windows only.)

		 **Note:** This option is experimental and meant to alleviate stutter experienced by some users. However, some users have experienced a Vsync framerate halving (e.g. from 60 FPS to 30 FPS) when using it. */
		static 'display/window/vsync/vsync_via_compositor': boolean;

		/** Specifies the tablet driver to use. If left empty, the default driver will be used. */
		static 'display/window/tablet_driver': string;

		/** If `true`, allows per-pixel transparency in a desktop window. This affects performance, so leave it on `false` unless you need it. */
		static 'display/window/per_pixel_transparency/allowed': boolean;

		/** Sets the window background to transparent when it starts. */
		static 'display/window/per_pixel_transparency/enabled': boolean;

		/** Strategy used for framebuffer allocation. The simpler it is, the less resources it uses (but the less features it supports). If set to "2D Without Sampling" or "3D Without Effects", sample buffers will not be allocated. This means `SCREEN_TEXTURE` and `DEPTH_TEXTURE` will not be available in shaders and post-processing effects will not be available in the `Environment`. */
		static 'rendering/quality/intended_usage/framebuffer_allocation': number;

		/** Lower-end override for `rendering/quality/intended_usage/framebuffer_allocation` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/intended_usage/framebuffer_allocation.mobile': number;

		/** If `true`, forces snapping of polygons to pixels in 2D rendering. May help in some pixel art styles.

		 Consider using the project setting `rendering/batching/precision/uv_contract` to prevent artifacts. */
		static 'rendering/quality/2d/use_pixel_snap': boolean;

		/** If `true`, keeps the screen on (even in case of inactivity), so the screensaver does not take over. Works on desktop and mobile platforms. */
		static 'display/window/energy_saving/keep_screen_on': boolean;

		/** Thread model for rendering. Rendering on a thread can vastly improve performance, but synchronizing to the main thread can cause a bit more jitter. */
		static 'rendering/threads/thread_model': number;

		/** Specifies the audio driver to use. This setting is platform-dependent as each platform supports different audio drivers. If left empty, the default audio driver will be used. */
		static 'audio/driver': string;

		/** Default orientation on mobile devices. */
		static 'display/window/handheld/orientation': string;

		/** The number of fixed iterations per second. This controls how often physics simulation and `Node._physics_process` methods are run.

		 **Note:** This property is only read when the project starts. To change the physics FPS at runtime, set `Engine.iterations_per_second` instead. */
		static 'physics/common/physics_fps': number;

		/** Fix to improve physics jitter, specially on monitors where refresh rate is different than the physics FPS.

		 **Note:** This property is only read when the project starts. To change the physics FPS at runtime, set `Engine.physics_jitter_fix` instead. */
		static 'physics/common/physics_jitter_fix': number;

		/** Maximum number of frames per second allowed. The actual number of frames per second may still be below this value if the game is lagging.

		 If `display/window/vsync/use_vsync` is enabled, it takes precedence and the forced FPS number cannot exceed the monitor's refresh rate.

		 This setting is therefore mostly relevant for lowering the maximum FPS below VSync, e.g. to perform non real-time rendering of static frames, or test the project under lag conditions. */
		static 'debug/settings/fps/force_fps': number;

		/** Print frames per second to standard output every second. */
		static 'debug/settings/stdout/print_fps': boolean;

		/** Print more information to standard output when running. It displays information such as memory leaks, which scenes and resources are being loaded, etc. */
		static 'debug/settings/stdout/verbose_stdout': boolean;

		/** Forces a delay between frames in the main loop (in milliseconds). This may be useful if you plan to disable vertical synchronization. */
		static 'application/run/frame_delay_msec': number;

		/** If `true`, enables low-processor usage mode. This setting only works on desktop platforms. The screen is not redrawn if nothing changes visually. This is meant for writing applications and editors, but is pretty useless (and can hurt performance) in most games. */
		static 'application/run/low_processor_mode': boolean;

		/** Amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU usage. */
		static 'application/run/low_processor_mode_sleep_usec': number;

		/** If `true`, the home indicator is hidden automatically. This only affects iOS devices without a physical home button. */
		static 'display/window/ios/hide_home_indicator': boolean;

		/** Godot uses a message queue to defer some function calls. If you run out of space on it (you will see an error), you can increase the size here. */
		static 'memory/limits/message_queue/max_size_kb': number;

		/** If `true`, the texture importer will import VRAM-compressed textures using the BPTC algorithm. This texture compression algorithm is only supported on desktop platforms, and only when using the GLES3 renderer. */
		static 'rendering/vram_compression/import_bptc': boolean;

		/** If `true`, the texture importer will import VRAM-compressed textures using the S3 Texture Compression algorithm. This algorithm is only supported on desktop platforms and consoles. */
		static 'rendering/vram_compression/import_s3tc': boolean;

		/** If `true`, the texture importer will import VRAM-compressed textures using the Ericsson Texture Compression algorithm. This algorithm doesn't support alpha channels in textures. */
		static 'rendering/vram_compression/import_etc': boolean;

		/** If `true`, the texture importer will import VRAM-compressed textures using the Ericsson Texture Compression 2 algorithm. This texture compression algorithm is only supported when using the GLES3 renderer. */
		static 'rendering/vram_compression/import_etc2': boolean;

		/** If `true`, the texture importer will import VRAM-compressed textures using the PowerVR Texture Compression algorithm. This texture compression algorithm is only supported on iOS. */
		static 'rendering/vram_compression/import_pvrtc': boolean;

		/** Shaders have a time variable that constantly increases. At some point, it needs to be rolled back to zero to avoid precision errors on shader animations. This setting specifies when (in seconds). */
		static 'rendering/limits/time/time_rollover_secs': number;

		/** The directional shadow's size in pixels. Higher values will result in sharper shadows, at the cost of performance. The value will be rounded up to the nearest power of 2. */
		static 'rendering/quality/directional_shadow/size': number;

		/** Lower-end override for `rendering/quality/directional_shadow/size` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/directional_shadow/size.mobile': number;

		/** Size for shadow atlas (used for OmniLights and SpotLights). See documentation. */
		static 'rendering/quality/shadow_atlas/size': number;

		/** Lower-end override for `rendering/quality/shadow_atlas/size` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/shadow_atlas/size.mobile': number;

		/** Subdivision quadrant size for shadow mapping. See shadow mapping documentation. */
		static 'rendering/quality/shadow_atlas/quadrant_0_subdiv': number;

		/** Subdivision quadrant size for shadow mapping. See shadow mapping documentation. */
		static 'rendering/quality/shadow_atlas/quadrant_1_subdiv': number;

		/** Subdivision quadrant size for shadow mapping. See shadow mapping documentation. */
		static 'rendering/quality/shadow_atlas/quadrant_2_subdiv': number;

		/** Subdivision quadrant size for shadow mapping. See shadow mapping documentation. */
		static 'rendering/quality/shadow_atlas/quadrant_3_subdiv': number;

		/** Shadow filter mode. Higher-quality settings result in smoother shadows that flicker less when moving. "Disabled" is the fastest option, but also has the lowest quality. "PCF5" is smoother but is also slower. "PCF13" is the smoothest option, but is also the slowest. */
		static 'rendering/quality/shadows/filter_mode': number;

		/** Lower-end override for `rendering/quality/shadows/filter_mode` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/shadows/filter_mode.mobile': number;

		/** If `true`, uses texture arrays instead of mipmaps for reflection probes and panorama backgrounds (sky). This reduces jitter noise on reflections, but costs more performance and memory. */
		static 'rendering/quality/reflections/texture_array_reflections': boolean;

		/** Lower-end override for `rendering/quality/reflections/texture_array_reflections` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/reflections/texture_array_reflections.mobile': boolean;

		/** If `true`, uses a high amount of samples to create blurred variants of reflection probes and panorama backgrounds (sky). Those blurred variants are used by rough materials. */
		static 'rendering/quality/reflections/high_quality_ggx': boolean;

		/** Lower-end override for `rendering/quality/reflections/high_quality_ggx` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/reflections/high_quality_ggx.mobile': boolean;

		/** Limits the size of the irradiance map which is normally determined by `Sky.radiance_size`. A higher size results in a higher quality irradiance map similarly to `rendering/quality/reflections/high_quality_ggx`. Use a higher value when using high-frequency HDRI maps, otherwise keep this as low as possible.

		 **Note:** Low and mid range hardware do not support complex irradiance maps well and may crash if this is set too high. */
		static 'rendering/quality/reflections/irradiance_max_size': number;

		/** If `true`, forces vertex shading for all rendering. This can increase performance a lot, but also reduces quality immensely. Can be used to optimize performance on low-end mobile devices. */
		static 'rendering/quality/shading/force_vertex_shading': boolean;

		/** Lower-end override for `rendering/quality/shading/force_vertex_shading` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/shading/force_vertex_shading.mobile': boolean;

		/** If `true`, uses faster but lower-quality Lambert material lighting model instead of Burley. */
		static 'rendering/quality/shading/force_lambert_over_burley': boolean;

		/** Lower-end override for `rendering/quality/shading/force_lambert_over_burley` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/shading/force_lambert_over_burley.mobile': boolean;

		/** If `true`, uses faster but lower-quality Blinn model to generate blurred reflections instead of the GGX model. */
		static 'rendering/quality/shading/force_blinn_over_ggx': boolean;

		/** Lower-end override for `rendering/quality/shading/force_blinn_over_ggx` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/shading/force_blinn_over_ggx.mobile': boolean;

		/** If `true`, performs a previous depth pass before rendering materials. This increases performance in scenes with high overdraw, when complex materials and lighting are used. */
		static 'rendering/quality/depth_prepass/enable': boolean;

		/** Disables depth pre-pass for some GPU vendors (usually mobile), as their architecture already does this. */
		static 'rendering/quality/depth_prepass/disable_for_vendors': string;

		/** If `true`, uses nearest-neighbor mipmap filtering when using mipmaps (also called "bilinear filtering"), which will result in visible seams appearing between mipmap stages. This may increase performance in mobile as less memory bandwidth is used. If `false`, linear mipmap filtering (also called "trilinear filtering") is used. */
		static 'rendering/quality/filters/use_nearest_mipmap_filter': boolean;

		/** Turns batching on and off. Batching increases performance by reducing the amount of graphics API drawcalls. */
		static 'rendering/batching/options/use_batching': boolean;

		/** Switches on batching within the editor. */
		static 'rendering/batching/options/use_batching_in_editor': boolean;

		/** Enabling this setting uses the legacy method to draw batches containing only one rect. The legacy method is faster (approx twice as fast), but can cause flicker on some systems. In order to directly compare performance with the non-batching renderer you can set this to true, but it is recommended to turn this off unless you can guarantee your target hardware will work with this method. */
		static 'rendering/batching/options/single_rect_fallback': boolean;

		/** Sets the number of commands to lookahead to determine whether to batch render items. A value of 1 can join items consisting of single commands, 0 turns off joining. Higher values are in theory more likely to join, however this has diminishing returns and has a runtime cost so a small value is recommended. */
		static 'rendering/batching/parameters/max_join_item_commands': number;

		/** Including color in the vertex format has a cost, however, not including color prevents batching across color changes. This threshold determines the ratio of `number of vertex color changes / total number of vertices` above which vertices will be translated to colored format. A value of 0 will always use colored vertices, 1 will never use colored vertices. */
		static 'rendering/batching/parameters/colored_vertex_format_threshold': number;

		/** Sets the proportion of the total screen area (in pixels) that must be saved by a scissor operation in order to activate light scissoring. This can prevent parts of items being rendered outside the light area. Lower values scissor more aggressively. A value of 1 scissors none of the items, a value of 0 scissors every item. The power of 4 of the value is used, in order to emphasize the lower range, and multiplied by the total screen area in pixels to give the threshold. This can reduce fill rate requirements in scenes with a lot of lighting. */
		static 'rendering/batching/lights/scissor_area_threshold': number;

		/** Lights have the potential to prevent joining items, and break many of the performance benefits of batching. This setting enables some complex logic to allow joining items if their lighting is similar, and overlap tests pass. This can significantly improve performance in some games. Set to 0 to switch off. With large values the cost of overlap tests may lead to diminishing returns. */
		static 'rendering/batching/lights/max_join_items': number;

		/** Size of buffer reserved for batched vertices. Larger size enables larger batches, but there are diminishing returns for the memory used. This should only have a minor effect on performance. */
		static 'rendering/batching/parameters/batch_buffer_size': number;

		/** In certain circumstances, the batcher can reorder items in order to better join them. This may result in better performance. An overlap test is needed however for each item lookahead, so there is a trade off, with diminishing returns. If you are getting no benefit, setting this to 0 will switch it off. */
		static 'rendering/batching/parameters/item_reordering_lookahead': number;

		/** **Experimental** For regression testing against the old renderer. If this is switched on, and `use_batching` is set, the renderer will swap alternately between using the old renderer, and the batched renderer, on each frame. This makes it easy to identify visual differences. Performance will be degraded. */
		static 'rendering/batching/debug/flash_batching': boolean;

		/** When batching is on, this regularly prints a frame diagnosis log. Note that this will degrade performance. */
		static 'rendering/batching/debug/diagnose_frame': boolean;

		/** The use of half-float vertex compression may be producing rendering errors on some platforms (especially iOS). These have been seen particularly in particles. Disabling half-float may resolve these problems. */
		static 'rendering/gles2/compatibility/disable_half_float': boolean;

		/** On some platforms (especially mobile), precision issues in shaders can lead to reading 1 texel outside of bounds, particularly where rects are scaled. This can particularly lead to border artifacts around tiles in tilemaps.

		 This adjustment corrects for this by making a small contraction to the UV coordinates used. Note that this can result in a slight squashing of border texels. */
		static 'rendering/batching/precision/uv_contract': boolean;

		/** The amount of UV contraction. This figure is divided by 1000000, and is a proportion of the total texture dimensions, where the width and height are both ranged from 0.0 to 1.0.

		 Use the default unless correcting for a problem on particular hardware. */
		static 'rendering/batching/precision/uv_contract_amount': number;

		/** Max buffer size for drawing polygons. Any polygon bigger than this will not work. */
		static 'rendering/limits/buffers/canvas_polygon_buffer_size_kb': number;

		/** Max index buffer size for drawing polygons. Any polygon bigger than this will not work. */
		static 'rendering/limits/buffers/canvas_polygon_index_buffer_size_kb': number;

		/** Max buffer size for drawing immediate objects (ImmediateGeometry nodes). Nodes using more than this size will not work. */
		static 'rendering/limits/buffers/immediate_buffer_size_kb': number;

		/** If `true`, microphone input will be allowed. This requires appropriate permissions to be set when exporting to Android or iOS. */
		static 'audio/enable_audio_input': boolean;

		/** Mixing rate used for audio. In general, it's better to not touch this and leave it to the host operating system. */
		static 'audio/mix_rate': number;

		/** Output latency in milliseconds for audio. Lower values will result in lower audio latency at the cost of increased CPU usage. Low values may result in audible cracking on slower hardware. */
		static 'audio/output_latency': number;

		/** Safer override for `audio/output_latency` in the Web platform, to avoid audio issues especially on mobile devices. */
		static 'audio/output_latency.web': number;

		/** Audio buses will disable automatically when sound goes below a given dB threshold for a given time. This saves CPU as effects assigned to that bus will no longer do any processing. */
		static 'audio/channel_disable_threshold_db': number;

		/** Audio buses will disable automatically when sound goes below a given dB threshold for a given time. This saves CPU as effects assigned to that bus will no longer do any processing. */
		static 'audio/channel_disable_time': number;

		/** Setting to hardcode audio delay when playing video. Best to leave this untouched unless you know what you are doing. */
		static 'audio/video_delay_compensation_ms': number;

		/** Sets which physics engine to use for 2D physics.

		 "DEFAULT" and "GodotPhysics" are the same, as there is currently no alternative 2D physics server implemented. */
		static 'physics/2d/physics_engine': string;

		/** Sets which physics engine to use for 3D physics.

		 "DEFAULT" is currently the `url=https://bulletphysics.org`Bullet`/url` physics engine. The "GodotPhysics" engine is still supported as an alternative. */
		static 'physics/3d/physics_engine': string;

		/** Default background clear color. Overridable per `Viewport` using its `Environment`. See `Environment.background_mode` and `Environment.background_color` in particular. To change this default color programmatically, use `VisualServer.set_default_clear_color`. */
		static 'rendering/environment/default_clear_color': Color;

		/** Path to an image used as the boot splash. */
		static 'application/boot_splash/image': string;

		/** If `true`, scale the boot splash image to the full window length when engine starts. If `false`, the engine will leave it at the default pixel size. */
		static 'application/boot_splash/fullsize': boolean;

		/** If `true`, applies linear filtering when scaling the image (recommended for high resolution artwork). If `false`, uses nearest-neighbor interpolation (recommended for pixel art). */
		static 'application/boot_splash/use_filter': boolean;

		/** Background color for the boot splash. */
		static 'application/boot_splash/bg_color': Color;

		/** Icon used for the project, set when project loads. Exporters will also use this icon when possible. */
		static 'application/config/icon': string;

		/** Icon set in `.icns` format used on macOS to set the game's icon. This is done automatically on start by calling `OS.set_native_icon`. */
		static 'application/config/macos_native_icon': string;

		/** Icon set in `.ico` format used on Windows to set the game's icon. This is done automatically on start by calling `OS.set_native_icon`. */
		static 'application/config/windows_native_icon': string;

		/** If `true`, sends touch input events when clicking or dragging the mouse. */
		static 'input_devices/pointing/emulate_touch_from_mouse': boolean;

		/** If `true`, sends mouse input events when tapping or swiping on the touchscreen. */
		static 'input_devices/pointing/emulate_mouse_from_touch': boolean;

		/** What to use to separate node name from number. This is mostly an editor setting. */
		static 'node/name_num_separator': number;

		/** When creating node names automatically, set the type of casing in this project. This is mostly an editor setting. */
		static 'node/name_casing': number;

		/** Default value for `ScrollContainer.scroll_deadzone`, which will be used for all `ScrollContainer`s unless overridden. */
		static 'gui/common/default_scroll_deadzone': number;

		/** Timer setting for incremental search in `Tree`, `ItemList`, etc. controls (in milliseconds). */
		static 'gui/timers/incremental_search_max_interval_msec': number;

		/** Timer for detecting idle in `TextEdit` (in seconds). */
		static 'gui/timers/text_edit_idle_detect_sec': number;

		/**  */
		static 'gui/common/text_edit_undo_stack_max_size': number;

		/** If `true`, swaps OK and Cancel buttons in dialogs on Windows and UWP to follow interface conventions. */
		static 'gui/common/swap_ok_cancel': boolean;

		/** Optional name for the 2D render layer 1. */
		static 'layer_names/2d_render/layer_1': string;

		/** Optional name for the 2D physics layer 1. */
		static 'layer_names/2d_physics/layer_1': string;

		/** Optional name for the 3D render layer 1. */
		static 'layer_names/3d_render/layer_1': string;

		/** Optional name for the 3D physics layer 1. */
		static 'layer_names/3d_physics/layer_1': string;

		/** Optional name for the 2D render layer 2. */
		static 'layer_names/2d_render/layer_2': string;

		/** Optional name for the 2D physics layer 2. */
		static 'layer_names/2d_physics/layer_2': string;

		/** Optional name for the 3D render layer 2. */
		static 'layer_names/3d_render/layer_2': string;

		/** Optional name for the 3D physics layer 2. */
		static 'layer_names/3d_physics/layer_2': string;

		/** Optional name for the 2D render layer 3. */
		static 'layer_names/2d_render/layer_3': string;

		/** Optional name for the 2D physics layer 3. */
		static 'layer_names/2d_physics/layer_3': string;

		/** Optional name for the 3D render layer 3. */
		static 'layer_names/3d_render/layer_3': string;

		/** Optional name for the 3D physics layer 3. */
		static 'layer_names/3d_physics/layer_3': string;

		/** Optional name for the 2D render layer 4. */
		static 'layer_names/2d_render/layer_4': string;

		/** Optional name for the 2D physics layer 4. */
		static 'layer_names/2d_physics/layer_4': string;

		/** Optional name for the 3D render layer 4. */
		static 'layer_names/3d_render/layer_4': string;

		/** Optional name for the 3D physics layer 4. */
		static 'layer_names/3d_physics/layer_4': string;

		/** Optional name for the 2D render layer 5. */
		static 'layer_names/2d_render/layer_5': string;

		/** Optional name for the 2D physics layer 5. */
		static 'layer_names/2d_physics/layer_5': string;

		/** Optional name for the 3D render layer 5. */
		static 'layer_names/3d_render/layer_5': string;

		/** Optional name for the 3D physics layer 5. */
		static 'layer_names/3d_physics/layer_5': string;

		/** Optional name for the 2D render layer 6. */
		static 'layer_names/2d_render/layer_6': string;

		/** Optional name for the 2D physics layer 6. */
		static 'layer_names/2d_physics/layer_6': string;

		/** Optional name for the 3D render layer 6. */
		static 'layer_names/3d_render/layer_6': string;

		/** Optional name for the 3D physics layer 6. */
		static 'layer_names/3d_physics/layer_6': string;

		/** Optional name for the 2D render layer 7. */
		static 'layer_names/2d_render/layer_7': string;

		/** Optional name for the 2D physics layer 7. */
		static 'layer_names/2d_physics/layer_7': string;

		/** Optional name for the 3D render layer 7. */
		static 'layer_names/3d_render/layer_7': string;

		/** Optional name for the 3D physics layer 7. */
		static 'layer_names/3d_physics/layer_7': string;

		/** Optional name for the 2D render layer 8. */
		static 'layer_names/2d_render/layer_8': string;

		/** Optional name for the 2D physics layer 8. */
		static 'layer_names/2d_physics/layer_8': string;

		/** Optional name for the 3D render layer 8. */
		static 'layer_names/3d_render/layer_8': string;

		/** Optional name for the 3D physics layer 8. */
		static 'layer_names/3d_physics/layer_8': string;

		/** Optional name for the 2D render layer 9. */
		static 'layer_names/2d_render/layer_9': string;

		/** Optional name for the 2D physics layer 9. */
		static 'layer_names/2d_physics/layer_9': string;

		/** Optional name for the 3D render layer 9. */
		static 'layer_names/3d_render/layer_9': string;

		/** Optional name for the 3D physics layer 9. */
		static 'layer_names/3d_physics/layer_9': string;

		/** Optional name for the 2D render layer 10. */
		static 'layer_names/2d_render/layer_10': string;

		/** Optional name for the 2D physics layer 10. */
		static 'layer_names/2d_physics/layer_10': string;

		/** Optional name for the 3D render layer 10. */
		static 'layer_names/3d_render/layer_10': string;

		/** Optional name for the 3D physics layer 10. */
		static 'layer_names/3d_physics/layer_10': string;

		/** Optional name for the 2D render layer 11. */
		static 'layer_names/2d_render/layer_11': string;

		/** Optional name for the 2D physics layer 11. */
		static 'layer_names/2d_physics/layer_11': string;

		/** Optional name for the 3D render layer 11. */
		static 'layer_names/3d_render/layer_11': string;

		/** Optional name for the 3D physics layer 11. */
		static 'layer_names/3d_physics/layer_11': string;

		/** Optional name for the 2D render layer 12. */
		static 'layer_names/2d_render/layer_12': string;

		/** Optional name for the 2D physics layer 12. */
		static 'layer_names/2d_physics/layer_12': string;

		/** Optional name for the 3D render layer 12. */
		static 'layer_names/3d_render/layer_12': string;

		/** Optional name for the 3D physics layer 12. */
		static 'layer_names/3d_physics/layer_12': string;

		/** Optional name for the 2D render layer 13. */
		static 'layer_names/2d_render/layer_13': string;

		/** Optional name for the 2D physics layer 13. */
		static 'layer_names/2d_physics/layer_13': string;

		/** Optional name for the 3D render layer 13. */
		static 'layer_names/3d_render/layer_13': string;

		/** Optional name for the 3D physics layer 13. */
		static 'layer_names/3d_physics/layer_13': string;

		/** Optional name for the 2D render layer 14. */
		static 'layer_names/2d_render/layer_14': string;

		/** Optional name for the 2D physics layer 14. */
		static 'layer_names/2d_physics/layer_14': string;

		/** Optional name for the 3D render layer 14 */
		static 'layer_names/3d_render/layer_14': string;

		/** Optional name for the 3D physics layer 14. */
		static 'layer_names/3d_physics/layer_14': string;

		/** Optional name for the 2D render layer 15. */
		static 'layer_names/2d_render/layer_15': string;

		/** Optional name for the 2D physics layer 15. */
		static 'layer_names/2d_physics/layer_15': string;

		/** Optional name for the 3D render layer 15. */
		static 'layer_names/3d_render/layer_15': string;

		/** Optional name for the 3D physics layer 15. */
		static 'layer_names/3d_physics/layer_15': string;

		/** Optional name for the 2D render layer 16. */
		static 'layer_names/2d_render/layer_16': string;

		/** Optional name for the 2D physics layer 16. */
		static 'layer_names/2d_physics/layer_16': string;

		/** Optional name for the 3D render layer 16. */
		static 'layer_names/3d_render/layer_16': string;

		/** Optional name for the 3D physics layer 16. */
		static 'layer_names/3d_physics/layer_16': string;

		/** Optional name for the 2D render layer 17. */
		static 'layer_names/2d_render/layer_17': string;

		/** Optional name for the 2D physics layer 17. */
		static 'layer_names/2d_physics/layer_17': string;

		/** Optional name for the 3D render layer 17. */
		static 'layer_names/3d_render/layer_17': string;

		/** Optional name for the 3D physics layer 17. */
		static 'layer_names/3d_physics/layer_17': string;

		/** Optional name for the 2D render layer 18. */
		static 'layer_names/2d_render/layer_18': string;

		/** Optional name for the 2D physics layer 18. */
		static 'layer_names/2d_physics/layer_18': string;

		/** Optional name for the 3D render layer 18. */
		static 'layer_names/3d_render/layer_18': string;

		/** Optional name for the 3D physics layer 18. */
		static 'layer_names/3d_physics/layer_18': string;

		/** Optional name for the 2D render layer 19. */
		static 'layer_names/2d_render/layer_19': string;

		/** Optional name for the 2D physics layer 19. */
		static 'layer_names/2d_physics/layer_19': string;

		/** Optional name for the 3D render layer 19. */
		static 'layer_names/3d_render/layer_19': string;

		/** Optional name for the 3D physics layer 19. */
		static 'layer_names/3d_physics/layer_19': string;

		/** Optional name for the 2D render layer 20. */
		static 'layer_names/2d_render/layer_20': string;

		/** Optional name for the 2D physics layer 20. */
		static 'layer_names/2d_physics/layer_20': string;

		/** Optional name for the 3D render layer 20. */
		static 'layer_names/3d_render/layer_20': string;

		/** Optional name for the 3D physics layer 20. */
		static 'layer_names/3d_physics/layer_20': string;

		/** If `true`, makes sure the theme used works with HiDPI. */
		static 'gui/theme/use_hidpi': boolean;

		/** Path to a custom `Theme` resource file to use for the project (`theme` or generic `tres`/`res` extension). */
		static 'gui/theme/custom': string;

		/** Path to a custom `Font` resource to use as default for all GUI elements of the project. */
		static 'gui/theme/custom_font': string;

		/** Custom image for the mouse cursor (limited to 256×256). */
		static 'display/mouse_cursor/custom_image': string;

		/** Hotspot for the custom mouse cursor image. */
		static 'display/mouse_cursor/custom_image_hotspot': Vector2;

		/** Position offset for tooltips, relative to the mouse cursor's hotspot. */
		static 'display/mouse_cursor/tooltip_position_offset': Vector2;

		/** Sets whether the 3D physics world will be created with support for `SoftBody` physics. Only applies to the Bullet physics engine. */
		static 'physics/3d/active_soft_world': boolean;

		/** Maximum call stack allowed for debugging GDScript. */
		static 'debug/settings/gdscript/max_call_stack': number;

		/** If `true`, enables specific GDScript warnings (see `debug/gdscript/warnings/*` settings). If `false`, disables all GDScript warnings. */
		static 'debug/gdscript/warnings/enable': boolean;

		/** If `true`, all warnings will be reported as if they were errors. */
		static 'debug/gdscript/warnings/treat_warnings_as_errors': boolean;

		/** If `true`, scripts in the `res://addons` folder will not generate warnings. */
		static 'debug/gdscript/warnings/exclude_addons': boolean;

		/** If `true`, displays getters and setters in autocompletion results in the script editor. This setting is meant to be used when porting old projects (Godot 2), as using member variables is the preferred style from Godot 3 onwards. */
		static 'debug/gdscript/completion/autocomplete_setters_and_getters': boolean;

		/** If `true`, enables warnings when using a variable that wasn't previously assigned. */
		static 'debug/gdscript/warnings/unassigned_variable': boolean;

		/** If `true`, enables warnings when assigning a variable using an assignment operator like `+=` if the variable wasn't previously assigned. */
		static 'debug/gdscript/warnings/unassigned_variable_op_assign': boolean;

		/** If `true`, enables warnings when a local variable is unused. */
		static 'debug/gdscript/warnings/unused_variable': boolean;

		/** If `true`, enables warnings when defining a local or subclass member variable that would shadow a variable at an upper level (such as a member variable). */
		static 'debug/gdscript/warnings/shadowed_variable': boolean;

		/** If `true`, enables warnings when a member variable is unused. */
		static 'debug/gdscript/warnings/unused_class_variable': boolean;

		/** If `true`, enables warnings when a function parameter is unused. */
		static 'debug/gdscript/warnings/unused_argument': boolean;

		/** If `true`, enables warnings when unreachable code is detected (such as after a `return` statement that will always be executed). */
		static 'debug/gdscript/warnings/unreachable_code': boolean;

		/** If `true`, enables warnings when calling an expression that has no effect on the surrounding code, such as writing `2 + 2` as a statement. */
		static 'debug/gdscript/warnings/standalone_expression': boolean;

		/** If `true`, enables warnings when assigning the result of a function that returns `void` to a variable. */
		static 'debug/gdscript/warnings/void_assignment': boolean;

		/** If `true`, enables warnings when passing a floating-point value to a function that expects an integer (it will be converted and lose precision). */
		static 'debug/gdscript/warnings/narrowing_conversion': boolean;

		/** If `true`, enables warnings when a function assigned to a variable may yield and return a function state instead of a value. */
		static 'debug/gdscript/warnings/function_may_yield': boolean;

		/** If `true`, enables warnings when a variable is declared with the same name as a function. This will turn into an error in a future version when first-class functions become supported in GDScript. */
		static 'debug/gdscript/warnings/variable_conflicts_function': boolean;

		/** If `true`, enables warnings when a function is declared with the same name as a variable. This will turn into an error in a future version when first-class functions become supported in GDScript. */
		static 'debug/gdscript/warnings/function_conflicts_variable': boolean;

		/** If `true`, enables warnings when a function is declared with the same name as a constant. */
		static 'debug/gdscript/warnings/function_conflicts_constant': boolean;

		/** If `true`, enables warnings when a ternary operator may emit values with incompatible types. */
		static 'debug/gdscript/warnings/incompatible_ternary': boolean;

		/** If `true`, enables warnings when a signal is unused. */
		static 'debug/gdscript/warnings/unused_signal': boolean;

		/** If `true`, enables warnings when calling a function without using its return value (by assigning it to a variable or using it as a function argument). Such return values are sometimes used to denote possible errors using the `Error` enum. */
		static 'debug/gdscript/warnings/return_value_discarded': boolean;

		/** If `true`, enables warnings when using a property as if it was a function. */
		static 'debug/gdscript/warnings/property_used_as_function': boolean;

		/** If `true`, enables warnings when a constant is used as a function. */
		static 'debug/gdscript/warnings/constant_used_as_function': boolean;

		/** If `true`, enables warnings when using a function as if it was a property. */
		static 'debug/gdscript/warnings/function_used_as_property': boolean;

		/** If `true`, enables warnings when dividing an integer by another integer (the decimal part will be discarded). */
		static 'debug/gdscript/warnings/integer_division': boolean;

		/** If `true`, enables warnings when accessing a property whose presence is not guaranteed at compile-time in the class. */
		static 'debug/gdscript/warnings/unsafe_property_access': boolean;

		/** If `true`, enables warnings when calling a method whose presence is not guaranteed at compile-time in the class. */
		static 'debug/gdscript/warnings/unsafe_method_access': boolean;

		/** If `true`, enables warnings when performing an unsafe cast. */
		static 'debug/gdscript/warnings/unsafe_cast': boolean;

		/** If `true`, enables warnings when using an expression whose type may not be compatible with the function parameter expected. */
		static 'debug/gdscript/warnings/unsafe_call_argument': boolean;

		/** If `true`, enables warnings when deprecated keywords such as `slave` are used. */
		static 'debug/gdscript/warnings/deprecated_keyword': boolean;

		/** If `true`, enables warnings when calling a ternary expression that has no effect on the surrounding code, such as writing `42 if active else 0` as a statement. */
		static 'debug/gdscript/warnings/standalone_ternary': boolean;

		/** Maximum call stack in visual scripting, to avoid infinite recursion. */
		static 'debug/settings/visual_script/max_call_stack': number;

		/** Maximum size (in kiB) for the `WebRTCDataChannel` input buffer. */
		static 'network/limits/webrtc/max_channel_in_buffer_kb': number;

		/** Maximum size (in kiB) for the `WebSocketClient` input buffer. */
		static 'network/limits/websocket_client/max_in_buffer_kb': number;

		/** Maximum number of concurrent input packets for `WebSocketClient`. */
		static 'network/limits/websocket_client/max_in_packets': number;

		/** Maximum size (in kiB) for the `WebSocketClient` output buffer. */
		static 'network/limits/websocket_client/max_out_buffer_kb': number;

		/** Maximum number of concurrent output packets for `WebSocketClient`. */
		static 'network/limits/websocket_client/max_out_packets': number;

		/** Maximum size (in kiB) for the `WebSocketServer` input buffer. */
		static 'network/limits/websocket_server/max_in_buffer_kb': number;

		/** Maximum number of concurrent input packets for `WebSocketServer`. */
		static 'network/limits/websocket_server/max_in_packets': number;

		/** Maximum size (in kiB) for the `WebSocketServer` output buffer. */
		static 'network/limits/websocket_server/max_out_buffer_kb': number;

		/** Maximum number of concurrent output packets for `WebSocketServer`. */
		static 'network/limits/websocket_server/max_out_packets': number;

		/** Sets whether physics is run on the main thread or a separate one. Running the server on a thread increases performance, but restricts API access to only physics process.

		 **Warning:** As of Godot 3.2, there are mixed reports about the use of a Multi-Threaded thread model for physics. Be sure to assess whether it does give you extra performance and no regressions when using it. */
		static 'physics/2d/thread_model': number;

		/** If non-empty, this locale will be used when running the project from the editor. */
		static 'locale/test': string;

		/** The locale to fall back to if a translation isn't available in a given language. If left empty, `en` (English) will be used. */
		static 'locale/fallback': string;

		/** Color of the collision shapes, visible when "Visible Collision Shapes" is enabled in the Debug menu. */
		static 'debug/shapes/collision/shape_color': Color;

		/** Color of the contact points between collision shapes, visible when "Visible Collision Shapes" is enabled in the Debug menu. */
		static 'debug/shapes/collision/contact_color': Color;

		/** Color of the navigation geometry, visible when "Visible Navigation" is enabled in the Debug menu. */
		static 'debug/shapes/navigation/geometry_color': Color;

		/** Color of the disabled navigation geometry, visible when "Visible Navigation" is enabled in the Debug menu. */
		static 'debug/shapes/navigation/disabled_geometry_color': Color;

		/** Maximum number of contact points between collision shapes to display when "Visible Collision Shapes" is enabled in the Debug menu. */
		static 'debug/shapes/collision/max_contacts_displayed': number;

		/** Threshold linear velocity under which a 2D physics body will be considered inactive. See `Physics2DServer.SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD`. */
		static 'physics/2d/sleep_threshold_linear': number;

		/** Threshold angular velocity under which a 2D physics body will be considered inactive. See `Physics2DServer.SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD`. */
		static 'physics/2d/sleep_threshold_angular': number;

		/** Time (in seconds) of inactivity before which a 2D physics body will put to sleep. See `Physics2DServer.SPACE_PARAM_BODY_TIME_TO_SLEEP`. */
		static 'physics/2d/time_before_sleep': number;

		/** Size of the hash table used for the broad-phase 2D hash grid algorithm. */
		static 'physics/2d/bp_hash_table_size': number;

		/** Cell size used for the broad-phase 2D hash grid algorithm. */
		static 'physics/2d/cell_size': number;

		/** Threshold defining the surface size that constitutes a large object with regard to cells in the broad-phase 2D hash grid algorithm. */
		static 'physics/2d/large_object_surface_threshold_in_cells': number;

		/** The default gravity strength in 2D.

		 **Note:** This property is only read when the project starts. To change the default gravity at runtime, use the following code sample:

		 ```gdscript
		 # Set the default gravity strength to 98.
		 Physics2DServer.area_set_param(get_viewport().find_world_2d().get_space(), Physics2DServer.AREA_PARAM_GRAVITY, 98)
		 ``` */
		static 'physics/2d/default_gravity': number;

		/** The default gravity direction in 2D.

		 **Note:** This property is only read when the project starts. To change the default gravity vector at runtime, use the following code sample:

		 ```gdscript
		 # Set the default gravity direction to `Vector2(0, 1)`.
		 Physics2DServer.area_set_param(get_viewport().find_world_2d().get_space(), Physics2DServer.AREA_PARAM_GRAVITY_VECTOR, Vector2(0, 1))
		 ``` */
		static 'physics/2d/default_gravity_vector': Vector2;

		/** The default linear damp in 2D. */
		static 'physics/2d/default_linear_damp': number;

		/** The default angular damp in 2D. */
		static 'physics/2d/default_angular_damp': number;

		/** Cell size used for the 2D hash grid that `VisibilityNotifier2D` uses. */
		static 'world/2d/cell_size': number;

		/** Default delay for tooltips (in seconds). */
		static 'gui/timers/tooltip_delay_sec': number;

		/** The default gravity strength in 3D.

		 **Note:** This property is only read when the project starts. To change the default gravity at runtime, use the following code sample:

		 ```gdscript
		 # Set the default gravity strength to 9.8.
		 PhysicsServer.area_set_param(get_viewport().find_world().get_space(), PhysicsServer.AREA_PARAM_GRAVITY, 9.8)
		 ``` */
		static 'physics/3d/default_gravity': number;

		/** The default gravity direction in 3D.

		 **Note:** This property is only read when the project starts. To change the default gravity vector at runtime, use the following code sample:

		 ```gdscript
		 # Set the default gravity direction to `Vector3(0, -1, 0)`.
		 PhysicsServer.area_set_param(get_viewport().find_world().get_space(), PhysicsServer.AREA_PARAM_GRAVITY_VECTOR, Vector3(0, -1, 0))
		 ``` */
		static 'physics/3d/default_gravity_vector': Vector3;

		/** The default linear damp in 3D. */
		static 'physics/3d/default_linear_damp': number;

		/** The default angular damp in 3D. */
		static 'physics/3d/default_angular_damp': number;

		/** Size of the atlas used by reflection probes. A larger size can result in higher visual quality, while a smaller size will be faster and take up less memory. */
		static 'rendering/quality/reflections/atlas_size': number;

		/** Number of subdivisions to use for the reflection atlas. A higher number lowers the quality of each atlas, but allows you to use more. */
		static 'rendering/quality/reflections/atlas_subdiv': number;

		/** Sets the number of MSAA samples to use. MSAA is used to reduce aliasing around the edges of polygons. A higher MSAA value results in smoother edges but can be significantly slower on some hardware.

		 **Note:** MSAA is not available on HTML5 export using the GLES2 backend. */
		static 'rendering/quality/filters/msaa': number;

		/** If `true`, allocates the main framebuffer with high dynamic range. High dynamic range allows the use of `Color` values greater than 1.

		 **Note:** Only available on the GLES3 backend. */
		static 'rendering/quality/depth/hdr': boolean;

		/** Lower-end override for `rendering/quality/depth/hdr` on mobile devices, due to performance concerns or driver support. */
		static 'rendering/quality/depth/hdr.mobile': boolean;

		/** `Environment` that will be used as a fallback environment in case a scene does not specify its own environment. The default environment is loaded in at scene load time regardless of whether you have set an environment or not. If you do not rely on the fallback environment, it is best to delete `default_env.tres`, or to specify a different default environment here. */
		static 'rendering/environment/default_environment': string;

		/** Enables `Viewport.physics_object_picking` on the root viewport. */
		static 'physics/common/enable_object_picking': boolean;

		/**  */
		static 'application/run/main_loop_type': string;

		/** Returns `true` if a configuration value is present. */
		static has_setting(name: string) : boolean;

		/** Sets the value of a setting.

		 **Example:**

		 ```gdscript
		 ProjectSettings.set_setting("application/config/name", "Example")
		 ``` */
		static set_setting(name: string, value: any) : void;

		/** Returns the value of a setting.

		 **Example:**

		 ```gdscript
		 print(ProjectSettings.get_setting("application/config/name"))
		 ``` */
		static get_setting(name: string) : any;

		/** Sets the order of a configuration value (influences when saved to the config file). */
		static set_order(name: string, position: number) : void;

		/** Returns the order of a configuration value (influences when saved to the config file). */
		static get_order(name: string) : number;

		/** Sets the specified property's initial value. This is the value the property reverts to. */
		static set_initial_value(name: string, value: any) : void;

		/** Adds a custom property info to a property. The dictionary must contain:

		 - `name`: `String` (the property's name)

		 - `type`: `int` (see `Variant.Type`)

		 - optionally `hint`: `int` (see `PropertyHint`) and `hint_string`: `String`

		 **Example:**

		 ```gdscript
		 ProjectSettings.set("category/property_name", 0)
		 
		 var property_info = {
		     "name": "category/property_name",
		     "type": TYPE_INT,
		     "hint": PROPERTY_HINT_ENUM,
		     "hint_string": "one,two,three"
		 }
		 
		 ProjectSettings.add_property_info(property_info)
		 ``` */
		static add_property_info(hint: object) : void;

		/** Clears the whole configuration (not recommended, may break things). */
		static clear(name: string) : void;

		/** Convert a path to a localized path (`res://` path). */
		static localize_path(path: string) : string;

		/** Converts a localized path (`res://`) to a full native OS path. */
		static globalize_path(path: string) : string;

		/** Saves the configuration to the `project.godot` file. */
		static save() : number;

		/** Loads the contents of the .pck or .zip file specified by `pack` into the resource filesystem (`res://`). Returns `true` on success.

		 **Note:** If a file from `pack` shares the same path as a file already in the resource filesystem, any attempts to load that file will use the file from `pack` unless `replace_files` is set to `false`. */
		//@ts-ignore
		static load_resource_pack(pack: string, replace_files: boolean = true) : boolean;

		/** Returns `true` if the specified property exists and its initial value differs from the current value. */
		static property_can_revert(name: string) : boolean;

		/** Returns the specified property's initial value. Returns `null` if the property does not exist. */
		static property_get_revert(name: string) : any;

		/** Saves the configuration to a custom file. The file extension must be `.godot` (to save in text-based `ConfigFile` format) or `.binary` (to save in binary format). */
		static save_custom(file: string) : number;
	}
	namespace ProjectSettings {
	}

	/** General-purpose proximity detection node.
	  */
	class ProximityGroup extends Spatial {

		/**  */
		group_name: string;

		/**  */
		dispatch_mode: number;

		/**  */
		grid_radius: Vector3;

		/**  */
		broadcast(name: string, parameters: any) : void;

		/** Getter of `group_name` property */
		get_group_name() : string;

		/** Setter of `group_name` property */
		set_group_name(p_value: string) : void;

		/** Getter of `dispatch_mode` property */
		get_dispatch_mode() : number;

		/** Setter of `dispatch_mode` property */
		set_dispatch_mode(p_value: number) : void;

		/** Getter of `grid_radius` property */
		get_grid_radius() : Vector3;

		/** Setter of `grid_radius` property */
		set_grid_radius(p_value: Vector3) : void;
	}
	namespace ProximityGroup {

		/**  */
		const broadcast: 'broadcast';
		enum DispatchMode {
			/**  */
			MODE_PROXY = 0,
			/**  */
			MODE_SIGNAL = 1,
		}

		/**  */
		const MODE_PROXY: DispatchMode.MODE_PROXY;

		/**  */
		const MODE_SIGNAL: DispatchMode.MODE_SIGNAL;
	}

	/** 
	  */
	class ProxyTexture extends Texture {

		/**  */
		base: Texture;

		/**  */
		flags: number;

		/** Getter of `base` property */
		get_base() : Texture;

		/** Setter of `base` property */
		set_base(p_value: Texture) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace ProxyTexture {
	}

	/** Class representing a square mesh.
	 Class representing a square `PrimitiveMesh`. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Y axes; this default rotation is more suited for use with billboarded materials. Unlike `PlaneMesh`, this mesh doesn't provide subdivision options. */
	class QuadMesh extends PrimitiveMesh {

		/** Size on the X and Y axes. */
		size: Vector2;

		/** Getter of `size` property */
		get_size() : Vector2;

		/** Setter of `size` property */
		set_size(p_value: Vector2) : void;
	}
	namespace QuadMesh {
	}

	/** A class for generating pseudo-random numbers.
	 RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses `url=http://www.pcg-random.org/`PCG32`/url`.

	 **Note:** The underlying algorithm is an implementation detail. As a result, it should not be depended upon for reproducible random streams across Godot versions.

	 To generate a random float number (within a given range) based on a time-dependant seed:

	 ```gdscript
	 var rng = RandomNumberGenerator.new()
	 func _ready():
	     rng.randomize()
	     var my_random_number = rng.randf_range(-10.0, 10.0)
	 ``` */
	class RandomNumberGenerator extends Reference {

		/** The seed used by the random number generator. A given seed will give a reproducible sequence of pseudo-random numbers.

		 **Note:** The RNG does not have an avalanche effect, and can output similar random streams given similar seeds. Consider using a hash function to improve your seed quality if they're sourced externally. */
		seed: number;

		/** Generates a pseudo-random 32-bit unsigned integer between `0` and `4294967295` (inclusive). */
		randi() : number;

		/** Generates a pseudo-random float between `0.0` and `1.0` (inclusive). */
		randf() : number;

		/** Generates a `url=https://en.wikipedia.org/wiki/Normal_distribution`normally-distributed`/url` pseudo-random number, using Box-Muller transform with the specified `mean` and a standard `deviation`. This is also called Gaussian distribution. */
		//@ts-ignore
		randfn(mean: number = 0.0, deviation: number = 1.0) : number;

		/** Generates a pseudo-random float between `from` and `to` (inclusive). */
		randf_range(p_from: number, to: number) : number;

		/** Generates a pseudo-random 32-bit signed integer between `from` and `to` (inclusive). */
		randi_range(p_from: number, to: number) : number;

		/** Setups a time-based seed to generator. */
		randomize() : void;

		/** Getter of `seed` property */
		get_seed() : number;

		/** Setter of `seed` property */
		set_seed(p_value: number) : void;
	}
	namespace RandomNumberGenerator {
	}

	/** Abstract base class for range-based controls.
	 Range is a base class for `Control` nodes that change a floating-point *value* between a *minimum* and a *maximum*, using *step* and *page*, for example a `ScrollBar`. */
	class Range extends Control {

		/** Minimum value. Range is clamped if `value` is less than `min_value`. */
		min_value: number;

		/** Maximum value. Range is clamped if `value` is greater than `max_value`. */
		max_value: number;

		/** If greater than 0, `value` will always be rounded to a multiple of `step`. If `rounded` is also `true`, `value` will first be rounded to a multiple of `step` then rounded to the nearest integer. */
		step: number;

		/** Page size. Used mainly for `ScrollBar`. ScrollBar's length is its size multiplied by `page` over the difference between `min_value` and `max_value`. */
		page: number;

		/** Range's current value. */
		value: number;

		/** The value mapped between 0 and 1. */
		ratio: number;

		/** If `true`, and `min_value` is greater than 0, `value` will be represented exponentially rather than linearly. */
		exp_edit: boolean;

		/** If `true`, `value` will always be rounded to the nearest integer. */
		rounded: boolean;

		/** If `true`, `value` may be greater than `max_value`. */
		allow_greater: boolean;

		/** If `true`, `value` may be less than `min_value`. */
		allow_lesser: boolean;

		/** Binds two ranges together along with any ranges previously grouped with either of them. When any of range's member variables change, it will share the new value with all other ranges in its group. */
		share(p_with: Node) : void;

		/** Stops range from sharing its member variables with any other. */
		unshare() : void;

		/** Getter of `min_value` property */
		get_min() : number;

		/** Setter of `min_value` property */
		set_min(p_value: number) : void;

		/** Getter of `max_value` property */
		get_max() : number;

		/** Setter of `max_value` property */
		set_max(p_value: number) : void;

		/** Getter of `step` property */
		get_step() : number;

		/** Setter of `step` property */
		set_step(p_value: number) : void;

		/** Getter of `page` property */
		get_page() : number;

		/** Setter of `page` property */
		set_page(p_value: number) : void;

		/** Getter of `value` property */
		get_value() : number;

		/** Setter of `value` property */
		set_value(p_value: number) : void;

		/** Getter of `ratio` property */
		get_as_ratio() : number;

		/** Setter of `ratio` property */
		set_as_ratio(p_value: number) : void;

		/** Getter of `exp_edit` property */
		is_ratio_exp() : boolean;

		/** Setter of `exp_edit` property */
		set_exp_ratio(p_value: boolean) : void;

		/** Getter of `rounded` property */
		is_using_rounded_values() : boolean;

		/** Setter of `rounded` property */
		set_use_rounded_values(p_value: boolean) : void;

		/** Getter of `allow_greater` property */
		is_greater_allowed() : boolean;

		/** Setter of `allow_greater` property */
		set_allow_greater(p_value: boolean) : void;

		/** Getter of `allow_lesser` property */
		is_lesser_allowed() : boolean;

		/** Setter of `allow_lesser` property */
		set_allow_lesser(p_value: boolean) : void;
	}
	namespace Range {

		/** Emitted when `value` changes. */
		const value_changed: 'value_changed';

		/** Emitted when `min_value`, `max_value`, `page`, or `step` change. */
		const changed: 'changed';
	}

	/** Query the closest object intersecting a ray.
	 A RayCast represents a line from its origin to its destination position, `cast_to`. It is used to query the 3D space in order to find the closest object along the path of the ray.

	 RayCast can ignore some objects by adding them to the exception list via `add_exception` or by setting proper filtering with collision layers and masks.

	 RayCast can be configured to report collisions with `Area`s (`collide_with_areas`) and/or `PhysicsBody`s (`collide_with_bodies`).

	 Only enabled raycasts will be able to query the space and report collisions.

	 RayCast calculates intersection every physics frame (see `Node`), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame), use `force_raycast_update` after adjusting the raycast. */
	class RayCast extends Spatial {

		/** If `true`, collisions will be reported. */
		enabled: boolean;

		/** If `true`, collisions will be ignored for this RayCast's immediate parent. */
		exclude_parent: boolean;

		/** The ray's destination point, relative to the RayCast's `position`. */
		cast_to: Vector3;

		/** The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. */
		collision_mask: number;

		/** If `true`, collision with `Area`s will be reported. */
		collide_with_areas: boolean;

		/** If `true`, collision with `PhysicsBody`s will be reported. */
		collide_with_bodies: boolean;

		/** Returns whether any object is intersecting with the ray's vector (considering the vector length). */
		is_colliding() : boolean;

		/** Updates the collision information for the ray.

		 Use this method to update the collision information immediately instead of waiting for the next `_physics_process` call, for example if the ray or its parent has changed state.

		 **Note:** `enabled == true` is not required for this to work. */
		force_raycast_update() : void;

		/** Returns the first object that the ray intersects, or `null` if no object is intersecting the ray (i.e. `is_colliding` returns `false`). */
		get_collider() : Object;

		/** Returns the shape ID of the first object that the ray intersects, or `0` if no object is intersecting the ray (i.e. `is_colliding` returns `false`). */
		get_collider_shape() : number;

		/** Returns the collision point at which the ray intersects the closest object.

		 **Note:** This point is in the **global** coordinate system. */
		get_collision_point() : Vector3;

		/** Returns the normal of the intersecting object's shape at the collision point. */
		get_collision_normal() : Vector3;

		/** Adds a collision exception so the ray does not report collisions with the specified `RID`. */
		add_exception_rid(rid: RID) : void;

		/** Adds a collision exception so the ray does not report collisions with the specified node. */
		add_exception(node: Object) : void;

		/** Removes a collision exception so the ray does report collisions with the specified `RID`. */
		remove_exception_rid(rid: RID) : void;

		/** Removes a collision exception so the ray does report collisions with the specified node. */
		remove_exception(node: Object) : void;

		/** Removes all collision exceptions for this ray. */
		clear_exceptions() : void;

		/** Sets the bit index passed to the `value` passed.

		 **Note:** Bit indexes range from 0-19. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns `true` if the bit index passed is turned on.

		 **Note:** Bit indices range from 0-19. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Getter of `enabled` property */
		is_enabled() : boolean;

		/** Setter of `enabled` property */
		set_enabled(p_value: boolean) : void;

		/** Getter of `exclude_parent` property */
		get_exclude_parent_body() : boolean;

		/** Setter of `exclude_parent` property */
		set_exclude_parent_body(p_value: boolean) : void;

		/** Getter of `cast_to` property */
		get_cast_to() : Vector3;

		/** Setter of `cast_to` property */
		set_cast_to(p_value: Vector3) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `collide_with_areas` property */
		is_collide_with_areas_enabled() : boolean;

		/** Setter of `collide_with_areas` property */
		set_collide_with_areas(p_value: boolean) : void;

		/** Getter of `collide_with_bodies` property */
		is_collide_with_bodies_enabled() : boolean;

		/** Setter of `collide_with_bodies` property */
		set_collide_with_bodies(p_value: boolean) : void;
	}
	namespace RayCast {
	}

	/** Query the closest object intersecting a ray.
	 A RayCast represents a line from its origin to its destination position, `cast_to`. It is used to query the 2D space in order to find the closest object along the path of the ray.

	 RayCast2D can ignore some objects by adding them to the exception list via `add_exception`, by setting proper filtering with collision layers, or by filtering object types with type masks.

	 RayCast2D can be configured to report collisions with `Area2D`s (`collide_with_areas`) and/or `PhysicsBody2D`s (`collide_with_bodies`).

	 Only enabled raycasts will be able to query the space and report collisions.

	 RayCast2D calculates intersection every physics frame (see `Node`), and the result is cached so it can be used later until the next frame. If multiple queries are required between physics frames (or during the same frame) use `force_raycast_update` after adjusting the raycast. */
	class RayCast2D extends Node2D {

		/** If `true`, collisions will be reported. */
		enabled: boolean;

		/** If `true`, the parent node will be excluded from collision detection. */
		exclude_parent: boolean;

		/** The ray's destination point, relative to the RayCast's `position`. */
		cast_to: Vector2;

		/** The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. */
		collision_mask: number;

		/** If `true`, collision with `Area2D`s will be reported. */
		collide_with_areas: boolean;

		/** If `true`, collision with `PhysicsBody2D`s will be reported. */
		collide_with_bodies: boolean;

		/** Returns whether any object is intersecting with the ray's vector (considering the vector length). */
		is_colliding() : boolean;

		/** Updates the collision information for the ray. Use this method to update the collision information immediately instead of waiting for the next `_physics_process` call, for example if the ray or its parent has changed state.

		 **Note:** `enabled == true` is not required for this to work. */
		force_raycast_update() : void;

		/** Returns the first object that the ray intersects, or `null` if no object is intersecting the ray (i.e. `is_colliding` returns `false`). */
		get_collider() : Object;

		/** Returns the shape ID of the first object that the ray intersects, or `0` if no object is intersecting the ray (i.e. `is_colliding` returns `false`). */
		get_collider_shape() : number;

		/** Returns the collision point at which the ray intersects the closest object.

		 **Note:** this point is in the **global** coordinate system. */
		get_collision_point() : Vector2;

		/** Returns the normal of the intersecting object's shape at the collision point. */
		get_collision_normal() : Vector2;

		/** Adds a collision exception so the ray does not report collisions with the specified `RID`. */
		add_exception_rid(rid: RID) : void;

		/** Adds a collision exception so the ray does not report collisions with the specified node. */
		add_exception(node: Object) : void;

		/** Removes a collision exception so the ray does report collisions with the specified `RID`. */
		remove_exception_rid(rid: RID) : void;

		/** Removes a collision exception so the ray does report collisions with the specified node. */
		remove_exception(node: Object) : void;

		/** Removes all collision exceptions for this ray. */
		clear_exceptions() : void;

		/** Sets or clears individual bits on the collision mask. This makes selecting the areas scanned easier. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Getter of `enabled` property */
		is_enabled() : boolean;

		/** Setter of `enabled` property */
		set_enabled(p_value: boolean) : void;

		/** Getter of `exclude_parent` property */
		get_exclude_parent_body() : boolean;

		/** Setter of `exclude_parent` property */
		set_exclude_parent_body(p_value: boolean) : void;

		/** Getter of `cast_to` property */
		get_cast_to() : Vector2;

		/** Setter of `cast_to` property */
		set_cast_to(p_value: Vector2) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `collide_with_areas` property */
		is_collide_with_areas_enabled() : boolean;

		/** Setter of `collide_with_areas` property */
		set_collide_with_areas(p_value: boolean) : void;

		/** Getter of `collide_with_bodies` property */
		is_collide_with_bodies_enabled() : boolean;

		/** Setter of `collide_with_bodies` property */
		set_collide_with_bodies(p_value: boolean) : void;
	}
	namespace RayCast2D {
	}

	/** Ray shape for 3D collisions.
	 Ray shape for 3D collisions, which can be set into a `PhysicsBody` or `Area`. A ray is not really a collision body; instead, it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters. */
	class RayShape extends Shape {

		/** The ray's length. */
		length: number;

		/** If `true`, allow the shape to return the correct normal. */
		slips_on_slope: boolean;

		/** Getter of `length` property */
		get_length() : number;

		/** Setter of `length` property */
		set_length(p_value: number) : void;

		/** Getter of `slips_on_slope` property */
		get_slips_on_slope() : boolean;

		/** Setter of `slips_on_slope` property */
		set_slips_on_slope(p_value: boolean) : void;
	}
	namespace RayShape {
	}

	/** Ray shape for 2D collisions.
	 Ray shape for 2D collisions. A ray is not really a collision body; instead, it tries to separate itself from whatever is touching its far endpoint. It's often useful for characters. */
	class RayShape2D extends Shape2D {

		/** The ray's length. */
		length: number;

		/** If `true`, allow the shape to return the correct normal. */
		slips_on_slope: boolean;

		/** Getter of `length` property */
		get_length() : number;

		/** Setter of `length` property */
		set_length(p_value: number) : void;

		/** Getter of `slips_on_slope` property */
		get_slips_on_slope() : boolean;

		/** Setter of `slips_on_slope` property */
		set_slips_on_slope(p_value: boolean) : void;
	}
	namespace RayShape2D {
	}

	/** Rectangle shape for 2D collisions.
	 Rectangle shape for 2D collisions. This shape is useful for modeling box-like 2D objects. */
	class RectangleShape2D extends Shape2D {

		/** The rectangle's half extents. The width and height of this shape is twice the half extents. */
		extents: Vector2;

		/** Getter of `extents` property */
		get_extents() : Vector2;

		/** Setter of `extents` property */
		set_extents(p_value: Vector2) : void;
	}
	namespace RectangleShape2D {
	}

	/** Base class for reference-counted objects.
	 Base class for any object that keeps a reference count. `Resource` and many other helper objects inherit this class.

	 References keep an internal reference counter so that they are automatically released when no longer in use, and only then. References therefore do not need to be freed manually with `Object.free`.

	 In the vast majority of use cases, instantiating and using `Reference`-derived types is all you need to do. The methods provided in this class are only for advanced users, and can cause issues if misused. */
	class Reference extends Object {

		/** Initializes the internal reference counter. Use this only if you really know what you are doing.

		 Returns whether the initialization was successful. */
		init_ref() : boolean;

		/** Increments the internal reference counter. Use this only if you really know what you are doing.

		 Returns `true` if the increment was successful, `false` otherwise. */
		reference() : boolean;

		/** Decrements the internal reference counter. Use this only if you really know what you are doing.

		 Returns `true` if the decrement was successful, `false` otherwise. */
		unreference() : boolean;
	}
	namespace Reference {
	}

	/** Reference frame for GUI.
	 A rectangle box that displays only a `border_color` border color around its rectangle. `ReferenceRect` has no fill `Color`. */
	class ReferenceRect extends Control {

		/** Sets the border `Color` of the `ReferenceRect`. */
		border_color: Color;

		/** If set to `true`, the `ReferenceRect` will only be visible while in editor. Otherwise, `ReferenceRect` will be visible in game. */
		editor_only: boolean;

		/** Getter of `border_color` property */
		get_border_color() : Color;

		/** Setter of `border_color` property */
		set_border_color(p_value: Color) : void;

		/** Getter of `editor_only` property */
		get_editor_only() : boolean;

		/** Setter of `editor_only` property */
		set_editor_only(p_value: boolean) : void;
	}
	namespace ReferenceRect {
	}

	/** Captures its surroundings to create reflections.
	 Capture its surroundings as a dual paraboloid image, and stores versions of it with increasing levels of blur to simulate different material roughnesses.

	 The `ReflectionProbe` is used to create high-quality reflections at the cost of performance. It can be combined with `GIProbe`s and Screen Space Reflections to achieve high quality reflections. `ReflectionProbe`s render all objects within their `cull_mask`, so updating them can be quite expensive. It is best to update them once with the important static objects and then leave them.

	 Note: By default Godot will only render 16 reflection probes. If you need more, increase the number of atlas subdivisions. This setting can be found in `ProjectSettings.rendering/quality/reflections/atlas_subdiv`. */
	class ReflectionProbe extends VisualInstance {

		/** Sets how frequently the probe is updated. Can be `UPDATE_ONCE` or `UPDATE_ALWAYS`. */
		update_mode: number;

		/** Defines the reflection intensity. Intensity modulates the strength of the reflection. */
		intensity: number;

		/** Sets the max distance away from the probe an object can be before it is culled. */
		max_distance: number;

		/** The size of the reflection probe. The larger the extents the more space covered by the probe which will lower the perceived resolution. It is best to keep the extents only as large as you need them. */
		extents: Vector3;

		/** Sets the origin offset to be used when this reflection probe is in box project mode. */
		origin_offset: Vector3;

		/** If `true`, enables box projection. This makes reflections look more correct in rectangle-shaped rooms by offsetting the reflection center depending on the camera's location. */
		box_projection: boolean;

		/** If `true`, computes shadows in the reflection probe. This makes the reflection probe slower to render; you may want to disable this if using the `UPDATE_ALWAYS` `update_mode`. */
		enable_shadows: boolean;

		/** Sets the cull mask which determines what objects are drawn by this probe. Every `VisualInstance` with a layer included in this cull mask will be rendered by the probe. It is best to only include large objects which are likely to take up a lot of space in the reflection in order to save on rendering cost. */
		cull_mask: number;

		/** If `true`, reflections will ignore sky contribution. Ambient lighting is then controlled by the `interior_ambient_*` properties. */
		interior_enable: boolean;

		/** Sets the ambient light color to be used when this probe is set to `interior_enable`. */
		interior_ambient_color: Color;

		/** Sets the energy multiplier for this reflection probe's ambient light contribution when set to `interior_enable`. */
		interior_ambient_energy: number;

		/** Sets the contribution value for how much the reflection affects the ambient light for this reflection probe when set to `interior_enable`. Useful so that ambient light matches the color of the room. */
		interior_ambient_contrib: number;

		/** Getter of `update_mode` property */
		get_update_mode() : number;

		/** Setter of `update_mode` property */
		set_update_mode(p_value: number) : void;

		/** Getter of `intensity` property */
		get_intensity() : number;

		/** Setter of `intensity` property */
		set_intensity(p_value: number) : void;

		/** Getter of `max_distance` property */
		get_max_distance() : number;

		/** Setter of `max_distance` property */
		set_max_distance(p_value: number) : void;

		/** Getter of `extents` property */
		get_extents() : Vector3;

		/** Setter of `extents` property */
		set_extents(p_value: Vector3) : void;

		/** Getter of `origin_offset` property */
		get_origin_offset() : Vector3;

		/** Setter of `origin_offset` property */
		set_origin_offset(p_value: Vector3) : void;

		/** Getter of `box_projection` property */
		is_box_projection_enabled() : boolean;

		/** Setter of `box_projection` property */
		set_enable_box_projection(p_value: boolean) : void;

		/** Getter of `enable_shadows` property */
		are_shadows_enabled() : boolean;

		/** Setter of `enable_shadows` property */
		set_enable_shadows(p_value: boolean) : void;

		/** Getter of `cull_mask` property */
		get_cull_mask() : number;

		/** Setter of `cull_mask` property */
		set_cull_mask(p_value: number) : void;

		/** Getter of `interior_enable` property */
		is_set_as_interior() : boolean;

		/** Setter of `interior_enable` property */
		set_as_interior(p_value: boolean) : void;

		/** Getter of `interior_ambient_color` property */
		get_interior_ambient() : Color;

		/** Setter of `interior_ambient_color` property */
		set_interior_ambient(p_value: Color) : void;

		/** Getter of `interior_ambient_energy` property */
		get_interior_ambient_energy() : number;

		/** Setter of `interior_ambient_energy` property */
		set_interior_ambient_energy(p_value: number) : void;

		/** Getter of `interior_ambient_contrib` property */
		get_interior_ambient_probe_contribution() : number;

		/** Setter of `interior_ambient_contrib` property */
		set_interior_ambient_probe_contribution(p_value: number) : void;
	}
	namespace ReflectionProbe {
		enum UpdateMode {
			/** Update the probe once on the next frame. */
			UPDATE_ONCE = 0,
			/** Update the probe every frame. This is needed when you want to capture dynamic objects. However, it results in an increased render time. Use `UPDATE_ONCE` whenever possible. */
			UPDATE_ALWAYS = 1,
		}

		/** Update the probe once on the next frame. */
		const UPDATE_ONCE: UpdateMode.UPDATE_ONCE;

		/** Update the probe every frame. This is needed when you want to capture dynamic objects. However, it results in an increased render time. Use `UPDATE_ONCE` whenever possible. */
		const UPDATE_ALWAYS: UpdateMode.UPDATE_ALWAYS;
	}

	/** Class for searching text for patterns using regular expressions.
	 A regular expression (or regex) is a compact language that can be used to recognise strings that follow a specific pattern, such as URLs, email addresses, complete sentences, etc. For instance, a regex of `ab`0-9`` would find any string that is `ab` followed by any number from `0` to `9`. For a more in-depth look, you can easily find various tutorials and detailed explanations on the Internet.

	 To begin, the RegEx object needs to be compiled with the search pattern using `compile` before it can be used.

	 ```gdscript
	 var regex = RegEx.new()
	 regex.compile("\\w-(\\d+)")
	 ```

	 The search pattern must be escaped first for GDScript before it is escaped for the expression. For example, `compile("\\d+")` would be read by RegEx as `\d+`. Similarly, `compile("\"(?:\\\\.|`^\"`)*\"")` would be read as `"(?:\\.|`^"`)*"`.

	 Using `search` you can find the pattern within the given text. If a pattern is found, `RegExMatch` is returned and you can retrieve details of the results using functions such as `RegExMatch.get_string` and `RegExMatch.get_start`.

	 ```gdscript
	 var regex = RegEx.new()
	 regex.compile("\\w-(\\d+)")
	 var result = regex.search("abc n-0123")
	 if result:
	     print(result.get_string()) # Would print n-0123
	 ```

	 The results of capturing groups `()` can be retrieved by passing the group number to the various functions in `RegExMatch`. Group 0 is the default and will always refer to the entire pattern. In the above example, calling `result.get_string(1)` would give you `0123`.

	 This version of RegEx also supports named capturing groups, and the names can be used to retrieve the results. If two or more groups have the same name, the name would only refer to the first one with a match.

	 ```gdscript
	 var regex = RegEx.new()
	 regex.compile("d(?<digit>[0-9]+)|x(?<digit>[0-9a-f]+)")
	 var result = regex.search("the number is x2f")
	 if result:
	     print(result.get_string("digit")) # Would print 2f
	 ```

	 If you need to process multiple results, `search_all` generates a list of all non-overlapping results. This can be combined with a `for` loop for convenience.

	 ```gdscript
	 for result in regex.search_all("d01, d03, d0c, x3f and x42"):
	     print(result.get_string("digit"))
	 # Would print 01 03 0 3f 42
	 ```

	 **Note:** Godot's regex implementation is based on the `url=https://www.pcre.org/`PCRE2`/url` library. You can view the full pattern reference `url=https://www.pcre.org/current/doc/html/pcre2pattern.html`here`/url`.

	 **Tip:** You can use `url=https://regexr.com/`Regexr`/url` to test regular expressions online. */
	class RegEx extends Reference {

		/** This method resets the state of the object, as if it was freshly created. Namely, it unassigns the regular expression of this object. */
		clear() : void;

		/** Compiles and assign the search pattern to use. Returns `OK` if the compilation is successful. If an error is encountered, details are printed to standard output and an error is returned. */
		compile(pattern: string) : number;

		/** Searches the text for the compiled pattern. Returns a `RegExMatch` container of the first matching result if found, otherwise `null`. The region to search within can be specified without modifying where the start and end anchor would be. */
		//@ts-ignore
		search(subject: string, offset: number = 0, end: number = -1) : RegExMatch;

		/** Searches the text for the compiled pattern. Returns an array of `RegExMatch` containers for each non-overlapping result. If no results were found, an empty array is returned instead. The region to search within can be specified without modifying where the start and end anchor would be. */
		//@ts-ignore
		search_all(subject: string, offset: number = 0, end: number = -1) : any[];

		/** Searches the text for the compiled pattern and replaces it with the specified string. Escapes and backreferences such as `$1` and `$name` are expanded and resolved. By default, only the first instance is replaced, but it can be changed for all instances (global replacement). The region to search within can be specified without modifying where the start and end anchor would be. */
		//@ts-ignore
		sub(subject: string, replacement: string, all: boolean = false, offset: number = 0, end: number = -1) : string;

		/** Returns whether this object has a valid search pattern assigned. */
		is_valid() : boolean;

		/** Returns the original search pattern that was compiled. */
		get_pattern() : string;

		/** Returns the number of capturing groups in compiled pattern. */
		get_group_count() : number;

		/** Returns an array of names of named capturing groups in the compiled pattern. They are ordered by appearance. */
		get_names() : any[];
	}
	namespace RegEx {
	}

	/** Contains the results of a `RegEx` search.
	 Contains the results of a single `RegEx` match returned by `RegEx.search` and `RegEx.search_all`. It can be used to find the position and range of the match and its capturing groups, and it can extract its substring for you. */
	class RegExMatch extends Reference {

		/** The source string used with the search pattern to find this matching result. */
		subject: string;

		/** A dictionary of named groups and its corresponding group number. Only groups that were matched are included. If multiple groups have the same name, that name would refer to the first matching one. */
		names: object;

		/** An `Array` of the match and its capturing groups. */
		strings: any[];

		/** Returns the number of capturing groups. */
		get_group_count() : number;

		/** Returns the substring of the match from the source string. Capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.

		 Returns an empty string if the group did not match or doesn't exist. */
		//@ts-ignore
		get_string(name: any = 0) : string;

		/** Returns the starting position of the match within the source string. The starting position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.

		 Returns -1 if the group did not match or doesn't exist. */
		//@ts-ignore
		get_start(name: any = 0) : number;

		/** Returns the end position of the match within the source string. The end position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.

		 Returns -1 if the group did not match or doesn't exist. */
		//@ts-ignore
		get_end(name: any = 0) : number;

		/** Getter of `subject` property */
		get_subject() : string;

		/** Getter of `names` property */
		get_names() : object;

		/** Getter of `strings` property */
		get_strings() : any[];
	}
	namespace RegExMatch {
	}

	/** RemoteTransform pushes its own `Transform` to another `Spatial` derived Node in the scene.
	 RemoteTransform pushes its own `Transform` to another `Spatial` derived Node (called the remote node) in the scene.

	 It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates. */
	class RemoteTransform extends Spatial {

		/** The `NodePath` to the remote node, relative to the RemoteTransform's position in the scene. */
		remote_path: string;

		/** If `true`, global coordinates are used. If `false`, local coordinates are used. */
		use_global_coordinates: boolean;

		/** If `true`, the remote node's position is updated. */
		update_position: boolean;

		/** If `true`, the remote node's rotation is updated. */
		update_rotation: boolean;

		/** If `true`, the remote node's scale is updated. */
		update_scale: boolean;

		/** `RemoteTransform` caches the remote node. It may not notice if the remote node disappears; `force_update_cache` forces it to update the cache again. */
		force_update_cache() : void;

		/** Getter of `remote_path` property */
		get_remote_node() : string;

		/** Setter of `remote_path` property */
		set_remote_node(p_value: string) : void;

		/** Getter of `use_global_coordinates` property */
		get_use_global_coordinates() : boolean;

		/** Setter of `use_global_coordinates` property */
		set_use_global_coordinates(p_value: boolean) : void;

		/** Getter of `update_position` property */
		get_update_position() : boolean;

		/** Setter of `update_position` property */
		set_update_position(p_value: boolean) : void;

		/** Getter of `update_rotation` property */
		get_update_rotation() : boolean;

		/** Setter of `update_rotation` property */
		set_update_rotation(p_value: boolean) : void;

		/** Getter of `update_scale` property */
		get_update_scale() : boolean;

		/** Setter of `update_scale` property */
		set_update_scale(p_value: boolean) : void;
	}
	namespace RemoteTransform {
	}

	/** RemoteTransform2D pushes its own `Transform2D` to another `CanvasItem` derived Node in the scene.
	 RemoteTransform2D pushes its own `Transform2D` to another `CanvasItem` derived Node (called the remote node) in the scene.

	 It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates. */
	class RemoteTransform2D extends Node2D {

		/** The `NodePath` to the remote node, relative to the RemoteTransform2D's position in the scene. */
		remote_path: string;

		/** If `true`, global coordinates are used. If `false`, local coordinates are used. */
		use_global_coordinates: boolean;

		/** If `true`, the remote node's position is updated. */
		update_position: boolean;

		/** If `true`, the remote node's rotation is updated. */
		update_rotation: boolean;

		/** If `true`, the remote node's scale is updated. */
		update_scale: boolean;

		/** `RemoteTransform2D` caches the remote node. It may not notice if the remote node disappears; `force_update_cache` forces it to update the cache again. */
		force_update_cache() : void;

		/** Getter of `remote_path` property */
		get_remote_node() : string;

		/** Setter of `remote_path` property */
		set_remote_node(p_value: string) : void;

		/** Getter of `use_global_coordinates` property */
		get_use_global_coordinates() : boolean;

		/** Setter of `use_global_coordinates` property */
		set_use_global_coordinates(p_value: boolean) : void;

		/** Getter of `update_position` property */
		get_update_position() : boolean;

		/** Setter of `update_position` property */
		set_update_position(p_value: boolean) : void;

		/** Getter of `update_rotation` property */
		get_update_rotation() : boolean;

		/** Setter of `update_rotation` property */
		set_update_rotation(p_value: boolean) : void;

		/** Getter of `update_scale` property */
		get_update_scale() : boolean;

		/** Setter of `update_scale` property */
		set_update_scale(p_value: boolean) : void;
	}
	namespace RemoteTransform2D {
	}

	/** Base class for all resources.
	 Resource is the base class for all Godot-specific resource types, serving primarily as data containers. They are reference counted and freed when no longer in use. They are also cached once loaded from disk, so that any further attempts to load a resource from a given path will return the same reference (all this in contrast to a `Node`, which is not reference counted and can be instanced from disk as many times as desired). Resources can be saved externally on disk or bundled into another object, such as a `Node` or another resource. */
	class Resource extends Reference {

		/** If `true`, the resource will be made unique in each instance of its local scene. It can thus be modified in a scene instance without impacting other instances of that same scene. */
		resource_local_to_scene: boolean;

		/** The path to the resource. In case it has its own file, it will return its filepath. If it's tied to the scene, it will return the scene's path, followed by the resource's index. */
		resource_path: string;

		/** The name of the resource. This is an optional identifier. */
		resource_name: string;

		/** Virtual function which can be overridden to customize the behavior value of `setup_local_to_scene`. */
		_setup_local_to_scene() : void;

		/** Sets the path of the resource, potentially overriding an existing cache entry for this path. This differs from setting `resource_path`, as the latter would error out if another resource was already cached for the given path. */
		take_over_path(path: string) : void;

		/** Returns the RID of the resource (or an empty RID). Many resources (such as `Texture`, `Mesh`, etc) are high-level abstractions of resources stored in a server, so this function will return the original RID. */
		get_rid() : RID;

		/** If `resource_local_to_scene` is enabled and the resource was loaded from a `PackedScene` instantiation, returns the local scene where this resource's unique copy is in use. Otherwise, returns `null`. */
		get_local_scene() : Node;

		/** This method is called when a resource with `resource_local_to_scene` enabled is loaded from a `PackedScene` instantiation. Its behavior can be customized by overriding `_setup_local_to_scene` from script.

		 For most resources, this method performs no base logic. `ViewportTexture` performs custom logic to properly set the proxy texture and flags in the local viewport. */
		setup_local_to_scene() : void;

		/** Duplicates the resource, returning a new resource. By default, sub-resources are shared between resource copies for efficiency. This can be changed by passing `true` to the `subresources` argument which will copy the subresources.

		 **Note:** If `subresources` is `true`, this method will only perform a shallow copy. Nested resources within subresources will not be duplicated and will still be shared. */
		//@ts-ignore
		duplicate(subresources: boolean = false) : Resource;

		/** Getter of `resource_local_to_scene` property */
		is_local_to_scene() : boolean;

		/** Setter of `resource_local_to_scene` property */
		set_local_to_scene(p_value: boolean) : void;

		/** Getter of `resource_path` property */
		get_path() : string;

		/** Setter of `resource_path` property */
		set_path(p_value: string) : void;

		/** Getter of `resource_name` property */
		get_name() : string;

		/** Setter of `resource_name` property */
		set_name(p_value: string) : void;
	}
	namespace Resource {

		/** Emitted whenever the resource changes. */
		const changed: 'changed';
	}

	/** Loads a specific resource type from a file.
	 Godot loads resources in the editor or in exported games using ResourceFormatLoaders. They are queried automatically via the `ResourceLoader` singleton, or when a resource with internal dependencies is loaded. Each file type may load as a different resource type, so multiple ResourceFormatLoaders are registered in the engine.

	 Extending this class allows you to define your own loader. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatLoaders, it will be called automatically when loading resources of its handled type(s). You may also implement a `ResourceFormatSaver`.

	 **Note:** You can also extend `EditorImportPlugin` if the resource type you need exists but Godot is unable to load its format. Choosing one way over another depends if the format is suitable or not for the final exported game. For example, it's better to import `.png` textures as `.stex` (`StreamTexture`) first, so they can be loaded with better efficiency on the graphics card. */
	class ResourceFormatLoader extends Reference {

		/** If implemented, gets the dependencies of a given resource. If `add_types` is `true`, paths should be appended `::TypeName`, where `TypeName` is the class name of the dependency.

		 **Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just return `"Resource"` for them. */
		get_dependencies(path: string, add_types: string) : void;

		/** Gets the list of extensions for files this loader is able to read. */
		get_recognized_extensions() : PoolStringArray;

		/** Gets the class name of the resource associated with the given path. If the loader cannot handle it, it should return `""`.

		 **Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just return `"Resource"` for them. */
		get_resource_type(path: string) : string;

		/** Tells which resource class this loader can load.

		 **Note:** Custom resource types defined by scripts aren't known by the `ClassDB`, so you might just handle `"Resource"` for them. */
		handles_type(typename: string) : boolean;

		/** Loads a resource when the engine finds this loader to be compatible. If the loaded resource is the result of an import, `original_path` will target the source file. Returns a `Resource` object on success, or an `Error` constant in case of failure. */
		load(path: string, original_path: string) : any;

		/** If implemented, renames dependencies within the given resource and saves it. `renames` is a dictionary `{ String => String }` mapping old dependency paths to new paths.

		 Returns `OK` on success, or an `Error` constant in case of failure. */
		rename_dependencies(path: string, renames: string) : number;
	}
	namespace ResourceFormatLoader {
	}

	/** Saves a specific resource type to a file.
	 The engine can save resources when you do it from the editor, or when you use the `ResourceSaver` singleton. This is accomplished thanks to multiple `ResourceFormatSaver`s, each handling its own format and called automatically by the engine.

	 By default, Godot saves resources as `.tres` (text-based), `.res` (binary) or another built-in format, but you can choose to create your own format by extending this class. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatSavers, it will be called automatically when saving resources of its recognized type(s). You may also implement a `ResourceFormatLoader`. */
	class ResourceFormatSaver extends Reference {

		/** Returns the list of extensions available for saving the resource object, provided it is recognized (see `recognize`). */
		get_recognized_extensions(resource: Resource) : PoolStringArray;

		/** Returns whether the given resource object can be saved by this saver. */
		recognize(resource: Resource) : boolean;

		/** Saves the given resource object to a file at the target `path`. `flags` is a bitmask composed with `ResourceSaver.SaverFlags` constants.

		 Returns `OK` on success, or an `Error` constant in case of failure. */
		save(path: string, resource: Resource, flags: number) : number;
	}
	namespace ResourceFormatSaver {
	}

	/** 
	  */
	class ResourceImporter extends Reference {
	}
	namespace ResourceImporter {
	}

	/** Interactive `Resource` loader.
	 Interactive `Resource` loader. This object is returned by `ResourceLoader` when performing an interactive load. It allows loading resources with high granularity, which makes it mainly useful for displaying loading bars or percentages. */
	class ResourceInteractiveLoader extends Reference {

		/** Returns the loaded resource if the load operation completed successfully, `null` otherwise. */
		get_resource() : Resource;

		/** Polls the loading operation, i.e. loads a data chunk up to the next stage.

		 Returns `OK` if the poll is successful but the load operation has not finished yet (intermediate stage). This means `poll` will have to be called again until the last stage is completed.

		 Returns `ERR_FILE_EOF` if the load operation has completed successfully. The loaded resource can be obtained by calling `get_resource`.

		 Returns another `Error` code if the poll has failed. */
		poll() : number;

		/** Polls the loading operation successively until the resource is completely loaded or a `poll` fails.

		 Returns `ERR_FILE_EOF` if the load operation has completed successfully. The loaded resource can be obtained by calling `get_resource`.

		 Returns another `Error` code if a poll has failed, aborting the operation. */
		wait() : number;

		/** Returns the load stage. The total amount of stages can be queried with `get_stage_count`. */
		get_stage() : number;

		/** Returns the total amount of stages (calls to `poll`) needed to completely load this resource. */
		get_stage_count() : number;
	}
	namespace ResourceInteractiveLoader {
	}

	/** Singleton used to load resource files.
	 Singleton used to load resource files from the filesystem.

	 It uses the many `ResourceFormatLoader` classes registered in the engine (either built-in or from a plugin) to load files into memory and convert them to a format that can be used by the engine.

	 GDScript has a simplified `@GDScript.load` built-in method which can be used in most situations, leaving the use of `ResourceLoader` for more advanced scenarios. */
	class ResourceLoader extends Object {

		/** Starts loading a resource interactively. The returned `ResourceInteractiveLoader` object allows to load with high granularity, calling its `ResourceInteractiveLoader.poll` method successively to load chunks.

		 An optional `type_hint` can be used to further specify the `Resource` type that should be handled by the `ResourceFormatLoader`. */
		//@ts-ignore
		static load_interactive(path: string, type_hint: string = "") : ResourceInteractiveLoader;

		/** Loads a resource at the given `path`, caching the result for further access.

		 The registered `ResourceFormatLoader`s are queried sequentially to find the first one which can handle the file's extension, and then attempt loading. If loading fails, the remaining ResourceFormatLoaders are also attempted.

		 An optional `type_hint` can be used to further specify the `Resource` type that should be handled by the `ResourceFormatLoader`.

		 If `no_cache` is `true`, the resource cache will be bypassed and the resource will be loaded anew. Otherwise, the cached resource will be returned if it exists.

		 Returns an empty resource if no ResourceFormatLoader could handle the file. */
		//@ts-ignore
		static load(path: string, type_hint: string = "", no_cache: boolean = false) : Resource;

		/** Returns the list of recognized extensions for a resource type. */
		static get_recognized_extensions_for_type(type: string) : PoolStringArray;

		/** Changes the behavior on missing sub-resources. The default behavior is to abort loading. */
		static set_abort_on_missing_resources(abort: boolean) : void;

		/** Returns the dependencies for the resource at the given `path`. */
		static get_dependencies(path: string) : PoolStringArray;

		/** Returns whether a cached resource is available for the given `path`.

		 Once a resource has been loaded by the engine, it is cached in memory for faster access, and future calls to the `load` or `load_interactive` methods will use the cached version. The cached resource can be overridden by using `Resource.take_over_path` on a new resource for that same path. */
		static has_cached(path: string) : boolean;

		/** Returns whether a recognized resource exists for the given `path`.

		 An optional `type_hint` can be used to further specify the `Resource` type that should be handled by the `ResourceFormatLoader`. */
		//@ts-ignore
		static exists(path: string, type_hint: string = "") : boolean;

		/** *Deprecated method.* Use `has_cached` or `exists` instead. */
		static has(path: string) : boolean;
	}
	namespace ResourceLoader {
	}

	/** Resource Preloader Node.
	 This node is used to preload sub-resources inside a scene, so when the scene is loaded, all the resources are ready to use and can be retrieved from the preloader.

	 GDScript has a simplified `@GDScript.preload` built-in method which can be used in most situations, leaving the use of `ResourcePreloader` for more advanced scenarios. */
	class ResourcePreloader extends Node {

		/** Adds a resource to the preloader with the given `name`. If a resource with the given `name` already exists, the new resource will be renamed to "`name` N" where N is an incrementing number starting from 2. */
		add_resource(name: string, resource: Resource) : void;

		/** Removes the resource associated to `name` from the preloader. */
		remove_resource(name: string) : void;

		/** Renames a resource inside the preloader from `name` to `newname`. */
		rename_resource(name: string, newname: string) : void;

		/** Returns `true` if the preloader contains a resource associated to `name`. */
		has_resource(name: string) : boolean;

		/** Returns the resource associated to `name`. */
		get_resource(name: string) : Resource;

		/** Returns the list of resources inside the preloader. */
		get_resource_list() : PoolStringArray;
	}
	namespace ResourcePreloader {
	}

	/** Singleton for saving Godot-specific resource types.
	 Singleton for saving Godot-specific resource types to the filesystem.

	 It uses the many `ResourceFormatSaver` classes registered in the engine (either built-in or from a plugin) to save engine-specific resource data to text-based (e.g. `.tres` or `.tscn`) or binary files (e.g. `.res` or `.scn`). */
	class ResourceSaver extends Object {

		/** Saves a resource to disk to the given path, using a `ResourceFormatSaver` that recognizes the resource object.

		 The `flags` bitmask can be specified to customize the save behavior.

		 Returns `OK` on success. */
		//@ts-ignore
		static save(path: string, resource: Resource, flags: ResourceSaver.SaverFlags = 0) : number;

		/** Returns the list of extensions available for saving a resource of a given type. */
		static get_recognized_extensions(type: Resource) : PoolStringArray;
	}
	namespace ResourceSaver {
		enum SaverFlags {
			/** Save the resource with a path relative to the scene which uses it. */
			FLAG_RELATIVE_PATHS = 1,
			/** Bundles external resources. */
			FLAG_BUNDLE_RESOURCES = 2,
			/** Changes the `Resource.resource_path` of the saved resource to match its new location. */
			FLAG_CHANGE_PATH = 4,
			/** Do not save editor-specific metadata (identified by their `__editor` prefix). */
			FLAG_OMIT_EDITOR_PROPERTIES = 8,
			/** Save as big endian (see `File.endian_swap`). */
			FLAG_SAVE_BIG_ENDIAN = 16,
			/** Compress the resource on save using `File.COMPRESSION_ZSTD`. Only available for binary resource types. */
			FLAG_COMPRESS = 32,
			/** Take over the paths of the saved subresources (see `Resource.take_over_path`). */
			FLAG_REPLACE_SUBRESOURCE_PATHS = 64,
		}

		/** Save the resource with a path relative to the scene which uses it. */
		const FLAG_RELATIVE_PATHS: SaverFlags.FLAG_RELATIVE_PATHS;

		/** Bundles external resources. */
		const FLAG_BUNDLE_RESOURCES: SaverFlags.FLAG_BUNDLE_RESOURCES;

		/** Changes the `Resource.resource_path` of the saved resource to match its new location. */
		const FLAG_CHANGE_PATH: SaverFlags.FLAG_CHANGE_PATH;

		/** Do not save editor-specific metadata (identified by their `__editor` prefix). */
		const FLAG_OMIT_EDITOR_PROPERTIES: SaverFlags.FLAG_OMIT_EDITOR_PROPERTIES;

		/** Save as big endian (see `File.endian_swap`). */
		const FLAG_SAVE_BIG_ENDIAN: SaverFlags.FLAG_SAVE_BIG_ENDIAN;

		/** Compress the resource on save using `File.COMPRESSION_ZSTD`. Only available for binary resource types. */
		const FLAG_COMPRESS: SaverFlags.FLAG_COMPRESS;

		/** Take over the paths of the saved subresources (see `Resource.take_over_path`). */
		const FLAG_REPLACE_SUBRESOURCE_PATHS: SaverFlags.FLAG_REPLACE_SUBRESOURCE_PATHS;
	}

	/** A custom effect for use with `RichTextLabel`.
	 A custom effect for use with `RichTextLabel`.

	 **Note:** For a `RichTextEffect` to be usable, a BBCode tag must be defined as a member variable called `bbcode` in the script.

	 ```gdscript
	 # The RichTextEffect will be usable like this: `[example]Some text[/example]`
	 var bbcode = "example"
	 ```

	 **Note:** As soon as a `RichTextLabel` contains at least one `RichTextEffect`, it will continuously process the effect unless the project is paused. This may impact battery life negatively. */
	class RichTextEffect extends Resource {

		/** Override this method to modify properties in `char_fx`. The method must return `true` if the character could be transformed successfully. If the method returns `false`, it will skip transformation to avoid displaying broken text. */
		_process_custom_fx(char_fx: CharFXTransform) : boolean;
	}
	namespace RichTextEffect {
	}

	/** Label that displays rich text.
	 Rich text can contain custom text, fonts, images and some basic formatting. The label manages these as an internal tag stack. It also adapts itself to given width/heights.

	 **Note:** Assignments to `bbcode_text` clear the tag stack and reconstruct it from the property's contents. Any edits made to `bbcode_text` will erase previous edits made from other manual sources such as `append_bbcode` and the `push_*` / `pop` methods. */
	class RichTextLabel extends Control {

		/** If `true`, the label uses BBCode formatting. */
		bbcode_enabled: boolean;

		/** The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited.

		 **Note:** It is unadvised to use `+=` operator with `bbcode_text` (e.g. `bbcode_text += "some string"`) as it replaces the whole text and can cause slowdowns. Use `append_bbcode` for adding text instead. */
		bbcode_text: string;

		/** The restricted number of characters to display in the label. If `-1`, all characters will be displayed. */
		visible_characters: number;

		/** The range of characters to display, as a `float` between 0.0 and 1.0. When assigned an out of range value, it's the same as assigning 1.0.

		 **Note:** Setting this property updates `visible_characters` based on current `get_total_character_count`. */
		percent_visible: number;

		/** If `true`, the label underlines meta tags such as ``url`{text}`/url``. */
		meta_underlined: boolean;

		/** The number of spaces associated with a single tab length. Does not affect `\t` in text tags, only indent tags. */
		tab_size: number;

		/** The raw text of the label.

		 When set, clears the tag stack and adds a raw text tag to the top of it. Does not parse BBCodes. Does not modify `bbcode_text`. */
		text: string;

		/** If `true`, the label's height will be automatically updated to fit its content.

		 **Note:** This property is used as a workaround to fix issues with `RichTextLabel` in `Container`s, but it's unreliable in some cases and will be removed in future versions. */
		fit_content_height: boolean;

		/** If `true`, the scrollbar is visible. Setting this to `false` does not block scrolling completely. See `scroll_to_line`. */
		scroll_active: boolean;

		/** If `true`, the window scrolls down to display new content automatically. */
		scroll_following: boolean;

		/** If `true`, the label allows text selection. */
		selection_enabled: boolean;

		/** If `true`, the label uses the custom font color. */
		override_selected_font_color: boolean;

		/** The currently installed custom effects. This is an array of `RichTextEffect`s.

		 To add a custom effect, it's more convenient to use `install_effect`. */
		custom_effects: any[];

		/**  */
		rect_clip_content: boolean;

		/** Adds raw non-BBCode-parsed text to the tag stack. */
		add_text(text: string) : void;

		/** Adds an image's opening and closing tags to the tag stack, optionally providing a `width` and `height` to resize the image.

		 If `width` or `height` is set to 0, the image size will be adjusted in order to keep the original aspect ratio. */
		//@ts-ignore
		add_image(image: Texture, width: number = 0, height: number = 0) : void;

		/** Adds a newline tag to the tag stack. */
		newline() : void;

		/** Removes a line of content from the label. Returns `true` if the line exists.

		 The `line` argument is the index of the line to remove, it can take values in the interval ``0, get_line_count() - 1``. */
		remove_line(line: number) : boolean;

		/** Adds a ``font`` tag to the tag stack. Overrides default fonts for its duration. */
		push_font(font: Font) : void;

		/** Adds a ``font`` tag with a normal font to the tag stack. */
		push_normal() : void;

		/** Adds a ``font`` tag with a bold font to the tag stack. This is the same as adding a `**` tag if not currently in a `*` tag. */
		push_bold() : void;

		/** Adds a ``font`` tag with a bold italics font to the tag stack. */
		push_bold_italics() : void;

		/** Adds a ``font`` tag with a italics font to the tag stack. This is the same as adding a `*` tag if not currently in a `**` tag. */
		push_italics() : void;

		/** Adds a ``font`` tag with a monospace font to the tag stack. */
		push_mono() : void;

		/** Adds a ``color`` tag to the tag stack. */
		push_color(color: Color) : void;

		/** Adds an ``align`` tag based on the given `align` value. See `Align` for possible values. */
		push_align(align: RichTextLabel.Align) : void;

		/** Adds an ``indent`` tag to the tag stack. Multiplies `level` by current `tab_size` to determine new margin length. */
		push_indent(level: number) : void;

		/** Adds a ``list`` tag to the tag stack. Similar to the BBCodes ``ol`` or ``ul``, but supports more list types. Not fully implemented! */
		push_list(type: RichTextLabel.ListType) : void;

		/** Adds a ``meta`` tag to the tag stack. Similar to the BBCode ``url=something`{text}`/url``, but supports non-`String` metadata types. */
		push_meta(data: any) : void;

		/** Adds a `__` tag to the tag stack. */
		push_underline() : void;

		/** Adds a ``s`` tag to the tag stack. */
		push_strikethrough() : void;

		/** Adds a ``table=columns`` tag to the tag stack. */
		push_table(columns: number) : void;

		/** Edits the selected column's expansion options. If `expand` is `true`, the column expands in proportion to its expansion ratio versus the other columns' ratios.

		 For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively.

		 If `expand` is `false`, the column will not contribute to the total ratio. */
		set_table_column_expand(column: number, expand: boolean, ratio: number) : void;

		/** Adds a ``cell`` tag to the tag stack. Must be inside a ``table`` tag. See `push_table` for details. */
		push_cell() : void;

		/** Terminates the current tag. Use after `push_*` methods to close BBCodes manually. Does not need to follow `add_*` methods. */
		pop() : void;

		/** Clears the tag stack and sets `bbcode_text` to an empty string. */
		clear() : void;

		/** Returns the vertical scrollbar. */
		get_v_scroll() : VScrollBar;

		/** Scrolls the window's top line to match `line`. */
		scroll_to_line(line: number) : void;

		/** The assignment version of `append_bbcode`. Clears the tag stack and inserts the new content. Returns `OK` if parses `bbcode` successfully. */
		parse_bbcode(bbcode: string) : number;

		/** Parses `bbcode` and adds tags to the tag stack as needed. Returns the result of the parsing, `OK` if successful. */
		append_bbcode(bbcode: string) : number;

		/** Returns the total number of characters from text tags. Does not include BBCodes. */
		get_total_character_count() : number;

		/** Returns the total number of newlines in the tag stack's text tags. Considers wrapped text as one line. */
		get_line_count() : number;

		/** Returns the number of visible lines. */
		get_visible_line_count() : number;

		/** Returns the height of the content. */
		get_content_height() : number;

		/** Parses BBCode parameter `expressions` into a dictionary. */
		parse_expressions_for_values(expressions: PoolStringArray) : object;

		/** Installs a custom effect. `effect` should be a valid `RichTextEffect`. */
		install_effect(effect: any) : void;

		/** Getter of `bbcode_enabled` property */
		is_using_bbcode() : boolean;

		/** Setter of `bbcode_enabled` property */
		set_use_bbcode(p_value: boolean) : void;

		/** Getter of `bbcode_text` property */
		get_bbcode() : string;

		/** Setter of `bbcode_text` property */
		set_bbcode(p_value: string) : void;

		/** Getter of `visible_characters` property */
		get_visible_characters() : number;

		/** Setter of `visible_characters` property */
		set_visible_characters(p_value: number) : void;

		/** Getter of `percent_visible` property */
		get_percent_visible() : number;

		/** Setter of `percent_visible` property */
		set_percent_visible(p_value: number) : void;

		/** Getter of `meta_underlined` property */
		is_meta_underlined() : boolean;

		/** Setter of `meta_underlined` property */
		set_meta_underline(p_value: boolean) : void;

		/** Getter of `tab_size` property */
		get_tab_size() : number;

		/** Setter of `tab_size` property */
		set_tab_size(p_value: number) : void;

		/** Getter of `text` property */
		get_text() : string;

		/** Setter of `text` property */
		set_text(p_value: string) : void;

		/** Getter of `fit_content_height` property */
		is_fit_content_height_enabled() : boolean;

		/** Setter of `fit_content_height` property */
		set_fit_content_height(p_value: boolean) : void;

		/** Getter of `scroll_active` property */
		is_scroll_active() : boolean;

		/** Setter of `scroll_active` property */
		set_scroll_active(p_value: boolean) : void;

		/** Getter of `scroll_following` property */
		is_scroll_following() : boolean;

		/** Setter of `scroll_following` property */
		set_scroll_follow(p_value: boolean) : void;

		/** Getter of `selection_enabled` property */
		is_selection_enabled() : boolean;

		/** Setter of `selection_enabled` property */
		set_selection_enabled(p_value: boolean) : void;

		/** Getter of `override_selected_font_color` property */
		is_overriding_selected_font_color() : boolean;

		/** Setter of `override_selected_font_color` property */
		set_override_selected_font_color(p_value: boolean) : void;

		/** Getter of `custom_effects` property */
		get_effects() : any[];

		/** Setter of `custom_effects` property */
		set_effects(p_value: any[]) : void;

		/** Getter of `rect_clip_content` property */
		is_clipping_contents() : boolean;

		/** Setter of `rect_clip_content` property */
		set_clip_contents(p_value: boolean) : void;
	}
	namespace RichTextLabel {

		/** Triggered when the user clicks on content between meta tags. If the meta is defined in text, e.g. ``url={"data"="hi"}`hi`/url``, then the parameter for this signal will be a `String` type. If a particular type or an object is desired, the `push_meta` method must be used to manually insert the data into the tag stack. */
		const meta_clicked: 'meta_clicked';

		/** Triggers when the mouse enters a meta tag. */
		const meta_hover_started: 'meta_hover_started';

		/** Triggers when the mouse exits a meta tag. */
		const meta_hover_ended: 'meta_hover_ended';
		enum Align {
			/** Makes text left aligned. */
			ALIGN_LEFT = 0,
			/** Makes text centered. */
			ALIGN_CENTER = 1,
			/** Makes text right aligned. */
			ALIGN_RIGHT = 2,
			/** Makes text fill width. */
			ALIGN_FILL = 3,
		}
		enum ItemType {
			/**  */
			ITEM_FRAME = 0,
			/**  */
			ITEM_TEXT = 1,
			/**  */
			ITEM_IMAGE = 2,
			/**  */
			ITEM_NEWLINE = 3,
			/**  */
			ITEM_FONT = 4,
			/**  */
			ITEM_COLOR = 5,
			/**  */
			ITEM_UNDERLINE = 6,
			/**  */
			ITEM_STRIKETHROUGH = 7,
			/**  */
			ITEM_ALIGN = 8,
			/**  */
			ITEM_INDENT = 9,
			/**  */
			ITEM_LIST = 10,
			/**  */
			ITEM_TABLE = 11,
			/**  */
			ITEM_FADE = 12,
			/**  */
			ITEM_SHAKE = 13,
			/**  */
			ITEM_WAVE = 14,
			/**  */
			ITEM_TORNADO = 15,
			/**  */
			ITEM_RAINBOW = 16,
			/**  */
			ITEM_CUSTOMFX = 18,
			/**  */
			ITEM_META = 17,
		}
		enum ListType {
			/** Each list item has a number marker. */
			LIST_NUMBERS = 0,
			/** Each list item has a letter marker. */
			LIST_LETTERS = 1,
			/** Each list item has a filled circle marker. */
			LIST_DOTS = 2,
		}

		/** Makes text left aligned. */
		const ALIGN_LEFT: Align.ALIGN_LEFT;

		/** Makes text centered. */
		const ALIGN_CENTER: Align.ALIGN_CENTER;

		/** Makes text right aligned. */
		const ALIGN_RIGHT: Align.ALIGN_RIGHT;

		/** Makes text fill width. */
		const ALIGN_FILL: Align.ALIGN_FILL;

		/** Each list item has a number marker. */
		const LIST_NUMBERS: ListType.LIST_NUMBERS;

		/** Each list item has a letter marker. */
		const LIST_LETTERS: ListType.LIST_LETTERS;

		/** Each list item has a filled circle marker. */
		const LIST_DOTS: ListType.LIST_DOTS;

		/**  */
		const ITEM_FRAME: ItemType.ITEM_FRAME;

		/**  */
		const ITEM_TEXT: ItemType.ITEM_TEXT;

		/**  */
		const ITEM_IMAGE: ItemType.ITEM_IMAGE;

		/**  */
		const ITEM_NEWLINE: ItemType.ITEM_NEWLINE;

		/**  */
		const ITEM_FONT: ItemType.ITEM_FONT;

		/**  */
		const ITEM_COLOR: ItemType.ITEM_COLOR;

		/**  */
		const ITEM_UNDERLINE: ItemType.ITEM_UNDERLINE;

		/**  */
		const ITEM_STRIKETHROUGH: ItemType.ITEM_STRIKETHROUGH;

		/**  */
		const ITEM_ALIGN: ItemType.ITEM_ALIGN;

		/**  */
		const ITEM_INDENT: ItemType.ITEM_INDENT;

		/**  */
		const ITEM_LIST: ItemType.ITEM_LIST;

		/**  */
		const ITEM_TABLE: ItemType.ITEM_TABLE;

		/**  */
		const ITEM_FADE: ItemType.ITEM_FADE;

		/**  */
		const ITEM_SHAKE: ItemType.ITEM_SHAKE;

		/**  */
		const ITEM_WAVE: ItemType.ITEM_WAVE;

		/**  */
		const ITEM_TORNADO: ItemType.ITEM_TORNADO;

		/**  */
		const ITEM_RAINBOW: ItemType.ITEM_RAINBOW;

		/**  */
		const ITEM_CUSTOMFX: ItemType.ITEM_CUSTOMFX;

		/**  */
		const ITEM_META: ItemType.ITEM_META;
	}

	/** Physics Body whose position is determined through physics simulation in 3D space.
	 This is the node that implements full 3D physics. This means that you do not control a RigidBody directly. Instead, you can apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, collision, bouncing, rotating, etc.

	 A RigidBody has 4 behavior `mode`s: Rigid, Static, Character, and Kinematic.

	 **Note:** Don't change a RigidBody's position every frame or very often. Sporadic changes work fine, but physics runs at a different granularity (fixed Hz) than usual rendering (process callback) and maybe even in a separate thread, so changing this from a process loop may result in strange behavior. If you need to directly affect the body's state, use `_integrate_forces`, which allows you to directly access the physics state.

	 If you need to override the default physics behavior, you can write a custom force integration function. See `custom_integrator`. */
	class RigidBody extends PhysicsBody {

		/** The body mode. See `Mode` for possible values. */
		mode: number;

		/** The body's mass. */
		mass: number;

		/** The body's weight based on its mass and the global 3D gravity. Global values are set in **Project > Project Settings > Physics > 3d**. */
		weight: number;

		/** The body's friction, from 0 (frictionless) to 1 (max friction).

		 Deprecated, use `PhysicsMaterial.friction` instead via `physics_material_override`. */
		friction: number;

		/** The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).

		 Deprecated, use `PhysicsMaterial.bounce` instead via `physics_material_override`. */
		bounce: number;

		/** The physics material override for the body.

		 If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one. */
		physics_material_override: PhysicsMaterial;

		/** This is multiplied by the global 3D gravity setting found in **Project > Project Settings > Physics > 3d** to produce RigidBody's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object. */
		gravity_scale: number;

		/** If `true`, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the `_integrate_forces` function, if defined. */
		custom_integrator: boolean;

		/** If `true`, continuous collision detection is used.

		 Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses fewer impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects. */
		continuous_cd: boolean;

		/** The maximum contacts to report. Bodies can keep a log of the contacts with other bodies, this is enabled by setting the maximum amount of contacts reported to a number greater than 0. */
		contacts_reported: number;

		/** If `true`, the RigidBody will emit signals when it collides with another RigidBody. */
		contact_monitor: boolean;

		/** If `true`, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the `apply_impulse` or `add_force` methods. */
		sleeping: boolean;

		/** If `true`, the body can enter sleep mode when there is no movement. See `sleeping`. */
		can_sleep: boolean;

		/** Lock the body's movement in the X axis. */
		axis_lock_linear_x: boolean;

		/** Lock the body's movement in the Y axis. */
		axis_lock_linear_y: boolean;

		/** Lock the body's movement in the Z axis. */
		axis_lock_linear_z: boolean;

		/** Lock the body's rotation in the X axis. */
		axis_lock_angular_x: boolean;

		/** Lock the body's rotation in the Y axis. */
		axis_lock_angular_y: boolean;

		/** Lock the body's rotation in the Z axis. */
		axis_lock_angular_z: boolean;

		/** The body's linear velocity. Can be used sporadically, but **don't set this every frame**, because physics may run in another thread and runs at a different granularity. Use `_integrate_forces` as your process loop for precise control of the body state. */
		linear_velocity: Vector3;

		/** The body's linear damp. Cannot be less than -1.0. If this value is different from -1.0, any linear damp derived from the world or areas will be overridden. */
		linear_damp: number;

		/** RigidBody's rotational velocity. */
		angular_velocity: Vector3;

		/** Damps RigidBody's rotational forces. */
		angular_damp: number;

		/** Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the `custom_integrator` property allows you to disable the default behavior and do fully custom force integration for a body. */
		_integrate_forces(state: PhysicsDirectBodyState) : void;

		/** Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior. */
		set_axis_velocity(axis_velocity: Vector3) : void;

		/** Adds a constant directional force (i.e. acceleration) without affecting rotation.

		 This is equivalent to `add_force(force, Vector3(0,0,0))`. */
		add_central_force(force: Vector3) : void;

		/** Adds a constant directional force (i.e. acceleration).

		 The position uses the rotation of the global coordinate system, but is centered at the object's origin. */
		add_force(force: Vector3, position: Vector3) : void;

		/** Adds a constant rotational force (i.e. a motor) without affecting position. */
		add_torque(torque: Vector3) : void;

		/** Applies a directional impulse without affecting rotation.

		 This is equivalent to `apply_impulse(Vector3(0,0,0), impulse)`. */
		apply_central_impulse(impulse: Vector3) : void;

		/** Applies a positioned impulse to the body. An impulse is time independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin. */
		apply_impulse(position: Vector3, impulse: Vector3) : void;

		/** Applies a torque impulse which will be affected by the body mass and shape. This will rotate the body around the `impulse` vector passed. */
		apply_torque_impulse(impulse: Vector3) : void;

		/** Locks the specified linear or rotational axis. */
		set_axis_lock(axis: PhysicsServer.BodyAxis, lock: boolean) : void;

		/** Returns `true` if the specified linear or rotational axis is locked. */
		get_axis_lock(axis: PhysicsServer.BodyAxis) : boolean;

		/** Returns a list of the bodies colliding with this one. By default, number of max contacts reported is at 0, see the `contacts_reported` property to increase it.

		 **Note:** The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead. */
		get_colliding_bodies() : any[];

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `mass` property */
		get_mass() : number;

		/** Setter of `mass` property */
		set_mass(p_value: number) : void;

		/** Getter of `weight` property */
		get_weight() : number;

		/** Setter of `weight` property */
		set_weight(p_value: number) : void;

		/** Getter of `friction` property */
		get_friction() : number;

		/** Setter of `friction` property */
		set_friction(p_value: number) : void;

		/** Getter of `bounce` property */
		get_bounce() : number;

		/** Setter of `bounce` property */
		set_bounce(p_value: number) : void;

		/** Getter of `physics_material_override` property */
		get_physics_material_override() : PhysicsMaterial;

		/** Setter of `physics_material_override` property */
		set_physics_material_override(p_value: PhysicsMaterial) : void;

		/** Getter of `gravity_scale` property */
		get_gravity_scale() : number;

		/** Setter of `gravity_scale` property */
		set_gravity_scale(p_value: number) : void;

		/** Getter of `custom_integrator` property */
		is_using_custom_integrator() : boolean;

		/** Setter of `custom_integrator` property */
		set_use_custom_integrator(p_value: boolean) : void;

		/** Getter of `continuous_cd` property */
		is_using_continuous_collision_detection() : boolean;

		/** Setter of `continuous_cd` property */
		set_use_continuous_collision_detection(p_value: boolean) : void;

		/** Getter of `contacts_reported` property */
		get_max_contacts_reported() : number;

		/** Setter of `contacts_reported` property */
		set_max_contacts_reported(p_value: number) : void;

		/** Getter of `contact_monitor` property */
		is_contact_monitor_enabled() : boolean;

		/** Setter of `contact_monitor` property */
		set_contact_monitor(p_value: boolean) : void;

		/** Getter of `sleeping` property */
		is_sleeping() : boolean;

		/** Setter of `sleeping` property */
		set_sleeping(p_value: boolean) : void;

		/** Getter of `can_sleep` property */
		is_able_to_sleep() : boolean;

		/** Setter of `can_sleep` property */
		set_can_sleep(p_value: boolean) : void;

		/** Getter of `axis_lock_linear_x` property */
		get_axis_lock() : boolean;

		/** Setter of `axis_lock_linear_x` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `axis_lock_linear_y` property */
		get_axis_lock() : boolean;

		/** Setter of `axis_lock_linear_y` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `axis_lock_linear_z` property */
		get_axis_lock() : boolean;

		/** Setter of `axis_lock_linear_z` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `axis_lock_angular_x` property */
		get_axis_lock() : boolean;

		/** Setter of `axis_lock_angular_x` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `axis_lock_angular_y` property */
		get_axis_lock() : boolean;

		/** Setter of `axis_lock_angular_y` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `axis_lock_angular_z` property */
		get_axis_lock() : boolean;

		/** Setter of `axis_lock_angular_z` property */
		set_axis_lock(p_value: boolean) : void;

		/** Getter of `linear_velocity` property */
		get_linear_velocity() : Vector3;

		/** Setter of `linear_velocity` property */
		set_linear_velocity(p_value: Vector3) : void;

		/** Getter of `linear_damp` property */
		get_linear_damp() : number;

		/** Setter of `linear_damp` property */
		set_linear_damp(p_value: number) : void;

		/** Getter of `angular_velocity` property */
		get_angular_velocity() : Vector3;

		/** Setter of `angular_velocity` property */
		set_angular_velocity(p_value: Vector3) : void;

		/** Getter of `angular_damp` property */
		get_angular_damp() : number;

		/** Setter of `angular_damp` property */
		set_angular_damp(p_value: number) : void;
	}
	namespace RigidBody {

		/** Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work. */
		const body_entered: 'body_entered';

		/** Emitted when a body enters into contact with this one. Contact monitor and contacts reported must be enabled for this to work.

			 This signal not only receives the body that collided with this one, but also its `RID` (`body_id`), the shape index from the colliding body (`body_shape`), and the shape index from this body (`local_shape`) the other body collided with. */
		const body_shape_entered: 'body_shape_entered';

		/** Emitted when the physics engine changes the body's sleeping state.

			 **Note:** Changing the value `sleeping` will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or `emit_signal("sleeping_state_changed")` is used. */
		const sleeping_state_changed: 'sleeping_state_changed';

		/** Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work. */
		const body_exited: 'body_exited';

		/** Emitted when a body shape exits contact with this one. Contact monitor and contacts reported must be enabled for this to work.

			 This signal not only receives the body that stopped colliding with this one, but also its `RID` (`body_id`), the shape index from the colliding body (`body_shape`), and the shape index from this body (`local_shape`) the other body stopped colliding with. */
		const body_shape_exited: 'body_shape_exited';
		enum Mode {
			/** Rigid body mode. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code. */
			MODE_RIGID = 0,
			/** Static mode. The body behaves like a `StaticBody`, and can only move by user code. */
			MODE_STATIC = 1,
			/** Character body mode. This behaves like a rigid body, but can not rotate. */
			MODE_CHARACTER = 2,
			/** Kinematic body mode. The body behaves like a `KinematicBody`, and can only move by user code. */
			MODE_KINEMATIC = 3,
		}

		/** Rigid body mode. This is the "natural" state of a rigid body. It is affected by forces, and can move, rotate, and be affected by user code. */
		const MODE_RIGID: Mode.MODE_RIGID;

		/** Static mode. The body behaves like a `StaticBody`, and can only move by user code. */
		const MODE_STATIC: Mode.MODE_STATIC;

		/** Character body mode. This behaves like a rigid body, but can not rotate. */
		const MODE_CHARACTER: Mode.MODE_CHARACTER;

		/** Kinematic body mode. The body behaves like a `KinematicBody`, and can only move by user code. */
		const MODE_KINEMATIC: Mode.MODE_KINEMATIC;
	}

	/** A body that is controlled by the 2D physics engine.
	 This node implements simulated 2D physics. You do not control a RigidBody2D directly. Instead you apply forces to it (gravity, impulses, etc.) and the physics simulation calculates the resulting movement based on its mass, friction, and other physical properties.

	 A RigidBody2D has 4 behavior `mode`s: Rigid, Static, Character, and Kinematic.

	 **Note:** You should not change a RigidBody2D's `position` or `linear_velocity` every frame or even very often. If you need to directly affect the body's state, use `_integrate_forces`, which allows you to directly access the physics state.

	 Please also keep in mind that physics bodies manage their own transform which overwrites the ones you set. So any direct or indirect transformation (including scaling of the node or its parent) will be visible in the editor only, and immediately reset at runtime.

	 If you need to override the default physics behavior or add a transformation at runtime, you can write a custom force integration. See `custom_integrator`. */
	class RigidBody2D extends PhysicsBody2D {

		/** The body's mode. See `Mode` for possible values. */
		mode: number;

		/** The body's mass. */
		mass: number;

		/** The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this function allows you to set a custom value. Set 0 inertia to return to automatically computing it. */
		inertia: number;

		/** The body's weight based on its mass and the **Default Gravity** value in **Project > Project Settings > Physics > 2d**. */
		weight: number;

		/** The body's friction. Values range from `0` (frictionless) to `1` (maximum friction).

		 Deprecated, use `PhysicsMaterial.friction` instead via `physics_material_override`. */
		friction: number;

		/** The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).

		 Deprecated, use `PhysicsMaterial.bounce` instead via `physics_material_override`. */
		bounce: number;

		/** The physics material override for the body.

		 If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one. */
		physics_material_override: PhysicsMaterial;

		/** Multiplies the gravity applied to the body. The body's gravity is calculated from the **Default Gravity** value in **Project > Project Settings > Physics > 2d** and/or any additional gravity vector applied by `Area2D`s. */
		gravity_scale: number;

		/** If `true`, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the `_integrate_forces` function. */
		custom_integrator: boolean;

		/** Continuous collision detection mode.

		 Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See `CCDMode` for details. */
		continuous_cd: number;

		/** The maximum number of contacts to report. */
		contacts_reported: number;

		/** If `true`, the body will emit signals when it collides with another RigidBody2D. See also `contacts_reported`. */
		contact_monitor: boolean;

		/** If `true`, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the `apply_impulse` or `add_force` methods. */
		sleeping: boolean;

		/** If `true`, the body can enter sleep mode when there is no movement. See `sleeping`. */
		can_sleep: boolean;

		/** The body's linear velocity. */
		linear_velocity: Vector2;

		/** Damps the body's `linear_velocity`. If `-1`, the body will use the **Default Linear Damp** in **Project > Project Settings > Physics > 2d**. */
		linear_damp: number;

		/** The body's rotational velocity. */
		angular_velocity: number;

		/** Damps the body's `angular_velocity`. If `-1`, the body will use the **Default Angular Damp** defined in **Project > Project Settings > Physics > 2d**. */
		angular_damp: number;

		/** The body's total applied force. */
		applied_force: Vector2;

		/** The body's total applied torque. */
		applied_torque: number;

		/** Allows you to read and safely modify the simulation state for the object. Use this instead of `Node._physics_process` if you need to directly change the body's `position` or other physics properties. By default, it works in addition to the usual physics behavior, but `custom_integrator` allows you to disable the default behavior and write custom force integration for a body. */
		_integrate_forces(state: Physics2DDirectBodyState) : void;

		/** Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior. */
		set_axis_velocity(axis_velocity: Vector2) : void;

		/** Applies a directional impulse without affecting rotation. */
		apply_central_impulse(impulse: Vector2) : void;

		/** Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts (use the "_force" functions otherwise). The position uses the rotation of the global coordinate system, but is centered at the object's origin. */
		apply_impulse(offset: Vector2, impulse: Vector2) : void;

		/** Applies a rotational impulse to the body. */
		apply_torque_impulse(torque: number) : void;

		/** Adds a constant directional force without affecting rotation. */
		add_central_force(force: Vector2) : void;

		/** Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates. */
		add_force(offset: Vector2, force: Vector2) : void;

		/** Adds a constant rotational force. */
		add_torque(torque: number) : void;

		/** Returns `true` if a collision would result from moving in the given vector. `margin` increases the size of the shapes involved in the collision detection, and `result` is an object of type `Physics2DTestMotionResult`, which contains additional information about the collision (should there be one). */
		//@ts-ignore
		test_motion(motion: Vector2, infinite_inertia: boolean = true, margin: number = 0.08, result: Physics2DTestMotionResult = null) : boolean;

		/** Returns a list of the bodies colliding with this one. Use `contacts_reported` to set the maximum number reported. You must also set `contact_monitor` to `true`.

		 **Note:** The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead. */
		get_colliding_bodies() : any[];

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `mass` property */
		get_mass() : number;

		/** Setter of `mass` property */
		set_mass(p_value: number) : void;

		/** Getter of `inertia` property */
		get_inertia() : number;

		/** Setter of `inertia` property */
		set_inertia(p_value: number) : void;

		/** Getter of `weight` property */
		get_weight() : number;

		/** Setter of `weight` property */
		set_weight(p_value: number) : void;

		/** Getter of `friction` property */
		get_friction() : number;

		/** Setter of `friction` property */
		set_friction(p_value: number) : void;

		/** Getter of `bounce` property */
		get_bounce() : number;

		/** Setter of `bounce` property */
		set_bounce(p_value: number) : void;

		/** Getter of `physics_material_override` property */
		get_physics_material_override() : PhysicsMaterial;

		/** Setter of `physics_material_override` property */
		set_physics_material_override(p_value: PhysicsMaterial) : void;

		/** Getter of `gravity_scale` property */
		get_gravity_scale() : number;

		/** Setter of `gravity_scale` property */
		set_gravity_scale(p_value: number) : void;

		/** Getter of `custom_integrator` property */
		is_using_custom_integrator() : boolean;

		/** Setter of `custom_integrator` property */
		set_use_custom_integrator(p_value: boolean) : void;

		/** Getter of `continuous_cd` property */
		get_continuous_collision_detection_mode() : number;

		/** Setter of `continuous_cd` property */
		set_continuous_collision_detection_mode(p_value: number) : void;

		/** Getter of `contacts_reported` property */
		get_max_contacts_reported() : number;

		/** Setter of `contacts_reported` property */
		set_max_contacts_reported(p_value: number) : void;

		/** Getter of `contact_monitor` property */
		is_contact_monitor_enabled() : boolean;

		/** Setter of `contact_monitor` property */
		set_contact_monitor(p_value: boolean) : void;

		/** Getter of `sleeping` property */
		is_sleeping() : boolean;

		/** Setter of `sleeping` property */
		set_sleeping(p_value: boolean) : void;

		/** Getter of `can_sleep` property */
		is_able_to_sleep() : boolean;

		/** Setter of `can_sleep` property */
		set_can_sleep(p_value: boolean) : void;

		/** Getter of `linear_velocity` property */
		get_linear_velocity() : Vector2;

		/** Setter of `linear_velocity` property */
		set_linear_velocity(p_value: Vector2) : void;

		/** Getter of `linear_damp` property */
		get_linear_damp() : number;

		/** Setter of `linear_damp` property */
		set_linear_damp(p_value: number) : void;

		/** Getter of `angular_velocity` property */
		get_angular_velocity() : number;

		/** Setter of `angular_velocity` property */
		set_angular_velocity(p_value: number) : void;

		/** Getter of `angular_damp` property */
		get_angular_damp() : number;

		/** Setter of `angular_damp` property */
		set_angular_damp(p_value: number) : void;

		/** Getter of `applied_force` property */
		get_applied_force() : Vector2;

		/** Setter of `applied_force` property */
		set_applied_force(p_value: Vector2) : void;

		/** Getter of `applied_torque` property */
		get_applied_torque() : number;

		/** Setter of `applied_torque` property */
		set_applied_torque(p_value: number) : void;
	}
	namespace RigidBody2D {

		/** Emitted when a body enters into contact with this one. `contact_monitor` must be `true` and `contacts_reported` greater than `0`. */
		const body_entered: 'body_entered';

		/** Emitted when a body enters into contact with this one. Reports colliding shape information. See `CollisionObject2D` for shape index information. `contact_monitor` must be `true` and `contacts_reported` greater than `0`. */
		const body_shape_entered: 'body_shape_entered';

		/** Emitted when the physics engine changes the body's sleeping state.

			 **Note:** Changing the value `sleeping` will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or `emit_signal("sleeping_state_changed")` is used. */
		const sleeping_state_changed: 'sleeping_state_changed';

		/** Emitted when a body exits contact with this one. `contact_monitor` must be `true` and `contacts_reported` greater than `0`. */
		const body_exited: 'body_exited';

		/** Emitted when a body shape exits contact with this one. Reports colliding shape information. See `CollisionObject2D` for shape index information. `contact_monitor` must be `true` and `contacts_reported` greater than `0`. */
		const body_shape_exited: 'body_shape_exited';
		enum CCDMode {
			/** Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects. */
			CCD_MODE_DISABLED = 0,
			/** Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise. */
			CCD_MODE_CAST_RAY = 1,
			/** Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise. */
			CCD_MODE_CAST_SHAPE = 2,
		}
		enum Mode {
			/** Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode. */
			MODE_RIGID = 0,
			/** Static mode. The body behaves like a `StaticBody2D` and does not move. */
			MODE_STATIC = 1,
			/** Character mode. Similar to `MODE_RIGID`, but the body can not rotate. */
			MODE_CHARACTER = 2,
			/** Kinematic mode. The body behaves like a `KinematicBody2D`, and must be moved by code. */
			MODE_KINEMATIC = 3,
		}

		/** Rigid mode. The body behaves as a physical object. It collides with other bodies and responds to forces applied to it. This is the default mode. */
		const MODE_RIGID: Mode.MODE_RIGID;

		/** Static mode. The body behaves like a `StaticBody2D` and does not move. */
		const MODE_STATIC: Mode.MODE_STATIC;

		/** Character mode. Similar to `MODE_RIGID`, but the body can not rotate. */
		const MODE_CHARACTER: Mode.MODE_CHARACTER;

		/** Kinematic mode. The body behaves like a `KinematicBody2D`, and must be moved by code. */
		const MODE_KINEMATIC: Mode.MODE_KINEMATIC;

		/** Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects. */
		const CCD_MODE_DISABLED: CCDMode.CCD_MODE_DISABLED;

		/** Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise. */
		const CCD_MODE_CAST_RAY: CCDMode.CCD_MODE_CAST_RAY;

		/** Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise. */
		const CCD_MODE_CAST_SHAPE: CCDMode.CCD_MODE_CAST_SHAPE;
	}

	/** 
	  */
	class RootMotionView extends VisualInstance {

		/**  */
		animation_path: string;

		/**  */
		color: Color;

		/**  */
		cell_size: number;

		/**  */
		radius: number;

		/**  */
		zero_y: boolean;

		/** Getter of `animation_path` property */
		get_animation_path() : string;

		/** Setter of `animation_path` property */
		set_animation_path(p_value: string) : void;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `cell_size` property */
		get_cell_size() : number;

		/** Setter of `cell_size` property */
		set_cell_size(p_value: number) : void;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `zero_y` property */
		get_zero_y() : boolean;

		/** Setter of `zero_y` property */
		set_zero_y(p_value: boolean) : void;
	}
	namespace RootMotionView {
	}

	/** A script interface to a scene file's data.
	 Maintains a list of resources, nodes, exported, and overridden properties, and built-in scripts associated with a scene.

	 This class cannot be instantiated directly, it is retrieved for a given scene as the result of `PackedScene.get_state`. */
	class SceneState extends Reference {

		/** Returns the number of nodes in the scene.

		 The `idx` argument used to query node data in other `get_node_*` methods in the interval ``0, get_node_count() - 1``. */
		get_node_count() : number;

		/** Returns the type of the node at `idx`. */
		get_node_type(idx: number) : string;

		/** Returns the name of the node at `idx`. */
		get_node_name(idx: number) : string;

		/** Returns the path to the node at `idx`.

		 If `for_parent` is `true`, returns the path of the `idx` node's parent instead. */
		//@ts-ignore
		get_node_path(idx: number, for_parent: boolean = false) : string;

		/** Returns the path to the owner of the node at `idx`, relative to the root node. */
		get_node_owner_path(idx: number) : string;

		/** Returns `true` if the node at `idx` is an `InstancePlaceholder`. */
		is_node_instance_placeholder(idx: number) : boolean;

		/** Returns the path to the represented scene file if the node at `idx` is an `InstancePlaceholder`. */
		get_node_instance_placeholder(idx: number) : string;

		/** Returns a `PackedScene` for the node at `idx` (i.e. the whole branch starting at this node, with its child nodes and resources), or `null` if the node is not an instance. */
		get_node_instance(idx: number) : PackedScene;

		/** Returns the list of group names associated with the node at `idx`. */
		get_node_groups(idx: number) : PoolStringArray;

		/** Returns the node's index, which is its position relative to its siblings. This is only relevant and saved in scenes for cases where new nodes are added to an instanced or inherited scene among siblings from the base scene. Despite the name, this index is not related to the `idx` argument used here and in other methods. */
		get_node_index(idx: number) : number;

		/** Returns the number of exported or overridden properties for the node at `idx`.

		 The `prop_idx` argument used to query node property data in other `get_node_property_*` methods in the interval ``0, get_node_property_count() - 1``. */
		get_node_property_count(idx: number) : number;

		/** Returns the name of the property at `prop_idx` for the node at `idx`. */
		get_node_property_name(idx: number, prop_idx: number) : string;

		/** Returns the value of the property at `prop_idx` for the node at `idx`. */
		get_node_property_value(idx: number, prop_idx: number) : any;

		/** Returns the number of signal connections in the scene.

		 The `idx` argument used to query connection metadata in other `get_connection_*` methods in the interval ``0, get_connection_count() - 1``. */
		get_connection_count() : number;

		/** Returns the path to the node that owns the signal at `idx`, relative to the root node. */
		get_connection_source(idx: number) : string;

		/** Returns the name of the signal at `idx`. */
		get_connection_signal(idx: number) : string;

		/** Returns the path to the node that owns the method connected to the signal at `idx`, relative to the root node. */
		get_connection_target(idx: number) : string;

		/** Returns the method connected to the signal at `idx`. */
		get_connection_method(idx: number) : string;

		/** Returns the connection flags for the signal at `idx`. See `Object.ConnectFlags` constants. */
		get_connection_flags(idx: number) : number;

		/** Returns the list of bound parameters for the signal at `idx`. */
		get_connection_binds(idx: number) : any[];
	}
	namespace SceneState {
		enum GenEditState {
			/** If passed to `PackedScene.instance`, blocks edits to the scene state. */
			GEN_EDIT_STATE_DISABLED = 0,
			/** If passed to `PackedScene.instance`, provides inherited scene resources to the local scene.

			 **Note:** Only available in editor builds. */
			GEN_EDIT_STATE_INSTANCE = 1,
			/** If passed to `PackedScene.instance`, provides local scene resources to the local scene. Only the main scene should receive the main edit state.

			 **Note:** Only available in editor builds. */
			GEN_EDIT_STATE_MAIN = 2,
		}

		/** If passed to `PackedScene.instance`, blocks edits to the scene state. */
		const GEN_EDIT_STATE_DISABLED: GenEditState.GEN_EDIT_STATE_DISABLED;

		/** If passed to `PackedScene.instance`, provides inherited scene resources to the local scene.

		 **Note:** Only available in editor builds. */
		const GEN_EDIT_STATE_INSTANCE: GenEditState.GEN_EDIT_STATE_INSTANCE;

		/** If passed to `PackedScene.instance`, provides local scene resources to the local scene. Only the main scene should receive the main edit state.

		 **Note:** Only available in editor builds. */
		const GEN_EDIT_STATE_MAIN: GenEditState.GEN_EDIT_STATE_MAIN;
	}

	/** Manages the game loop via a hierarchy of nodes.
	 As one of the most important classes, the `SceneTree` manages the hierarchy of nodes in a scene as well as scenes themselves. Nodes can be added, retrieved and removed. The whole scene tree (and thus the current scene) can be paused. Scenes can be loaded, switched and reloaded.

	 You can also use the `SceneTree` to organize your nodes into groups: every node can be assigned as many groups as you want to create, e.g. a "enemy" group. You can then iterate these groups or even call methods and set properties on all the group's members at once.

	 `SceneTree` is the default `MainLoop` implementation used by scenes, and is thus in charge of the game loop. */
	class SceneTree extends MainLoop {

		/** If `true`, collision shapes will be visible when running the game from the editor for debugging purposes. */
		debug_collisions_hint: boolean;

		/** If `true`, navigation polygons will be visible when running the game from the editor for debugging purposes. */
		debug_navigation_hint: boolean;

		/** If `true`, the `SceneTree` is paused. Doing so will have the following behavior:

		 - 2D and 3D physics will be stopped.

		 - `Node._process`, `Node._physics_process` and `Node._input` will not be called anymore in nodes. */
		paused: boolean;

		/** If `true`, the `SceneTree`'s `network_peer` refuses new incoming connections. */
		refuse_new_network_connections: boolean;

		/** If `true`, font oversampling is used. */
		use_font_oversampling: boolean;

		/** The root of the edited scene. */
		edited_scene_root: Node;

		/** The current scene. */
		current_scene: Node;

		/** The peer object to handle the RPC system (effectively enabling networking when set). Depending on the peer itself, the `SceneTree` will become a network server (check with `is_network_server`) and will set the root node's network mode to master, or it will become a regular peer with the root node set to puppet. All child nodes are set to inherit the network mode by default. Handling of networking-related events (connection, disconnection, new clients) is done by connecting to `SceneTree`'s signals. */
		network_peer: NetworkedMultiplayerPeer;

		/** The `SceneTree`'s root `Viewport`. */
		root: Viewport;

		/** The default `MultiplayerAPI` instance for this `SceneTree`. */
		multiplayer: MultiplayerAPI;

		/** If `true` (default value), enables automatic polling of the `MultiplayerAPI` for this SceneTree during `idle_frame`.

		 If `false`, you need to manually call `MultiplayerAPI.poll` to process network packets and deliver RPCs/RSETs. This allows running RPCs/RSETs in a different loop (e.g. physics, thread, specific time step) and for manual `Mutex` protection when accessing the `MultiplayerAPI` from threads. */
		multiplayer_poll: boolean;

		/** Returns `true` if the given group exists. */
		has_group(name: string) : boolean;

		/** If `true`, the application automatically accepts quitting. Enabled by default.

		 For mobile platforms, see `set_quit_on_go_back`. */
		set_auto_accept_quit(enabled: boolean) : void;

		/** If `true`, the application quits automatically on going back (e.g. on Android). Enabled by default.

		 To handle 'Go Back' button when this option is disabled, use `MainLoop.NOTIFICATION_WM_GO_BACK_REQUEST`. */
		set_quit_on_go_back(enabled: boolean) : void;

		/** Marks the most recent `InputEvent` as handled. */
		set_input_as_handled() : void;

		/** Returns `true` if the most recent `InputEvent` was marked as handled with `set_input_as_handled`. */
		is_input_handled() : boolean;

		/** Returns a `SceneTreeTimer` which will `SceneTreeTimer.timeout` after the given time in seconds elapsed in this `SceneTree`. If `pause_mode_process` is set to `false`, pausing the `SceneTree` will also pause the timer.

		 Commonly used to create a one-shot delay timer as in the following example:

		 ```gdscript
		 func some_function():
		     print("start")
		     yield(get_tree().create_timer(1.0), "timeout")
		     print("end")
		 ``` */
		//@ts-ignore
		create_timer(time_sec: number, pause_mode_process: boolean = true) : SceneTreeTimer;

		/** Returns the number of nodes in this `SceneTree`. */
		get_node_count() : number;

		/** Returns the current frame number, i.e. the total frame count since the application started. */
		get_frame() : number;

		/** Quits the application. A process `exit_code` can optionally be passed as an argument. If this argument is `0` or greater, it will override the `OS.exit_code` defined before quitting the application. */
		//@ts-ignore
		quit(exit_code: number = -1) : void;

		/** Configures screen stretching to the given `StretchMode`, `StretchAspect`, minimum size and `shrink` ratio. */
		//@ts-ignore
		set_screen_stretch(mode: SceneTree.StretchMode, aspect: SceneTree.StretchAspect, minsize: Vector2, shrink: number = 1) : void;

		/** Queues the given object for deletion, delaying the call to `Object.free` to after the current frame. */
		queue_delete(obj: Object) : void;

		/** Calls `method` on each member of the given group, respecting the given `GroupCallFlags`. */
		call_group_flags(flags: number, group: string, method: string, ...args) : any;

		/** Sends the given notification to all members of the `group`, respecting the given `GroupCallFlags`. */
		notify_group_flags(call_flags: number, group: string, notification: number) : void;

		/** Sets the given `property` to `value` on all members of the given group, respecting the given `GroupCallFlags`. */
		set_group_flags(call_flags: number, group: string, property: string, value: any) : void;

		/** Calls `method` on each member of the given group. */
		call_group(group: string, method: string, ...args) : any;

		/** Sends the given notification to all members of the `group`. */
		notify_group(group: string, notification: number) : void;

		/** Sets the given `property` to `value` on all members of the given group. */
		set_group(group: string, property: string, value: any) : void;

		/** Returns a list of all nodes assigned to the given group. */
		get_nodes_in_group(group: string) : any[];

		/** Changes the running scene to the one at the given `path`, after loading it into a `PackedScene` and creating a new instance.

		 Returns `OK` on success, `ERR_CANT_OPEN` if the `path` cannot be loaded into a `PackedScene`, or `ERR_CANT_CREATE` if that scene cannot be instantiated. */
		change_scene(path: string) : number;

		/** Changes the running scene to a new instance of the given `PackedScene`.

		 Returns `OK` on success or `ERR_CANT_CREATE` if the scene cannot be instantiated. */
		change_scene_to(packed_scene: PackedScene) : number;

		/** Reloads the currently active scene.

		 Returns `OK` on success, `ERR_UNCONFIGURED` if no `current_scene` was defined yet, `ERR_CANT_OPEN` if `current_scene` cannot be loaded into a `PackedScene`, or `ERR_CANT_CREATE` if the scene cannot be instantiated. */
		reload_current_scene() : number;

		/** Returns `true` if this `SceneTree`'s `network_peer` is in server mode (listening for connections). */
		is_network_server() : boolean;

		/** Returns `true` if there is a `network_peer` set. */
		has_network_peer() : boolean;

		/** Returns the peer IDs of all connected peers of this `SceneTree`'s `network_peer`. */
		get_network_connected_peers() : PoolIntArray;

		/** Returns the unique peer ID of this `SceneTree`'s `network_peer`. */
		get_network_unique_id() : number;

		/** Returns the sender's peer ID for the most recently received RPC call. */
		get_rpc_sender_id() : number;

		/** Getter of `debug_collisions_hint` property */
		is_debugging_collisions_hint() : boolean;

		/** Setter of `debug_collisions_hint` property */
		set_debug_collisions_hint(p_value: boolean) : void;

		/** Getter of `debug_navigation_hint` property */
		is_debugging_navigation_hint() : boolean;

		/** Setter of `debug_navigation_hint` property */
		set_debug_navigation_hint(p_value: boolean) : void;

		/** Getter of `paused` property */
		is_paused() : boolean;

		/** Setter of `paused` property */
		set_pause(p_value: boolean) : void;

		/** Getter of `refuse_new_network_connections` property */
		is_refusing_new_network_connections() : boolean;

		/** Setter of `refuse_new_network_connections` property */
		set_refuse_new_network_connections(p_value: boolean) : void;

		/** Getter of `use_font_oversampling` property */
		is_using_font_oversampling() : boolean;

		/** Setter of `use_font_oversampling` property */
		set_use_font_oversampling(p_value: boolean) : void;

		/** Getter of `edited_scene_root` property */
		get_edited_scene_root() : Node;

		/** Setter of `edited_scene_root` property */
		set_edited_scene_root(p_value: Node) : void;

		/** Getter of `current_scene` property */
		get_current_scene() : Node;

		/** Setter of `current_scene` property */
		set_current_scene(p_value: Node) : void;

		/** Getter of `network_peer` property */
		get_network_peer() : NetworkedMultiplayerPeer;

		/** Setter of `network_peer` property */
		set_network_peer(p_value: NetworkedMultiplayerPeer) : void;

		/** Getter of `root` property */
		get_root() : Viewport;

		/** Getter of `multiplayer` property */
		get_multiplayer() : MultiplayerAPI;

		/** Setter of `multiplayer` property */
		set_multiplayer(p_value: MultiplayerAPI) : void;

		/** Getter of `multiplayer_poll` property */
		is_multiplayer_poll_enabled() : boolean;

		/** Setter of `multiplayer_poll` property */
		set_multiplayer_poll_enabled(p_value: boolean) : void;
	}
	namespace SceneTree {

		/** Emitted whenever this `SceneTree`'s `network_peer` successfully connected to a server. Only emitted on clients. */
		const connected_to_server: 'connected_to_server';

		/** Emitted when a node's configuration changed. Only emitted in `tool` mode. */
		const node_configuration_warning_changed: 'node_configuration_warning_changed';

		/** Emitted whenever this `SceneTree`'s `network_peer` fails to establish a connection to a server. Only emitted on clients. */
		const connection_failed: 'connection_failed';

		/** Emitted immediately before `Node._physics_process` is called on every node in the `SceneTree`. */
		const physics_frame: 'physics_frame';

		/** Emitted when the screen resolution (fullscreen) or window size (windowed) changes. */
		const screen_resized: 'screen_resized';

		/** Emitted whenever this `SceneTree`'s `network_peer` disconnects from a peer. Clients get notified when other clients disconnect from the same server. */
		const network_peer_disconnected: 'network_peer_disconnected';

		/** Emitted whenever this `SceneTree`'s `network_peer` connects with a new peer. ID is the peer ID of the new peer. Clients get notified when other clients connect to the same server. Upon connecting to a server, a client also receives this signal for the server (with ID being 1). */
		const network_peer_connected: 'network_peer_connected';

		/** Emitted whenever a node is removed from the `SceneTree`. */
		const node_removed: 'node_removed';

		/** Emitted whenever a node is added to the `SceneTree`. */
		const node_added: 'node_added';

		/** Emitted when files are dragged from the OS file manager and dropped in the game window. The arguments are a list of file paths and the identifier of the screen where the drag originated. */
		const files_dropped: 'files_dropped';

		/** Emitted immediately before `Node._process` is called on every node in the `SceneTree`. */
		const idle_frame: 'idle_frame';

		/** Emitted whenever this `SceneTree`'s `network_peer` disconnected from server. Only emitted on clients. */
		const server_disconnected: 'server_disconnected';

		/** Emitted whenever a node is renamed. */
		const node_renamed: 'node_renamed';

		/** Emitted whenever the `SceneTree` hierarchy changed (children being moved or renamed, etc.). */
		const tree_changed: 'tree_changed';

		/** Emitted whenever global menu item is clicked. */
		const global_menu_action: 'global_menu_action';
		enum GroupCallFlags {
			/** Call a group with no flags (default). */
			GROUP_CALL_DEFAULT = 0,
			/** Call a group in reverse scene order. */
			GROUP_CALL_REVERSE = 1,
			/** Call a group immediately (calls are normally made on idle). */
			GROUP_CALL_REALTIME = 2,
			/** Call a group only once even if the call is executed many times. */
			GROUP_CALL_UNIQUE = 4,
		}
		enum StretchAspect {
			/** Fill the window with the content stretched to cover excessive space. Content may appear stretched. */
			STRETCH_ASPECT_IGNORE = 0,
			/** Retain the same aspect ratio by padding with black bars on either axis. This prevents distortion. */
			STRETCH_ASPECT_KEEP = 1,
			/** Expand vertically. Left/right black bars may appear if the window is too wide. */
			STRETCH_ASPECT_KEEP_WIDTH = 2,
			/** Expand horizontally. Top/bottom black bars may appear if the window is too tall. */
			STRETCH_ASPECT_KEEP_HEIGHT = 3,
			/** Expand in both directions, retaining the same aspect ratio. This prevents distortion while avoiding black bars. */
			STRETCH_ASPECT_EXPAND = 4,
		}
		enum StretchMode {
			/** No stretching. */
			STRETCH_MODE_DISABLED = 0,
			/** Render stretching in higher resolution (interpolated). */
			STRETCH_MODE_2D = 1,
			/** Keep the specified display resolution. No interpolation. Content may appear pixelated. */
			STRETCH_MODE_VIEWPORT = 2,
		}

		/** Call a group with no flags (default). */
		const GROUP_CALL_DEFAULT: GroupCallFlags.GROUP_CALL_DEFAULT;

		/** Call a group in reverse scene order. */
		const GROUP_CALL_REVERSE: GroupCallFlags.GROUP_CALL_REVERSE;

		/** Call a group immediately (calls are normally made on idle). */
		const GROUP_CALL_REALTIME: GroupCallFlags.GROUP_CALL_REALTIME;

		/** Call a group only once even if the call is executed many times. */
		const GROUP_CALL_UNIQUE: GroupCallFlags.GROUP_CALL_UNIQUE;

		/** No stretching. */
		const STRETCH_MODE_DISABLED: StretchMode.STRETCH_MODE_DISABLED;

		/** Render stretching in higher resolution (interpolated). */
		const STRETCH_MODE_2D: StretchMode.STRETCH_MODE_2D;

		/** Keep the specified display resolution. No interpolation. Content may appear pixelated. */
		const STRETCH_MODE_VIEWPORT: StretchMode.STRETCH_MODE_VIEWPORT;

		/** Fill the window with the content stretched to cover excessive space. Content may appear stretched. */
		const STRETCH_ASPECT_IGNORE: StretchAspect.STRETCH_ASPECT_IGNORE;

		/** Retain the same aspect ratio by padding with black bars on either axis. This prevents distortion. */
		const STRETCH_ASPECT_KEEP: StretchAspect.STRETCH_ASPECT_KEEP;

		/** Expand vertically. Left/right black bars may appear if the window is too wide. */
		const STRETCH_ASPECT_KEEP_WIDTH: StretchAspect.STRETCH_ASPECT_KEEP_WIDTH;

		/** Expand horizontally. Top/bottom black bars may appear if the window is too tall. */
		const STRETCH_ASPECT_KEEP_HEIGHT: StretchAspect.STRETCH_ASPECT_KEEP_HEIGHT;

		/** Expand in both directions, retaining the same aspect ratio. This prevents distortion while avoiding black bars. */
		const STRETCH_ASPECT_EXPAND: StretchAspect.STRETCH_ASPECT_EXPAND;
	}

	/** One-shot timer.
	 A one-shot timer managed by the scene tree, which emits `timeout` on completion. See also `SceneTree.create_timer`.

	 As opposed to `Timer`, it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:

	 ```gdscript
	 func some_function():
	     print("Timer started.")
	     yield(get_tree().create_timer(1.0), "timeout")
	     print("Timer ended.")
	 ``` */
	class SceneTreeTimer extends Reference {

		/** The time remaining. */
		time_left: number;

		/** Getter of `time_left` property */
		get_time_left() : number;

		/** Setter of `time_left` property */
		set_time_left(p_value: number) : void;
	}
	namespace SceneTreeTimer {

		/** Emitted when the timer reaches 0. */
		const timeout: 'timeout';
	}

	/** A class stored as a resource.
	 A class stored as a resource. A script extends the functionality of all objects that instance it.

	 The `new` method of a script subclass creates a new instance. `Object.set_script` extends an existing object, if that object's class matches one of the script's base classes. */
	class Script extends Resource {

		/** The script source code or an empty string if source code is not available. When set, does not reload the class implementation automatically. */
		source_code: string;

		/** Returns `true` if the script can be instanced. */
		can_instance() : boolean;

		/** Returns `true` if `base_object` is an instance of this script. */
		instance_has(base_object: Object) : boolean;

		/** Returns `true` if the script contains non-empty source code. */
		has_source_code() : boolean;

		/** Reloads the script's class implementation. Returns an error code. */
		//@ts-ignore
		reload(keep_state: boolean = false) : number;

		/** Returns the script directly inherited by this script. */
		get_base_script() : Script;

		/** Returns the script's base type. */
		get_instance_base_type() : string;

		/** Returns `true` if the script, or a base class, defines a signal with the given name. */
		has_script_signal(signal_name: string) : boolean;

		/** Returns the list of properties in this `Script`. */
		get_script_property_list() : any[];

		/** Returns the list of methods in this `Script`. */
		get_script_method_list() : any[];

		/** Returns the list of user signals defined in this `Script`. */
		get_script_signal_list() : any[];

		/** Returns a dictionary containing constant names and their values. */
		get_script_constant_map() : object;

		/** Returns the default value of the specified property. */
		get_property_default_value(property: string) : any;

		/** Returns `true` if the script is a tool script. A tool script can run in the editor. */
		is_tool() : boolean;

		/** Getter of `source_code` property */
		get_source_code() : string;

		/** Setter of `source_code` property */
		set_source_code(p_value: string) : void;
	}
	namespace Script {
	}

	/** The Editor's popup dialog for creating new `Script` files.
	 The `ScriptCreateDialog` creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling one of the `Popup.popup` methods.

	 ```gdscript
	 func _ready():
	     dialog.config("Node", "res://new_node.gd") # For in-engine types
	     dialog.config("\"res://base_node.gd\"", "res://derived_node.gd") # For script types
	     dialog.popup_centered()
	 ``` */
	class ScriptCreateDialog extends ConfirmationDialog {

		/**  */
		dialog_hide_on_ok: boolean;

		/**  */
		window_title: string;

		/**  */
		margin_right: number;

		/**  */
		margin_bottom: number;

		/**  */
		rect_size: Vector2;

		/** Prefills required fields to configure the ScriptCreateDialog for use. */
		//@ts-ignore
		config(inherits: string, path: string, built_in_enabled: boolean = true, load_enabled: boolean = true) : void;

		/** Getter of `dialog_hide_on_ok` property */
		get_hide_on_ok() : boolean;

		/** Setter of `dialog_hide_on_ok` property */
		set_hide_on_ok(p_value: boolean) : void;

		/** Getter of `window_title` property */
		get_title() : string;

		/** Setter of `window_title` property */
		set_title(p_value: string) : void;

		/** Getter of `margin_right` property */
		get_margin() : number;

		/** Setter of `margin_right` property */
		set_margin(p_value: number) : void;

		/** Getter of `margin_bottom` property */
		get_margin() : number;

		/** Setter of `margin_bottom` property */
		set_margin(p_value: number) : void;

		/** Getter of `rect_size` property */
		get_size() : Vector2;

		/** Setter of `rect_size` property */
		_set_size(p_value: Vector2) : void;
	}
	namespace ScriptCreateDialog {

		/** Emitted when the user clicks the OK button. */
		const script_created: 'script_created';
	}

	/** Godot editor's script editor.
	 **Note:** This class shouldn't be instantiated directly. Instead, access the singleton using `EditorInterface.get_script_editor`. */
	class ScriptEditor extends PanelContainer {

		/**  */
		get_drag_data_fw(point: Vector2, p_from: Control) : any;

		/**  */
		can_drop_data_fw(point: Vector2, data: any, p_from: Control) : boolean;

		/**  */
		drop_data_fw(point: Vector2, data: any, p_from: Control) : void;

		/** Goes to the specified line in the current script. */
		goto_line(line_number: number) : void;

		/** Returns a `Script` that is currently active in editor. */
		get_current_script() : Script;

		/** Returns an array with all `Script` objects which are currently open in editor. */
		get_open_scripts() : any[];

		/**  */
		open_script_create_dialog(base_name: string, base_path: string) : void;
	}
	namespace ScriptEditor {

		/** Emitted when user changed active script. Argument is a freshly activated `Script`. */
		const editor_script_changed: 'editor_script_changed';

		/** Emitted when editor is about to close the active script. Argument is a `Script` that is going to be closed. */
		const script_close: 'script_close';
	}

	/** Base class for scroll bars.
	 Scrollbars are a `Range`-based `Control`, that display a draggable area (the size of the page). Horizontal (`HScrollBar`) and Vertical (`VScrollBar`) versions are available. */
	class ScrollBar extends Range {

		/** Overrides the step used when clicking increment and decrement buttons or when using arrow keys when the `ScrollBar` is focused. */
		custom_step: number;

		/**  */
		step: number;

		/**  */
		size_flags_vertical: number;

		/** Getter of `custom_step` property */
		get_custom_step() : number;

		/** Setter of `custom_step` property */
		set_custom_step(p_value: number) : void;

		/** Getter of `step` property */
		get_step() : number;

		/** Setter of `step` property */
		set_step(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;
	}
	namespace ScrollBar {

		/** Emitted when the scrollbar is being scrolled. */
		const scrolling: 'scrolling';
	}

	/** A helper node for displaying scrollable elements such as lists.
	 A ScrollContainer node meant to contain a `Control` child. ScrollContainers will automatically create a scrollbar child (`HScrollBar`, `VScrollBar`, or both) when needed and will only draw the Control within the ScrollContainer area. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the `Control.rect_min_size` of the Control relative to the ScrollContainer. Works great with a `Panel` control. You can set `EXPAND` on the children's size flags, so they will upscale to the ScrollContainer's size if it's larger (scroll is invisible for the chosen dimension). */
	class ScrollContainer extends Container {

		/** If `true`, the ScrollContainer will automatically scroll to focused children (including indirect children) to make sure they are fully visible. */
		follow_focus: boolean;

		/** If `true`, enables horizontal scrolling. */
		scroll_horizontal_enabled: boolean;

		/** The current horizontal scroll value. */
		scroll_horizontal: number;

		/** If `true`, enables vertical scrolling. */
		scroll_vertical_enabled: boolean;

		/** The current vertical scroll value. */
		scroll_vertical: number;

		/**  */
		scroll_deadzone: number;

		/**  */
		rect_clip_content: boolean;

		/** Returns the horizontal scrollbar `HScrollBar` of this `ScrollContainer`. */
		get_h_scrollbar() : HScrollBar;

		/** Returns the vertical scrollbar `VScrollBar` of this `ScrollContainer`. */
		get_v_scrollbar() : VScrollBar;

		/** Getter of `follow_focus` property */
		is_following_focus() : boolean;

		/** Setter of `follow_focus` property */
		set_follow_focus(p_value: boolean) : void;

		/** Getter of `scroll_horizontal_enabled` property */
		is_h_scroll_enabled() : boolean;

		/** Setter of `scroll_horizontal_enabled` property */
		set_enable_h_scroll(p_value: boolean) : void;

		/** Getter of `scroll_horizontal` property */
		get_h_scroll() : number;

		/** Setter of `scroll_horizontal` property */
		set_h_scroll(p_value: number) : void;

		/** Getter of `scroll_vertical_enabled` property */
		is_v_scroll_enabled() : boolean;

		/** Setter of `scroll_vertical_enabled` property */
		set_enable_v_scroll(p_value: boolean) : void;

		/** Getter of `scroll_vertical` property */
		get_v_scroll() : number;

		/** Setter of `scroll_vertical` property */
		set_v_scroll(p_value: number) : void;

		/** Getter of `scroll_deadzone` property */
		get_deadzone() : number;

		/** Setter of `scroll_deadzone` property */
		set_deadzone(p_value: number) : void;

		/** Getter of `rect_clip_content` property */
		is_clipping_contents() : boolean;

		/** Setter of `rect_clip_content` property */
		set_clip_contents(p_value: boolean) : void;
	}
	namespace ScrollContainer {

		/** Emitted when scrolling is started. */
		const scroll_started: 'scroll_started';

		/** Emitted when scrolling stops. */
		const scroll_ended: 'scroll_ended';
	}

	/** Segment shape for 2D collisions.
	 Segment shape for 2D collisions. Consists of two points, `a` and `b`. */
	class SegmentShape2D extends Shape2D {

		/** The segment's first point position. */
		a: Vector2;

		/** The segment's second point position. */
		b: Vector2;

		/** Getter of `a` property */
		get_a() : Vector2;

		/** Setter of `a` property */
		set_a(p_value: Vector2) : void;

		/** Getter of `b` property */
		get_b() : Vector2;

		/** Setter of `b` property */
		set_b(p_value: Vector2) : void;
	}
	namespace SegmentShape2D {
	}

	/** Base class for separators.
	 Separator is a `Control` used for separating other controls. It's purely a visual decoration. Horizontal (`HSeparator`) and Vertical (`VSeparator`) versions are available. */
	class Separator extends Control {
	}
	namespace Separator {
	}

	/** A custom shader program.
	 This class allows you to define a custom shader program that can be used by a `ShaderMaterial`. Shaders allow you to write your own custom behavior for rendering objects or updating particle information. For a detailed explanation and usage, please see the tutorials linked below. */
	class Shader extends Resource {

		/** Returns the shader's code as the user has written it, not the full generated code used internally. */
		code: string;

		/** Returns the shader's custom defines. Custom defines can be used in Godot to add GLSL preprocessor directives (e.g: extensions) required for the shader logic.

		 **Note:** Custom defines are not validated by the Godot shader parser, so care should be taken when using them. */
		custom_defines: string;

		/** Returns the shader mode for the shader, either `MODE_CANVAS_ITEM`, `MODE_SPATIAL` or `MODE_PARTICLES`. */
		get_mode() : number;

		/** Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the `ShaderMaterial`.

		 **Note:** `param` must match the name of the uniform in the code exactly. */
		set_default_texture_param(param: string, texture: Texture) : void;

		/** Returns the texture that is set as default for the specified parameter.

		 **Note:** `param` must match the name of the uniform in the code exactly. */
		get_default_texture_param(param: string) : Texture;

		/** Returns `true` if the shader has this param defined as a uniform in its code.

		 **Note:** `param` must match the name of the uniform in the code exactly. */
		has_param(name: string) : boolean;

		/** Getter of `code` property */
		get_code() : string;

		/** Setter of `code` property */
		set_code(p_value: string) : void;

		/** Getter of `custom_defines` property */
		get_custom_defines() : string;

		/** Setter of `custom_defines` property */
		set_custom_defines(p_value: string) : void;
	}
	namespace Shader {
		enum Mode {
			/** Mode used to draw all 3D objects. */
			MODE_SPATIAL = 0,
			/** Mode used to draw all 2D objects. */
			MODE_CANVAS_ITEM = 1,
			/** Mode used to calculate particle information on a per-particle basis. Not used for drawing. */
			MODE_PARTICLES = 2,
		}

		/** Mode used to draw all 3D objects. */
		const MODE_SPATIAL: Mode.MODE_SPATIAL;

		/** Mode used to draw all 2D objects. */
		const MODE_CANVAS_ITEM: Mode.MODE_CANVAS_ITEM;

		/** Mode used to calculate particle information on a per-particle basis. Not used for drawing. */
		const MODE_PARTICLES: Mode.MODE_PARTICLES;
	}

	/** A material that uses a custom `Shader` program.
	 A material that uses a custom `Shader` program to render either items to screen or process particles. You can create multiple materials for the same shader but configure different values for the uniforms defined in the shader. */
	class ShaderMaterial extends Material {

		/** The `Shader` program used to render this material. */
		shader: Shader;

		/** Changes the value set for this material of a uniform in the shader. **Note:** `param` must match the name of the uniform in the code exactly. */
		set_shader_param(param: string, value: any) : void;

		/** Returns the current value set for this material of a uniform in the shader. */
		get_shader_param(param: string) : any;

		/** Returns `true` if the property identified by `name` can be reverted to a default value. */
		property_can_revert(name: string) : boolean;

		/** Returns the default value of the material property with given `name`. */
		property_get_revert(name: string) : any;

		/** Getter of `shader` property */
		get_shader() : Shader;

		/** Setter of `shader` property */
		set_shader(p_value: Shader) : void;
	}
	namespace ShaderMaterial {
	}

	/** Base class for all 3D shape resources.
	 Base class for all 3D shape resources. Nodes that inherit from this can be used as shapes for a `PhysicsBody` or `Area` objects. */
	class Shape extends Resource {

		/** The collision margin for the shape. */
		margin: number;

		/** Getter of `margin` property */
		get_margin() : number;

		/** Setter of `margin` property */
		set_margin(p_value: number) : void;
	}
	namespace Shape {
	}

	/** Base class for all 2D shapes.
	 Base class for all 2D shapes. All 2D shape types inherit from this. */
	class Shape2D extends Resource {

		/** The shape's custom solver bias. */
		custom_solver_bias: number;

		/** Returns `true` if this shape is colliding with another.

		 This method needs the transformation matrix for this shape (`local_xform`), the shape to check collisions with (`with_shape`), and the transformation matrix of that shape (`shape_xform`). */
		collide(local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) : boolean;

		/** Returns whether this shape would collide with another, if a given movement was applied.

		 This method needs the transformation matrix for this shape (`local_xform`), the movement to test on this shape (`local_motion`), the shape to check collisions with (`with_shape`), the transformation matrix of that shape (`shape_xform`), and the movement to test onto the other object (`shape_motion`). */
		collide_with_motion(local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) : boolean;

		/** Returns a list of the points where this shape touches another. If there are no collisions the list is empty.

		 This method needs the transformation matrix for this shape (`local_xform`), the shape to check collisions with (`with_shape`), and the transformation matrix of that shape (`shape_xform`). */
		collide_and_get_contacts(local_xform: Transform2D, with_shape: Shape2D, shape_xform: Transform2D) : any[];

		/** Returns a list of the points where this shape would touch another, if a given movement was applied. If there are no collisions the list is empty.

		 This method needs the transformation matrix for this shape (`local_xform`), the movement to test on this shape (`local_motion`), the shape to check collisions with (`with_shape`), the transformation matrix of that shape (`shape_xform`), and the movement to test onto the other object (`shape_motion`). */
		collide_with_motion_and_get_contacts(local_xform: Transform2D, local_motion: Vector2, with_shape: Shape2D, shape_xform: Transform2D, shape_motion: Vector2) : any[];

		/** Draws a solid shape onto a `CanvasItem` with the `VisualServer` API filled with the specified `color`. The exact drawing method is specific for each shape and cannot be configured. */
		draw(canvas_item: RID, color: Color) : void;

		/** Getter of `custom_solver_bias` property */
		get_custom_solver_bias() : number;

		/** Setter of `custom_solver_bias` property */
		set_custom_solver_bias(p_value: number) : void;
	}
	namespace Shape2D {
	}

	/** A shortcut for binding input.
	 A shortcut for binding input.

	 Shortcuts are commonly used for interacting with a `Control` element from a `InputEvent`. */
	class ShortCut extends Resource {

		/** The shortcut's `InputEvent`.

		 Generally the `InputEvent` is a keyboard key, though it can be any `InputEvent`. */
		shortcut: InputEvent;

		/** If `true`, this shortcut is valid. */
		is_valid() : boolean;

		/** Returns `true` if the shortcut's `InputEvent` equals `event`. */
		is_shortcut(event: InputEvent) : boolean;

		/** Returns the shortcut's `InputEvent` as a `String`. */
		get_as_text() : string;

		/** Getter of `shortcut` property */
		get_shortcut() : InputEvent;

		/** Setter of `shortcut` property */
		set_shortcut(p_value: InputEvent) : void;
	}
	namespace ShortCut {
	}

	/** Skeleton for characters and animated objects.
	 Skeleton provides a hierarchical interface for managing bones, including pose, rest and animation (see `Animation`). It can also use ragdoll physics.

	 The overall transform of a bone with respect to the skeleton is determined by the following hierarchical order: rest pose, custom pose and pose.

	 Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it not the actual global/world transform of the bone. */
	class Skeleton extends Spatial {

		/** Adds a bone, with name `name`. `get_bone_count` will become the bone index. */
		add_bone(name: string) : void;

		/** Returns the bone index that matches `name` as its name. */
		find_bone(name: string) : number;

		/** Returns the name of the bone at index `index`. */
		get_bone_name(bone_idx: number) : string;

		/** Returns the bone index which is the parent of the bone at `bone_idx`. If -1, then bone has no parent.

		 **Note:** The parent bone returned will always be less than `bone_idx`. */
		get_bone_parent(bone_idx: number) : number;

		/** Sets the bone index `parent_idx` as the parent of the bone at `bone_idx`. If -1, then bone has no parent.

		 **Note:** `parent_idx` must be less than `bone_idx`. */
		set_bone_parent(bone_idx: number, parent_idx: number) : void;

		/** Returns the amount of bones in the skeleton. */
		get_bone_count() : number;

		/**  */
		unparent_bone_and_rest(bone_idx: number) : void;

		/** Returns the rest transform for a bone `bone_idx`. */
		get_bone_rest(bone_idx: number) : Transform;

		/** Sets the rest transform for bone `bone_idx`. */
		set_bone_rest(bone_idx: number, rest: Transform) : void;

		/**  */
		register_skin(skin: Skin) : SkinReference;

		/**  */
		localize_rests() : void;

		/**  */
		set_bone_disable_rest(bone_idx: number, disable: boolean) : void;

		/**  */
		is_bone_rest_disabled(bone_idx: number) : boolean;

		/** *Deprecated soon.* */
		bind_child_node_to_bone(bone_idx: number, node: Node) : void;

		/** *Deprecated soon.* */
		unbind_child_node_from_bone(bone_idx: number, node: Node) : void;

		/** *Deprecated soon.* */
		get_bound_child_nodes_to_bone(bone_idx: number) : any[];

		/** Clear all the bones in this skeleton. */
		clear_bones() : void;

		/** Returns the pose transform of the specified bone. Pose is applied on top of the custom pose, which is applied on top the rest pose. */
		get_bone_pose(bone_idx: number) : Transform;

		/** Returns the pose transform for bone `bone_idx`. */
		set_bone_pose(bone_idx: number, pose: Transform) : void;

		/**  */
		clear_bones_global_pose_override() : void;

		/**  */
		//@ts-ignore
		set_bone_global_pose_override(bone_idx: number, pose: Transform, amount: number, persistent: boolean = false) : void;

		/** Returns the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone. */
		get_bone_global_pose(bone_idx: number) : Transform;

		/** Returns the custom pose of the specified bone. Custom pose is applied on top of the rest pose. */
		get_bone_custom_pose(bone_idx: number) : Transform;

		/**  */
		set_bone_custom_pose(bone_idx: number, custom_pose: Transform) : void;

		/**  */
		physical_bones_stop_simulation() : void;

		/**  */
		//@ts-ignore
		physical_bones_start_simulation(bones: any[] = [  ]) : void;

		/**  */
		physical_bones_add_collision_exception(exception: RID) : void;

		/**  */
		physical_bones_remove_collision_exception(exception: RID) : void;
	}
	namespace Skeleton {

		/**  */
		const NOTIFICATION_UPDATE_SKELETON: 50;
	}

	/** Skeleton for 2D characters and animated objects.
	 Skeleton2D parents a hierarchy of `Bone2D` objects. It is a requirement of `Bone2D`. Skeleton2D holds a reference to the rest pose of its children and acts as a single point of access to its bones. */
	class Skeleton2D extends Node2D {

		/** Returns the number of `Bone2D` nodes in the node hierarchy parented by Skeleton2D. */
		get_bone_count() : number;

		/** Returns a `Bone2D` from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter `idx`. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling. */
		get_bone(idx: number) : Bone2D;

		/** Returns the `RID` of a Skeleton2D instance. */
		get_skeleton() : RID;
	}
	namespace Skeleton2D {

		/**  */
		const bone_setup_changed: 'bone_setup_changed';
	}

	/** 
	  */
	class SkeletonIK extends Node {

		/**  */
		root_bone: string;

		/**  */
		tip_bone: string;

		/**  */
		interpolation: number;

		/**  */
		target: Transform;

		/**  */
		override_tip_basis: boolean;

		/**  */
		use_magnet: boolean;

		/**  */
		magnet: Vector3;

		/**  */
		target_node: string;

		/**  */
		min_distance: number;

		/**  */
		max_iterations: number;

		/**  */
		get_parent_skeleton() : Skeleton;

		/**  */
		is_running() : boolean;

		/**  */
		//@ts-ignore
		start(one_time: boolean = false) : void;

		/**  */
		stop() : void;

		/** Getter of `root_bone` property */
		get_root_bone() : string;

		/** Setter of `root_bone` property */
		set_root_bone(p_value: string) : void;

		/** Getter of `tip_bone` property */
		get_tip_bone() : string;

		/** Setter of `tip_bone` property */
		set_tip_bone(p_value: string) : void;

		/** Getter of `interpolation` property */
		get_interpolation() : number;

		/** Setter of `interpolation` property */
		set_interpolation(p_value: number) : void;

		/** Getter of `target` property */
		get_target_transform() : Transform;

		/** Setter of `target` property */
		set_target_transform(p_value: Transform) : void;

		/** Getter of `override_tip_basis` property */
		is_override_tip_basis() : boolean;

		/** Setter of `override_tip_basis` property */
		set_override_tip_basis(p_value: boolean) : void;

		/** Getter of `use_magnet` property */
		is_using_magnet() : boolean;

		/** Setter of `use_magnet` property */
		set_use_magnet(p_value: boolean) : void;

		/** Getter of `magnet` property */
		get_magnet_position() : Vector3;

		/** Setter of `magnet` property */
		set_magnet_position(p_value: Vector3) : void;

		/** Getter of `target_node` property */
		get_target_node() : string;

		/** Setter of `target_node` property */
		set_target_node(p_value: string) : void;

		/** Getter of `min_distance` property */
		get_min_distance() : number;

		/** Setter of `min_distance` property */
		set_min_distance(p_value: number) : void;

		/** Getter of `max_iterations` property */
		get_max_iterations() : number;

		/** Setter of `max_iterations` property */
		set_max_iterations(p_value: number) : void;
	}
	namespace SkeletonIK {
	}

	/** 
	  */
	class Skin extends Resource {

		/**  */
		set_bind_count(bind_count: number) : void;

		/**  */
		get_bind_count() : number;

		/**  */
		add_bind(bone: number, pose: Transform) : void;

		/**  */
		set_bind_pose(bind_index: number, pose: Transform) : void;

		/**  */
		get_bind_pose(bind_index: number) : Transform;

		/**  */
		set_bind_name(bind_index: number, name: string) : void;

		/**  */
		get_bind_name(bind_index: number) : string;

		/**  */
		set_bind_bone(bind_index: number, bone: number) : void;

		/**  */
		get_bind_bone(bind_index: number) : number;

		/**  */
		clear_binds() : void;
	}
	namespace Skin {
	}

	/** 
	  */
	class SkinReference extends Reference {

		/**  */
		get_skeleton() : RID;

		/**  */
		get_skin() : Skin;
	}
	namespace SkinReference {
	}

	/** The base class for `PanoramaSky` and `ProceduralSky`.
	  */
	class Sky extends Resource {

		/** The `Sky`'s radiance map size. The higher the radiance map size, the more detailed the lighting from the `Sky` will be.

		 See `RadianceSize` constants for values.

		 **Note:** Some hardware will have trouble with higher radiance sizes, especially `RADIANCE_SIZE_512` and above. Only use such high values on high-end hardware. */
		radiance_size: number;

		/** Getter of `radiance_size` property */
		get_radiance_size() : number;

		/** Setter of `radiance_size` property */
		set_radiance_size(p_value: number) : void;
	}
	namespace Sky {
		enum RadianceSize {
			/** Radiance texture size is 32×32 pixels. */
			RADIANCE_SIZE_32 = 0,
			/** Radiance texture size is 64×64 pixels. */
			RADIANCE_SIZE_64 = 1,
			/** Radiance texture size is 128×128 pixels. */
			RADIANCE_SIZE_128 = 2,
			/** Radiance texture size is 256×256 pixels. */
			RADIANCE_SIZE_256 = 3,
			/** Radiance texture size is 512×512 pixels. */
			RADIANCE_SIZE_512 = 4,
			/** Radiance texture size is 1024×1024 pixels. */
			RADIANCE_SIZE_1024 = 5,
			/** Radiance texture size is 2048×2048 pixels. */
			RADIANCE_SIZE_2048 = 6,
			/** Represents the size of the `RadianceSize` enum. */
			RADIANCE_SIZE_MAX = 7,
		}

		/** Radiance texture size is 32×32 pixels. */
		const RADIANCE_SIZE_32: RadianceSize.RADIANCE_SIZE_32;

		/** Radiance texture size is 64×64 pixels. */
		const RADIANCE_SIZE_64: RadianceSize.RADIANCE_SIZE_64;

		/** Radiance texture size is 128×128 pixels. */
		const RADIANCE_SIZE_128: RadianceSize.RADIANCE_SIZE_128;

		/** Radiance texture size is 256×256 pixels. */
		const RADIANCE_SIZE_256: RadianceSize.RADIANCE_SIZE_256;

		/** Radiance texture size is 512×512 pixels. */
		const RADIANCE_SIZE_512: RadianceSize.RADIANCE_SIZE_512;

		/** Radiance texture size is 1024×1024 pixels. */
		const RADIANCE_SIZE_1024: RadianceSize.RADIANCE_SIZE_1024;

		/** Radiance texture size is 2048×2048 pixels. */
		const RADIANCE_SIZE_2048: RadianceSize.RADIANCE_SIZE_2048;

		/** Represents the size of the `RadianceSize` enum. */
		const RADIANCE_SIZE_MAX: RadianceSize.RADIANCE_SIZE_MAX;
	}

	/** Base class for GUI sliders.
	  */
	class Slider extends Range {

		/** If `true`, the slider can be interacted with. If `false`, the value can be changed only by code. */
		editable: boolean;

		/** If `true`, the value can be changed using the mouse wheel. */
		scrollable: boolean;

		/** Number of ticks displayed on the slider, including border ticks. Ticks are uniformly-distributed value markers. */
		tick_count: number;

		/** If `true`, the slider will display ticks for minimum and maximum values. */
		ticks_on_borders: boolean;

		/**  */
		focus_mode: number;

		/**  */
		size_flags_vertical: number;

		/** Getter of `editable` property */
		is_editable() : boolean;

		/** Setter of `editable` property */
		set_editable(p_value: boolean) : void;

		/** Getter of `scrollable` property */
		is_scrollable() : boolean;

		/** Setter of `scrollable` property */
		set_scrollable(p_value: boolean) : void;

		/** Getter of `tick_count` property */
		get_ticks() : number;

		/** Setter of `tick_count` property */
		set_ticks(p_value: number) : void;

		/** Getter of `ticks_on_borders` property */
		get_ticks_on_borders() : boolean;

		/** Setter of `ticks_on_borders` property */
		set_ticks_on_borders(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;
	}
	namespace Slider {
	}

	/** Piston kind of slider between two bodies in 3D.
	 Slides across the X axis of the pivot object. */
	class SliderJoint extends Joint {

		/** The maximum difference between the pivot points on their X axis before damping happens. */
		'linear_limit/upper_distance': number;

		/** The minimum difference between the pivot points on their X axis before damping happens. */
		'linear_limit/lower_distance': number;

		/** A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. */
		'linear_limit/softness': number;

		/** The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost. */
		'linear_limit/restitution': number;

		/** The amount of damping that happens once the limit defined by `linear_limit/lower_distance` and `linear_limit/upper_distance` is surpassed. */
		'linear_limit/damping': number;

		/** A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. */
		'linear_motion/softness': number;

		/** The amount of restitution inside the slider limits. */
		'linear_motion/restitution': number;

		/** The amount of damping inside the slider limits. */
		'linear_motion/damping': number;

		/** A factor applied to the movement across axes orthogonal to the slider. */
		'linear_ortho/softness': number;

		/** The amount of restitution when movement is across axes orthogonal to the slider. */
		'linear_ortho/restitution': number;

		/** The amount of damping when movement is across axes orthogonal to the slider. */
		'linear_ortho/damping': number;

		/** The upper limit of rotation in the slider. */
		'angular_limit/upper_angle': number;

		/** The lower limit of rotation in the slider. */
		'angular_limit/lower_angle': number;

		/** A factor applied to the all rotation once the limit is surpassed.

		 Makes all rotation slower when between 0 and 1. */
		'angular_limit/softness': number;

		/** The amount of restitution of the rotation when the limit is surpassed.

		 Does not affect damping. */
		'angular_limit/restitution': number;

		/** The amount of damping of the rotation when the limit is surpassed.

		 A lower damping value allows a rotation initiated by body A to travel to body B slower. */
		'angular_limit/damping': number;

		/** A factor applied to the all rotation in the limits. */
		'angular_motion/softness': number;

		/** The amount of restitution of the rotation in the limits. */
		'angular_motion/restitution': number;

		/** The amount of damping of the rotation in the limits. */
		'angular_motion/damping': number;

		/** A factor applied to the all rotation across axes orthogonal to the slider. */
		'angular_ortho/softness': number;

		/** The amount of restitution of the rotation across axes orthogonal to the slider. */
		'angular_ortho/restitution': number;

		/** The amount of damping of the rotation across axes orthogonal to the slider. */
		'angular_ortho/damping': number;

		/**  */
		set_param(param: SliderJoint.Param, value: number) : void;

		/**  */
		get_param(param: SliderJoint.Param) : number;

		/** Getter of `linear_limit/upper_distance` property */
		get_param() : number;

		/** Setter of `linear_limit/upper_distance` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_limit/lower_distance` property */
		get_param() : number;

		/** Setter of `linear_limit/lower_distance` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_limit/softness` property */
		get_param() : number;

		/** Setter of `linear_limit/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_limit/restitution` property */
		get_param() : number;

		/** Setter of `linear_limit/restitution` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_limit/damping` property */
		get_param() : number;

		/** Setter of `linear_limit/damping` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_motion/softness` property */
		get_param() : number;

		/** Setter of `linear_motion/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_motion/restitution` property */
		get_param() : number;

		/** Setter of `linear_motion/restitution` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_motion/damping` property */
		get_param() : number;

		/** Setter of `linear_motion/damping` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_ortho/softness` property */
		get_param() : number;

		/** Setter of `linear_ortho/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_ortho/restitution` property */
		get_param() : number;

		/** Setter of `linear_ortho/restitution` property */
		set_param(p_value: number) : void;

		/** Getter of `linear_ortho/damping` property */
		get_param() : number;

		/** Setter of `linear_ortho/damping` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_limit/upper_angle` property */
		_get_upper_limit_angular() : number;

		/** Setter of `angular_limit/upper_angle` property */
		_set_upper_limit_angular(p_value: number) : void;

		/** Getter of `angular_limit/lower_angle` property */
		_get_lower_limit_angular() : number;

		/** Setter of `angular_limit/lower_angle` property */
		_set_lower_limit_angular(p_value: number) : void;

		/** Getter of `angular_limit/softness` property */
		get_param() : number;

		/** Setter of `angular_limit/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_limit/restitution` property */
		get_param() : number;

		/** Setter of `angular_limit/restitution` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_limit/damping` property */
		get_param() : number;

		/** Setter of `angular_limit/damping` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_motion/softness` property */
		get_param() : number;

		/** Setter of `angular_motion/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_motion/restitution` property */
		get_param() : number;

		/** Setter of `angular_motion/restitution` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_motion/damping` property */
		get_param() : number;

		/** Setter of `angular_motion/damping` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_ortho/softness` property */
		get_param() : number;

		/** Setter of `angular_ortho/softness` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_ortho/restitution` property */
		get_param() : number;

		/** Setter of `angular_ortho/restitution` property */
		set_param(p_value: number) : void;

		/** Getter of `angular_ortho/damping` property */
		get_param() : number;

		/** Setter of `angular_ortho/damping` property */
		set_param(p_value: number) : void;
	}
	namespace SliderJoint {
		enum Param {
			/** The maximum difference between the pivot points on their X axis before damping happens. */
			PARAM_LINEAR_LIMIT_UPPER = 0,
			/** The minimum difference between the pivot points on their X axis before damping happens. */
			PARAM_LINEAR_LIMIT_LOWER = 1,
			/** A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. */
			PARAM_LINEAR_LIMIT_SOFTNESS = 2,
			/** The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost. */
			PARAM_LINEAR_LIMIT_RESTITUTION = 3,
			/** The amount of damping once the slider limits are surpassed. */
			PARAM_LINEAR_LIMIT_DAMPING = 4,
			/** A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. */
			PARAM_LINEAR_MOTION_SOFTNESS = 5,
			/** The amount of restitution inside the slider limits. */
			PARAM_LINEAR_MOTION_RESTITUTION = 6,
			/** The amount of damping inside the slider limits. */
			PARAM_LINEAR_MOTION_DAMPING = 7,
			/** A factor applied to the movement across axes orthogonal to the slider. */
			PARAM_LINEAR_ORTHOGONAL_SOFTNESS = 8,
			/** The amount of restitution when movement is across axes orthogonal to the slider. */
			PARAM_LINEAR_ORTHOGONAL_RESTITUTION = 9,
			/** The amount of damping when movement is across axes orthogonal to the slider. */
			PARAM_LINEAR_ORTHOGONAL_DAMPING = 10,
			/** The upper limit of rotation in the slider. */
			PARAM_ANGULAR_LIMIT_UPPER = 11,
			/** The lower limit of rotation in the slider. */
			PARAM_ANGULAR_LIMIT_LOWER = 12,
			/** A factor applied to the all rotation once the limit is surpassed. */
			PARAM_ANGULAR_LIMIT_SOFTNESS = 13,
			/** The amount of restitution of the rotation when the limit is surpassed. */
			PARAM_ANGULAR_LIMIT_RESTITUTION = 14,
			/** The amount of damping of the rotation when the limit is surpassed. */
			PARAM_ANGULAR_LIMIT_DAMPING = 15,
			/** A factor applied to the all rotation in the limits. */
			PARAM_ANGULAR_MOTION_SOFTNESS = 16,
			/** The amount of restitution of the rotation in the limits. */
			PARAM_ANGULAR_MOTION_RESTITUTION = 17,
			/** The amount of damping of the rotation in the limits. */
			PARAM_ANGULAR_MOTION_DAMPING = 18,
			/** A factor applied to the all rotation across axes orthogonal to the slider. */
			PARAM_ANGULAR_ORTHOGONAL_SOFTNESS = 19,
			/** The amount of restitution of the rotation across axes orthogonal to the slider. */
			PARAM_ANGULAR_ORTHOGONAL_RESTITUTION = 20,
			/** The amount of damping of the rotation across axes orthogonal to the slider. */
			PARAM_ANGULAR_ORTHOGONAL_DAMPING = 21,
			/** Represents the size of the `Param` enum. */
			PARAM_MAX = 22,
		}

		/** The maximum difference between the pivot points on their X axis before damping happens. */
		const PARAM_LINEAR_LIMIT_UPPER: Param.PARAM_LINEAR_LIMIT_UPPER;

		/** The minimum difference between the pivot points on their X axis before damping happens. */
		const PARAM_LINEAR_LIMIT_LOWER: Param.PARAM_LINEAR_LIMIT_LOWER;

		/** A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. */
		const PARAM_LINEAR_LIMIT_SOFTNESS: Param.PARAM_LINEAR_LIMIT_SOFTNESS;

		/** The amount of restitution once the limits are surpassed. The lower, the more velocityenergy gets lost. */
		const PARAM_LINEAR_LIMIT_RESTITUTION: Param.PARAM_LINEAR_LIMIT_RESTITUTION;

		/** The amount of damping once the slider limits are surpassed. */
		const PARAM_LINEAR_LIMIT_DAMPING: Param.PARAM_LINEAR_LIMIT_DAMPING;

		/** A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. */
		const PARAM_LINEAR_MOTION_SOFTNESS: Param.PARAM_LINEAR_MOTION_SOFTNESS;

		/** The amount of restitution inside the slider limits. */
		const PARAM_LINEAR_MOTION_RESTITUTION: Param.PARAM_LINEAR_MOTION_RESTITUTION;

		/** The amount of damping inside the slider limits. */
		const PARAM_LINEAR_MOTION_DAMPING: Param.PARAM_LINEAR_MOTION_DAMPING;

		/** A factor applied to the movement across axes orthogonal to the slider. */
		const PARAM_LINEAR_ORTHOGONAL_SOFTNESS: Param.PARAM_LINEAR_ORTHOGONAL_SOFTNESS;

		/** The amount of restitution when movement is across axes orthogonal to the slider. */
		const PARAM_LINEAR_ORTHOGONAL_RESTITUTION: Param.PARAM_LINEAR_ORTHOGONAL_RESTITUTION;

		/** The amount of damping when movement is across axes orthogonal to the slider. */
		const PARAM_LINEAR_ORTHOGONAL_DAMPING: Param.PARAM_LINEAR_ORTHOGONAL_DAMPING;

		/** The upper limit of rotation in the slider. */
		const PARAM_ANGULAR_LIMIT_UPPER: Param.PARAM_ANGULAR_LIMIT_UPPER;

		/** The lower limit of rotation in the slider. */
		const PARAM_ANGULAR_LIMIT_LOWER: Param.PARAM_ANGULAR_LIMIT_LOWER;

		/** A factor applied to the all rotation once the limit is surpassed. */
		const PARAM_ANGULAR_LIMIT_SOFTNESS: Param.PARAM_ANGULAR_LIMIT_SOFTNESS;

		/** The amount of restitution of the rotation when the limit is surpassed. */
		const PARAM_ANGULAR_LIMIT_RESTITUTION: Param.PARAM_ANGULAR_LIMIT_RESTITUTION;

		/** The amount of damping of the rotation when the limit is surpassed. */
		const PARAM_ANGULAR_LIMIT_DAMPING: Param.PARAM_ANGULAR_LIMIT_DAMPING;

		/** A factor applied to the all rotation in the limits. */
		const PARAM_ANGULAR_MOTION_SOFTNESS: Param.PARAM_ANGULAR_MOTION_SOFTNESS;

		/** The amount of restitution of the rotation in the limits. */
		const PARAM_ANGULAR_MOTION_RESTITUTION: Param.PARAM_ANGULAR_MOTION_RESTITUTION;

		/** The amount of damping of the rotation in the limits. */
		const PARAM_ANGULAR_MOTION_DAMPING: Param.PARAM_ANGULAR_MOTION_DAMPING;

		/** A factor applied to the all rotation across axes orthogonal to the slider. */
		const PARAM_ANGULAR_ORTHOGONAL_SOFTNESS: Param.PARAM_ANGULAR_ORTHOGONAL_SOFTNESS;

		/** The amount of restitution of the rotation across axes orthogonal to the slider. */
		const PARAM_ANGULAR_ORTHOGONAL_RESTITUTION: Param.PARAM_ANGULAR_ORTHOGONAL_RESTITUTION;

		/** The amount of damping of the rotation across axes orthogonal to the slider. */
		const PARAM_ANGULAR_ORTHOGONAL_DAMPING: Param.PARAM_ANGULAR_ORTHOGONAL_DAMPING;

		/** Represents the size of the `Param` enum. */
		const PARAM_MAX: Param.PARAM_MAX;
	}

	/** A soft mesh physics body.
	 A deformable physics body. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials. */
	class SoftBody extends MeshInstance {

		/** The physics layers this SoftBody is in.

		 Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.

		 A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. */
		collision_layer: number;

		/** The physics layers this SoftBody scans for collisions. */
		collision_mask: number;

		/** `NodePath` to a `CollisionObject` this SoftBody should avoid clipping. */
		parent_collision_ignore: string;

		/** Increasing this value will improve the resulting simulation, but can affect performance. Use with care. */
		simulation_precision: number;

		/** The SoftBody's mass. */
		total_mass: number;

		/**  */
		linear_stiffness: number;

		/**  */
		areaAngular_stiffness: number;

		/**  */
		volume_stiffness: number;

		/**  */
		pressure_coefficient: number;

		/**  */
		damping_coefficient: number;

		/**  */
		drag_coefficient: number;

		/**  */
		pose_matching_coefficient: number;

		/** If `true`, the `SoftBody` will respond to `RayCast`s. */
		ray_pickable: boolean;

		/** Sets individual bits on the collision mask. Use this if you only need to change one layer's value. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Sets individual bits on the layer mask. Use this if you only need to change one layer's value. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns an individual bit on the collision mask. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Returns an array of nodes that were added as collision exceptions for this body. */
		get_collision_exceptions() : any[];

		/** Adds a body to the list of bodies that this body can't collide with. */
		add_collision_exception_with(body: Node) : void;

		/** Removes a body from the list of bodies that this body can't collide with. */
		remove_collision_exception_with(body: Node) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `parent_collision_ignore` property */
		get_parent_collision_ignore() : string;

		/** Setter of `parent_collision_ignore` property */
		set_parent_collision_ignore(p_value: string) : void;

		/** Getter of `simulation_precision` property */
		get_simulation_precision() : number;

		/** Setter of `simulation_precision` property */
		set_simulation_precision(p_value: number) : void;

		/** Getter of `total_mass` property */
		get_total_mass() : number;

		/** Setter of `total_mass` property */
		set_total_mass(p_value: number) : void;

		/** Getter of `linear_stiffness` property */
		get_linear_stiffness() : number;

		/** Setter of `linear_stiffness` property */
		set_linear_stiffness(p_value: number) : void;

		/** Getter of `areaAngular_stiffness` property */
		get_areaAngular_stiffness() : number;

		/** Setter of `areaAngular_stiffness` property */
		set_areaAngular_stiffness(p_value: number) : void;

		/** Getter of `volume_stiffness` property */
		get_volume_stiffness() : number;

		/** Setter of `volume_stiffness` property */
		set_volume_stiffness(p_value: number) : void;

		/** Getter of `pressure_coefficient` property */
		get_pressure_coefficient() : number;

		/** Setter of `pressure_coefficient` property */
		set_pressure_coefficient(p_value: number) : void;

		/** Getter of `damping_coefficient` property */
		get_damping_coefficient() : number;

		/** Setter of `damping_coefficient` property */
		set_damping_coefficient(p_value: number) : void;

		/** Getter of `drag_coefficient` property */
		get_drag_coefficient() : number;

		/** Setter of `drag_coefficient` property */
		set_drag_coefficient(p_value: number) : void;

		/** Getter of `pose_matching_coefficient` property */
		get_pose_matching_coefficient() : number;

		/** Setter of `pose_matching_coefficient` property */
		set_pose_matching_coefficient(p_value: number) : void;

		/** Getter of `ray_pickable` property */
		is_ray_pickable() : boolean;

		/** Setter of `ray_pickable` property */
		set_ray_pickable(p_value: boolean) : void;
	}
	namespace SoftBody {
	}

	/** Most basic 3D game object, parent of all 3D-related nodes.
	 Most basic 3D game object, with a 3D `Transform` and visibility settings. All other 3D game objects inherit from Spatial. Use `Spatial` as a parent node to move, scale, rotate and show/hide children in a 3D project.

	 Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the `Spatial` object is set as top-level. Affine operations in this coordinate system correspond to direct affine operations on the `Spatial`'s transform. The word local below refers to this coordinate system. The coordinate system that is attached to the `Spatial` object itself is referred to as object-local coordinate system.

	 **Note:** Unless otherwise specified, all methods that have angle parameters must have angles specified as *radians*. To convert degrees to radians, use `@GDScript.deg2rad`. */
	class Spatial extends Node {

		/** World space (global) `Transform` of this node. */
		global_transform: Transform;

		/** Local translation of this node. */
		translation: Vector3;

		/** Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle). */
		rotation_degrees: Vector3;

		/** Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).

		 **Note:** In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a `Vector3` data structure not because the rotation is a vector, but only because `Vector3` exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful. */
		rotation: Vector3;

		/** Scale part of the local transformation. */
		scale: Vector3;

		/** Local space `Transform` of this node, with respect to the parent node. */
		transform: Transform;

		/** If `true`, this node is drawn. */
		visible: boolean;

		/** The `SpatialGizmo` for this node. Used for example in `EditorSpatialGizmo` as custom visualization and editing handles in Editor. */
		gizmo: SpatialGizmo;

		/** Returns the parent `Spatial`, or an empty `Object` if no parent exists or parent is not of type `Spatial`. */
		get_parent_spatial() : Spatial;

		/** Sets whether the node ignores notification that its transformation (global or local) changed. */
		set_ignore_transform_notification(enabled: boolean) : void;

		/** Makes the node ignore its parents transformations. Node transformations are only in global space. */
		set_as_toplevel(enable: boolean) : void;

		/** Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations. */
		is_set_as_toplevel() : boolean;

		/** Sets whether the node uses a scale of `(1, 1, 1)` or its local transformation scale. Changes to the local transformation scale are preserved. */
		set_disable_scale(disable: boolean) : void;

		/** Returns whether this node uses a scale of `(1, 1, 1)` or its local transformation scale. */
		is_scale_disabled() : boolean;

		/** Returns the current `World` resource this `Spatial` node is registered to. */
		get_world() : World;

		/** Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations. */
		force_update_transform() : void;

		/** Updates the `SpatialGizmo` of this node. */
		update_gizmo() : void;

		/** Returns whether the node is visible, taking into consideration that its parents visibility. */
		is_visible_in_tree() : boolean;

		/** Enables rendering of this node. Changes `visible` to `true`. */
		show() : void;

		/** Disables rendering of this node. Changes `visible` to `false`. */
		hide() : void;

		/** Sets whether the node notifies about its local transformation changes. `Spatial` will not propagate this by default. */
		set_notify_local_transform(enable: boolean) : void;

		/** Returns whether node notifies about its local transformation changes. `Spatial` will not propagate this by default. */
		is_local_transform_notification_enabled() : boolean;

		/** Sets whether the node notifies about its global and local transformation changes. `Spatial` will not propagate this by default. */
		set_notify_transform(enable: boolean) : void;

		/** Returns whether the node notifies about its global and local transformation changes. `Spatial` will not propagate this by default. */
		is_transform_notification_enabled() : boolean;

		/** Rotates the local transformation around axis, a unit `Vector3`, by specified angle in radians. */
		rotate(axis: Vector3, angle: number) : void;

		/** Rotates the global (world) transformation around axis, a unit `Vector3`, by specified angle in radians. The rotation axis is in global coordinate system. */
		global_rotate(axis: Vector3, angle: number) : void;

		/** Scales the global (world) transformation by the given `Vector3` scale factors. */
		global_scale(scale: Vector3) : void;

		/** Moves the global (world) transformation by `Vector3` offset. The offset is in global coordinate system. */
		global_translate(offset: Vector3) : void;

		/** Rotates the local transformation around axis, a unit `Vector3`, by specified angle in radians. The rotation axis is in object-local coordinate system. */
		rotate_object_local(axis: Vector3, angle: number) : void;

		/** Scales the local transformation by given 3D scale factors in object-local coordinate system. */
		scale_object_local(scale: Vector3) : void;

		/** Changes the node's position by the given offset `Vector3` in local space. */
		translate_object_local(offset: Vector3) : void;

		/** Rotates the local transformation around the X axis by angle in radians. */
		rotate_x(angle: number) : void;

		/** Rotates the local transformation around the Y axis by angle in radians. */
		rotate_y(angle: number) : void;

		/** Rotates the local transformation around the Z axis by angle in radians. */
		rotate_z(angle: number) : void;

		/** Changes the node's position by the given offset `Vector3`.

		 Note that the translation `offset` is affected by the node's scale, so if scaled by e.g. `(10, 1, 1)`, a translation by an offset of `(2, 0, 0)` would actually add 20 (`2 * 10`) to the X coordinate. */
		translate(offset: Vector3) : void;

		/** Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's `Transform`. */
		orthonormalize() : void;

		/** Reset all transformations for this node (sets its `Transform` to the identity matrix). */
		set_identity() : void;

		/** Rotates itself so that the local -Z axis points towards the `target` position.

		 The transform will first be rotated around the given `up` vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the `target` and `up` vectors.

		 Operations take place in global space. */
		look_at(target: Vector3, up: Vector3) : void;

		/** Moves the node to the specified `position`, and then rotates itself to point toward the `target` as per `look_at`. Operations take place in global space. */
		look_at_from_position(position: Vector3, target: Vector3, up: Vector3) : void;

		/** Transforms `global_point` from world space to this node's local space. */
		to_local(global_point: Vector3) : Vector3;

		/** Transforms `local_point` from this node's local space to world space. */
		to_global(local_point: Vector3) : Vector3;

		/** Getter of `global_transform` property */
		get_global_transform() : Transform;

		/** Setter of `global_transform` property */
		set_global_transform(p_value: Transform) : void;

		/** Getter of `translation` property */
		get_translation() : Vector3;

		/** Setter of `translation` property */
		set_translation(p_value: Vector3) : void;

		/** Getter of `rotation_degrees` property */
		get_rotation_degrees() : Vector3;

		/** Setter of `rotation_degrees` property */
		set_rotation_degrees(p_value: Vector3) : void;

		/** Getter of `rotation` property */
		get_rotation() : Vector3;

		/** Setter of `rotation` property */
		set_rotation(p_value: Vector3) : void;

		/** Getter of `scale` property */
		get_scale() : Vector3;

		/** Setter of `scale` property */
		set_scale(p_value: Vector3) : void;

		/** Getter of `transform` property */
		get_transform() : Transform;

		/** Setter of `transform` property */
		set_transform(p_value: Transform) : void;

		/** Getter of `visible` property */
		is_visible() : boolean;

		/** Setter of `visible` property */
		set_visible(p_value: boolean) : void;

		/** Getter of `gizmo` property */
		get_gizmo() : SpatialGizmo;

		/** Setter of `gizmo` property */
		set_gizmo(p_value: SpatialGizmo) : void;
	}
	namespace Spatial {

		/** Emitted when node visibility changes. */
		const visibility_changed: 'visibility_changed';

		/** Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.

		 In order for `NOTIFICATION_TRANSFORM_CHANGED` to work, users first need to ask for it, with `set_notify_transform`. */
		const NOTIFICATION_TRANSFORM_CHANGED: 2000;

		/** Spatial nodes receives this notification when they are registered to new `World` resource. */
		const NOTIFICATION_ENTER_WORLD: 41;

		/** Spatial nodes receives this notification when they are unregistered from current `World` resource. */
		const NOTIFICATION_EXIT_WORLD: 42;

		/** Spatial nodes receives this notification when their visibility changes. */
		const NOTIFICATION_VISIBILITY_CHANGED: 43;
	}

	/** 
	  */
	class SpatialGizmo extends Reference {
	}
	namespace SpatialGizmo {
	}

	/** Default 3D rendering material.
	 This provides a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details. */
	class SpatialMaterial extends Material {

		/** If `true`, transparency is enabled on the body. See also `params_blend_mode`. */
		flags_transparent: boolean;

		/** If `true`, enables the "shadow to opacity" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR. */
		flags_use_shadow_to_opacity: boolean;

		/** If `true`, the object is unaffected by lighting. */
		flags_unshaded: boolean;

		/** If `true`, lighting is calculated per vertex rather than per pixel. This may increase performance on low-end devices. */
		flags_vertex_lighting: boolean;

		/** If `true`, depth testing is disabled and the object will be drawn in render order. */
		flags_no_depth_test: boolean;

		/** If `true`, render point size can be changed.

		 **Note:** this is only effective for objects whose geometry is point-based rather than triangle-based. See also `params_point_size`. */
		flags_use_point_size: boolean;

		/** If `true`, triplanar mapping is calculated in world space rather than object local space. See also `uv1_triplanar`. */
		flags_world_triplanar: boolean;

		/** If `true`, the object is rendered at the same size regardless of distance. */
		flags_fixed_size: boolean;

		/** Forces a conversion of the `albedo_texture` from sRGB space to linear space. */
		flags_albedo_tex_force_srgb: boolean;

		/** If `true`, the object receives no shadow that would otherwise be cast onto it. */
		flags_do_not_receive_shadows: boolean;

		/** If `true`, the object receives no ambient light. */
		flags_disable_ambient_light: boolean;

		/** If `true`, the shader will compute extra operations to make sure the normal stays correct when using a non-uniform scale. Only enable if using non-uniform scaling. */
		flags_ensure_correct_normals: boolean;

		/** If `true`, the vertex color is used as albedo color. */
		vertex_color_use_as_albedo: boolean;

		/** If `true`, the model's vertex colors are processed as sRGB mode. */
		vertex_color_is_srgb: boolean;

		/** The algorithm used for diffuse light scattering. See `DiffuseMode`. */
		params_diffuse_mode: number;

		/** The method for rendering the specular blob. See `SpecularMode`. */
		params_specular_mode: number;

		/** The material's blend mode.

		 **Note:** Values other than `Mix` force the object into the transparent pipeline. See `BlendMode`. */
		params_blend_mode: number;

		/** Which side of the object is not drawn when backfaces are rendered. See `CullMode`. */
		params_cull_mode: number;

		/** Determines when depth rendering takes place. See `DepthDrawMode`. See also `flags_transparent`. */
		params_depth_draw_mode: number;

		/** Currently unimplemented in Godot. */
		params_line_width: number;

		/** The point size in pixels. See `flags_use_point_size`. */
		params_point_size: number;

		/** Controls how the object faces the camera. See `BillboardMode`. */
		params_billboard_mode: number;

		/** If `true`, the shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when `params_billboard_mode` is `BILLBOARD_ENABLED`. */
		params_billboard_keep_scale: boolean;

		/** If `true`, enables the vertex grow setting. See `params_grow_amount`. */
		params_grow: boolean;

		/** Grows object vertices in the direction of their normals. */
		params_grow_amount: number;

		/** If `true`, the shader will discard all pixels that have an alpha value less than `params_alpha_scissor_threshold`. */
		params_use_alpha_scissor: boolean;

		/** Threshold at which the alpha scissor will discard values. */
		params_alpha_scissor_threshold: number;

		/** The number of horizontal frames in the particle sprite sheet. Only enabled when using `BILLBOARD_PARTICLES`. See `params_billboard_mode`. */
		particles_anim_h_frames: number;

		/** The number of vertical frames in the particle sprite sheet. Only enabled when using `BILLBOARD_PARTICLES`. See `params_billboard_mode`. */
		particles_anim_v_frames: number;

		/** If `true`, particle animations are looped. Only enabled when using `BILLBOARD_PARTICLES`. See `params_billboard_mode`. */
		particles_anim_loop: boolean;

		/** The material's base color. */
		albedo_color: Color;

		/** Texture to multiply by `albedo_color`. Used for basic texturing of objects. */
		albedo_texture: Texture;

		/** A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between `0` and `1` should only be used for blending between metal and non-metal sections. To alter the amount of reflection use `roughness`. */
		metallic: number;

		/** Sets the size of the specular lobe. The specular lobe is the bright spot that is reflected from light sources.

		 **Note:** unlike `metallic`, this is not energy-conserving, so it should be left at `0.5` in most cases. See also `roughness`. */
		metallic_specular: number;

		/** Texture used to specify metallic for an object. This is multiplied by `metallic`. */
		metallic_texture: Texture;

		/** Specifies the channel of the `metallic_texture` in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. */
		metallic_texture_channel: number;

		/** Surface reflection. A value of `0` represents a perfect mirror while a value of `1` completely blurs the reflection. See also `metallic`. */
		roughness: number;

		/** Texture used to control the roughness per-pixel. Multiplied by `roughness`. */
		roughness_texture: Texture;

		/** Specifies the channel of the `ao_texture` in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. */
		roughness_texture_channel: number;

		/** If `true`, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a `GIProbe` or `BakedLightmap` is used and this object is used in baked lighting. */
		emission_enabled: boolean;

		/** The emitted light's color. See `emission_enabled`. */
		emission: Color;

		/** The emitted light's strength. See `emission_enabled`. */
		emission_energy: number;

		/** Sets how `emission` interacts with `emission_texture`. Can either add or multiply. See `EmissionOperator` for options. */
		emission_operator: number;

		/** Use `UV2` to read from the `emission_texture`. */
		emission_on_uv2: boolean;

		/** Texture that specifies how much surface emits light at a given point. */
		emission_texture: Texture;

		/** If `true`, normal mapping is enabled. */
		normal_enabled: boolean;

		/** The strength of the normal map's effect. */
		normal_scale: number;

		/** Texture used to specify the normal at a given pixel. The `normal_texture` only uses the red and green channels. The normal read from `normal_texture` is oriented around the surface normal provided by the `Mesh`.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normal_texture: Texture;

		/** If `true`, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object. */
		rim_enabled: boolean;

		/** Sets the strength of the rim lighting effect. */
		rim: number;

		/** The amount of to blend light and albedo color when rendering rim effect. If `0` the light color is used, while `1` means albedo color is used. An intermediate value generally works best. */
		rim_tint: number;

		/** Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by `rim`. */
		rim_texture: Texture;

		/** If `true`, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough. */
		clearcoat_enabled: boolean;

		/** Sets the strength of the clearcoat effect. Setting to `0` looks the same as disabling the clearcoat effect. */
		clearcoat: number;

		/** Sets the roughness of the clearcoat pass. A higher value results in a smoother clearcoat while a lower value results in a rougher clearcoat. */
		clearcoat_gloss: number;

		/** Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel. */
		clearcoat_texture: Texture;

		/** If `true`, anisotropy is enabled. Changes the shape of the specular blob and aligns it to tangent space. Mesh tangents are needed for this to work. If the mesh does not contain tangents the anisotropy effect will appear broken. */
		anisotropy_enabled: boolean;

		/** The strength of the anisotropy effect. */
		anisotropy: number;

		/** Texture that offsets the tangent map for anisotropy calculations. */
		anisotropy_flowmap: Texture;

		/** If `true`, ambient occlusion is enabled. Ambient occlusion darkens areas based on the `ao_texture`. */
		ao_enabled: boolean;

		/** Amount that ambient occlusion affects lighting from lights. If `0`, ambient occlusion only affects ambient light. If `1`, ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic. */
		ao_light_affect: number;

		/** Texture that defines the amount of ambient occlusion for a given point on the object. */
		ao_texture: Texture;

		/** If `true`, use `UV2` coordinates to look up from the `ao_texture`. */
		ao_on_uv2: boolean;

		/** Specifies the channel of the `ao_texture` in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. */
		ao_texture_channel: number;

		/** If `true`, depth mapping is enabled (also called "parallax mapping" or "height mapping"). See also `normal_enabled`. */
		depth_enabled: boolean;

		/** Scales the depth offset effect. A higher number will create a larger depth. */
		depth_scale: number;

		/** If `true`, the shader will read depth texture at multiple points along the view ray to determine occlusion and parrallax. This can be very performance demanding, but results in more realistic looking depth mapping. */
		depth_deep_parallax: boolean;

		/** Number of layers to use when using `depth_deep_parallax` and the view direction is parallel to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp. */
		depth_min_layers: number;

		/** Number of layers to use when using `depth_deep_parallax` and the view direction is perpendicular to the surface of the object. A higher number will be more performance demanding while a lower number may not look as crisp. */
		depth_max_layers: number;

		/** If `true`, direction of the tangent is flipped before using in the depth effect. This may be necessary if you have encoded your tangents in a way that is conflicting with the depth effect. */
		depth_flip_tangent: boolean;

		/** If `true`, direction of the binormal is flipped before using in the depth effect. This may be necessary if you have encoded your binormals in a way that is conflicting with the depth effect. */
		depth_flip_binormal: boolean;

		/** Texture used to determine depth at a given pixel. Depth is always stored in the red channel. */
		depth_texture: Texture;

		/** If `true`, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges. */
		subsurf_scatter_enabled: boolean;

		/** The strength of the subsurface scattering effect. */
		subsurf_scatter_strength: number;

		/** Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by `subsurf_scatter_strength`. */
		subsurf_scatter_texture: Texture;

		/** If `true`, the transmission effect is enabled. */
		transmission_enabled: boolean;

		/** The color used by the transmission effect. Represents the light passing through an object. */
		transmission: Color;

		/** Texture used to control the transmission effect per-pixel. Added to `transmission`. */
		transmission_texture: Texture;

		/** If `true`, the refraction effect is enabled. Distorts transparency based on light from behind the object. */
		refraction_enabled: boolean;

		/** The strength of the refraction effect. */
		refraction_scale: number;

		/** Texture that controls the strength of the refraction per-pixel. Multiplied by `refraction_scale`. */
		refraction_texture: Texture;

		/** Specifies the channel of the `ao_texture` in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. */
		refraction_texture_channel: number;

		/** If `true`, enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on `detail_mask`. This can be used to add variation to objects, or to blend between two different albedo/normal textures. */
		detail_enabled: boolean;

		/** Texture used to specify how the detail textures get blended with the base textures. */
		detail_mask: Texture;

		/** Specifies how the `detail_albedo` should blend with the current `ALBEDO`. See `BlendMode` for options. */
		detail_blend_mode: number;

		/** Specifies whether to use `UV` or `UV2` for the detail layer. See `DetailUV` for options. */
		detail_uv_layer: number;

		/** Texture that specifies the color of the detail overlay. */
		detail_albedo: Texture;

		/** Texture that specifies the per-pixel normal of the detail overlay.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		detail_normal: Texture;

		/** How much to scale the `UV` coordinates. This is multiplied by `UV` in the vertex function. */
		uv1_scale: Vector3;

		/** How much to offset the `UV` coordinates. This amount will be added to `UV` in the vertex function. This can be used to offset a texture. */
		uv1_offset: Vector3;

		/** If `true`, instead of using `UV` textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing. */
		uv1_triplanar: boolean;

		/** A lower number blends the texture more softly while a higher number blends the texture more sharply. */
		uv1_triplanar_sharpness: number;

		/** How much to scale the `UV2` coordinates. This is multiplied by `UV2` in the vertex function. */
		uv2_scale: Vector3;

		/** How much to offset the `UV2` coordinates. This amount will be added to `UV2` in the vertex function. This can be used to offset a texture. */
		uv2_offset: Vector3;

		/** If `true`, instead of using `UV2` textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing. */
		uv2_triplanar: boolean;

		/** A lower number blends the texture more softly while a higher number blends the texture more sharply. */
		uv2_triplanar_sharpness: number;

		/** If `true`, the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object. */
		proximity_fade_enable: boolean;

		/** Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade. */
		proximity_fade_distance: number;

		/** Specifies which type of fade to use. Can be any of the `DistanceFadeMode`s. */
		distance_fade_mode: number;

		/** Distance at which the object starts to fade. If the object is less than this distance away it will appear normal. */
		distance_fade_min_distance: number;

		/** Distance at which the object fades fully and is no longer visible. */
		distance_fade_max_distance: number;

		/** If `true`, enables the specified flag. Flags are optional behaviour that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to `true`. See `Flags` enumerator for options. */
		set_flag(flag: SpatialMaterial.Flags, enable: boolean) : void;

		/** Returns `true`, if the specified flag is enabled. See `Flags` enumerator for options. */
		get_flag(flag: SpatialMaterial.Flags) : boolean;

		/** If `true`, enables the specified `Feature`. Many features that are available in `SpatialMaterial`s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to `true`. */
		set_feature(feature: SpatialMaterial.Feature, enable: boolean) : void;

		/** Returns `true`, if the specified `Feature` is enabled. */
		get_feature(feature: SpatialMaterial.Feature) : boolean;

		/** Sets the `Texture` to be used by the specified `TextureParam`. This function is called when setting members ending in `*_texture`. */
		set_texture(param: SpatialMaterial.TextureParam, texture: Texture) : void;

		/** Returns the `Texture` associated with the specified `TextureParam`. */
		get_texture(param: SpatialMaterial.TextureParam) : Texture;

		/** Getter of `flags_transparent` property */
		get_feature() : boolean;

		/** Setter of `flags_transparent` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `flags_use_shadow_to_opacity` property */
		get_flag() : boolean;

		/** Setter of `flags_use_shadow_to_opacity` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_unshaded` property */
		get_flag() : boolean;

		/** Setter of `flags_unshaded` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_vertex_lighting` property */
		get_flag() : boolean;

		/** Setter of `flags_vertex_lighting` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_no_depth_test` property */
		get_flag() : boolean;

		/** Setter of `flags_no_depth_test` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_use_point_size` property */
		get_flag() : boolean;

		/** Setter of `flags_use_point_size` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_world_triplanar` property */
		get_flag() : boolean;

		/** Setter of `flags_world_triplanar` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_fixed_size` property */
		get_flag() : boolean;

		/** Setter of `flags_fixed_size` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_albedo_tex_force_srgb` property */
		get_flag() : boolean;

		/** Setter of `flags_albedo_tex_force_srgb` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_do_not_receive_shadows` property */
		get_flag() : boolean;

		/** Setter of `flags_do_not_receive_shadows` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_disable_ambient_light` property */
		get_flag() : boolean;

		/** Setter of `flags_disable_ambient_light` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `flags_ensure_correct_normals` property */
		get_flag() : boolean;

		/** Setter of `flags_ensure_correct_normals` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `vertex_color_use_as_albedo` property */
		get_flag() : boolean;

		/** Setter of `vertex_color_use_as_albedo` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `vertex_color_is_srgb` property */
		get_flag() : boolean;

		/** Setter of `vertex_color_is_srgb` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `params_diffuse_mode` property */
		get_diffuse_mode() : number;

		/** Setter of `params_diffuse_mode` property */
		set_diffuse_mode(p_value: number) : void;

		/** Getter of `params_specular_mode` property */
		get_specular_mode() : number;

		/** Setter of `params_specular_mode` property */
		set_specular_mode(p_value: number) : void;

		/** Getter of `params_blend_mode` property */
		get_blend_mode() : number;

		/** Setter of `params_blend_mode` property */
		set_blend_mode(p_value: number) : void;

		/** Getter of `params_cull_mode` property */
		get_cull_mode() : number;

		/** Setter of `params_cull_mode` property */
		set_cull_mode(p_value: number) : void;

		/** Getter of `params_depth_draw_mode` property */
		get_depth_draw_mode() : number;

		/** Setter of `params_depth_draw_mode` property */
		set_depth_draw_mode(p_value: number) : void;

		/** Getter of `params_line_width` property */
		get_line_width() : number;

		/** Setter of `params_line_width` property */
		set_line_width(p_value: number) : void;

		/** Getter of `params_point_size` property */
		get_point_size() : number;

		/** Setter of `params_point_size` property */
		set_point_size(p_value: number) : void;

		/** Getter of `params_billboard_mode` property */
		get_billboard_mode() : number;

		/** Setter of `params_billboard_mode` property */
		set_billboard_mode(p_value: number) : void;

		/** Getter of `params_billboard_keep_scale` property */
		get_flag() : boolean;

		/** Setter of `params_billboard_keep_scale` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `params_grow` property */
		is_grow_enabled() : boolean;

		/** Setter of `params_grow` property */
		set_grow_enabled(p_value: boolean) : void;

		/** Getter of `params_grow_amount` property */
		get_grow() : number;

		/** Setter of `params_grow_amount` property */
		set_grow(p_value: number) : void;

		/** Getter of `params_use_alpha_scissor` property */
		get_flag() : boolean;

		/** Setter of `params_use_alpha_scissor` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `params_alpha_scissor_threshold` property */
		get_alpha_scissor_threshold() : number;

		/** Setter of `params_alpha_scissor_threshold` property */
		set_alpha_scissor_threshold(p_value: number) : void;

		/** Getter of `particles_anim_h_frames` property */
		get_particles_anim_h_frames() : number;

		/** Setter of `particles_anim_h_frames` property */
		set_particles_anim_h_frames(p_value: number) : void;

		/** Getter of `particles_anim_v_frames` property */
		get_particles_anim_v_frames() : number;

		/** Setter of `particles_anim_v_frames` property */
		set_particles_anim_v_frames(p_value: number) : void;

		/** Getter of `particles_anim_loop` property */
		get_particles_anim_loop() : boolean;

		/** Setter of `particles_anim_loop` property */
		set_particles_anim_loop(p_value: boolean) : void;

		/** Getter of `albedo_color` property */
		get_albedo() : Color;

		/** Setter of `albedo_color` property */
		set_albedo(p_value: Color) : void;

		/** Getter of `albedo_texture` property */
		get_texture() : Texture;

		/** Setter of `albedo_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `metallic` property */
		get_metallic() : number;

		/** Setter of `metallic` property */
		set_metallic(p_value: number) : void;

		/** Getter of `metallic_specular` property */
		get_specular() : number;

		/** Setter of `metallic_specular` property */
		set_specular(p_value: number) : void;

		/** Getter of `metallic_texture` property */
		get_texture() : Texture;

		/** Setter of `metallic_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `metallic_texture_channel` property */
		get_metallic_texture_channel() : number;

		/** Setter of `metallic_texture_channel` property */
		set_metallic_texture_channel(p_value: number) : void;

		/** Getter of `roughness` property */
		get_roughness() : number;

		/** Setter of `roughness` property */
		set_roughness(p_value: number) : void;

		/** Getter of `roughness_texture` property */
		get_texture() : Texture;

		/** Setter of `roughness_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `roughness_texture_channel` property */
		get_roughness_texture_channel() : number;

		/** Setter of `roughness_texture_channel` property */
		set_roughness_texture_channel(p_value: number) : void;

		/** Getter of `emission_enabled` property */
		get_feature() : boolean;

		/** Setter of `emission_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `emission` property */
		get_emission() : Color;

		/** Setter of `emission` property */
		set_emission(p_value: Color) : void;

		/** Getter of `emission_energy` property */
		get_emission_energy() : number;

		/** Setter of `emission_energy` property */
		set_emission_energy(p_value: number) : void;

		/** Getter of `emission_operator` property */
		get_emission_operator() : number;

		/** Setter of `emission_operator` property */
		set_emission_operator(p_value: number) : void;

		/** Getter of `emission_on_uv2` property */
		get_flag() : boolean;

		/** Setter of `emission_on_uv2` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `emission_texture` property */
		get_texture() : Texture;

		/** Setter of `emission_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normal_enabled` property */
		get_feature() : boolean;

		/** Setter of `normal_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `normal_scale` property */
		get_normal_scale() : number;

		/** Setter of `normal_scale` property */
		set_normal_scale(p_value: number) : void;

		/** Getter of `normal_texture` property */
		get_texture() : Texture;

		/** Setter of `normal_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `rim_enabled` property */
		get_feature() : boolean;

		/** Setter of `rim_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `rim` property */
		get_rim() : number;

		/** Setter of `rim` property */
		set_rim(p_value: number) : void;

		/** Getter of `rim_tint` property */
		get_rim_tint() : number;

		/** Setter of `rim_tint` property */
		set_rim_tint(p_value: number) : void;

		/** Getter of `rim_texture` property */
		get_texture() : Texture;

		/** Setter of `rim_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `clearcoat_enabled` property */
		get_feature() : boolean;

		/** Setter of `clearcoat_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `clearcoat` property */
		get_clearcoat() : number;

		/** Setter of `clearcoat` property */
		set_clearcoat(p_value: number) : void;

		/** Getter of `clearcoat_gloss` property */
		get_clearcoat_gloss() : number;

		/** Setter of `clearcoat_gloss` property */
		set_clearcoat_gloss(p_value: number) : void;

		/** Getter of `clearcoat_texture` property */
		get_texture() : Texture;

		/** Setter of `clearcoat_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `anisotropy_enabled` property */
		get_feature() : boolean;

		/** Setter of `anisotropy_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `anisotropy` property */
		get_anisotropy() : number;

		/** Setter of `anisotropy` property */
		set_anisotropy(p_value: number) : void;

		/** Getter of `anisotropy_flowmap` property */
		get_texture() : Texture;

		/** Setter of `anisotropy_flowmap` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `ao_enabled` property */
		get_feature() : boolean;

		/** Setter of `ao_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `ao_light_affect` property */
		get_ao_light_affect() : number;

		/** Setter of `ao_light_affect` property */
		set_ao_light_affect(p_value: number) : void;

		/** Getter of `ao_texture` property */
		get_texture() : Texture;

		/** Setter of `ao_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `ao_on_uv2` property */
		get_flag() : boolean;

		/** Setter of `ao_on_uv2` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `ao_texture_channel` property */
		get_ao_texture_channel() : number;

		/** Setter of `ao_texture_channel` property */
		set_ao_texture_channel(p_value: number) : void;

		/** Getter of `depth_enabled` property */
		get_feature() : boolean;

		/** Setter of `depth_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `depth_scale` property */
		get_depth_scale() : number;

		/** Setter of `depth_scale` property */
		set_depth_scale(p_value: number) : void;

		/** Getter of `depth_deep_parallax` property */
		is_depth_deep_parallax_enabled() : boolean;

		/** Setter of `depth_deep_parallax` property */
		set_depth_deep_parallax(p_value: boolean) : void;

		/** Getter of `depth_min_layers` property */
		get_depth_deep_parallax_min_layers() : number;

		/** Setter of `depth_min_layers` property */
		set_depth_deep_parallax_min_layers(p_value: number) : void;

		/** Getter of `depth_max_layers` property */
		get_depth_deep_parallax_max_layers() : number;

		/** Setter of `depth_max_layers` property */
		set_depth_deep_parallax_max_layers(p_value: number) : void;

		/** Getter of `depth_flip_tangent` property */
		get_depth_deep_parallax_flip_tangent() : boolean;

		/** Setter of `depth_flip_tangent` property */
		set_depth_deep_parallax_flip_tangent(p_value: boolean) : void;

		/** Getter of `depth_flip_binormal` property */
		get_depth_deep_parallax_flip_binormal() : boolean;

		/** Setter of `depth_flip_binormal` property */
		set_depth_deep_parallax_flip_binormal(p_value: boolean) : void;

		/** Getter of `depth_texture` property */
		get_texture() : Texture;

		/** Setter of `depth_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `subsurf_scatter_enabled` property */
		get_feature() : boolean;

		/** Setter of `subsurf_scatter_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `subsurf_scatter_strength` property */
		get_subsurface_scattering_strength() : number;

		/** Setter of `subsurf_scatter_strength` property */
		set_subsurface_scattering_strength(p_value: number) : void;

		/** Getter of `subsurf_scatter_texture` property */
		get_texture() : Texture;

		/** Setter of `subsurf_scatter_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `transmission_enabled` property */
		get_feature() : boolean;

		/** Setter of `transmission_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `transmission` property */
		get_transmission() : Color;

		/** Setter of `transmission` property */
		set_transmission(p_value: Color) : void;

		/** Getter of `transmission_texture` property */
		get_texture() : Texture;

		/** Setter of `transmission_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `refraction_enabled` property */
		get_feature() : boolean;

		/** Setter of `refraction_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `refraction_scale` property */
		get_refraction() : number;

		/** Setter of `refraction_scale` property */
		set_refraction(p_value: number) : void;

		/** Getter of `refraction_texture` property */
		get_texture() : Texture;

		/** Setter of `refraction_texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `refraction_texture_channel` property */
		get_refraction_texture_channel() : number;

		/** Setter of `refraction_texture_channel` property */
		set_refraction_texture_channel(p_value: number) : void;

		/** Getter of `detail_enabled` property */
		get_feature() : boolean;

		/** Setter of `detail_enabled` property */
		set_feature(p_value: boolean) : void;

		/** Getter of `detail_mask` property */
		get_texture() : Texture;

		/** Setter of `detail_mask` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `detail_blend_mode` property */
		get_detail_blend_mode() : number;

		/** Setter of `detail_blend_mode` property */
		set_detail_blend_mode(p_value: number) : void;

		/** Getter of `detail_uv_layer` property */
		get_detail_uv() : number;

		/** Setter of `detail_uv_layer` property */
		set_detail_uv(p_value: number) : void;

		/** Getter of `detail_albedo` property */
		get_texture() : Texture;

		/** Setter of `detail_albedo` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `detail_normal` property */
		get_texture() : Texture;

		/** Setter of `detail_normal` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `uv1_scale` property */
		get_uv1_scale() : Vector3;

		/** Setter of `uv1_scale` property */
		set_uv1_scale(p_value: Vector3) : void;

		/** Getter of `uv1_offset` property */
		get_uv1_offset() : Vector3;

		/** Setter of `uv1_offset` property */
		set_uv1_offset(p_value: Vector3) : void;

		/** Getter of `uv1_triplanar` property */
		get_flag() : boolean;

		/** Setter of `uv1_triplanar` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `uv1_triplanar_sharpness` property */
		get_uv1_triplanar_blend_sharpness() : number;

		/** Setter of `uv1_triplanar_sharpness` property */
		set_uv1_triplanar_blend_sharpness(p_value: number) : void;

		/** Getter of `uv2_scale` property */
		get_uv2_scale() : Vector3;

		/** Setter of `uv2_scale` property */
		set_uv2_scale(p_value: Vector3) : void;

		/** Getter of `uv2_offset` property */
		get_uv2_offset() : Vector3;

		/** Setter of `uv2_offset` property */
		set_uv2_offset(p_value: Vector3) : void;

		/** Getter of `uv2_triplanar` property */
		get_flag() : boolean;

		/** Setter of `uv2_triplanar` property */
		set_flag(p_value: boolean) : void;

		/** Getter of `uv2_triplanar_sharpness` property */
		get_uv2_triplanar_blend_sharpness() : number;

		/** Setter of `uv2_triplanar_sharpness` property */
		set_uv2_triplanar_blend_sharpness(p_value: number) : void;

		/** Getter of `proximity_fade_enable` property */
		is_proximity_fade_enabled() : boolean;

		/** Setter of `proximity_fade_enable` property */
		set_proximity_fade(p_value: boolean) : void;

		/** Getter of `proximity_fade_distance` property */
		get_proximity_fade_distance() : number;

		/** Setter of `proximity_fade_distance` property */
		set_proximity_fade_distance(p_value: number) : void;

		/** Getter of `distance_fade_mode` property */
		get_distance_fade() : number;

		/** Setter of `distance_fade_mode` property */
		set_distance_fade(p_value: number) : void;

		/** Getter of `distance_fade_min_distance` property */
		get_distance_fade_min_distance() : number;

		/** Setter of `distance_fade_min_distance` property */
		set_distance_fade_min_distance(p_value: number) : void;

		/** Getter of `distance_fade_max_distance` property */
		get_distance_fade_max_distance() : number;

		/** Setter of `distance_fade_max_distance` property */
		set_distance_fade_max_distance(p_value: number) : void;
	}
	namespace SpatialMaterial {
		enum BillboardMode {
			/** Billboard mode is disabled. */
			BILLBOARD_DISABLED = 0,
			/** The object's Z axis will always face the camera. */
			BILLBOARD_ENABLED = 1,
			/** The object's X axis will always face the camera. */
			BILLBOARD_FIXED_Y = 2,
			/** Used for particle systems when assigned to `Particles` and `CPUParticles` nodes. Enables `particles_anim_*` properties.

			 The `ParticlesMaterial.anim_speed` or `CPUParticles.anim_speed` should also be set to a positive value for the animation to play. */
			BILLBOARD_PARTICLES = 3,
		}
		enum BlendMode {
			/** Default blend mode. The color of the object is blended over the background based on the object's alpha value. */
			BLEND_MODE_MIX = 0,
			/** The color of the object is added to the background. */
			BLEND_MODE_ADD = 1,
			/** The color of the object is subtracted from the background. */
			BLEND_MODE_SUB = 2,
			/** The color of the object is multiplied by the background. */
			BLEND_MODE_MUL = 3,
		}
		enum CullMode {
			/** Default cull mode. The back of the object is culled when not visible. */
			CULL_BACK = 0,
			/** The front of the object is culled when not visible. */
			CULL_FRONT = 1,
			/** No culling is performed. */
			CULL_DISABLED = 2,
		}
		enum DepthDrawMode {
			/** Default depth draw mode. Depth is drawn only for opaque objects. */
			DEPTH_DRAW_OPAQUE_ONLY = 0,
			/** Depth draw is calculated for both opaque and transparent objects. */
			DEPTH_DRAW_ALWAYS = 1,
			/** No depth draw. */
			DEPTH_DRAW_DISABLED = 2,
			/** For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn. */
			DEPTH_DRAW_ALPHA_OPAQUE_PREPASS = 3,
		}
		enum DetailUV {
			/** Use `UV` with the detail texture. */
			DETAIL_UV_1 = 0,
			/** Use `UV2` with the detail texture. */
			DETAIL_UV_2 = 1,
		}
		enum DiffuseMode {
			/** Default diffuse scattering algorithm. */
			DIFFUSE_BURLEY = 0,
			/** Diffuse scattering ignores roughness. */
			DIFFUSE_LAMBERT = 1,
			/** Extends Lambert to cover more than 90 degrees when roughness increases. */
			DIFFUSE_LAMBERT_WRAP = 2,
			/** Attempts to use roughness to emulate microsurfacing. */
			DIFFUSE_OREN_NAYAR = 3,
			/** Uses a hard cut for lighting, with smoothing affected by roughness. */
			DIFFUSE_TOON = 4,
		}
		enum DistanceFadeMode {
			/** Do not use distance fade. */
			DISTANCE_FADE_DISABLED = 0,
			/** Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel. */
			DISTANCE_FADE_PIXEL_ALPHA = 1,
			/** Smoothly fades the object out based on each pixel's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than `DISTANCE_FADE_PIXEL_ALPHA`. */
			DISTANCE_FADE_PIXEL_DITHER = 2,
			/** Smoothly fades the object out based on the object's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than `DISTANCE_FADE_PIXEL_ALPHA`. */
			DISTANCE_FADE_OBJECT_DITHER = 3,
		}
		enum EmissionOperator {
			/** Adds the emission color to the color from the emission texture. */
			EMISSION_OP_ADD = 0,
			/** Multiplies the emission color by the color from the emission texture. */
			EMISSION_OP_MULTIPLY = 1,
		}
		enum Feature {
			/** Constant for setting `flags_transparent`. */
			FEATURE_TRANSPARENT = 0,
			/** Constant for setting `emission_enabled`. */
			FEATURE_EMISSION = 1,
			/** Constant for setting `normal_enabled`. */
			FEATURE_NORMAL_MAPPING = 2,
			/** Constant for setting `rim_enabled`. */
			FEATURE_RIM = 3,
			/** Constant for setting `clearcoat_enabled`. */
			FEATURE_CLEARCOAT = 4,
			/** Constant for setting `anisotropy_enabled`. */
			FEATURE_ANISOTROPY = 5,
			/** Constant for setting `ao_enabled`. */
			FEATURE_AMBIENT_OCCLUSION = 6,
			/** Constant for setting `depth_enabled`. */
			FEATURE_DEPTH_MAPPING = 7,
			/** Constant for setting `subsurf_scatter_enabled`. */
			FEATURE_SUBSURACE_SCATTERING = 8,
			/** Constant for setting `transmission_enabled`. */
			FEATURE_TRANSMISSION = 9,
			/** Constant for setting `refraction_enabled`. */
			FEATURE_REFRACTION = 10,
			/** Constant for setting `detail_enabled`. */
			FEATURE_DETAIL = 11,
			/** Represents the size of the `Feature` enum. */
			FEATURE_MAX = 12,
		}
		enum Flags {
			/** No lighting is used on the object. Color comes directly from `ALBEDO`. */
			FLAG_UNSHADED = 0,
			/** Lighting is calculated per-vertex rather than per-pixel. This can be used to increase the speed of the shader at the cost of quality. */
			FLAG_USE_VERTEX_LIGHTING = 1,
			/** Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it. */
			FLAG_DISABLE_DEPTH_TEST = 2,
			/** Set `ALBEDO` to the per-vertex color specified in the mesh. */
			FLAG_ALBEDO_FROM_VERTEX_COLOR = 3,
			/** Vertex color is in sRGB space and needs to be converted to linear. Only applies in the GLES3 renderer. */
			FLAG_SRGB_VERTEX_COLOR = 4,
			/** Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use `POINT_COORD` instead of `UV`. */
			FLAG_USE_POINT_SIZE = 5,
			/** Object is scaled by depth so that it always appears the same size on screen. */
			FLAG_FIXED_SIZE = 6,
			/** Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when `params_billboard_mode` is `BILLBOARD_ENABLED`. */
			FLAG_BILLBOARD_KEEP_SCALE = 7,
			/** Use triplanar texture lookup for all texture lookups that would normally use `UV`. */
			FLAG_UV1_USE_TRIPLANAR = 8,
			/** Use triplanar texture lookup for all texture lookups that would normally use `UV2`. */
			FLAG_UV2_USE_TRIPLANAR = 9,
			/** Use `UV2` coordinates to look up from the `ao_texture`. */
			FLAG_AO_ON_UV2 = 11,
			/** Use `UV2` coordinates to look up from the `emission_texture`. */
			FLAG_EMISSION_ON_UV2 = 12,
			/** Use alpha scissor. Set by `params_use_alpha_scissor`. */
			FLAG_USE_ALPHA_SCISSOR = 13,
			/** Use world coordinates in the triplanar texture lookup instead of local coordinates. */
			FLAG_TRIPLANAR_USE_WORLD = 10,
			/** Forces the shader to convert albedo from sRGB space to linear space. */
			FLAG_ALBEDO_TEXTURE_FORCE_SRGB = 14,
			/** Disables receiving shadows from other objects. */
			FLAG_DONT_RECEIVE_SHADOWS = 15,
			/** Disables receiving ambient light. */
			FLAG_DISABLE_AMBIENT_LIGHT = 17,
			/** Ensures that normals appear correct, even with non-uniform scaling. */
			FLAG_ENSURE_CORRECT_NORMALS = 16,
			/** Enables the shadow to opacity feature. */
			FLAG_USE_SHADOW_TO_OPACITY = 18,
			/** Represents the size of the `Flags` enum. */
			FLAG_MAX = 19,
		}
		enum SpecularMode {
			/** Default specular blob. */
			SPECULAR_SCHLICK_GGX = 0,
			/** Older specular algorithm, included for compatibility. */
			SPECULAR_BLINN = 1,
			/** Older specular algorithm, included for compatibility. */
			SPECULAR_PHONG = 2,
			/** Toon blob which changes size based on roughness. */
			SPECULAR_TOON = 3,
			/** No specular blob. */
			SPECULAR_DISABLED = 4,
		}
		enum TextureChannel {
			/** Used to read from the red channel of a texture. */
			TEXTURE_CHANNEL_RED = 0,
			/** Used to read from the green channel of a texture. */
			TEXTURE_CHANNEL_GREEN = 1,
			/** Used to read from the blue channel of a texture. */
			TEXTURE_CHANNEL_BLUE = 2,
			/** Used to read from the alpha channel of a texture. */
			TEXTURE_CHANNEL_ALPHA = 3,
			/** Currently unused. */
			TEXTURE_CHANNEL_GRAYSCALE = 4,
		}
		enum TextureParam {
			/** Texture specifying per-pixel color. */
			TEXTURE_ALBEDO = 0,
			/** Texture specifying per-pixel metallic value. */
			TEXTURE_METALLIC = 1,
			/** Texture specifying per-pixel roughness value. */
			TEXTURE_ROUGHNESS = 2,
			/** Texture specifying per-pixel emission color. */
			TEXTURE_EMISSION = 3,
			/** Texture specifying per-pixel normal vector. */
			TEXTURE_NORMAL = 4,
			/** Texture specifying per-pixel rim value. */
			TEXTURE_RIM = 5,
			/** Texture specifying per-pixel clearcoat value. */
			TEXTURE_CLEARCOAT = 6,
			/** Texture specifying per-pixel flowmap direction for use with `anisotropy`. */
			TEXTURE_FLOWMAP = 7,
			/** Texture specifying per-pixel ambient occlusion value. */
			TEXTURE_AMBIENT_OCCLUSION = 8,
			/** Texture specifying per-pixel depth. */
			TEXTURE_DEPTH = 9,
			/** Texture specifying per-pixel subsurface scattering. */
			TEXTURE_SUBSURFACE_SCATTERING = 10,
			/** Texture specifying per-pixel transmission color. */
			TEXTURE_TRANSMISSION = 11,
			/** Texture specifying per-pixel refraction strength. */
			TEXTURE_REFRACTION = 12,
			/** Texture specifying per-pixel detail mask blending value. */
			TEXTURE_DETAIL_MASK = 13,
			/** Texture specifying per-pixel detail color. */
			TEXTURE_DETAIL_ALBEDO = 14,
			/** Texture specifying per-pixel detail normal. */
			TEXTURE_DETAIL_NORMAL = 15,
			/** Represents the size of the `TextureParam` enum. */
			TEXTURE_MAX = 16,
		}

		/** Texture specifying per-pixel color. */
		const TEXTURE_ALBEDO: TextureParam.TEXTURE_ALBEDO;

		/** Texture specifying per-pixel metallic value. */
		const TEXTURE_METALLIC: TextureParam.TEXTURE_METALLIC;

		/** Texture specifying per-pixel roughness value. */
		const TEXTURE_ROUGHNESS: TextureParam.TEXTURE_ROUGHNESS;

		/** Texture specifying per-pixel emission color. */
		const TEXTURE_EMISSION: TextureParam.TEXTURE_EMISSION;

		/** Texture specifying per-pixel normal vector. */
		const TEXTURE_NORMAL: TextureParam.TEXTURE_NORMAL;

		/** Texture specifying per-pixel rim value. */
		const TEXTURE_RIM: TextureParam.TEXTURE_RIM;

		/** Texture specifying per-pixel clearcoat value. */
		const TEXTURE_CLEARCOAT: TextureParam.TEXTURE_CLEARCOAT;

		/** Texture specifying per-pixel flowmap direction for use with `anisotropy`. */
		const TEXTURE_FLOWMAP: TextureParam.TEXTURE_FLOWMAP;

		/** Texture specifying per-pixel ambient occlusion value. */
		const TEXTURE_AMBIENT_OCCLUSION: TextureParam.TEXTURE_AMBIENT_OCCLUSION;

		/** Texture specifying per-pixel depth. */
		const TEXTURE_DEPTH: TextureParam.TEXTURE_DEPTH;

		/** Texture specifying per-pixel subsurface scattering. */
		const TEXTURE_SUBSURFACE_SCATTERING: TextureParam.TEXTURE_SUBSURFACE_SCATTERING;

		/** Texture specifying per-pixel transmission color. */
		const TEXTURE_TRANSMISSION: TextureParam.TEXTURE_TRANSMISSION;

		/** Texture specifying per-pixel refraction strength. */
		const TEXTURE_REFRACTION: TextureParam.TEXTURE_REFRACTION;

		/** Texture specifying per-pixel detail mask blending value. */
		const TEXTURE_DETAIL_MASK: TextureParam.TEXTURE_DETAIL_MASK;

		/** Texture specifying per-pixel detail color. */
		const TEXTURE_DETAIL_ALBEDO: TextureParam.TEXTURE_DETAIL_ALBEDO;

		/** Texture specifying per-pixel detail normal. */
		const TEXTURE_DETAIL_NORMAL: TextureParam.TEXTURE_DETAIL_NORMAL;

		/** Represents the size of the `TextureParam` enum. */
		const TEXTURE_MAX: TextureParam.TEXTURE_MAX;

		/** Use `UV` with the detail texture. */
		const DETAIL_UV_1: DetailUV.DETAIL_UV_1;

		/** Use `UV2` with the detail texture. */
		const DETAIL_UV_2: DetailUV.DETAIL_UV_2;

		/** Constant for setting `flags_transparent`. */
		const FEATURE_TRANSPARENT: Feature.FEATURE_TRANSPARENT;

		/** Constant for setting `emission_enabled`. */
		const FEATURE_EMISSION: Feature.FEATURE_EMISSION;

		/** Constant for setting `normal_enabled`. */
		const FEATURE_NORMAL_MAPPING: Feature.FEATURE_NORMAL_MAPPING;

		/** Constant for setting `rim_enabled`. */
		const FEATURE_RIM: Feature.FEATURE_RIM;

		/** Constant for setting `clearcoat_enabled`. */
		const FEATURE_CLEARCOAT: Feature.FEATURE_CLEARCOAT;

		/** Constant for setting `anisotropy_enabled`. */
		const FEATURE_ANISOTROPY: Feature.FEATURE_ANISOTROPY;

		/** Constant for setting `ao_enabled`. */
		const FEATURE_AMBIENT_OCCLUSION: Feature.FEATURE_AMBIENT_OCCLUSION;

		/** Constant for setting `depth_enabled`. */
		const FEATURE_DEPTH_MAPPING: Feature.FEATURE_DEPTH_MAPPING;

		/** Constant for setting `subsurf_scatter_enabled`. */
		const FEATURE_SUBSURACE_SCATTERING: Feature.FEATURE_SUBSURACE_SCATTERING;

		/** Constant for setting `transmission_enabled`. */
		const FEATURE_TRANSMISSION: Feature.FEATURE_TRANSMISSION;

		/** Constant for setting `refraction_enabled`. */
		const FEATURE_REFRACTION: Feature.FEATURE_REFRACTION;

		/** Constant for setting `detail_enabled`. */
		const FEATURE_DETAIL: Feature.FEATURE_DETAIL;

		/** Represents the size of the `Feature` enum. */
		const FEATURE_MAX: Feature.FEATURE_MAX;

		/** Default blend mode. The color of the object is blended over the background based on the object's alpha value. */
		const BLEND_MODE_MIX: BlendMode.BLEND_MODE_MIX;

		/** The color of the object is added to the background. */
		const BLEND_MODE_ADD: BlendMode.BLEND_MODE_ADD;

		/** The color of the object is subtracted from the background. */
		const BLEND_MODE_SUB: BlendMode.BLEND_MODE_SUB;

		/** The color of the object is multiplied by the background. */
		const BLEND_MODE_MUL: BlendMode.BLEND_MODE_MUL;

		/** Default depth draw mode. Depth is drawn only for opaque objects. */
		const DEPTH_DRAW_OPAQUE_ONLY: DepthDrawMode.DEPTH_DRAW_OPAQUE_ONLY;

		/** Depth draw is calculated for both opaque and transparent objects. */
		const DEPTH_DRAW_ALWAYS: DepthDrawMode.DEPTH_DRAW_ALWAYS;

		/** No depth draw. */
		const DEPTH_DRAW_DISABLED: DepthDrawMode.DEPTH_DRAW_DISABLED;

		/** For transparent objects, an opaque pass is made first with the opaque parts, then transparency is drawn. */
		const DEPTH_DRAW_ALPHA_OPAQUE_PREPASS: DepthDrawMode.DEPTH_DRAW_ALPHA_OPAQUE_PREPASS;

		/** Default cull mode. The back of the object is culled when not visible. */
		const CULL_BACK: CullMode.CULL_BACK;

		/** The front of the object is culled when not visible. */
		const CULL_FRONT: CullMode.CULL_FRONT;

		/** No culling is performed. */
		const CULL_DISABLED: CullMode.CULL_DISABLED;

		/** No lighting is used on the object. Color comes directly from `ALBEDO`. */
		const FLAG_UNSHADED: Flags.FLAG_UNSHADED;

		/** Lighting is calculated per-vertex rather than per-pixel. This can be used to increase the speed of the shader at the cost of quality. */
		const FLAG_USE_VERTEX_LIGHTING: Flags.FLAG_USE_VERTEX_LIGHTING;

		/** Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it. */
		const FLAG_DISABLE_DEPTH_TEST: Flags.FLAG_DISABLE_DEPTH_TEST;

		/** Set `ALBEDO` to the per-vertex color specified in the mesh. */
		const FLAG_ALBEDO_FROM_VERTEX_COLOR: Flags.FLAG_ALBEDO_FROM_VERTEX_COLOR;

		/** Vertex color is in sRGB space and needs to be converted to linear. Only applies in the GLES3 renderer. */
		const FLAG_SRGB_VERTEX_COLOR: Flags.FLAG_SRGB_VERTEX_COLOR;

		/** Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use `POINT_COORD` instead of `UV`. */
		const FLAG_USE_POINT_SIZE: Flags.FLAG_USE_POINT_SIZE;

		/** Object is scaled by depth so that it always appears the same size on screen. */
		const FLAG_FIXED_SIZE: Flags.FLAG_FIXED_SIZE;

		/** Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when `params_billboard_mode` is `BILLBOARD_ENABLED`. */
		const FLAG_BILLBOARD_KEEP_SCALE: Flags.FLAG_BILLBOARD_KEEP_SCALE;

		/** Use triplanar texture lookup for all texture lookups that would normally use `UV`. */
		const FLAG_UV1_USE_TRIPLANAR: Flags.FLAG_UV1_USE_TRIPLANAR;

		/** Use triplanar texture lookup for all texture lookups that would normally use `UV2`. */
		const FLAG_UV2_USE_TRIPLANAR: Flags.FLAG_UV2_USE_TRIPLANAR;

		/** Use `UV2` coordinates to look up from the `ao_texture`. */
		const FLAG_AO_ON_UV2: Flags.FLAG_AO_ON_UV2;

		/** Use `UV2` coordinates to look up from the `emission_texture`. */
		const FLAG_EMISSION_ON_UV2: Flags.FLAG_EMISSION_ON_UV2;

		/** Use alpha scissor. Set by `params_use_alpha_scissor`. */
		const FLAG_USE_ALPHA_SCISSOR: Flags.FLAG_USE_ALPHA_SCISSOR;

		/** Use world coordinates in the triplanar texture lookup instead of local coordinates. */
		const FLAG_TRIPLANAR_USE_WORLD: Flags.FLAG_TRIPLANAR_USE_WORLD;

		/** Forces the shader to convert albedo from sRGB space to linear space. */
		const FLAG_ALBEDO_TEXTURE_FORCE_SRGB: Flags.FLAG_ALBEDO_TEXTURE_FORCE_SRGB;

		/** Disables receiving shadows from other objects. */
		const FLAG_DONT_RECEIVE_SHADOWS: Flags.FLAG_DONT_RECEIVE_SHADOWS;

		/** Disables receiving ambient light. */
		const FLAG_DISABLE_AMBIENT_LIGHT: Flags.FLAG_DISABLE_AMBIENT_LIGHT;

		/** Ensures that normals appear correct, even with non-uniform scaling. */
		const FLAG_ENSURE_CORRECT_NORMALS: Flags.FLAG_ENSURE_CORRECT_NORMALS;

		/** Enables the shadow to opacity feature. */
		const FLAG_USE_SHADOW_TO_OPACITY: Flags.FLAG_USE_SHADOW_TO_OPACITY;

		/** Represents the size of the `Flags` enum. */
		const FLAG_MAX: Flags.FLAG_MAX;

		/** Default diffuse scattering algorithm. */
		const DIFFUSE_BURLEY: DiffuseMode.DIFFUSE_BURLEY;

		/** Diffuse scattering ignores roughness. */
		const DIFFUSE_LAMBERT: DiffuseMode.DIFFUSE_LAMBERT;

		/** Extends Lambert to cover more than 90 degrees when roughness increases. */
		const DIFFUSE_LAMBERT_WRAP: DiffuseMode.DIFFUSE_LAMBERT_WRAP;

		/** Attempts to use roughness to emulate microsurfacing. */
		const DIFFUSE_OREN_NAYAR: DiffuseMode.DIFFUSE_OREN_NAYAR;

		/** Uses a hard cut for lighting, with smoothing affected by roughness. */
		const DIFFUSE_TOON: DiffuseMode.DIFFUSE_TOON;

		/** Default specular blob. */
		const SPECULAR_SCHLICK_GGX: SpecularMode.SPECULAR_SCHLICK_GGX;

		/** Older specular algorithm, included for compatibility. */
		const SPECULAR_BLINN: SpecularMode.SPECULAR_BLINN;

		/** Older specular algorithm, included for compatibility. */
		const SPECULAR_PHONG: SpecularMode.SPECULAR_PHONG;

		/** Toon blob which changes size based on roughness. */
		const SPECULAR_TOON: SpecularMode.SPECULAR_TOON;

		/** No specular blob. */
		const SPECULAR_DISABLED: SpecularMode.SPECULAR_DISABLED;

		/** Billboard mode is disabled. */
		const BILLBOARD_DISABLED: BillboardMode.BILLBOARD_DISABLED;

		/** The object's Z axis will always face the camera. */
		const BILLBOARD_ENABLED: BillboardMode.BILLBOARD_ENABLED;

		/** The object's X axis will always face the camera. */
		const BILLBOARD_FIXED_Y: BillboardMode.BILLBOARD_FIXED_Y;

		/** Used for particle systems when assigned to `Particles` and `CPUParticles` nodes. Enables `particles_anim_*` properties.

		 The `ParticlesMaterial.anim_speed` or `CPUParticles.anim_speed` should also be set to a positive value for the animation to play. */
		const BILLBOARD_PARTICLES: BillboardMode.BILLBOARD_PARTICLES;

		/** Used to read from the red channel of a texture. */
		const TEXTURE_CHANNEL_RED: TextureChannel.TEXTURE_CHANNEL_RED;

		/** Used to read from the green channel of a texture. */
		const TEXTURE_CHANNEL_GREEN: TextureChannel.TEXTURE_CHANNEL_GREEN;

		/** Used to read from the blue channel of a texture. */
		const TEXTURE_CHANNEL_BLUE: TextureChannel.TEXTURE_CHANNEL_BLUE;

		/** Used to read from the alpha channel of a texture. */
		const TEXTURE_CHANNEL_ALPHA: TextureChannel.TEXTURE_CHANNEL_ALPHA;

		/** Currently unused. */
		const TEXTURE_CHANNEL_GRAYSCALE: TextureChannel.TEXTURE_CHANNEL_GRAYSCALE;

		/** Adds the emission color to the color from the emission texture. */
		const EMISSION_OP_ADD: EmissionOperator.EMISSION_OP_ADD;

		/** Multiplies the emission color by the color from the emission texture. */
		const EMISSION_OP_MULTIPLY: EmissionOperator.EMISSION_OP_MULTIPLY;

		/** Do not use distance fade. */
		const DISTANCE_FADE_DISABLED: DistanceFadeMode.DISTANCE_FADE_DISABLED;

		/** Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel. */
		const DISTANCE_FADE_PIXEL_ALPHA: DistanceFadeMode.DISTANCE_FADE_PIXEL_ALPHA;

		/** Smoothly fades the object out based on each pixel's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than `DISTANCE_FADE_PIXEL_ALPHA`. */
		const DISTANCE_FADE_PIXEL_DITHER: DistanceFadeMode.DISTANCE_FADE_PIXEL_DITHER;

		/** Smoothly fades the object out based on the object's distance from the camera using a dither approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware this can be faster than `DISTANCE_FADE_PIXEL_ALPHA`. */
		const DISTANCE_FADE_OBJECT_DITHER: DistanceFadeMode.DISTANCE_FADE_OBJECT_DITHER;
	}

	/** 
	  */
	class SpatialVelocityTracker extends Reference {

		/**  */
		track_physics_step: boolean;

		/**  */
		update_position(position: Vector3) : void;

		/**  */
		get_tracked_linear_velocity() : Vector3;

		/**  */
		reset(position: Vector3) : void;

		/** Getter of `track_physics_step` property */
		is_tracking_physics_step() : boolean;

		/** Setter of `track_physics_step` property */
		set_track_physics_step(p_value: boolean) : void;
	}
	namespace SpatialVelocityTracker {
	}

	/** Class representing a spherical `PrimitiveMesh`.
	  */
	class SphereMesh extends PrimitiveMesh {

		/** Radius of sphere. */
		radius: number;

		/** Full height of the sphere. */
		height: number;

		/** Number of radial segments on the sphere. */
		radial_segments: number;

		/** Number of segments along the height of the sphere. */
		rings: number;

		/** If `true`, a hemisphere is created rather than a full sphere.

		 **Note:** To get a regular hemisphere, the height and radius of the sphere must be equal. */
		is_hemisphere: boolean;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `height` property */
		get_height() : number;

		/** Setter of `height` property */
		set_height(p_value: number) : void;

		/** Getter of `radial_segments` property */
		get_radial_segments() : number;

		/** Setter of `radial_segments` property */
		set_radial_segments(p_value: number) : void;

		/** Getter of `rings` property */
		get_rings() : number;

		/** Setter of `rings` property */
		set_rings(p_value: number) : void;

		/** Getter of `is_hemisphere` property */
		get_is_hemisphere() : boolean;

		/** Setter of `is_hemisphere` property */
		set_is_hemisphere(p_value: boolean) : void;
	}
	namespace SphereMesh {
	}

	/** Sphere shape for 3D collisions.
	 Sphere shape for 3D collisions, which can be set into a `PhysicsBody` or `Area`. This shape is useful for modeling sphere-like 3D objects. */
	class SphereShape extends Shape {

		/** The sphere's radius. The shape's diameter is double the radius. */
		radius: number;

		/** Getter of `radius` property */
		get_radius() : number;

		/** Setter of `radius` property */
		set_radius(p_value: number) : void;
	}
	namespace SphereShape {
	}

	/** Numerical input text field.
	 SpinBox is a numerical input text field. It allows entering integers and floats.

	 **Example:**

	 ```gdscript
	 var spin_box = SpinBox.new()
	 add_child(spin_box)
	 var line_edit = spin_box.get_line_edit()
	 line_edit.context_menu_enabled = false
	 spin_box.align = LineEdit.ALIGN_RIGHT
	 ```

	 The above code will create a `SpinBox`, disable context menu on it and set the text alignment to right.

	 See `Range` class for more options over the `SpinBox`. */
	class SpinBox extends Range {

		/** Sets the text alignment of the `SpinBox`. */
		align: number;

		/** If `true`, the `SpinBox` will be editable. Otherwise, it will be read only. */
		editable: boolean;

		/** Adds the specified `prefix` string before the numerical value of the `SpinBox`. */
		prefix: string;

		/** Adds the specified `suffix` string after the numerical value of the `SpinBox`. */
		suffix: string;

		/** Applies the current value of this `SpinBox`. */
		apply() : void;

		/** Returns the `LineEdit` instance from this `SpinBox`. You can use it to access properties and methods of `LineEdit`. */
		get_line_edit() : LineEdit;

		/** Getter of `align` property */
		get_align() : number;

		/** Setter of `align` property */
		set_align(p_value: number) : void;

		/** Getter of `editable` property */
		is_editable() : boolean;

		/** Setter of `editable` property */
		set_editable(p_value: boolean) : void;

		/** Getter of `prefix` property */
		get_prefix() : string;

		/** Setter of `prefix` property */
		set_prefix(p_value: string) : void;

		/** Getter of `suffix` property */
		get_suffix() : string;

		/** Setter of `suffix` property */
		set_suffix(p_value: string) : void;
	}
	namespace SpinBox {
	}

	/** Container for splitting and adjusting.
	 Container for splitting two `Control`s vertically or horizontally, with a grabber that allows adjusting the split offset or ratio. */
	class SplitContainer extends Container {

		/** The initial offset of the splitting between the two `Control`s, with `0` being at the end of the first `Control`. */
		split_offset: number;

		/** If `true`, the area of the first `Control` will be collapsed and the dragger will be disabled. */
		collapsed: boolean;

		/** Determines the dragger's visibility. See `DraggerVisibility` for details. */
		dragger_visibility: number;

		/** Clamps the `split_offset` value to not go outside the currently possible minimal and maximum values. */
		clamp_split_offset() : void;

		/** Getter of `split_offset` property */
		get_split_offset() : number;

		/** Setter of `split_offset` property */
		set_split_offset(p_value: number) : void;

		/** Getter of `collapsed` property */
		is_collapsed() : boolean;

		/** Setter of `collapsed` property */
		set_collapsed(p_value: boolean) : void;

		/** Getter of `dragger_visibility` property */
		get_dragger_visibility() : number;

		/** Setter of `dragger_visibility` property */
		set_dragger_visibility(p_value: number) : void;
	}
	namespace SplitContainer {

		/** Emitted when the dragger is dragged by user. */
		const dragged: 'dragged';
		enum DraggerVisibility {
			/** The split dragger is visible when the cursor hovers it. */
			DRAGGER_VISIBLE = 0,
			/** The split dragger is never visible. */
			DRAGGER_HIDDEN = 1,
			/** The split dragger is never visible and its space collapsed. */
			DRAGGER_HIDDEN_COLLAPSED = 2,
		}

		/** The split dragger is visible when the cursor hovers it. */
		const DRAGGER_VISIBLE: DraggerVisibility.DRAGGER_VISIBLE;

		/** The split dragger is never visible. */
		const DRAGGER_HIDDEN: DraggerVisibility.DRAGGER_HIDDEN;

		/** The split dragger is never visible and its space collapsed. */
		const DRAGGER_HIDDEN_COLLAPSED: DraggerVisibility.DRAGGER_HIDDEN_COLLAPSED;
	}

	/** A spotlight, such as a reflector spotlight or a lantern.
	 A Spotlight is a type of `Light` node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance. This attenuation can be configured by changing the energy, radius and attenuation parameters of `Light`. */
	class SpotLight extends Light {

		/** The maximal range that can be reached by the spotlight. Note that the effectively lit area may appear to be smaller depending on the `spot_attenuation` in use. No matter the `spot_attenuation` in use, the light will never reach anything outside this range. */
		spot_range: number;

		/** The spotlight's light energy attenuation curve. */
		spot_attenuation: number;

		/** The spotlight's angle in degrees. */
		spot_angle: number;

		/** The spotlight's angular attenuation curve. */
		spot_angle_attenuation: number;

		/** Getter of `spot_range` property */
		get_param() : number;

		/** Setter of `spot_range` property */
		set_param(p_value: number) : void;

		/** Getter of `spot_attenuation` property */
		get_param() : number;

		/** Setter of `spot_attenuation` property */
		set_param(p_value: number) : void;

		/** Getter of `spot_angle` property */
		get_param() : number;

		/** Setter of `spot_angle` property */
		set_param(p_value: number) : void;

		/** Getter of `spot_angle_attenuation` property */
		get_param() : number;

		/** Setter of `spot_angle_attenuation` property */
		set_param(p_value: number) : void;
	}
	namespace SpotLight {
	}

	/** A helper node, mostly used in 3rd person cameras.
	 The SpringArm node is a node that casts a ray (or collision shape) along its z axis and moves all its direct children to the collision point, minus a margin.

	 The most common use case for this is to make a 3rd person camera that reacts to collisions in the environment.

	 The SpringArm will either cast a ray, or if a shape is given, it will cast the shape in the direction of its z axis.

	 If you use the SpringArm as a camera controller for your player, you might need to exclude the player's collider from the SpringArm's collision check. */
	class SpringArm extends Spatial {

		/** The layers against which the collision check shall be done. */
		collision_mask: number;

		/** The `Shape` to use for the SpringArm.

		 When the shape is set, the SpringArm will cast the `Shape` on its z axis instead of performing a ray cast. */
		shape: Shape;

		/** The maximum extent of the SpringArm. This is used as a length for both the ray and the shape cast used internally to calculate the desired position of the SpringArm's child nodes.

		 To know more about how to perform a shape cast or a ray cast, please consult the `PhysicsDirectSpaceState` documentation. */
		spring_length: number;

		/** When the collision check is made, a candidate length for the SpringArm is given.

		 The margin is then subtracted to this length and the translation is applied to the child objects of the SpringArm.

		 This margin is useful for when the SpringArm has a `Camera` as a child node: without the margin, the `Camera` would be placed on the exact point of collision, while with the margin the `Camera` would be placed close to the point of collision. */
		margin: number;

		/** Returns the proportion between the current arm length (after checking for collisions) and the `spring_length`. Ranges from 0 to 1. */
		get_hit_length() : number;

		/** Adds the `PhysicsBody` object with the given `RID` to the list of `PhysicsBody` objects excluded from the collision check. */
		add_excluded_object(RID: RID) : void;

		/** Removes the given `RID` from the list of `PhysicsBody` objects excluded from the collision check. */
		remove_excluded_object(RID: RID) : boolean;

		/** Clears the list of `PhysicsBody` objects excluded from the collision check. */
		clear_excluded_objects() : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `shape` property */
		get_shape() : Shape;

		/** Setter of `shape` property */
		set_shape(p_value: Shape) : void;

		/** Getter of `spring_length` property */
		get_length() : number;

		/** Setter of `spring_length` property */
		set_length(p_value: number) : void;

		/** Getter of `margin` property */
		get_margin() : number;

		/** Setter of `margin` property */
		set_margin(p_value: number) : void;
	}
	namespace SpringArm {
	}

	/** General-purpose sprite node.
	 A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation. */
	class Sprite extends Node2D {

		/** `Texture` object to draw. */
		texture: Texture;

		/** The normal map gives depth to the Sprite.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normal_map: Texture;

		/** If `true`, texture is centered. */
		centered: boolean;

		/** The texture's drawing offset. */
		offset: Vector2;

		/** If `true`, texture is flipped horizontally. */
		flip_h: boolean;

		/** If `true`, texture is flipped vertically. */
		flip_v: boolean;

		/** The number of rows in the sprite sheet. */
		vframes: number;

		/** The number of columns in the sprite sheet. */
		hframes: number;

		/** Current frame to display from sprite sheet. `vframes` or `hframes` must be greater than 1. */
		frame: number;

		/** Coordinates of the frame to display from sprite sheet. This is as an alias for the `frame` property. `vframes` or `hframes` must be greater than 1. */
		frame_coords: Vector2;

		/** If `true`, texture is cut from a larger atlas texture. See `region_rect`. */
		region_enabled: boolean;

		/** The region of the atlas texture to display. `region_enabled` must be `true`. */
		region_rect: Rect2;

		/** If `true`, the outermost pixels get blurred out. */
		region_filter_clip: boolean;

		/** Returns `true`, if the pixel at the given position is opaque and `false` in other case.

		 **Note:** It also returns `false`, if the sprite's texture is `null` or if the given position is invalid. */
		is_pixel_opaque(pos: Vector2) : boolean;

		/** Returns a `Rect2` representing the Sprite's boundary in local coordinates. Can be used to detect if the Sprite was clicked. Example:

		 ```gdscript
		 func _input(event):
		     if event is InputEventMouseButton and event.pressed and event.button_index == BUTTON_LEFT:
		         if get_rect().has_point(to_local(event.position)):
		             print("A click!")
		 ``` */
		get_rect() : Rect2;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normal_map` property */
		get_normal_map() : Texture;

		/** Setter of `normal_map` property */
		set_normal_map(p_value: Texture) : void;

		/** Getter of `centered` property */
		is_centered() : boolean;

		/** Setter of `centered` property */
		set_centered(p_value: boolean) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `flip_h` property */
		is_flipped_h() : boolean;

		/** Setter of `flip_h` property */
		set_flip_h(p_value: boolean) : void;

		/** Getter of `flip_v` property */
		is_flipped_v() : boolean;

		/** Setter of `flip_v` property */
		set_flip_v(p_value: boolean) : void;

		/** Getter of `vframes` property */
		get_vframes() : number;

		/** Setter of `vframes` property */
		set_vframes(p_value: number) : void;

		/** Getter of `hframes` property */
		get_hframes() : number;

		/** Setter of `hframes` property */
		set_hframes(p_value: number) : void;

		/** Getter of `frame` property */
		get_frame() : number;

		/** Setter of `frame` property */
		set_frame(p_value: number) : void;

		/** Getter of `frame_coords` property */
		get_frame_coords() : Vector2;

		/** Setter of `frame_coords` property */
		set_frame_coords(p_value: Vector2) : void;

		/** Getter of `region_enabled` property */
		is_region() : boolean;

		/** Setter of `region_enabled` property */
		set_region(p_value: boolean) : void;

		/** Getter of `region_rect` property */
		get_region_rect() : Rect2;

		/** Setter of `region_rect` property */
		set_region_rect(p_value: Rect2) : void;

		/** Getter of `region_filter_clip` property */
		is_region_filter_clip_enabled() : boolean;

		/** Setter of `region_filter_clip` property */
		set_region_filter_clip(p_value: boolean) : void;
	}
	namespace Sprite {

		/** Emitted when the `frame` changes. */
		const frame_changed: 'frame_changed';

		/** Emitted when the `texture` changes. */
		const texture_changed: 'texture_changed';
	}

	/** 2D sprite node in a 3D world.
	 A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.

	 **Note:** There are `url=https://github.com/godotengine/godot/issues/20855`known performance issues`/url` when using `Sprite3D`. Consider using a `MeshInstance` with a `QuadMesh` as the mesh instead. You can still have billboarding by enabling billboard properties in the QuadMesh's `SpatialMaterial`. */
	class Sprite3D extends SpriteBase3D {

		/** `Texture` object to draw. */
		texture: Texture;

		/** The number of rows in the sprite sheet. */
		vframes: number;

		/** The number of columns in the sprite sheet. */
		hframes: number;

		/** Current frame to display from sprite sheet. `vframes` or `hframes` must be greater than 1. */
		frame: number;

		/** Coordinates of the frame to display from sprite sheet. This is as an alias for the `frame` property. `vframes` or `hframes` must be greater than 1. */
		frame_coords: Vector2;

		/** If `true`, texture will be cut from a larger atlas texture. See `region_rect`. */
		region_enabled: boolean;

		/** The region of the atlas texture to display. `region_enabled` must be `true`. */
		region_rect: Rect2;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `vframes` property */
		get_vframes() : number;

		/** Setter of `vframes` property */
		set_vframes(p_value: number) : void;

		/** Getter of `hframes` property */
		get_hframes() : number;

		/** Setter of `hframes` property */
		set_hframes(p_value: number) : void;

		/** Getter of `frame` property */
		get_frame() : number;

		/** Setter of `frame` property */
		set_frame(p_value: number) : void;

		/** Getter of `frame_coords` property */
		get_frame_coords() : Vector2;

		/** Setter of `frame_coords` property */
		set_frame_coords(p_value: Vector2) : void;

		/** Getter of `region_enabled` property */
		is_region() : boolean;

		/** Setter of `region_enabled` property */
		set_region(p_value: boolean) : void;

		/** Getter of `region_rect` property */
		get_region_rect() : Rect2;

		/** Setter of `region_rect` property */
		set_region_rect(p_value: Rect2) : void;
	}
	namespace Sprite3D {

		/** Emitted when the `frame` changes. */
		const frame_changed: 'frame_changed';
	}

	/** 2D sprite node in 3D environment.
	 A node that displays 2D texture information in a 3D environment. */
	//@ts-ignore
	class SpriteBase3D extends GeometryInstance {

		/** If `true`, texture will be centered. */
		centered: boolean;

		/** The texture's drawing offset. */
		offset: Vector2;

		/** If `true`, texture is flipped horizontally. */
		flip_h: boolean;

		/** If `true`, texture is flipped vertically. */
		flip_v: boolean;

		/** A color value that gets multiplied on, could be used for mood-coloring or to simulate the color of light. */
		modulate: Color;

		/** The objects visibility on a scale from `0` fully invisible to `1` fully visible. */
		opacity: number;

		/** The size of one pixel's width on the sprite to scale it in 3D. */
		pixel_size: number;

		/** The direction in which the front of the texture faces. */
		axis: number;

		/**  */
		billboard: number;

		/** If `true`, the texture's transparency and the opacity are used to make those parts of the sprite invisible. */
		transparent: boolean;

		/** If `true`, the `Light` in the `Environment` has effects on the sprite. */
		shaded: boolean;

		/** If `true`, texture can be seen from the back as well, if `false`, it is invisible when looking at it from behind. */
		double_sided: boolean;

		/**  */
		alpha_cut: number;

		/** If `true`, the specified flag will be enabled. */
		set_draw_flag(flag: SpriteBase3D.DrawFlags, enabled: boolean) : void;

		/** Returns the value of the specified flag. */
		get_draw_flag(flag: SpriteBase3D.DrawFlags) : boolean;

		/** Returns the rectangle representing this sprite. */
		get_item_rect() : Rect2;

		/**  */
		generate_triangle_mesh() : TriangleMesh;

		/** Getter of `centered` property */
		is_centered() : boolean;

		/** Setter of `centered` property */
		set_centered(p_value: boolean) : void;

		/** Getter of `offset` property */
		get_offset() : Vector2;

		/** Setter of `offset` property */
		set_offset(p_value: Vector2) : void;

		/** Getter of `flip_h` property */
		is_flipped_h() : boolean;

		/** Setter of `flip_h` property */
		set_flip_h(p_value: boolean) : void;

		/** Getter of `flip_v` property */
		is_flipped_v() : boolean;

		/** Setter of `flip_v` property */
		set_flip_v(p_value: boolean) : void;

		/** Getter of `modulate` property */
		get_modulate() : Color;

		/** Setter of `modulate` property */
		set_modulate(p_value: Color) : void;

		/** Getter of `opacity` property */
		get_opacity() : number;

		/** Setter of `opacity` property */
		set_opacity(p_value: number) : void;

		/** Getter of `pixel_size` property */
		get_pixel_size() : number;

		/** Setter of `pixel_size` property */
		set_pixel_size(p_value: number) : void;

		/** Getter of `axis` property */
		get_axis() : number;

		/** Setter of `axis` property */
		set_axis(p_value: number) : void;

		/** Getter of `billboard` property */
		get_billboard_mode() : number;

		/** Setter of `billboard` property */
		set_billboard_mode(p_value: number) : void;

		/** Getter of `transparent` property */
		get_draw_flag() : boolean;

		/** Setter of `transparent` property */
		set_draw_flag(p_value: boolean) : void;

		/** Getter of `shaded` property */
		get_draw_flag() : boolean;

		/** Setter of `shaded` property */
		set_draw_flag(p_value: boolean) : void;

		/** Getter of `double_sided` property */
		get_draw_flag() : boolean;

		/** Setter of `double_sided` property */
		set_draw_flag(p_value: boolean) : void;

		/** Getter of `alpha_cut` property */
		get_alpha_cut_mode() : number;

		/** Setter of `alpha_cut` property */
		set_alpha_cut_mode(p_value: number) : void;
	}
	namespace SpriteBase3D {
		enum AlphaCutMode {
			/**  */
			ALPHA_CUT_DISABLED = 0,
			/**  */
			ALPHA_CUT_DISCARD = 1,
			/**  */
			ALPHA_CUT_OPAQUE_PREPASS = 2,
		}
		enum DrawFlags {
			/** If set, the texture's transparency and the opacity are used to make those parts of the sprite invisible. */
			FLAG_TRANSPARENT = 0,
			/** If set, lights in the environment affect the sprite. */
			FLAG_SHADED = 1,
			/** If set, texture can be seen from the back as well, if not, it is invisible when looking at it from behind. */
			FLAG_DOUBLE_SIDED = 2,
			/** Represents the size of the `DrawFlags` enum. */
			FLAG_MAX = 3,
		}

		/** If set, the texture's transparency and the opacity are used to make those parts of the sprite invisible. */
		const FLAG_TRANSPARENT: DrawFlags.FLAG_TRANSPARENT;

		/** If set, lights in the environment affect the sprite. */
		const FLAG_SHADED: DrawFlags.FLAG_SHADED;

		/** If set, texture can be seen from the back as well, if not, it is invisible when looking at it from behind. */
		const FLAG_DOUBLE_SIDED: DrawFlags.FLAG_DOUBLE_SIDED;

		/** Represents the size of the `DrawFlags` enum. */
		//@ts-ignore
		const FLAG_MAX: DrawFlags.FLAG_MAX;

		/**  */
		const ALPHA_CUT_DISABLED: AlphaCutMode.ALPHA_CUT_DISABLED;

		/**  */
		const ALPHA_CUT_DISCARD: AlphaCutMode.ALPHA_CUT_DISCARD;

		/**  */
		const ALPHA_CUT_OPAQUE_PREPASS: AlphaCutMode.ALPHA_CUT_OPAQUE_PREPASS;
	}

	/** Sprite frame library for AnimatedSprite.
	 Sprite frame library for `AnimatedSprite`. Contains frames and animation data for playback. */
	class SpriteFrames extends Resource {

		/** Compatibility property, always equals to an empty array. */
		frames: any[];

		/** Adds a new animation to the library. */
		add_animation(anim: string) : void;

		/** If `true`, the named animation exists. */
		has_animation(anim: string) : boolean;

		/** Removes the given animation. */
		remove_animation(anim: string) : void;

		/** Changes the animation's name to `newname`. */
		rename_animation(anim: string, newname: string) : void;

		/** Returns an array containing the names associated to each animation. Values are placed in alphabetical order. */
		get_animation_names() : PoolStringArray;

		/** The animation's speed in frames per second. */
		set_animation_speed(anim: string, speed: number) : void;

		/** The animation's speed in frames per second. */
		get_animation_speed(anim: string) : number;

		/** If `true`, the animation will loop. */
		set_animation_loop(anim: string, loop: boolean) : void;

		/** If `true`, the given animation will loop. */
		get_animation_loop(anim: string) : boolean;

		/** Adds a frame to the given animation. */
		//@ts-ignore
		add_frame(anim: string, frame: Texture, at_position: number = -1) : void;

		/** Returns the number of frames in the animation. */
		get_frame_count(anim: string) : number;

		/** Returns the animation's selected frame. */
		get_frame(anim: string, idx: number) : Texture;

		/** Sets the texture of the given frame. */
		set_frame(anim: string, idx: number, txt: Texture) : void;

		/** Removes the animation's selected frame. */
		remove_frame(anim: string, idx: number) : void;

		/** Removes all frames from the given animation. */
		clear(anim: string) : void;

		/** Removes all animations. A "default" animation will be created. */
		clear_all() : void;

		/** Getter of `frames` property */
		_get_frames() : any[];

		/** Setter of `frames` property */
		_set_frames(p_value: any[]) : void;
	}
	namespace SpriteFrames {
	}

	/** Static body for 3D physics.
	 Static body for 3D physics. A static body is a simple body that is not intended to move. In contrast to `RigidBody`, they don't consume any CPU resources as long as they don't move.

	 Additionally, a constant linear or angular velocity can be set for the static body, so even if it doesn't move, it affects other bodies as if it was moving (this is useful for simulating conveyor belts or conveyor wheels). */
	class StaticBody extends PhysicsBody {

		/** The body's friction, from 0 (frictionless) to 1 (full friction).

		 Deprecated, use `PhysicsMaterial.friction` instead via `physics_material_override`. */
		friction: number;

		/** The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).

		 Deprecated, use `PhysicsMaterial.bounce` instead via `physics_material_override`. */
		bounce: number;

		/** The physics material override for the body.

		 If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one. */
		physics_material_override: PhysicsMaterial;

		/** The body's constant linear velocity. This does not move the body, but affects other bodies that touch it, as if it was in a state of movement. */
		constant_linear_velocity: Vector3;

		/** The body's constant angular velocity. This does not rotate the body, but affects other bodies that touch it, as if it was in a state of rotation. */
		constant_angular_velocity: Vector3;

		/** Getter of `friction` property */
		get_friction() : number;

		/** Setter of `friction` property */
		set_friction(p_value: number) : void;

		/** Getter of `bounce` property */
		get_bounce() : number;

		/** Setter of `bounce` property */
		set_bounce(p_value: number) : void;

		/** Getter of `physics_material_override` property */
		get_physics_material_override() : PhysicsMaterial;

		/** Setter of `physics_material_override` property */
		set_physics_material_override(p_value: PhysicsMaterial) : void;

		/** Getter of `constant_linear_velocity` property */
		get_constant_linear_velocity() : Vector3;

		/** Setter of `constant_linear_velocity` property */
		set_constant_linear_velocity(p_value: Vector3) : void;

		/** Getter of `constant_angular_velocity` property */
		get_constant_angular_velocity() : Vector3;

		/** Setter of `constant_angular_velocity` property */
		set_constant_angular_velocity(p_value: Vector3) : void;
	}
	namespace StaticBody {
	}

	/** Static body for 2D physics.
	 Static body for 2D physics. A StaticBody2D is a body that is not intended to move. It is ideal for implementing objects in the environment, such as walls or platforms.

	 Additionally, a constant linear or angular velocity can be set for the static body, which will affect colliding bodies as if it were moving (for example, a conveyor belt). */
	class StaticBody2D extends PhysicsBody2D {

		/** The body's constant linear velocity. This does not move the body, but affects colliding bodies, as if it were moving. */
		constant_linear_velocity: Vector2;

		/** The body's constant angular velocity. This does not rotate the body, but affects colliding bodies, as if it were rotating. */
		constant_angular_velocity: number;

		/** The body's friction. Values range from `0` (no friction) to `1` (full friction).

		 Deprecated, use `PhysicsMaterial.friction` instead via `physics_material_override`. */
		friction: number;

		/** The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).

		 Deprecated, use `PhysicsMaterial.bounce` instead via `physics_material_override`. */
		bounce: number;

		/** The physics material override for the body.

		 If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one. */
		physics_material_override: PhysicsMaterial;

		/** Getter of `constant_linear_velocity` property */
		get_constant_linear_velocity() : Vector2;

		/** Setter of `constant_linear_velocity` property */
		set_constant_linear_velocity(p_value: Vector2) : void;

		/** Getter of `constant_angular_velocity` property */
		get_constant_angular_velocity() : number;

		/** Setter of `constant_angular_velocity` property */
		set_constant_angular_velocity(p_value: number) : void;

		/** Getter of `friction` property */
		get_friction() : number;

		/** Setter of `friction` property */
		set_friction(p_value: number) : void;

		/** Getter of `bounce` property */
		get_bounce() : number;

		/** Setter of `bounce` property */
		set_bounce(p_value: number) : void;

		/** Getter of `physics_material_override` property */
		get_physics_material_override() : PhysicsMaterial;

		/** Setter of `physics_material_override` property */
		set_physics_material_override(p_value: PhysicsMaterial) : void;
	}
	namespace StaticBody2D {
	}

	/** Abstraction and base class for stream-based protocols.
	 StreamPeer is an abstraction and base class for stream-based protocols (such as TCP or UNIX sockets). It provides an API for sending and receiving data through streams as raw data or strings. */
	class StreamPeer extends Reference {

		/** If `true`, this `StreamPeer` will using big-endian format for encoding and decoding. */
		big_endian: boolean;

		/** Sends a chunk of data through the connection, blocking if necessary until the data is done sending. This function returns an `@GlobalScope.Error` code. */
		put_data(data: PoolByteArray) : number;

		/** Sends a chunk of data through the connection. If all the data could not be sent at once, only part of it will. This function returns two values, an `@GlobalScope.Error` code and an integer, describing how much data was actually sent. */
		put_partial_data(data: PoolByteArray) : any[];

		/** Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the `bytes` argument. If not enough bytes are available, the function will block until the desired amount is received. This function returns two values, an `@GlobalScope.Error` code and a data array. */
		get_data(bytes: number) : any[];

		/** Returns a chunk data with the received bytes. The amount of bytes to be received can be requested in the "bytes" argument. If not enough bytes are available, the function will return how many were actually received. This function returns two values, an `@GlobalScope.Error` code, and a data array. */
		get_partial_data(bytes: number) : any[];

		/** Returns the amount of bytes this `StreamPeer` has available. */
		get_available_bytes() : number;

		/** Puts a signed byte into the stream. */
		put_8(value: number) : void;

		/** Puts an unsigned byte into the stream. */
		put_u8(value: number) : void;

		/** Puts a signed 16-bit value into the stream. */
		put_16(value: number) : void;

		/** Puts an unsigned 16-bit value into the stream. */
		put_u16(value: number) : void;

		/** Puts a signed 32-bit value into the stream. */
		put_32(value: number) : void;

		/** Puts an unsigned 32-bit value into the stream. */
		put_u32(value: number) : void;

		/** Puts a signed 64-bit value into the stream. */
		put_64(value: number) : void;

		/** Puts an unsigned 64-bit value into the stream. */
		put_u64(value: number) : void;

		/** Puts a single-precision float into the stream. */
		put_float(value: number) : void;

		/** Puts a double-precision float into the stream. */
		put_double(value: number) : void;

		/** Puts a zero-terminated ASCII string into the stream prepended by a 32-bit unsigned integer representing its size.

		 Note: To put an ASCII string without prepending its size, you can use `put_data`:

		 ```gdscript
		 put_data("Hello world".to_ascii())
		 ``` */
		put_string(value: string) : void;

		/** Puts a zero-terminated UTF-8 string into the stream prepended by a 32 bits unsigned integer representing its size.

		 Note: To put an UTF-8 string without prepending its size, you can use `put_data`:

		 ```gdscript
		 put_data("Hello world".to_utf8())
		 ``` */
		put_utf8_string(value: string) : void;

		/** Puts a Variant into the stream. If `full_objects` is `true` encoding objects is allowed (and can potentially include code). */
		//@ts-ignore
		put_var(value: any, full_objects: boolean = false) : void;

		/** Gets a signed byte from the stream. */
		get_8() : number;

		/** Gets an unsigned byte from the stream. */
		get_u8() : number;

		/** Gets a signed 16-bit value from the stream. */
		get_16() : number;

		/** Gets an unsigned 16-bit value from the stream. */
		get_u16() : number;

		/** Gets a signed 32-bit value from the stream. */
		get_32() : number;

		/** Gets an unsigned 32-bit value from the stream. */
		get_u32() : number;

		/** Gets a signed 64-bit value from the stream. */
		get_64() : number;

		/** Gets an unsigned 64-bit value from the stream. */
		get_u64() : number;

		/** Gets a single-precision float from the stream. */
		get_float() : number;

		/** Gets a double-precision float from the stream. */
		get_double() : number;

		/** Gets a string with byte-length `bytes` from the stream. If `bytes` is negative (default) the length will be read from the stream using the reverse process of `put_string`. */
		//@ts-ignore
		get_string(bytes: number = -1) : string;

		/** Gets an UTF-8 string with byte-length `bytes` from the stream (this decodes the string sent as UTF-8). If `bytes` is negative (default) the length will be read from the stream using the reverse process of `put_utf8_string`. */
		//@ts-ignore
		get_utf8_string(bytes: number = -1) : string;

		/** Gets a Variant from the stream. If `allow_objects` is `true`, decoding objects is allowed.

		 **Warning:** Deserialized objects can contain code which gets executed. Do not use this option if the serialized object comes from untrusted sources to avoid potential security threats such as remote code execution. */
		//@ts-ignore
		get_var(allow_objects: boolean = false) : any;

		/** Getter of `big_endian` property */
		is_big_endian_enabled() : boolean;

		/** Setter of `big_endian` property */
		set_big_endian(p_value: boolean) : void;
	}
	namespace StreamPeer {
	}

	/** 
	  */
	class StreamPeerBuffer extends StreamPeer {

		/**  */
		data_array: PoolByteArray;

		/**  */
		seek(position: number) : void;

		/**  */
		get_size() : number;

		/**  */
		get_position() : number;

		/**  */
		resize(size: number) : void;

		/**  */
		clear() : void;

		/**  */
		duplicate() : StreamPeerBuffer;

		/** Getter of `data_array` property */
		get_data_array() : PoolByteArray;

		/** Setter of `data_array` property */
		set_data_array(p_value: PoolByteArray) : void;
	}
	namespace StreamPeerBuffer {
	}

	/** 
	  */
	class StreamPeerGDNative extends StreamPeer {
	}
	namespace StreamPeerGDNative {
	}

	/** SSL stream peer.
	 SSL stream peer. This object can be used to connect to an SSL server or accept a single SSL client connection. */
	class StreamPeerSSL extends StreamPeer {

		/**  */
		blocking_handshake: boolean;

		/** Poll the connection to check for incoming bytes. Call this right before `StreamPeer.get_available_bytes` for it to work properly. */
		poll() : void;

		/** Accepts a peer connection as a server using the given `private_key` and providing the given `certificate` to the client. You can pass the optional `chain` parameter to provide additional CA chain information along with the certificate. */
		//@ts-ignore
		accept_stream(stream: StreamPeer, private_key: CryptoKey, certificate: X509Certificate, chain: X509Certificate = null) : number;

		/** Connects to a peer using an underlying `StreamPeer` `stream`. If `validate_certs` is `true`, `StreamPeerSSL` will validate that the certificate presented by the peer matches the `for_hostname`.

		 **Note:** Specifying a custom `valid_certificate` is not supported in HTML5 exports due to browsers restrictions. */
		//@ts-ignore
		connect_to_stream(stream: StreamPeer, validate_certs: boolean = false, for_hostname: string = "", valid_certificate: X509Certificate = null) : number;

		/** Returns the status of the connection. See `Status` for values. */
		get_status() : number;

		/** Disconnects from host. */
		disconnect_from_stream() : void;

		/** Getter of `blocking_handshake` property */
		is_blocking_handshake_enabled() : boolean;

		/** Setter of `blocking_handshake` property */
		set_blocking_handshake_enabled(p_value: boolean) : void;
	}
	namespace StreamPeerSSL {
		enum Status {
			/** A status representing a `StreamPeerSSL` that is disconnected. */
			STATUS_DISCONNECTED = 0,
			/** A status representing a `StreamPeerSSL` during handshaking. */
			STATUS_HANDSHAKING = 1,
			/** A status representing a `StreamPeerSSL` that is connected to a host. */
			STATUS_CONNECTED = 2,
			/** A status representing a `StreamPeerSSL` in error state. */
			STATUS_ERROR = 3,
			/** An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation. */
			STATUS_ERROR_HOSTNAME_MISMATCH = 4,
		}

		/** A status representing a `StreamPeerSSL` that is disconnected. */
		const STATUS_DISCONNECTED: Status.STATUS_DISCONNECTED;

		/** A status representing a `StreamPeerSSL` during handshaking. */
		const STATUS_HANDSHAKING: Status.STATUS_HANDSHAKING;

		/** A status representing a `StreamPeerSSL` that is connected to a host. */
		const STATUS_CONNECTED: Status.STATUS_CONNECTED;

		/** A status representing a `StreamPeerSSL` in error state. */
		const STATUS_ERROR: Status.STATUS_ERROR;

		/** An error status that shows a mismatch in the SSL certificate domain presented by the host and the domain requested for validation. */
		const STATUS_ERROR_HOSTNAME_MISMATCH: Status.STATUS_ERROR_HOSTNAME_MISMATCH;
	}

	/** TCP stream peer.
	 TCP stream peer. This object can be used to connect to TCP servers, or also is returned by a TCP server. */
	class StreamPeerTCP extends StreamPeer {

		/** Connects to the specified `host:port` pair. A hostname will be resolved if valid. Returns `OK` on success or `FAILED` on failure. */
		connect_to_host(host: string, port: number) : number;

		/** Returns `true` if this peer is currently connected to a host, `false` otherwise. */
		is_connected_to_host() : boolean;

		/** Returns the status of the connection, see `Status`. */
		get_status() : number;

		/** Returns the IP of this peer. */
		get_connected_host() : string;

		/** Returns the port of this peer. */
		get_connected_port() : number;

		/** Disconnects from host. */
		disconnect_from_host() : void;

		/** Disables Nagle's algorithm to improve latency for small packets.

		 **Note:** For applications that send large packets or need to transfer a lot of data, this can decrease the total available bandwidth. */
		set_no_delay(enabled: boolean) : void;
	}
	namespace StreamPeerTCP {
		enum Status {
			/** The initial status of the `StreamPeerTCP`. This is also the status after disconnecting. */
			STATUS_NONE = 0,
			/** A status representing a `StreamPeerTCP` that is connecting to a host. */
			STATUS_CONNECTING = 1,
			/** A status representing a `StreamPeerTCP` that is connected to a host. */
			STATUS_CONNECTED = 2,
			/** A status representing a `StreamPeerTCP` in error state. */
			STATUS_ERROR = 3,
		}

		/** The initial status of the `StreamPeerTCP`. This is also the status after disconnecting. */
		const STATUS_NONE: Status.STATUS_NONE;

		/** A status representing a `StreamPeerTCP` that is connecting to a host. */
		const STATUS_CONNECTING: Status.STATUS_CONNECTING;

		/** A status representing a `StreamPeerTCP` that is connected to a host. */
		const STATUS_CONNECTED: Status.STATUS_CONNECTED;

		/** A status representing a `StreamPeerTCP` in error state. */
		const STATUS_ERROR: Status.STATUS_ERROR;
	}

	/** A `.stex` texture.
	 A texture that is loaded from a `.stex` file. */
	class StreamTexture extends Texture {

		/** The StreamTexture's file path to a `.stex` file. */
		load_path: string;

		/**  */
		flags: number;

		/** Loads the texture from the given path. */
		load(path: string) : number;

		/** Getter of `load_path` property */
		get_load_path() : string;

		/** Setter of `load_path` property */
		load(p_value: string) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace StreamTexture {
	}

	/** Base class for drawing stylized boxes for the UI.
	 StyleBox is `Resource` that provides an abstract base class for drawing stylized boxes for the UI. StyleBoxes are used for drawing the styles of buttons, line edit backgrounds, tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below. */
	class StyleBox extends Resource {

		/** The left margin for the contents of this style box.	Increasing this value reduces the space available to the contents from the left.

		 Refer to `content_margin_bottom` for extra considerations. */
		content_margin_left: number;

		/** The right margin for the contents of this style box. Increasing this value reduces the space available to the contents from the right.

		 Refer to `content_margin_bottom` for extra considerations. */
		content_margin_right: number;

		/** The top margin for the contents of this style box. Increasing this value reduces the space available to the contents from the top.

		 Refer to `content_margin_bottom` for extra considerations. */
		content_margin_top: number;

		/** The bottom margin for the contents of this style box. Increasing this value reduces the space available to the contents from the bottom.

		 If this value is negative, it is ignored and a child-specific margin is used instead. For example for `StyleBoxFlat` the border thickness (if any) is used instead.

		 It is up to the code using this style box to decide what these contents are: for example, a `Button` respects this content margin for the textual contents of the button.

		 `get_margin` should be used to fetch this value as consumer instead of reading these properties directly. This is because it correctly respects negative values and the fallback mentioned above. */
		content_margin_bottom: number;

		/** Test a position in a rectangle, return whether it passes the mask test. */
		test_mask(point: Vector2, rect: Rect2) : boolean;

		/** Sets the default value of the specified `Margin` to given `offset` in pixels. */
		set_default_margin(margin: Margin, offset: number) : void;

		/** Returns the default value of the specified `Margin`. */
		get_default_margin(margin: Margin) : number;

		/** Returns the content margin offset for the specified `Margin`.

		 Positive values reduce size inwards, unlike `Control`'s margin values. */
		get_margin(margin: Margin) : number;

		/** Returns the minimum size that this stylebox can be shrunk to. */
		get_minimum_size() : Vector2;

		/** Returns the size of this `StyleBox` without the margins. */
		get_center_size() : Vector2;

		/** Returns the "offset" of a stylebox. This helper function returns a value equivalent to `Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP))`. */
		get_offset() : Vector2;

		/** Returns the `CanvasItem` that handles its `CanvasItem.NOTIFICATION_DRAW` or `CanvasItem._draw` callback at this moment. */
		get_current_item_drawn() : CanvasItem;

		/** Draws this stylebox using a `CanvasItem` with given `RID`.

		 You can get a `RID` value using `Object.get_instance_id` on a `CanvasItem`-derived node. */
		draw(canvas_item: RID, rect: Rect2) : void;

		/** Getter of `content_margin_left` property */
		get_default_margin() : number;

		/** Setter of `content_margin_left` property */
		set_default_margin(p_value: number) : void;

		/** Getter of `content_margin_right` property */
		get_default_margin() : number;

		/** Setter of `content_margin_right` property */
		set_default_margin(p_value: number) : void;

		/** Getter of `content_margin_top` property */
		get_default_margin() : number;

		/** Setter of `content_margin_top` property */
		set_default_margin(p_value: number) : void;

		/** Getter of `content_margin_bottom` property */
		get_default_margin() : number;

		/** Setter of `content_margin_bottom` property */
		set_default_margin(p_value: number) : void;
	}
	namespace StyleBox {
	}

	/** Empty stylebox (does not display anything).
	 Empty stylebox (really does not display anything). */
	class StyleBoxEmpty extends StyleBox {
	}
	namespace StyleBoxEmpty {
	}

	/** Customizable `StyleBox` with a given set of parameters (no texture required).
	 This `StyleBox` can be used to achieve all kinds of looks without the need of a texture. Those properties are customizable:

	 - Color

	 - Border width (individual width for each border)

	 - Rounded corners (individual radius for each corner)

	 - Shadow (with blur and offset)

	 Setting corner radius to high values is allowed. As soon as corners would overlap, the stylebox will switch to a relative system. Example:

	 ```gdscript
	 height = 30
	 corner_radius_top_left = 50
	 corner_radius_bottom_left = 100
	 ```

	 The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will **never** be more than the height. Result:

	 ```gdscript
	 corner_radius_top_left: 10
	 corner_radius_bottom_left: 20
	 ``` */
	class StyleBoxFlat extends StyleBox {

		/** The background color of the stylebox. */
		bg_color: Color;

		/** Toggles drawing of the inner part of the stylebox. */
		draw_center: boolean;

		/** Border width for the left border. */
		border_width_left: number;

		/** Border width for the top border. */
		border_width_top: number;

		/** Border width for the right border. */
		border_width_right: number;

		/** Border width for the bottom border. */
		border_width_bottom: number;

		/** Sets the color of the border. */
		border_color: Color;

		/** If `true`, the border will fade into the background color. */
		border_blend: boolean;

		/** The top-left corner's radius. If `0`, the corner is not rounded. */
		corner_radius_top_left: number;

		/** The top-right corner's radius. If `0`, the corner is not rounded. */
		corner_radius_top_right: number;

		/** The bottom-right corner's radius. If `0`, the corner is not rounded. */
		corner_radius_bottom_right: number;

		/** The bottom-left corner's radius. If `0`, the corner is not rounded. */
		corner_radius_bottom_left: number;

		/** This sets the amount of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value, you should take the corner radius (`set_corner_radius_all`) into account.

		 For corner radii smaller than 10, `4` or `5` should be enough. For corner radii smaller than 30, values between `8` and `12` should be enough.

		 A corner detail of `1` will result in chamfered corners instead of rounded corners, which is useful for some artistic effects. */
		corner_detail: number;

		/** Expands the stylebox outside of the control rect on the left edge. Useful in combination with `border_width_left` to draw a border outside the control rect. */
		expand_margin_left: number;

		/** Expands the stylebox outside of the control rect on the right edge. Useful in combination with `border_width_right` to draw a border outside the control rect. */
		expand_margin_right: number;

		/** Expands the stylebox outside of the control rect on the top edge. Useful in combination with `border_width_top` to draw a border outside the control rect. */
		expand_margin_top: number;

		/** Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with `border_width_bottom` to draw a border outside the control rect. */
		expand_margin_bottom: number;

		/** The color of the shadow. This has no effect if `shadow_size` is lower than 1. */
		shadow_color: Color;

		/** The shadow size in pixels. */
		shadow_size: number;

		/** The shadow offset in pixels. Adjusts the position of the shadow relatively to the stylebox. */
		shadow_offset: Vector2;

		/** Antialiasing draws a small ring around the edges, which fades to transparency. As a result, edges look much smoother. This is only noticeable when using rounded corners. */
		anti_aliasing: boolean;

		/** This changes the size of the faded ring. Higher values can be used to achieve a "blurry" effect. */
		anti_aliasing_size: number;

		/** Sets the border width to `width` pixels for all margins. */
		set_border_width_all(width: number) : void;

		/** Returns the smallest border width out of all four borders. */
		get_border_width_min() : number;

		/** Sets the border width to `width` pixels for the given `margin`. See `Margin` for possible values. */
		set_border_width(margin: Margin, width: number) : void;

		/** Returns the given `margin`'s border width. See `Margin` for possible values. */
		get_border_width(margin: Margin) : number;

		/** Sets the corner radius for each corner to `radius_top_left`, `radius_top_right`, `radius_bottom_right`, and `radius_bottom_left` pixels. */
		set_corner_radius_individual(radius_top_left: number, radius_top_right: number, radius_bottom_right: number, radius_bottom_left: number) : void;

		/** Sets the corner radius to `radius` pixels for all corners. */
		set_corner_radius_all(radius: number) : void;

		/** Sets the corner radius to `radius` pixels for the given `corner`. See `Corner` for possible values. */
		set_corner_radius(corner: Corner, radius: number) : void;

		/** Returns the given `corner`'s radius. See `Corner` for possible values. */
		get_corner_radius(corner: Corner) : number;

		/** Sets the expand margin to `size` pixels for the given `margin`. See `Margin` for possible values. */
		set_expand_margin(margin: Margin, size: number) : void;

		/** Sets the expand margin to `size` pixels for all margins. */
		set_expand_margin_all(size: number) : void;

		/** Sets the expand margin for each margin to `size_left`, `size_top`, `size_right`, and `size_bottom` pixels. */
		set_expand_margin_individual(size_left: number, size_top: number, size_right: number, size_bottom: number) : void;

		/** Returns the size of the given `margin`'s expand margin. See `Margin` for possible values. */
		get_expand_margin(margin: Margin) : number;

		/** Getter of `bg_color` property */
		get_bg_color() : Color;

		/** Setter of `bg_color` property */
		set_bg_color(p_value: Color) : void;

		/** Getter of `draw_center` property */
		is_draw_center_enabled() : boolean;

		/** Setter of `draw_center` property */
		set_draw_center(p_value: boolean) : void;

		/** Getter of `border_width_left` property */
		get_border_width() : number;

		/** Setter of `border_width_left` property */
		set_border_width(p_value: number) : void;

		/** Getter of `border_width_top` property */
		get_border_width() : number;

		/** Setter of `border_width_top` property */
		set_border_width(p_value: number) : void;

		/** Getter of `border_width_right` property */
		get_border_width() : number;

		/** Setter of `border_width_right` property */
		set_border_width(p_value: number) : void;

		/** Getter of `border_width_bottom` property */
		get_border_width() : number;

		/** Setter of `border_width_bottom` property */
		set_border_width(p_value: number) : void;

		/** Getter of `border_color` property */
		get_border_color() : Color;

		/** Setter of `border_color` property */
		set_border_color(p_value: Color) : void;

		/** Getter of `border_blend` property */
		get_border_blend() : boolean;

		/** Setter of `border_blend` property */
		set_border_blend(p_value: boolean) : void;

		/** Getter of `corner_radius_top_left` property */
		get_corner_radius() : number;

		/** Setter of `corner_radius_top_left` property */
		set_corner_radius(p_value: number) : void;

		/** Getter of `corner_radius_top_right` property */
		get_corner_radius() : number;

		/** Setter of `corner_radius_top_right` property */
		set_corner_radius(p_value: number) : void;

		/** Getter of `corner_radius_bottom_right` property */
		get_corner_radius() : number;

		/** Setter of `corner_radius_bottom_right` property */
		set_corner_radius(p_value: number) : void;

		/** Getter of `corner_radius_bottom_left` property */
		get_corner_radius() : number;

		/** Setter of `corner_radius_bottom_left` property */
		set_corner_radius(p_value: number) : void;

		/** Getter of `corner_detail` property */
		get_corner_detail() : number;

		/** Setter of `corner_detail` property */
		set_corner_detail(p_value: number) : void;

		/** Getter of `expand_margin_left` property */
		get_expand_margin() : number;

		/** Setter of `expand_margin_left` property */
		set_expand_margin(p_value: number) : void;

		/** Getter of `expand_margin_right` property */
		get_expand_margin() : number;

		/** Setter of `expand_margin_right` property */
		set_expand_margin(p_value: number) : void;

		/** Getter of `expand_margin_top` property */
		get_expand_margin() : number;

		/** Setter of `expand_margin_top` property */
		set_expand_margin(p_value: number) : void;

		/** Getter of `expand_margin_bottom` property */
		get_expand_margin() : number;

		/** Setter of `expand_margin_bottom` property */
		set_expand_margin(p_value: number) : void;

		/** Getter of `shadow_color` property */
		get_shadow_color() : Color;

		/** Setter of `shadow_color` property */
		set_shadow_color(p_value: Color) : void;

		/** Getter of `shadow_size` property */
		get_shadow_size() : number;

		/** Setter of `shadow_size` property */
		set_shadow_size(p_value: number) : void;

		/** Getter of `shadow_offset` property */
		get_shadow_offset() : Vector2;

		/** Setter of `shadow_offset` property */
		set_shadow_offset(p_value: Vector2) : void;

		/** Getter of `anti_aliasing` property */
		is_anti_aliased() : boolean;

		/** Setter of `anti_aliasing` property */
		set_anti_aliased(p_value: boolean) : void;

		/** Getter of `anti_aliasing_size` property */
		get_aa_size() : number;

		/** Setter of `anti_aliasing_size` property */
		set_aa_size(p_value: number) : void;
	}
	namespace StyleBoxFlat {
	}

	/** `StyleBox` that displays a single line.
	 `StyleBox` that displays a single line of a given color and thickness. It can be used to draw things like separators. */
	class StyleBoxLine extends StyleBox {

		/** The line's color. */
		color: Color;

		/** The number of pixels the line will extend before the `StyleBoxLine`'s bounds. If set to a negative value, the line will begin inside the `StyleBoxLine`'s bounds. */
		grow_begin: number;

		/** The number of pixels the line will extend past the `StyleBoxLine`'s bounds. If set to a negative value, the line will end inside the `StyleBoxLine`'s bounds. */
		grow_end: number;

		/** The line's thickness in pixels. */
		thickness: number;

		/** If `true`, the line will be vertical. If `false`, the line will be horizontal. */
		vertical: boolean;

		/** Getter of `color` property */
		get_color() : Color;

		/** Setter of `color` property */
		set_color(p_value: Color) : void;

		/** Getter of `grow_begin` property */
		get_grow_begin() : number;

		/** Setter of `grow_begin` property */
		set_grow_begin(p_value: number) : void;

		/** Getter of `grow_end` property */
		get_grow_end() : number;

		/** Setter of `grow_end` property */
		set_grow_end(p_value: number) : void;

		/** Getter of `thickness` property */
		get_thickness() : number;

		/** Setter of `thickness` property */
		set_thickness(p_value: number) : void;

		/** Getter of `vertical` property */
		is_vertical() : boolean;

		/** Setter of `vertical` property */
		set_vertical(p_value: boolean) : void;
	}
	namespace StyleBoxLine {
	}

	/** Texture-based nine-patch `StyleBox`.
	 Texture-based nine-patch `StyleBox`, in a way similar to `NinePatchRect`. This stylebox performs a 3×3 scaling of a texture, where only the center cell is fully stretched. This makes it possible to design bordered styles regardless of the stylebox's size. */
	class StyleBoxTexture extends StyleBox {

		/** The texture to use when drawing this style box. */
		texture: Texture;

		/** The normal map to use when drawing this style box.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		normal_map: Texture;

		/** Species a sub-region of the texture to use.

		 This is equivalent to first wrapping the texture in an `AtlasTexture` with the same region. */
		region_rect: Rect2;

		/** Increases the left margin of the 3×3 texture box.

		 A higher value means more of the source texture is considered to be part of the left border of the 3×3 box.

		 This is also the value used as fallback for `StyleBox.content_margin_left` if it is negative. */
		margin_left: number;

		/** Increases the right margin of the 3×3 texture box.

		 A higher value means more of the source texture is considered to be part of the right border of the 3×3 box.

		 This is also the value used as fallback for `StyleBox.content_margin_right` if it is negative. */
		margin_right: number;

		/** Increases the top margin of the 3×3 texture box.

		 A higher value means more of the source texture is considered to be part of the top border of the 3×3 box.

		 This is also the value used as fallback for `StyleBox.content_margin_top` if it is negative. */
		margin_top: number;

		/** Increases the bottom margin of the 3×3 texture box.

		 A higher value means more of the source texture is considered to be part of the bottom border of the 3×3 box.

		 This is also the value used as fallback for `StyleBox.content_margin_bottom` if it is negative. */
		margin_bottom: number;

		/** Expands the left margin of this style box when drawing, causing it to be drawn larger than requested. */
		expand_margin_left: number;

		/** Expands the right margin of this style box when drawing, causing it to be drawn larger than requested. */
		expand_margin_right: number;

		/** Expands the top margin of this style box when drawing, causing it to be drawn larger than requested. */
		expand_margin_top: number;

		/** Expands the bottom margin of this style box when drawing, causing it to be drawn larger than requested. */
		expand_margin_bottom: number;

		/** Controls how the stylebox's texture will be stretched or tiled horizontally. See `AxisStretchMode` for possible values. */
		axis_stretch_horizontal: number;

		/** Controls how the stylebox's texture will be stretched or tiled vertically. See `AxisStretchMode` for possible values. */
		axis_stretch_vertical: number;

		/** Modulates the color of the texture when this style box is drawn. */
		modulate_color: Color;

		/** If `true`, the nine-patch texture's center tile will be drawn. */
		draw_center: boolean;

		/** Sets the margin to `size` pixels for the given `margin`. See `Margin` for possible values. */
		set_margin_size(margin: Margin, size: number) : void;

		/** Returns the size of the given `margin`. See `Margin` for possible values. */
		get_margin_size(margin: Margin) : number;

		/** Sets the expand margin to `size` pixels for the given `margin`. See `Margin` for possible values. */
		set_expand_margin_size(margin: Margin, size: number) : void;

		/** Sets the expand margin to `size` pixels for all margins. */
		set_expand_margin_all(size: number) : void;

		/** Sets the expand margin for each margin to `size_left`, `size_top`, `size_right`, and `size_bottom` pixels. */
		set_expand_margin_individual(size_left: number, size_top: number, size_right: number, size_bottom: number) : void;

		/** Returns the size of the given `margin`'s expand margin. See `Margin` for possible values. */
		get_expand_margin_size(margin: Margin) : number;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `normal_map` property */
		get_normal_map() : Texture;

		/** Setter of `normal_map` property */
		set_normal_map(p_value: Texture) : void;

		/** Getter of `region_rect` property */
		get_region_rect() : Rect2;

		/** Setter of `region_rect` property */
		set_region_rect(p_value: Rect2) : void;

		/** Getter of `margin_left` property */
		get_margin_size() : number;

		/** Setter of `margin_left` property */
		set_margin_size(p_value: number) : void;

		/** Getter of `margin_right` property */
		get_margin_size() : number;

		/** Setter of `margin_right` property */
		set_margin_size(p_value: number) : void;

		/** Getter of `margin_top` property */
		get_margin_size() : number;

		/** Setter of `margin_top` property */
		set_margin_size(p_value: number) : void;

		/** Getter of `margin_bottom` property */
		get_margin_size() : number;

		/** Setter of `margin_bottom` property */
		set_margin_size(p_value: number) : void;

		/** Getter of `expand_margin_left` property */
		get_expand_margin_size() : number;

		/** Setter of `expand_margin_left` property */
		set_expand_margin_size(p_value: number) : void;

		/** Getter of `expand_margin_right` property */
		get_expand_margin_size() : number;

		/** Setter of `expand_margin_right` property */
		set_expand_margin_size(p_value: number) : void;

		/** Getter of `expand_margin_top` property */
		get_expand_margin_size() : number;

		/** Setter of `expand_margin_top` property */
		set_expand_margin_size(p_value: number) : void;

		/** Getter of `expand_margin_bottom` property */
		get_expand_margin_size() : number;

		/** Setter of `expand_margin_bottom` property */
		set_expand_margin_size(p_value: number) : void;

		/** Getter of `axis_stretch_horizontal` property */
		get_h_axis_stretch_mode() : number;

		/** Setter of `axis_stretch_horizontal` property */
		set_h_axis_stretch_mode(p_value: number) : void;

		/** Getter of `axis_stretch_vertical` property */
		get_v_axis_stretch_mode() : number;

		/** Setter of `axis_stretch_vertical` property */
		set_v_axis_stretch_mode(p_value: number) : void;

		/** Getter of `modulate_color` property */
		get_modulate() : Color;

		/** Setter of `modulate_color` property */
		set_modulate(p_value: Color) : void;

		/** Getter of `draw_center` property */
		is_draw_center_enabled() : boolean;

		/** Setter of `draw_center` property */
		set_draw_center(p_value: boolean) : void;
	}
	namespace StyleBoxTexture {

		/** Emitted when the stylebox's texture is changed. */
		const texture_changed: 'texture_changed';
		enum AxisStretchMode {
			/** Stretch the stylebox's texture. This results in visible distortion unless the texture size matches the stylebox's size perfectly. */
			AXIS_STRETCH_MODE_STRETCH = 0,
			/** Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. */
			AXIS_STRETCH_MODE_TILE = 1,
			/** Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. Unlike `AXIS_STRETCH_MODE_TILE`, the texture may be slightly stretched to make the nine-patch texture tile seamlessly. */
			AXIS_STRETCH_MODE_TILE_FIT = 2,
		}

		/** Stretch the stylebox's texture. This results in visible distortion unless the texture size matches the stylebox's size perfectly. */
		const AXIS_STRETCH_MODE_STRETCH: AxisStretchMode.AXIS_STRETCH_MODE_STRETCH;

		/** Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. */
		const AXIS_STRETCH_MODE_TILE: AxisStretchMode.AXIS_STRETCH_MODE_TILE;

		/** Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. Unlike `AXIS_STRETCH_MODE_TILE`, the texture may be slightly stretched to make the nine-patch texture tile seamlessly. */
		const AXIS_STRETCH_MODE_TILE_FIT: AxisStretchMode.AXIS_STRETCH_MODE_TILE_FIT;
	}

	/** Helper tool to create geometry.
	 The `SurfaceTool` is used to construct a `Mesh` by specifying vertex attributes individually. It can be used to construct a `Mesh` from a script. All properties except indices need to be added before calling `add_vertex`. For example, to add vertex colors and UVs:

	 ```gdscript
	 var st = SurfaceTool.new()
	 st.begin(Mesh.PRIMITIVE_TRIANGLES)
	 st.add_color(Color(1, 0, 0))
	 st.add_uv(Vector2(0, 0))
	 st.add_vertex(Vector3(0, 0, 0))
	 ```

	 The above `SurfaceTool` now contains one vertex of a triangle which has a UV coordinate and a specified `Color`. If another vertex were added without calling `add_uv` or `add_color`, then the last values would be used.

	 Vertex attributes must be passed **before** calling `add_vertex`. Failure to do so will result in an error when committing the vertex information to a mesh.

	 Additionally, the attributes used before the first vertex is added determine the format of the mesh. For example, if you only add UVs to the first vertex, you cannot add color to any of the subsequent vertices.

	 See also `ArrayMesh`, `ImmediateGeometry` and `MeshDataTool` for procedural geometry generation.

	 **Note:** Godot uses clockwise `url=https://learnopengl.com/Advanced-OpenGL/Face-culling`winding order`/url` for front faces of triangle primitive modes. */
	class SurfaceTool extends Reference {

		/** Called before adding any vertices. Takes the primitive type as an argument (e.g. `Mesh.PRIMITIVE_TRIANGLES`). */
		begin(primitive: Mesh.PrimitiveType) : void;

		/** Specifies the position of current vertex. Should be called after specifying other vertex properties (e.g. Color, UV). */
		add_vertex(vertex: Vector3) : void;

		/** Specifies a `Color` for the next vertex to use. */
		add_color(color: Color) : void;

		/** Specifies a normal for the next vertex to use. */
		add_normal(normal: Vector3) : void;

		/** Specifies a tangent for the next vertex to use. */
		add_tangent(tangent: Plane) : void;

		/** Specifies a set of UV coordinates to use for the next vertex. */
		add_uv(uv: Vector2) : void;

		/** Specifies an optional second set of UV coordinates to use for the next vertex. */
		add_uv2(uv2: Vector2) : void;

		/** Adds an array of bones for the next vertex to use. `bones` must contain 4 integers. */
		add_bones(bones: PoolIntArray) : void;

		/** Specifies weight values for next vertex to use. `weights` must contain 4 values. */
		add_weights(weights: PoolRealArray) : void;

		/** Specifies whether the current vertex (if using only vertex arrays) or current index (if also using index arrays) should use smooth normals for normal calculation. */
		add_smooth_group(smooth: boolean) : void;

		/** Inserts a triangle fan made of array data into `Mesh` being constructed.

		 Requires the primitive type be set to `Mesh.PRIMITIVE_TRIANGLES`. */
		//@ts-ignore
		add_triangle_fan(vertices: PoolVector3Array, uvs: PoolVector2Array = PoolVector2Array(  ), colors: PoolColorArray = PoolColorArray(  ), uv2s: PoolVector2Array = PoolVector2Array(  ), normals: PoolVector3Array = PoolVector3Array(  ), tangents: any[] = [  ]) : void;

		/** Adds an index to index array if you are using indexed vertices. Does not need to be called before adding vertices. */
		add_index(index: number) : void;

		/** Shrinks the vertex array by creating an index array (avoids reusing vertices). */
		index() : void;

		/** Removes the index array by expanding the vertex array. */
		deindex() : void;

		/** Generates normals from vertices so you do not have to do it manually. If `flip` is `true`, the resulting normals will be inverted.

		 Requires the primitive type to be set to `Mesh.PRIMITIVE_TRIANGLES`. */
		//@ts-ignore
		generate_normals(flip: boolean = false) : void;

		/** Generates a tangent vector for each vertex. Requires that each vertex have UVs and normals set already. */
		generate_tangents() : void;

		/** Sets `Material` to be used by the `Mesh` you are constructing. */
		set_material(material: Material) : void;

		/** Clear all information passed into the surface tool so far. */
		clear() : void;

		/** Creates a vertex array from an existing `Mesh`. */
		create_from(existing: Mesh, surface: number) : void;

		/** Creates a vertex array from the specified blend shape of an existing `Mesh`. This can be used to extract a specific pose from a blend shape. */
		create_from_blend_shape(existing: Mesh, surface: number, blend_shape: string) : void;

		/** Append vertices from a given `Mesh` surface onto the current vertex array with specified `Transform`. */
		append_from(existing: Mesh, surface: number, transform: Transform) : void;

		/** Returns a constructed `ArrayMesh` from current information passed in. If an existing `ArrayMesh` is passed in as an argument, will add an extra surface to the existing `ArrayMesh`.

		 Default flag is `Mesh.ARRAY_COMPRESS_DEFAULT`. See `ARRAY_COMPRESS_*` constants in `Mesh.ArrayFormat` for other flags. */
		//@ts-ignore
		commit(existing: ArrayMesh = null, flags: number = 97280) : ArrayMesh;

		/** Commits the data to the same format used by `ArrayMesh.add_surface_from_arrays`. This way you can further process the mesh data using the `ArrayMesh` API. */
		commit_to_arrays() : any[];
	}
	namespace SurfaceTool {
	}

	/** A TCP server.
	 A TCP server. Listens to connections on a port and returns a `StreamPeerTCP` when it gets an incoming connection. */
	class TCP_Server extends Reference {

		/** Listen on the `port` binding to `bind_address`.

		 If `bind_address` is set as `"*"` (default), the server will listen on all available addresses (both IPv4 and IPv6).

		 If `bind_address` is set as `"0.0.0.0"` (for IPv4) or `"::"` (for IPv6), the server will listen on all available addresses matching that IP type.

		 If `bind_address` is set to any valid address (e.g. `"192.168.1.101"`, `"::1"`, etc), the server will only listen on the interface with that addresses (or fail if no interface with the given address exists). */
		//@ts-ignore
		listen(port: number, bind_address: string = "*") : number;

		/** Returns `true` if a connection is available for taking. */
		is_connection_available() : boolean;

		/** Returns `true` if the server is currently listening for connections. */
		is_listening() : boolean;

		/** If a connection is available, returns a StreamPeerTCP with the connection. */
		take_connection() : StreamPeerTCP;

		/** Stops listening. */
		stop() : void;
	}
	namespace TCP_Server {
	}

	/** Tabbed container.
	 Sets the active tab's `visible` property to the value `true`. Sets all other children's to `false`.

	 Ignores non-`Control` children.

	 Individual tabs are always visible unless you use `set_tab_disabled` and `set_tab_title` to hide it.

	 To hide only a tab's content, nest the content inside a child `Control`, so it receives the `TabContainer`'s visibility setting instead. */
	class TabContainer extends Container {

		/** The alignment of all tabs in the tab container. See the `TabAlign` constants for details. */
		tab_align: number;

		/** The current tab index. When set, this index's `Control` node's `visible` property is set to `true` and all others are set to `false`. */
		current_tab: number;

		/** If `true`, tabs are visible. If `false`, tabs' content and titles are hidden. */
		tabs_visible: boolean;

		/** If `true`, tabs can be rearranged with mouse drag. */
		drag_to_rearrange_enabled: boolean;

		/** If `true`, children `Control` nodes that are hidden have their minimum size take into account in the total, instead of only the currently visible one. */
		use_hidden_tabs_for_min_size: boolean;

		/** Returns the number of tabs. */
		get_tab_count() : number;

		/** Returns the previously active tab index. */
		get_previous_tab() : number;

		/** Returns the child `Control` node located at the active tab index. */
		get_current_tab_control() : Control;

		/** Returns the `Control` node from the tab at index `tab_idx`. */
		get_tab_control(tab_idx: number) : Control;

		/** Sets a title for the tab at index `tab_idx`. Tab titles default to the name of the indexed child node, but this can be overridden with `set_tab_title`. */
		set_tab_title(tab_idx: number, title: string) : void;

		/** Returns the title of the tab at index `tab_idx`. Tab titles default to the name of the indexed child node, but this can be overridden with `set_tab_title`. */
		get_tab_title(tab_idx: number) : string;

		/** Sets an icon for the tab at index `tab_idx`. */
		set_tab_icon(tab_idx: number, icon: Texture) : void;

		/** Returns the `Texture` for the tab at index `tab_idx` or `null` if the tab has no `Texture`. */
		get_tab_icon(tab_idx: number) : Texture;

		/** If `disabled` is `false`, hides the tab at index `tab_idx`.

		 **Note:** Its title text will remain, unless also removed with `set_tab_title`. */
		set_tab_disabled(tab_idx: number, disabled: boolean) : void;

		/** Returns `true` if the tab at index `tab_idx` is disabled. */
		get_tab_disabled(tab_idx: number) : boolean;

		/** If set on a `Popup` node instance, a popup menu icon appears in the top-right corner of the `TabContainer`. Clicking it will expand the `Popup` node. */
		set_popup(popup: Node) : void;

		/** Returns the `Popup` node instance if one has been set already with `set_popup`. */
		get_popup() : Popup;

		/** Defines rearrange group id, choose for each `TabContainer` the same value to enable tab drag between `TabContainer`. Enable drag with `set_drag_to_rearrange_enabled(true)`. */
		set_tabs_rearrange_group(group_id: number) : void;

		/** Returns the `TabContainer` rearrange group id. */
		get_tabs_rearrange_group() : number;

		/** Getter of `tab_align` property */
		get_tab_align() : number;

		/** Setter of `tab_align` property */
		set_tab_align(p_value: number) : void;

		/** Getter of `current_tab` property */
		get_current_tab() : number;

		/** Setter of `current_tab` property */
		set_current_tab(p_value: number) : void;

		/** Getter of `tabs_visible` property */
		are_tabs_visible() : boolean;

		/** Setter of `tabs_visible` property */
		set_tabs_visible(p_value: boolean) : void;

		/** Getter of `drag_to_rearrange_enabled` property */
		get_drag_to_rearrange_enabled() : boolean;

		/** Setter of `drag_to_rearrange_enabled` property */
		set_drag_to_rearrange_enabled(p_value: boolean) : void;

		/** Getter of `use_hidden_tabs_for_min_size` property */
		get_use_hidden_tabs_for_min_size() : boolean;

		/** Setter of `use_hidden_tabs_for_min_size` property */
		set_use_hidden_tabs_for_min_size(p_value: boolean) : void;
	}
	namespace TabContainer {

		/** Emitted when the `TabContainer`'s `Popup` button is clicked. See `set_popup` for details. */
		const pre_popup_pressed: 'pre_popup_pressed';

		/** Emitted when a tab is selected, even if it is the current tab. */
		const tab_selected: 'tab_selected';

		/** Emitted when switching to another tab. */
		const tab_changed: 'tab_changed';
		enum TabAlign {
			/** Align the tabs to the left. */
			ALIGN_LEFT = 0,
			/** Align the tabs to the center. */
			ALIGN_CENTER = 1,
			/** Align the tabs to the right. */
			ALIGN_RIGHT = 2,
		}

		/** Align the tabs to the left. */
		const ALIGN_LEFT: TabAlign.ALIGN_LEFT;

		/** Align the tabs to the center. */
		const ALIGN_CENTER: TabAlign.ALIGN_CENTER;

		/** Align the tabs to the right. */
		const ALIGN_RIGHT: TabAlign.ALIGN_RIGHT;
	}

	/** Tabs control.
	 Simple tabs control, similar to `TabContainer` but is only in charge of drawing tabs, not interact with children. */
	class Tabs extends Control {

		/** Select tab at index `tab_idx`. */
		current_tab: number;

		/** The alignment of all tabs. See `TabAlign` for details. */
		tab_align: number;

		/** Sets when the close button will appear on the tabs. See `CloseButtonDisplayPolicy` for details. */
		tab_close_display_policy: number;

		/** if `true`, the mouse's scroll wheel cab be used to navigate the scroll view. */
		scrolling_enabled: boolean;

		/** If `true`, tabs can be rearranged with mouse drag. */
		drag_to_rearrange_enabled: boolean;

		/** Returns the number of tabs. */
		get_tab_count() : number;

		/** Sets a `title` for the tab at index `tab_idx`. */
		set_tab_title(tab_idx: number, title: string) : void;

		/** Returns the title of the tab at index `tab_idx`. Tab titles default to the name of the indexed child node, but this can be overridden with `set_tab_title`. */
		get_tab_title(tab_idx: number) : string;

		/** Sets an `icon` for the tab at index `tab_idx`. */
		set_tab_icon(tab_idx: number, icon: Texture) : void;

		/** Returns the `Texture` for the tab at index `tab_idx` or `null` if the tab has no `Texture`. */
		get_tab_icon(tab_idx: number) : Texture;

		/** If `disabled` is `false`, hides the tab at index `tab_idx`.

		 **Note:** Its title text will remain unless it is also removed with `set_tab_title`. */
		set_tab_disabled(tab_idx: number, disabled: boolean) : void;

		/** Returns `true` if the tab at index `tab_idx` is disabled. */
		get_tab_disabled(tab_idx: number) : boolean;

		/** Removes the tab at index `tab_idx`. */
		remove_tab(tab_idx: number) : void;

		/** Adds a new tab. */
		//@ts-ignore
		add_tab(title: string = "", icon: Texture = null) : void;

		/** Returns the number of hidden tabs offsetted to the left. */
		get_tab_offset() : number;

		/** Returns `true` if the offset buttons (the ones that appear when there's not enough space for all tabs) are visible. */
		get_offset_buttons_visible() : boolean;

		/** Moves the scroll view to make the tab visible. */
		ensure_tab_visible(idx: number) : void;

		/** Returns tab `Rect2` with local position and size. */
		get_tab_rect(tab_idx: number) : Rect2;

		/** Moves a tab from `from` to `to`. */
		move_tab(p_from: number, to: number) : void;

		/** Defines the rearrange group ID. Choose for each `Tabs` the same value to dragging tabs between `Tabs`. Enable drag with `set_drag_to_rearrange_enabled(true)`. */
		set_tabs_rearrange_group(group_id: number) : void;

		/** Returns the `Tabs`' rearrange group ID. */
		get_tabs_rearrange_group() : number;

		/** If `true`, enables selecting a tab with the right mouse button. */
		set_select_with_rmb(enabled: boolean) : void;

		/** Returns `true` if select with right mouse button is enabled. */
		get_select_with_rmb() : boolean;

		/** Getter of `current_tab` property */
		get_current_tab() : number;

		/** Setter of `current_tab` property */
		set_current_tab(p_value: number) : void;

		/** Getter of `tab_align` property */
		get_tab_align() : number;

		/** Setter of `tab_align` property */
		set_tab_align(p_value: number) : void;

		/** Getter of `tab_close_display_policy` property */
		get_tab_close_display_policy() : number;

		/** Setter of `tab_close_display_policy` property */
		set_tab_close_display_policy(p_value: number) : void;

		/** Getter of `scrolling_enabled` property */
		get_scrolling_enabled() : boolean;

		/** Setter of `scrolling_enabled` property */
		set_scrolling_enabled(p_value: boolean) : void;

		/** Getter of `drag_to_rearrange_enabled` property */
		get_drag_to_rearrange_enabled() : boolean;

		/** Setter of `drag_to_rearrange_enabled` property */
		set_drag_to_rearrange_enabled(p_value: boolean) : void;
	}
	namespace Tabs {

		/** Emitted when a tab is closed. */
		const tab_close: 'tab_close';

		/** Emitted when a tab is clicked, even if it is the current tab. */
		const tab_clicked: 'tab_clicked';

		/** Emitted when the active tab is rearranged via mouse drag. See `drag_to_rearrange_enabled`. */
		const reposition_active_tab_request: 'reposition_active_tab_request';

		/** Emitted when a tab is right-clicked. */
		const right_button_pressed: 'right_button_pressed';

		/** Emitted when switching to another tab. */
		const tab_changed: 'tab_changed';

		/** Emitted when a tab is hovered by the mouse. */
		const tab_hover: 'tab_hover';
		enum CloseButtonDisplayPolicy {
			/** Never show the close buttons. */
			CLOSE_BUTTON_SHOW_NEVER = 0,
			/** Only show the close button on the currently active tab. */
			CLOSE_BUTTON_SHOW_ACTIVE_ONLY = 1,
			/** Show the close button on all tabs. */
			CLOSE_BUTTON_SHOW_ALWAYS = 2,
			/** Represents the size of the `CloseButtonDisplayPolicy` enum. */
			CLOSE_BUTTON_MAX = 3,
		}
		enum TabAlign {
			/** Align the tabs to the left. */
			ALIGN_LEFT = 0,
			/** Align the tabs to the center. */
			ALIGN_CENTER = 1,
			/** Align the tabs to the right. */
			ALIGN_RIGHT = 2,
			/** Represents the size of the `TabAlign` enum. */
			ALIGN_MAX = 3,
		}

		/** Align the tabs to the left. */
		const ALIGN_LEFT: TabAlign.ALIGN_LEFT;

		/** Align the tabs to the center. */
		const ALIGN_CENTER: TabAlign.ALIGN_CENTER;

		/** Align the tabs to the right. */
		const ALIGN_RIGHT: TabAlign.ALIGN_RIGHT;

		/** Represents the size of the `TabAlign` enum. */
		const ALIGN_MAX: TabAlign.ALIGN_MAX;

		/** Never show the close buttons. */
		const CLOSE_BUTTON_SHOW_NEVER: CloseButtonDisplayPolicy.CLOSE_BUTTON_SHOW_NEVER;

		/** Only show the close button on the currently active tab. */
		const CLOSE_BUTTON_SHOW_ACTIVE_ONLY: CloseButtonDisplayPolicy.CLOSE_BUTTON_SHOW_ACTIVE_ONLY;

		/** Show the close button on all tabs. */
		const CLOSE_BUTTON_SHOW_ALWAYS: CloseButtonDisplayPolicy.CLOSE_BUTTON_SHOW_ALWAYS;

		/** Represents the size of the `CloseButtonDisplayPolicy` enum. */
		const CLOSE_BUTTON_MAX: CloseButtonDisplayPolicy.CLOSE_BUTTON_MAX;
	}

	/** Multiline text editing control.
	 TextEdit is meant for editing large, multiline text. It also has facilities for editing code, such as syntax highlighting support and multiple levels of undo/redo. */
	class TextEdit extends Control {

		/** String value of the `TextEdit`. */
		text: string;

		/** If `true`, read-only mode is enabled. Existing text cannot be modified and new text cannot be added. */
		readonly: boolean;

		/** If `true`, the line containing the cursor is highlighted. */
		highlight_current_line: boolean;

		/** If `true`, any custom color properties that have been set for this `TextEdit` will be visible. */
		syntax_highlighting: boolean;

		/** If `true`, line numbers are displayed to the left of the text. */
		show_line_numbers: boolean;

		/** If `true`, the "tab" character will have a visible representation. */
		draw_tabs: boolean;

		/** If `true`, the "space" character will have a visible representation. */
		draw_spaces: boolean;

		/** If `true`, the breakpoint gutter is visible. */
		breakpoint_gutter: boolean;

		/** If `true`, the fold gutter is visible. This enables folding groups of indented lines. */
		fold_gutter: boolean;

		/** If `true`, all occurrences of the selected text will be highlighted. */
		highlight_all_occurrences: boolean;

		/** If `true`, custom `font_color_selected` will be used for selected text. */
		override_selected_font_color: boolean;

		/** If `true`, a right-click displays the context menu. */
		context_menu_enabled: boolean;

		/** If `true`, shortcut keys for context menu items are enabled, even if the context menu is disabled. */
		shortcut_keys_enabled: boolean;

		/** If `true`, text can be selected.

		 If `false`, text can not be selected by the user or by the `select` or `select_all` methods. */
		selecting_enabled: boolean;

		/** If `true`, sets the `step` of the scrollbars to `0.25` which results in smoother scrolling. */
		smooth_scrolling: boolean;

		/** Vertical scroll sensitivity. */
		v_scroll_speed: number;

		/** If `true`, all lines that have been set to hidden by `set_line_as_hidden`, will not be visible. */
		hiding_enabled: boolean;

		/** If `true`, enables text wrapping when it goes beyond the edge of what is visible. */
		wrap_enabled: boolean;

		/** The current vertical scroll value. */
		scroll_vertical: number;

		/** The current horizontal scroll value. */
		scroll_horizontal: number;

		/** If `true`, a minimap is shown, providing an outline of your source code. */
		minimap_draw: boolean;

		/** The width, in pixels, of the minimap. */
		minimap_width: number;

		/** If `true`, the caret displays as a rectangle.

		 If `false`, the caret displays as a bar. */
		caret_block_mode: boolean;

		/** If `true`, the caret (visual cursor) blinks. */
		caret_blink: boolean;

		/** Duration (in seconds) of a caret's blinking cycle. */
		caret_blink_speed: number;

		/** If `true`, a right-click moves the cursor at the mouse position before displaying the context menu.

		 If `false`, the context menu disregards mouse location. */
		caret_moving_by_right_click: boolean;

		/**  */
		focus_mode: number;

		/**  */
		mouse_default_cursor_shape: number;

		/** Insert the specified text at the cursor position. */
		insert_text_at_cursor(text: string) : void;

		/** Returns the amount of total lines in the text. */
		get_line_count() : number;

		/** Returns the text of a specific line. */
		get_line(line: number) : string;

		/** Sets the text for a specific line. */
		set_line(line: number, new_text: string) : void;

		/** Centers the viewport on the line the editing cursor is at. This also resets the `scroll_horizontal` value to `0`. */
		center_viewport_to_cursor() : void;

		/** Moves the cursor at the specified `column` index.

		 If `adjust_viewport` is set to `true`, the viewport will center at the cursor position after the move occurs. */
		//@ts-ignore
		cursor_set_column(column: number, adjust_viewport: boolean = true) : void;

		/** Moves the cursor at the specified `line` index.

		 If `adjust_viewport` is set to `true`, the viewport will center at the cursor position after the move occurs.

		 If `can_be_hidden` is set to `true`, the specified `line` can be hidden using `set_line_as_hidden`. */
		//@ts-ignore
		cursor_set_line(line: number, adjust_viewport: boolean = true, can_be_hidden: boolean = true, wrap_index: number = 0) : void;

		/** Returns the column the editing cursor is at. */
		cursor_get_column() : number;

		/** Returns the line the editing cursor is at. */
		cursor_get_line() : number;

		/** Cut's the current selection. */
		cut() : void;

		/** Copy's the current text selection. */
		copy() : void;

		/** Paste the current selection. */
		paste() : void;

		/** Perform selection, from line/column to line/column.

		 If `selecting_enabled` is `false`, no selection will occur. */
		select(from_line: number, from_column: number, to_line: number, to_column: number) : void;

		/** Select all the text.

		 If `selecting_enabled` is `false`, no selection will occur. */
		select_all() : void;

		/** Deselects the current selection. */
		deselect() : void;

		/** Returns `true` if the selection is active. */
		is_selection_active() : boolean;

		/** Returns the selection begin line. */
		get_selection_from_line() : number;

		/** Returns the selection begin column. */
		get_selection_from_column() : number;

		/** Returns the selection end line. */
		get_selection_to_line() : number;

		/** Returns the selection end column. */
		get_selection_to_column() : number;

		/** Returns the text inside the selection. */
		get_selection_text() : string;

		/** Returns a `String` text with the word under the mouse cursor location. */
		get_word_under_cursor() : string;

		/** Perform a search inside the text. Search flags can be specified in the `SearchFlags` enum.

		 Returns an empty `PoolIntArray` if no result was found. Otherwise, the result line and column can be accessed at indices specified in the `SearchResult` enum, e.g:

		 ```gdscript
		 var result = search(key, flags, line, column)
		 if result.size() > 0:
		     # Result found.
		     var res_line = result[TextEdit.SEARCH_RESULT_LINE]
		     var res_column = result[TextEdit.SEARCH_RESULT_COLUMN]
		 ``` */
		search(key: string, flags: number, from_line: number, from_column: number) : PoolIntArray;

		/** Perform undo operation. */
		undo() : void;

		/** Perform redo operation. */
		redo() : void;

		/** Clears the undo history. */
		clear_undo_history() : void;

		/** If `true`, hides the line of the specified index. */
		set_line_as_hidden(line: number, enable: boolean) : void;

		/** Returns whether the line at the specified index is hidden or not. */
		is_line_hidden(line: number) : boolean;

		/** Folds all lines that are possible to be folded (see `can_fold`). */
		fold_all_lines() : void;

		/** Unhide all lines that were previously set to hidden by `set_line_as_hidden`. */
		unhide_all_lines() : void;

		/** Folds the given line, if possible (see `can_fold`). */
		fold_line(line: number) : void;

		/** Unfolds the given line, if folded. */
		unfold_line(line: number) : void;

		/** Toggle the folding of the code block at the given line. */
		toggle_fold_line(line: number) : void;

		/** Returns if the given line is foldable, that is, it has indented lines right below it. */
		can_fold(line: number) : boolean;

		/** Returns whether the line at the specified index is folded or not. */
		is_folded(line: number) : boolean;

		/** Adds a `keyword` and its `Color`. */
		add_keyword_color(keyword: string, color: Color) : void;

		/** Returns whether the specified `keyword` has a color set to it or not. */
		has_keyword_color(keyword: string) : boolean;

		/** Returns the `Color` of the specified `keyword`. */
		get_keyword_color(keyword: string) : Color;

		/** Adds color region (given the delimiters) and its colors. */
		//@ts-ignore
		add_color_region(begin_key: string, end_key: string, color: Color, line_only: boolean = false) : void;

		/** Clears all custom syntax coloring information previously added with `add_color_region` or `add_keyword_color`. */
		clear_colors() : void;

		/** Triggers a right-click menu action by the specified index. See `MenuItems` for a list of available indexes. */
		menu_option(option: number) : void;

		/** Returns the `PopupMenu` of this `TextEdit`. By default, this menu is displayed when right-clicking on the `TextEdit`. */
		get_menu() : PopupMenu;

		/** Returns an array containing the line number of each breakpoint. */
		get_breakpoints() : any[];

		/** Removes all the breakpoints. This will not fire the `breakpoint_toggled` signal. */
		remove_breakpoints() : void;

		/** Getter of `text` property */
		get_text() : string;

		/** Setter of `text` property */
		set_text(p_value: string) : void;

		/** Getter of `readonly` property */
		is_readonly() : boolean;

		/** Setter of `readonly` property */
		set_readonly(p_value: boolean) : void;

		/** Getter of `highlight_current_line` property */
		is_highlight_current_line_enabled() : boolean;

		/** Setter of `highlight_current_line` property */
		set_highlight_current_line(p_value: boolean) : void;

		/** Getter of `syntax_highlighting` property */
		is_syntax_coloring_enabled() : boolean;

		/** Setter of `syntax_highlighting` property */
		set_syntax_coloring(p_value: boolean) : void;

		/** Getter of `show_line_numbers` property */
		is_show_line_numbers_enabled() : boolean;

		/** Setter of `show_line_numbers` property */
		set_show_line_numbers(p_value: boolean) : void;

		/** Getter of `draw_tabs` property */
		is_drawing_tabs() : boolean;

		/** Setter of `draw_tabs` property */
		set_draw_tabs(p_value: boolean) : void;

		/** Getter of `draw_spaces` property */
		is_drawing_spaces() : boolean;

		/** Setter of `draw_spaces` property */
		set_draw_spaces(p_value: boolean) : void;

		/** Getter of `breakpoint_gutter` property */
		is_breakpoint_gutter_enabled() : boolean;

		/** Setter of `breakpoint_gutter` property */
		set_breakpoint_gutter_enabled(p_value: boolean) : void;

		/** Getter of `fold_gutter` property */
		is_drawing_fold_gutter() : boolean;

		/** Setter of `fold_gutter` property */
		set_draw_fold_gutter(p_value: boolean) : void;

		/** Getter of `highlight_all_occurrences` property */
		is_highlight_all_occurrences_enabled() : boolean;

		/** Setter of `highlight_all_occurrences` property */
		set_highlight_all_occurrences(p_value: boolean) : void;

		/** Getter of `override_selected_font_color` property */
		is_overriding_selected_font_color() : boolean;

		/** Setter of `override_selected_font_color` property */
		set_override_selected_font_color(p_value: boolean) : void;

		/** Getter of `context_menu_enabled` property */
		is_context_menu_enabled() : boolean;

		/** Setter of `context_menu_enabled` property */
		set_context_menu_enabled(p_value: boolean) : void;

		/** Getter of `shortcut_keys_enabled` property */
		is_shortcut_keys_enabled() : boolean;

		/** Setter of `shortcut_keys_enabled` property */
		set_shortcut_keys_enabled(p_value: boolean) : void;

		/** Getter of `selecting_enabled` property */
		is_selecting_enabled() : boolean;

		/** Setter of `selecting_enabled` property */
		set_selecting_enabled(p_value: boolean) : void;

		/** Getter of `smooth_scrolling` property */
		is_smooth_scroll_enabled() : boolean;

		/** Setter of `smooth_scrolling` property */
		set_smooth_scroll_enable(p_value: boolean) : void;

		/** Getter of `v_scroll_speed` property */
		get_v_scroll_speed() : number;

		/** Setter of `v_scroll_speed` property */
		set_v_scroll_speed(p_value: number) : void;

		/** Getter of `hiding_enabled` property */
		is_hiding_enabled() : boolean;

		/** Setter of `hiding_enabled` property */
		set_hiding_enabled(p_value: boolean) : void;

		/** Getter of `wrap_enabled` property */
		is_wrap_enabled() : boolean;

		/** Setter of `wrap_enabled` property */
		set_wrap_enabled(p_value: boolean) : void;

		/** Getter of `scroll_vertical` property */
		get_v_scroll() : number;

		/** Setter of `scroll_vertical` property */
		set_v_scroll(p_value: number) : void;

		/** Getter of `scroll_horizontal` property */
		get_h_scroll() : number;

		/** Setter of `scroll_horizontal` property */
		set_h_scroll(p_value: number) : void;

		/** Getter of `minimap_draw` property */
		is_drawing_minimap() : boolean;

		/** Setter of `minimap_draw` property */
		draw_minimap(p_value: boolean) : void;

		/** Getter of `minimap_width` property */
		get_minimap_width() : number;

		/** Setter of `minimap_width` property */
		set_minimap_width(p_value: number) : void;

		/** Getter of `caret_block_mode` property */
		cursor_is_block_mode() : boolean;

		/** Setter of `caret_block_mode` property */
		cursor_set_block_mode(p_value: boolean) : void;

		/** Getter of `caret_blink` property */
		cursor_get_blink_enabled() : boolean;

		/** Setter of `caret_blink` property */
		cursor_set_blink_enabled(p_value: boolean) : void;

		/** Getter of `caret_blink_speed` property */
		cursor_get_blink_speed() : number;

		/** Setter of `caret_blink_speed` property */
		cursor_set_blink_speed(p_value: number) : void;

		/** Getter of `caret_moving_by_right_click` property */
		is_right_click_moving_caret() : boolean;

		/** Setter of `caret_moving_by_right_click` property */
		set_right_click_moves_caret(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;

		/** Getter of `mouse_default_cursor_shape` property */
		get_default_cursor_shape() : number;

		/** Setter of `mouse_default_cursor_shape` property */
		set_default_cursor_shape(p_value: number) : void;
	}
	namespace TextEdit {

		/** Emitted when a breakpoint is placed via the breakpoint gutter. */
		const breakpoint_toggled: 'breakpoint_toggled';

		/** Emitted when the text changes. */
		const text_changed: 'text_changed';

		/**  */
		const symbol_lookup: 'symbol_lookup';

		/** Emitted when the cursor changes. */
		const cursor_changed: 'cursor_changed';

		/** Emitted when the info icon is clicked. */
		const info_clicked: 'info_clicked';

		/**  */
		const request_completion: 'request_completion';
		enum MenuItems {
			/** Cuts (copies and clears) the selected text. */
			MENU_CUT = 0,
			/** Copies the selected text. */
			MENU_COPY = 1,
			/** Pastes the clipboard text over the selected text (or at the cursor's position). */
			MENU_PASTE = 2,
			/** Erases the whole `TextEdit` text. */
			MENU_CLEAR = 3,
			/** Selects the whole `TextEdit` text. */
			MENU_SELECT_ALL = 4,
			/** Undoes the previous action. */
			MENU_UNDO = 5,
			/** Redoes the previous action. */
			MENU_REDO = 6,
			/** Represents the size of the `MenuItems` enum. */
			MENU_MAX = 7,
		}
		enum SearchFlags {
			/** Match case when searching. */
			SEARCH_MATCH_CASE = 1,
			/** Match whole words when searching. */
			SEARCH_WHOLE_WORDS = 2,
			/** Search from end to beginning. */
			SEARCH_BACKWARDS = 4,
		}
		enum SearchResult {
			/** Used to access the result column from `search`. */
			SEARCH_RESULT_COLUMN = 0,
			/** Used to access the result line from `search`. */
			SEARCH_RESULT_LINE = 1,
		}

		/** Match case when searching. */
		const SEARCH_MATCH_CASE: SearchFlags.SEARCH_MATCH_CASE;

		/** Match whole words when searching. */
		const SEARCH_WHOLE_WORDS: SearchFlags.SEARCH_WHOLE_WORDS;

		/** Search from end to beginning. */
		const SEARCH_BACKWARDS: SearchFlags.SEARCH_BACKWARDS;

		/** Used to access the result column from `search`. */
		const SEARCH_RESULT_COLUMN: SearchResult.SEARCH_RESULT_COLUMN;

		/** Used to access the result line from `search`. */
		const SEARCH_RESULT_LINE: SearchResult.SEARCH_RESULT_LINE;

		/** Cuts (copies and clears) the selected text. */
		const MENU_CUT: MenuItems.MENU_CUT;

		/** Copies the selected text. */
		const MENU_COPY: MenuItems.MENU_COPY;

		/** Pastes the clipboard text over the selected text (or at the cursor's position). */
		const MENU_PASTE: MenuItems.MENU_PASTE;

		/** Erases the whole `TextEdit` text. */
		const MENU_CLEAR: MenuItems.MENU_CLEAR;

		/** Selects the whole `TextEdit` text. */
		const MENU_SELECT_ALL: MenuItems.MENU_SELECT_ALL;

		/** Undoes the previous action. */
		const MENU_UNDO: MenuItems.MENU_UNDO;

		/** Redoes the previous action. */
		const MENU_REDO: MenuItems.MENU_REDO;

		/** Represents the size of the `MenuItems` enum. */
		const MENU_MAX: MenuItems.MENU_MAX;
	}

	/** 
	  */
	class TextFile extends Resource {
	}
	namespace TextFile {
	}

	/** Texture for 2D and 3D.
	 A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D `Sprite` or GUI `Control`.

	 Textures are often created by loading them from a file. See `@GDScript.load`.

	 `Texture` is a base for other resources. It cannot be used directly. */
	class Texture extends Resource {

		/** The texture's `Flags`. `Flags` are used to set various properties of the `Texture`. */
		flags: number;

		/** Returns the texture width. */
		get_width() : number;

		/** Returns the texture height. */
		get_height() : number;

		/** Returns the texture size. */
		get_size() : Vector2;

		/** Returns `true` if this `Texture` has an alpha channel. */
		has_alpha() : boolean;

		/** Draws the texture using a `CanvasItem` with the `VisualServer` API at the specified `position`. Equivalent to `VisualServer.canvas_item_add_texture_rect` with a rect at `position` and the size of this `Texture`. */
		//@ts-ignore
		draw(canvas_item: RID, position: Vector2, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: Texture = null) : void;

		/** Draws the texture using a `CanvasItem` with the `VisualServer` API. Equivalent to `VisualServer.canvas_item_add_texture_rect`. */
		//@ts-ignore
		draw_rect(canvas_item: RID, rect: Rect2, tile: boolean, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: Texture = null) : void;

		/** Draws a part of the texture using a `CanvasItem` with the `VisualServer` API. Equivalent to `VisualServer.canvas_item_add_texture_rect_region`. */
		//@ts-ignore
		draw_rect_region(canvas_item: RID, rect: Rect2, src_rect: Rect2, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: Texture = null, clip_uv: boolean = true) : void;

		/** Returns an `Image` with the data from this `Texture`. `Image`s can be accessed and manipulated directly. */
		get_data() : Image;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;
	}
	namespace Texture {
		enum Flags {
			/** Default flags. `FLAG_MIPMAPS`, `FLAG_REPEAT` and `FLAG_FILTER` are enabled. */
			FLAGS_DEFAULT = 7,
			/** Generates mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio. */
			FLAG_MIPMAPS = 1,
			/** Repeats the texture (instead of clamp to edge). */
			FLAG_REPEAT = 2,
			/** Uses a magnifying filter, to enable smooth zooming in of the texture. */
			FLAG_FILTER = 4,
			/** Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.

			 This results in better-looking textures when viewed from oblique angles. */
			FLAG_ANISOTROPIC_FILTER = 8,
			/** Converts the texture to the sRGB color space. */
			FLAG_CONVERT_TO_LINEAR = 16,
			/** Repeats the texture with alternate sections mirrored. */
			FLAG_MIRRORED_REPEAT = 32,
			/** Texture is a video surface. */
			FLAG_VIDEO_SURFACE = 2048,
		}

		/** Default flags. `FLAG_MIPMAPS`, `FLAG_REPEAT` and `FLAG_FILTER` are enabled. */
		const FLAGS_DEFAULT: Flags.FLAGS_DEFAULT;

		/** Generates mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio. */
		const FLAG_MIPMAPS: Flags.FLAG_MIPMAPS;

		/** Repeats the texture (instead of clamp to edge). */
		const FLAG_REPEAT: Flags.FLAG_REPEAT;

		/** Uses a magnifying filter, to enable smooth zooming in of the texture. */
		const FLAG_FILTER: Flags.FLAG_FILTER;

		/** Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.

		 This results in better-looking textures when viewed from oblique angles. */
		const FLAG_ANISOTROPIC_FILTER: Flags.FLAG_ANISOTROPIC_FILTER;

		/** Converts the texture to the sRGB color space. */
		const FLAG_CONVERT_TO_LINEAR: Flags.FLAG_CONVERT_TO_LINEAR;

		/** Repeats the texture with alternate sections mirrored. */
		const FLAG_MIRRORED_REPEAT: Flags.FLAG_MIRRORED_REPEAT;

		/** Texture is a video surface. */
		const FLAG_VIDEO_SURFACE: Flags.FLAG_VIDEO_SURFACE;
	}

	/** Texture with 3 dimensions.
	 Texture3D is a 3-dimensional texture that has a width, height, and depth. */
	class Texture3D extends TextureLayered {

		/**  */
		data: object;

		/** Getter of `data` property */
		_get_data() : object;

		/** Setter of `data` property */
		_set_data(p_value: object) : void;
	}
	namespace Texture3D {
	}

	/** Array of textures stored in a single primitive.
	 `TextureArray`s store an array of images in a single `Texture` primitive. Each layer of the texture array has its own mipmap chain. This makes it is a good alternative to texture atlases. */
	class TextureArray extends TextureLayered {
	}
	namespace TextureArray {
	}

	/** Texture-based button. Supports Pressed, Hover, Disabled and Focused states.
	 `TextureButton` has the same functionality as `Button`, except it uses sprites instead of Godot's `Theme` resource. It is faster to create, but it doesn't support localization like more complex `Control`s.

	 The "normal" state must contain a texture (`texture_normal`); other textures are optional. */
	class TextureButton extends BaseButton {

		/** Texture to display by default, when the node is **not** in the disabled, focused, hover or pressed state. */
		texture_normal: Texture;

		/** Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the Enter key or if the player presses the `BaseButton.shortcut` key. */
		texture_pressed: Texture;

		/** Texture to display when the mouse hovers the node. */
		texture_hover: Texture;

		/** Texture to display when the node is disabled. See `BaseButton.disabled`. */
		texture_disabled: Texture;

		/** Texture to display when the node has mouse or keyboard focus. */
		texture_focused: Texture;

		/** Pure black and white `BitMap` image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes. */
		texture_click_mask: BitMap;

		/** If `true`, the texture stretches to the edges of the node's bounding rectangle using the `stretch_mode`. If `false`, the texture will not scale with the node. */
		expand: boolean;

		/** Controls the texture's behavior when you resize the node's bounding rectangle, **only if** `expand` is `true`. Set it to one of the `StretchMode` constants. See the constants to learn more. */
		stretch_mode: number;

		/** Getter of `texture_normal` property */
		get_normal_texture() : Texture;

		/** Setter of `texture_normal` property */
		set_normal_texture(p_value: Texture) : void;

		/** Getter of `texture_pressed` property */
		get_pressed_texture() : Texture;

		/** Setter of `texture_pressed` property */
		set_pressed_texture(p_value: Texture) : void;

		/** Getter of `texture_hover` property */
		get_hover_texture() : Texture;

		/** Setter of `texture_hover` property */
		set_hover_texture(p_value: Texture) : void;

		/** Getter of `texture_disabled` property */
		get_disabled_texture() : Texture;

		/** Setter of `texture_disabled` property */
		set_disabled_texture(p_value: Texture) : void;

		/** Getter of `texture_focused` property */
		get_focused_texture() : Texture;

		/** Setter of `texture_focused` property */
		set_focused_texture(p_value: Texture) : void;

		/** Getter of `texture_click_mask` property */
		get_click_mask() : BitMap;

		/** Setter of `texture_click_mask` property */
		set_click_mask(p_value: BitMap) : void;

		/** Getter of `expand` property */
		get_expand() : boolean;

		/** Setter of `expand` property */
		set_expand(p_value: boolean) : void;

		/** Getter of `stretch_mode` property */
		get_stretch_mode() : number;

		/** Setter of `stretch_mode` property */
		set_stretch_mode(p_value: number) : void;
	}
	namespace TextureButton {
		enum StretchMode {
			/** Scale to fit the node's bounding rectangle. */
			STRETCH_SCALE = 0,
			/** Tile inside the node's bounding rectangle. */
			STRETCH_TILE = 1,
			/** The texture keeps its original size and stays in the bounding rectangle's top-left corner. */
			STRETCH_KEEP = 2,
			/** The texture keeps its original size and stays centered in the node's bounding rectangle. */
			STRETCH_KEEP_CENTERED = 3,
			/** Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio. */
			STRETCH_KEEP_ASPECT = 4,
			/** Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio. */
			STRETCH_KEEP_ASPECT_CENTERED = 5,
			/** Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits. */
			STRETCH_KEEP_ASPECT_COVERED = 6,
		}

		/** Scale to fit the node's bounding rectangle. */
		const STRETCH_SCALE: StretchMode.STRETCH_SCALE;

		/** Tile inside the node's bounding rectangle. */
		const STRETCH_TILE: StretchMode.STRETCH_TILE;

		/** The texture keeps its original size and stays in the bounding rectangle's top-left corner. */
		const STRETCH_KEEP: StretchMode.STRETCH_KEEP;

		/** The texture keeps its original size and stays centered in the node's bounding rectangle. */
		const STRETCH_KEEP_CENTERED: StretchMode.STRETCH_KEEP_CENTERED;

		/** Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio. */
		const STRETCH_KEEP_ASPECT: StretchMode.STRETCH_KEEP_ASPECT;

		/** Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio. */
		const STRETCH_KEEP_ASPECT_CENTERED: StretchMode.STRETCH_KEEP_ASPECT_CENTERED;

		/** Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits. */
		const STRETCH_KEEP_ASPECT_COVERED: StretchMode.STRETCH_KEEP_ASPECT_COVERED;
	}

	/** Base class for 3D texture types.
	 Base class for `Texture3D` and `TextureArray`. Cannot be used directly, but contains all the functions necessary for accessing and using `Texture3D` and `TextureArray`. Data is set on a per-layer basis. For `Texture3D`s, the layer sepcifies the depth or Z-index, they can be treated as a bunch of 2D slices. Similarly, for `TextureArray`s, the layer specifies the array layer. */
	class TextureLayered extends Resource {

		/** Specifies which `Flags` apply to this texture. */
		flags: number;

		/** Returns a dictionary with all the data used by this texture. */
		data: object;

		/** Returns the current format being used by this texture. See `Image.Format` for details. */
		get_format() : number;

		/** Returns the width of the texture. Width is typically represented by the X-axis. */
		get_width() : number;

		/** Returns the height of the texture. Height is typically represented by the Y-axis. */
		get_height() : number;

		/** Returns the depth of the texture. Depth is the 3rd dimension (typically Z-axis). */
		get_depth() : number;

		/** Creates the `Texture3D` or `TextureArray` with specified `width`, `height`, and `depth`. See `Image.Format` for `format` options. See `Flags` enumerator for `flags` options. */
		//@ts-ignore
		create(width: number, height: number, depth: number, format: Image.Format, flags: number = 4) : void;

		/** Sets the data for the specified layer. Data takes the form of a 2-dimensional `Image` resource. */
		set_layer_data(image: Image, layer: number) : void;

		/** Returns an `Image` resource with the data from specified `layer`. */
		get_layer_data(layer: number) : Image;

		/** Partially sets the data for a specified `layer` by overwriting using the data of the specified `image`. `x_offset` and `y_offset` determine where the `Image` is "stamped" over the texture. The `image` must fit within the texture. */
		//@ts-ignore
		set_data_partial(image: Image, x_offset: number, y_offset: number, layer: number, mipmap: number = 0) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;

		/** Getter of `data` property */
		_get_data() : object;

		/** Setter of `data` property */
		_set_data(p_value: object) : void;
	}
	namespace TextureLayered {
		enum Flags {
			/** Texture will generate mipmaps on creation. */
			FLAG_MIPMAPS = 1,
			/** Texture will repeat when UV used is outside the 0-1 range. */
			FLAG_REPEAT = 2,
			/** Use filtering when reading from texture. Filtering smooths out pixels. Turning filtering off is slightly faster and more appropriate when you need access to individual pixels. */
			FLAG_FILTER = 4,
			/** Equivalent to `FLAG_FILTER`. */
			FLAGS_DEFAULT = 4,
		}

		/** Texture will generate mipmaps on creation. */
		const FLAG_MIPMAPS: Flags.FLAG_MIPMAPS;

		/** Texture will repeat when UV used is outside the 0-1 range. */
		const FLAG_REPEAT: Flags.FLAG_REPEAT;

		/** Use filtering when reading from texture. Filtering smooths out pixels. Turning filtering off is slightly faster and more appropriate when you need access to individual pixels. */
		const FLAG_FILTER: Flags.FLAG_FILTER;

		/** Equivalent to `FLAG_FILTER`. */
		const FLAGS_DEFAULT: Flags.FLAGS_DEFAULT;
	}

	/** Texture-based progress bar. Useful for loading screens and life or stamina bars.
	 TextureProgress works like `ProgressBar`, but uses up to 3 textures instead of Godot's `Theme` resource. It can be used to create horizontal, vertical and radial progress bars. */
	class TextureProgress extends Range {

		/** `Texture` that draws under the progress bar. The bar's background. */
		texture_under: Texture;

		/** `Texture` that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of `texture_progress`. */
		texture_over: Texture;

		/** `Texture` that clips based on the node's `value` and `fill_mode`. As `value` increased, the texture fills up. It shows entirely when `value` reaches `max_value`. It doesn't show at all if `value` is equal to `min_value`.

		 The `value` property comes from `Range`. See `Range.value`, `Range.min_value`, `Range.max_value`. */
		texture_progress: Texture;

		/** The fill direction. See `FillMode` for possible values. */
		fill_mode: number;

		/** Multiplies the color of the bar's `texture_under` texture. */
		tint_under: Color;

		/** Multiplies the color of the bar's `texture_over` texture. The effect is similar to `CanvasItem.modulate`, except it only affects this specific texture instead of the entire node. */
		tint_over: Color;

		/** Multiplies the color of the bar's `texture_progress` texture. */
		tint_progress: Color;

		/** Starting angle for the fill of `texture_progress` if `fill_mode` is `FILL_CLOCKWISE` or `FILL_COUNTER_CLOCKWISE`. When the node's `value` is equal to its `min_value`, the texture doesn't show up at all. When the `value` increases, the texture fills and tends towards `radial_fill_degrees`. */
		radial_initial_angle: number;

		/** Upper limit for the fill of `texture_progress` if `fill_mode` is `FILL_CLOCKWISE` or `FILL_COUNTER_CLOCKWISE`. When the node's `value` is equal to its `max_value`, the texture fills up to this angle.

		 See `Range.value`, `Range.max_value`. */
		radial_fill_degrees: number;

		/** Offsets `texture_progress` if `fill_mode` is `FILL_CLOCKWISE` or `FILL_COUNTER_CLOCKWISE`. */
		radial_center_offset: Vector2;

		/** If `true`, Godot treats the bar's textures like in `NinePatchRect`. Use the `stretch_margin_*` properties like `stretch_margin_bottom` to set up the nine patch's 3×3 grid. When using a radial `fill_mode`, this setting will enable stretching. */
		nine_patch_stretch: boolean;

		/** The width of the 9-patch's left column. */
		stretch_margin_left: number;

		/** The height of the 9-patch's top row. */
		stretch_margin_top: number;

		/** The width of the 9-patch's right column. */
		stretch_margin_right: number;

		/** The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. */
		stretch_margin_bottom: number;

		/**  */
		mouse_filter: number;

		/**  */
		set_stretch_margin(margin: Margin, value: number) : void;

		/**  */
		get_stretch_margin(margin: Margin) : number;

		/** Getter of `texture_under` property */
		get_under_texture() : Texture;

		/** Setter of `texture_under` property */
		set_under_texture(p_value: Texture) : void;

		/** Getter of `texture_over` property */
		get_over_texture() : Texture;

		/** Setter of `texture_over` property */
		set_over_texture(p_value: Texture) : void;

		/** Getter of `texture_progress` property */
		get_progress_texture() : Texture;

		/** Setter of `texture_progress` property */
		set_progress_texture(p_value: Texture) : void;

		/** Getter of `fill_mode` property */
		get_fill_mode() : number;

		/** Setter of `fill_mode` property */
		set_fill_mode(p_value: number) : void;

		/** Getter of `tint_under` property */
		get_tint_under() : Color;

		/** Setter of `tint_under` property */
		set_tint_under(p_value: Color) : void;

		/** Getter of `tint_over` property */
		get_tint_over() : Color;

		/** Setter of `tint_over` property */
		set_tint_over(p_value: Color) : void;

		/** Getter of `tint_progress` property */
		get_tint_progress() : Color;

		/** Setter of `tint_progress` property */
		set_tint_progress(p_value: Color) : void;

		/** Getter of `radial_initial_angle` property */
		get_radial_initial_angle() : number;

		/** Setter of `radial_initial_angle` property */
		set_radial_initial_angle(p_value: number) : void;

		/** Getter of `radial_fill_degrees` property */
		get_fill_degrees() : number;

		/** Setter of `radial_fill_degrees` property */
		set_fill_degrees(p_value: number) : void;

		/** Getter of `radial_center_offset` property */
		get_radial_center_offset() : Vector2;

		/** Setter of `radial_center_offset` property */
		set_radial_center_offset(p_value: Vector2) : void;

		/** Getter of `nine_patch_stretch` property */
		get_nine_patch_stretch() : boolean;

		/** Setter of `nine_patch_stretch` property */
		set_nine_patch_stretch(p_value: boolean) : void;

		/** Getter of `stretch_margin_left` property */
		get_stretch_margin() : number;

		/** Setter of `stretch_margin_left` property */
		set_stretch_margin(p_value: number) : void;

		/** Getter of `stretch_margin_top` property */
		get_stretch_margin() : number;

		/** Setter of `stretch_margin_top` property */
		set_stretch_margin(p_value: number) : void;

		/** Getter of `stretch_margin_right` property */
		get_stretch_margin() : number;

		/** Setter of `stretch_margin_right` property */
		set_stretch_margin(p_value: number) : void;

		/** Getter of `stretch_margin_bottom` property */
		get_stretch_margin() : number;

		/** Setter of `stretch_margin_bottom` property */
		set_stretch_margin(p_value: number) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;
	}
	namespace TextureProgress {
		enum FillMode {
			/** The `texture_progress` fills from left to right. */
			FILL_LEFT_TO_RIGHT = 0,
			/** The `texture_progress` fills from right to left. */
			FILL_RIGHT_TO_LEFT = 1,
			/** The `texture_progress` fills from top to bottom. */
			FILL_TOP_TO_BOTTOM = 2,
			/** The `texture_progress` fills from bottom to top. */
			FILL_BOTTOM_TO_TOP = 3,
			/** Turns the node into a radial bar. The `texture_progress` fills clockwise. See `radial_center_offset`, `radial_initial_angle` and `radial_fill_degrees` to control the way the bar fills up. */
			FILL_CLOCKWISE = 4,
			/** Turns the node into a radial bar. The `texture_progress` fills counterclockwise. See `radial_center_offset`, `radial_initial_angle` and `radial_fill_degrees` to control the way the bar fills up. */
			FILL_COUNTER_CLOCKWISE = 5,
			/** The `texture_progress` fills from the center, expanding both towards the left and the right. */
			FILL_BILINEAR_LEFT_AND_RIGHT = 6,
			/** The `texture_progress` fills from the center, expanding both towards the top and the bottom. */
			FILL_BILINEAR_TOP_AND_BOTTOM = 7,
			/** Turns the node into a radial bar. The `texture_progress` fills radially from the center, expanding both clockwise and counterclockwise. See `radial_center_offset`, `radial_initial_angle` and `radial_fill_degrees` to control the way the bar fills up. */
			FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE = 8,
		}

		/** The `texture_progress` fills from left to right. */
		const FILL_LEFT_TO_RIGHT: FillMode.FILL_LEFT_TO_RIGHT;

		/** The `texture_progress` fills from right to left. */
		const FILL_RIGHT_TO_LEFT: FillMode.FILL_RIGHT_TO_LEFT;

		/** The `texture_progress` fills from top to bottom. */
		const FILL_TOP_TO_BOTTOM: FillMode.FILL_TOP_TO_BOTTOM;

		/** The `texture_progress` fills from bottom to top. */
		const FILL_BOTTOM_TO_TOP: FillMode.FILL_BOTTOM_TO_TOP;

		/** Turns the node into a radial bar. The `texture_progress` fills clockwise. See `radial_center_offset`, `radial_initial_angle` and `radial_fill_degrees` to control the way the bar fills up. */
		const FILL_CLOCKWISE: FillMode.FILL_CLOCKWISE;

		/** Turns the node into a radial bar. The `texture_progress` fills counterclockwise. See `radial_center_offset`, `radial_initial_angle` and `radial_fill_degrees` to control the way the bar fills up. */
		const FILL_COUNTER_CLOCKWISE: FillMode.FILL_COUNTER_CLOCKWISE;

		/** The `texture_progress` fills from the center, expanding both towards the left and the right. */
		const FILL_BILINEAR_LEFT_AND_RIGHT: FillMode.FILL_BILINEAR_LEFT_AND_RIGHT;

		/** The `texture_progress` fills from the center, expanding both towards the top and the bottom. */
		const FILL_BILINEAR_TOP_AND_BOTTOM: FillMode.FILL_BILINEAR_TOP_AND_BOTTOM;

		/** Turns the node into a radial bar. The `texture_progress` fills radially from the center, expanding both clockwise and counterclockwise. See `radial_center_offset`, `radial_initial_angle` and `radial_fill_degrees` to control the way the bar fills up. */
		const FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE: FillMode.FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE;
	}

	/** Control for drawing textures.
	 Used to draw icons and sprites in a user interface. The texture's placement can be controlled with the `stretch_mode` property. It can scale, tile, or stay centered inside its bounding rectangle. */
	class TextureRect extends Control {

		/** The node's `Texture` resource. */
		texture: Texture;

		/** If `true`, the texture scales to fit its bounding rectangle. */
		expand: boolean;

		/** Controls the texture's behavior when resizing the node's bounding rectangle. See `StretchMode`. */
		stretch_mode: number;

		/** If `true`, texture is flipped horizontally. */
		flip_h: boolean;

		/** If `true`, texture is flipped vertically. */
		flip_v: boolean;

		/**  */
		mouse_filter: number;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `expand` property */
		has_expand() : boolean;

		/** Setter of `expand` property */
		set_expand(p_value: boolean) : void;

		/** Getter of `stretch_mode` property */
		get_stretch_mode() : number;

		/** Setter of `stretch_mode` property */
		set_stretch_mode(p_value: number) : void;

		/** Getter of `flip_h` property */
		is_flipped_h() : boolean;

		/** Setter of `flip_h` property */
		set_flip_h(p_value: boolean) : void;

		/** Getter of `flip_v` property */
		is_flipped_v() : boolean;

		/** Setter of `flip_v` property */
		set_flip_v(p_value: boolean) : void;

		/** Getter of `mouse_filter` property */
		get_mouse_filter() : number;

		/** Setter of `mouse_filter` property */
		set_mouse_filter(p_value: number) : void;
	}
	namespace TextureRect {
		enum StretchMode {
			/** Scale to fit the node's bounding rectangle, only if `expand` is `true`. Default `stretch_mode`, for backwards compatibility. Until you set `expand` to `true`, the texture will behave like `STRETCH_KEEP`. */
			STRETCH_SCALE_ON_EXPAND = 0,
			/** Scale to fit the node's bounding rectangle. */
			STRETCH_SCALE = 1,
			/** Tile inside the node's bounding rectangle. */
			STRETCH_TILE = 2,
			/** The texture keeps its original size and stays in the bounding rectangle's top-left corner. */
			STRETCH_KEEP = 3,
			/** The texture keeps its original size and stays centered in the node's bounding rectangle. */
			STRETCH_KEEP_CENTERED = 4,
			/** Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio. */
			STRETCH_KEEP_ASPECT = 5,
			/** Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio. */
			STRETCH_KEEP_ASPECT_CENTERED = 6,
			/** Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits. */
			STRETCH_KEEP_ASPECT_COVERED = 7,
		}

		/** Scale to fit the node's bounding rectangle, only if `expand` is `true`. Default `stretch_mode`, for backwards compatibility. Until you set `expand` to `true`, the texture will behave like `STRETCH_KEEP`. */
		const STRETCH_SCALE_ON_EXPAND: StretchMode.STRETCH_SCALE_ON_EXPAND;

		/** Scale to fit the node's bounding rectangle. */
		const STRETCH_SCALE: StretchMode.STRETCH_SCALE;

		/** Tile inside the node's bounding rectangle. */
		const STRETCH_TILE: StretchMode.STRETCH_TILE;

		/** The texture keeps its original size and stays in the bounding rectangle's top-left corner. */
		const STRETCH_KEEP: StretchMode.STRETCH_KEEP;

		/** The texture keeps its original size and stays centered in the node's bounding rectangle. */
		const STRETCH_KEEP_CENTERED: StretchMode.STRETCH_KEEP_CENTERED;

		/** Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio. */
		const STRETCH_KEEP_ASPECT: StretchMode.STRETCH_KEEP_ASPECT;

		/** Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio. */
		const STRETCH_KEEP_ASPECT_CENTERED: StretchMode.STRETCH_KEEP_ASPECT_CENTERED;

		/** Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits. */
		const STRETCH_KEEP_ASPECT_COVERED: StretchMode.STRETCH_KEEP_ASPECT_COVERED;
	}

	/** Theme for controls.
	 A theme for skinning controls. Controls can be skinned individually, but for complex applications, it's more practical to just create a global theme that defines everything. This theme can be applied to any `Control`; the Control and its children will automatically use it.

	 Theme resources can alternatively be loaded by writing them in a `.theme` file, see the documentation for more information. */
	class Theme extends Resource {

		/** The theme's default font. */
		default_font: Font;

		/** Sets the theme's icon `Texture` to `texture` at `name` in `type`.

		 Does nothing if the theme does not have `type`. */
		set_icon(name: string, type: string, texture: Texture) : void;

		/** Returns the icon `Texture` at `name` if the theme has `type`. */
		get_icon(name: string, type: string) : Texture;

		/** Returns `true` if icon `Texture` with `name` is in `type`.

		 Returns `false` if the theme does not have `type`. */
		has_icon(name: string, type: string) : boolean;

		/** Clears the icon at `name` if the theme has `type`. */
		clear_icon(name: string, type: string) : void;

		/** Returns all the icons as a `PoolStringArray` filled with each `Texture`'s name, for use in `get_icon`, if the theme has `type`. */
		get_icon_list(type: string) : PoolStringArray;

		/** Sets theme's `StyleBox` to `stylebox` at `name` in `type`.

		 Does nothing if the theme does not have `type`. */
		set_stylebox(name: string, type: string, texture: StyleBox) : void;

		/** Returns the icon `StyleBox` at `name` if the theme has `type`. */
		get_stylebox(name: string, type: string) : StyleBox;

		/** Returns `true` if `StyleBox` with `name` is in `type`.

		 Returns `false` if the theme does not have `type`. */
		has_stylebox(name: string, type: string) : boolean;

		/** Clears `StyleBox` at `name` if the theme has `type`. */
		clear_stylebox(name: string, type: string) : void;

		/** Returns all the `StyleBox`s as a `PoolStringArray` filled with each `StyleBox`'s name, for use in `get_stylebox`, if the theme has `type`. */
		get_stylebox_list(type: string) : PoolStringArray;

		/** Returns all the `StyleBox` types as a `PoolStringArray` filled with each `StyleBox`'s type, for use in `get_stylebox` and/or `get_stylebox_list`, if the theme has `type`. */
		get_stylebox_types() : PoolStringArray;

		/** Sets the theme's `Font` to `font` at `name` in `type`.

		 Does nothing if the theme does not have `type`. */
		set_font(name: string, type: string, font: Font) : void;

		/** Returns the `Font` at `name` if the theme has `type`. */
		get_font(name: string, type: string) : Font;

		/** Returns `true` if `Font` with `name` is in `type`.

		 Returns `false` if the theme does not have `type`. */
		has_font(name: string, type: string) : boolean;

		/** Clears the `Font` at `name` if the theme has `type`. */
		clear_font(name: string, type: string) : void;

		/** Returns all the `Font`s as a `PoolStringArray` filled with each `Font`'s name, for use in `get_font`, if the theme has `type`. */
		get_font_list(type: string) : PoolStringArray;

		/** Sets the theme's `Color` to `color` at `name` in `type`.

		 Does nothing if the theme does not have `type`. */
		set_color(name: string, type: string, color: Color) : void;

		/** Returns the `Color` at `name` if the theme has `type`. */
		get_color(name: string, type: string) : Color;

		/** Returns `true` if `Color` with `name` is in `type`.

		 Returns `false` if the theme does not have `type`. */
		has_color(name: string, type: string) : boolean;

		/** Clears the `Color` at `name` if the theme has `type`. */
		clear_color(name: string, type: string) : void;

		/** Returns all the `Color`s as a `PoolStringArray` filled with each `Color`'s name, for use in `get_color`, if the theme has `type`. */
		get_color_list(type: string) : PoolStringArray;

		/** Sets the theme's constant to `constant` at `name` in `type`.

		 Does nothing if the theme does not have `type`. */
		set_constant(name: string, type: string, constant: number) : void;

		/** Returns the constant at `name` if the theme has `type`. */
		get_constant(name: string, type: string) : number;

		/** Returns `true` if constant with `name` is in `type`.

		 Returns `false` if the theme does not have `type`. */
		has_constant(name: string, type: string) : boolean;

		/** Clears the constant at `name` if the theme has `type`. */
		clear_constant(name: string, type: string) : void;

		/** Returns all the constants as a `PoolStringArray` filled with each constant's name, for use in `get_constant`, if the theme has `type`. */
		get_constant_list(type: string) : PoolStringArray;

		/** Clears all values on the theme. */
		clear() : void;

		/** Returns all the types in `type` as a `PoolStringArray` for use in any of the `get_*` functions, if the theme has `type`. */
		get_type_list(type: string) : PoolStringArray;

		/** Sets the theme's values to a copy of the default theme values. */
		copy_default_theme() : void;

		/** Sets the theme's values to a copy of a given theme. */
		copy_theme(other: Theme) : void;

		/** Getter of `default_font` property */
		get_default_font() : Font;

		/** Setter of `default_font` property */
		set_default_font(p_value: Font) : void;
	}
	namespace Theme {
	}

	/** Node for 2D tile-based maps.
	 Node for 2D tile-based maps. Tilemaps use a `TileSet` which contain a list of tiles (textures plus optional collision, navigation, and/or occluder shapes) which are used to create grid-based maps. */
	class TileMap extends Node2D {

		/** The TileMap orientation mode. See `Mode` for possible values. */
		mode: number;

		/** The assigned `TileSet`. */
		tile_set: TileSet;

		/** The TileMap's cell size. */
		cell_size: Vector2;

		/** The TileMap's quadrant size. Optimizes drawing by batching, using chunks of this size. */
		cell_quadrant_size: number;

		/** The custom `Transform2D` to be applied to the TileMap's cells. */
		cell_custom_transform: Transform2D;

		/** Amount to offset alternating tiles. See `HalfOffset` for possible values. */
		cell_half_offset: number;

		/** Position for tile origin. See `TileOrigin` for possible values. */
		cell_tile_origin: number;

		/** If `true`, the TileMap's children will be drawn in order of their Y coordinate. */
		cell_y_sort: boolean;

		/** If `true`, the compatibility with the tilemaps made in Godot 3.1 or earlier is maintained (textures move when the tile origin changes and rotate if the texture size is not homogeneous). This mode presents problems when doing `flip_h`, `flip_v` and `transpose` tile operations on non-homogeneous isometric tiles (e.g. 2:1), in which the texture could not coincide with the collision, thus it is not recommended for isometric or non-square tiles.

		 If `false`, the textures do not move when doing `flip_h`, `flip_v` operations if no offset is used, nor when changing the tile origin.

		 The compatibility mode doesn't work with the `centered_textures` option, because displacing textures with the `cell_tile_origin` option or in irregular tiles is not relevant when centering those textures. */
		compatibility_mode: boolean;

		/** If `true`, the textures will be centered in the middle of each tile. This is useful for certain isometric or top-down modes when textures are made larger or smaller than the tiles (e.g. to avoid flickering on tile edges). The offset is still applied, but from the center of the tile. If used, `compatibility_mode` is ignored.

		 If `false`, the texture position start in the top-left corner unless `compatibility_mode` is enabled. */
		centered_textures: boolean;

		/** If `true`, the cell's UVs will be clipped. */
		cell_clip_uv: boolean;

		/** If `true`, this tilemap's collision shape will be added to the collision shape of the parent. The parent has to be a `CollisionObject2D`. */
		collision_use_parent: boolean;

		/** If `true`, TileMap collisions will be handled as a kinematic body. If `false`, collisions will be handled as static body. */
		collision_use_kinematic: boolean;

		/** Friction value for static body collisions (see `collision_use_kinematic`). */
		collision_friction: number;

		/** Bounce value for static body collisions (see `collision_use_kinematic`). */
		collision_bounce: number;

		/** The collision layer(s) for all colliders in the TileMap. */
		collision_layer: number;

		/** The collision mask(s) for all colliders in the TileMap. */
		collision_mask: number;

		/** The light mask assigned to all light occluders in the TileMap. The TileSet's light occluders will cast shadows only from Light2D(s) that have the same light mask(s). */
		occluder_light_mask: number;

		/** Sets the given collision layer bit. */
		set_collision_layer_bit(bit: number, value: boolean) : void;

		/** Returns `true` if the given collision layer bit is set. */
		get_collision_layer_bit(bit: number) : boolean;

		/** Sets the given collision mask bit. */
		set_collision_mask_bit(bit: number, value: boolean) : void;

		/** Returns `true` if the given collision mask bit is set. */
		get_collision_mask_bit(bit: number) : boolean;

		/** Sets the tile index for the cell given by a Vector2.

		 An index of `-1` clears the cell.

		 Optionally, the tile can also be flipped, transposed, or given autotile coordinates. The autotile coordinate refers to the column and row of the subtile.

		 **Note:** Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.

		 If you need these to be immediately updated, you can call `update_dirty_quadrants`.

		 Overriding this method also overrides it internally, allowing custom logic to be implemented when tiles are placed/removed:

		 ```gdscript
		 func set_cell(x, y, tile, flip_x, flip_y, transpose, autotile_coord)
		     # Write your custom logic here.
		     # To call the default method:
		     .set_cell(x, y, tile, flip_x, flip_y, transpose, autotile_coord)
		 ``` */
		//@ts-ignore
		set_cell(x: number, y: number, tile: number, flip_x: boolean = false, flip_y: boolean = false, transpose: boolean = false, autotile_coord: Vector2 = Vector2( 0, 0 )) : void;

		/** Sets the tile index for the given cell.

		 An index of `-1` clears the cell.

		 Optionally, the tile can also be flipped or transposed.

		 **Note:** Data such as navigation polygons and collision shapes are not immediately updated for performance reasons.

		 If you need these to be immediately updated, you can call `update_dirty_quadrants`. */
		//@ts-ignore
		set_cellv(position: Vector2, tile: number, flip_x: boolean = false, flip_y: boolean = false, transpose: boolean = false) : void;

		/** Returns the tile index of the given cell. If no tile exists in the cell, returns `INVALID_CELL`. */
		get_cell(x: number, y: number) : number;

		/** Returns the tile index of the cell given by a Vector2. If no tile exists in the cell, returns `INVALID_CELL`. */
		get_cellv(position: Vector2) : number;

		/** Returns `true` if the given cell is flipped in the X axis. */
		is_cell_x_flipped(x: number, y: number) : boolean;

		/** Returns `true` if the given cell is flipped in the Y axis. */
		is_cell_y_flipped(x: number, y: number) : boolean;

		/** Returns `true` if the given cell is transposed, i.e. the X and Y axes are swapped. */
		is_cell_transposed(x: number, y: number) : boolean;

		/** Returns the coordinate (subtile column and row) of the autotile variation in the tileset. Returns a zero vector if the cell doesn't have autotiling. */
		get_cell_autotile_coord(x: number, y: number) : Vector2;

		/** Clears cells that do not exist in the tileset. */
		fix_invalid_tiles() : void;

		/** Clears all cells. */
		clear() : void;

		/** Returns a `Vector2` array with the positions of all cells containing a tile from the tileset (i.e. a tile index different from `-1`). */
		get_used_cells() : any[];

		/** Returns an array of all cells with the given tile index specified in `id`. */
		get_used_cells_by_id(id: number) : any[];

		/** Returns a rectangle enclosing the used (non-empty) tiles of the map. */
		get_used_rect() : Rect2;

		/** Returns the global position corresponding to the given tilemap (grid-based) coordinates.

		 Optionally, the tilemap's half offset can be ignored. */
		//@ts-ignore
		map_to_world(map_position: Vector2, ignore_half_ofs: boolean = false) : Vector2;

		/** Returns the tilemap (grid-based) coordinates corresponding to the given local position. */
		world_to_map(world_position: Vector2) : Vector2;

		/** Updates the tile map's quadrants, allowing things such as navigation and collision shapes to be immediately used if modified. */
		update_dirty_quadrants() : void;

		/** Applies autotiling rules to the cell (and its adjacent cells) referenced by its grid-based X and Y coordinates. */
		update_bitmask_area(position: Vector2) : void;

		/** Applies autotiling rules to the cells in the given region (specified by grid-based X and Y coordinates).

		 Calling with invalid (or missing) parameters applies autotiling rules for the entire tilemap. */
		//@ts-ignore
		update_bitmask_region(start: Vector2 = Vector2( 0, 0 ), end: Vector2 = Vector2( 0, 0 )) : void;

		/** Getter of `mode` property */
		get_mode() : number;

		/** Setter of `mode` property */
		set_mode(p_value: number) : void;

		/** Getter of `tile_set` property */
		get_tileset() : TileSet;

		/** Setter of `tile_set` property */
		set_tileset(p_value: TileSet) : void;

		/** Getter of `cell_size` property */
		get_cell_size() : Vector2;

		/** Setter of `cell_size` property */
		set_cell_size(p_value: Vector2) : void;

		/** Getter of `cell_quadrant_size` property */
		get_quadrant_size() : number;

		/** Setter of `cell_quadrant_size` property */
		set_quadrant_size(p_value: number) : void;

		/** Getter of `cell_custom_transform` property */
		get_custom_transform() : Transform2D;

		/** Setter of `cell_custom_transform` property */
		set_custom_transform(p_value: Transform2D) : void;

		/** Getter of `cell_half_offset` property */
		get_half_offset() : number;

		/** Setter of `cell_half_offset` property */
		set_half_offset(p_value: number) : void;

		/** Getter of `cell_tile_origin` property */
		get_tile_origin() : number;

		/** Setter of `cell_tile_origin` property */
		set_tile_origin(p_value: number) : void;

		/** Getter of `cell_y_sort` property */
		is_y_sort_mode_enabled() : boolean;

		/** Setter of `cell_y_sort` property */
		set_y_sort_mode(p_value: boolean) : void;

		/** Getter of `compatibility_mode` property */
		is_compatibility_mode_enabled() : boolean;

		/** Setter of `compatibility_mode` property */
		set_compatibility_mode(p_value: boolean) : void;

		/** Getter of `centered_textures` property */
		is_centered_textures_enabled() : boolean;

		/** Setter of `centered_textures` property */
		set_centered_textures(p_value: boolean) : void;

		/** Getter of `cell_clip_uv` property */
		get_clip_uv() : boolean;

		/** Setter of `cell_clip_uv` property */
		set_clip_uv(p_value: boolean) : void;

		/** Getter of `collision_use_parent` property */
		get_collision_use_parent() : boolean;

		/** Setter of `collision_use_parent` property */
		set_collision_use_parent(p_value: boolean) : void;

		/** Getter of `collision_use_kinematic` property */
		get_collision_use_kinematic() : boolean;

		/** Setter of `collision_use_kinematic` property */
		set_collision_use_kinematic(p_value: boolean) : void;

		/** Getter of `collision_friction` property */
		get_collision_friction() : number;

		/** Setter of `collision_friction` property */
		set_collision_friction(p_value: number) : void;

		/** Getter of `collision_bounce` property */
		get_collision_bounce() : number;

		/** Setter of `collision_bounce` property */
		set_collision_bounce(p_value: number) : void;

		/** Getter of `collision_layer` property */
		get_collision_layer() : number;

		/** Setter of `collision_layer` property */
		set_collision_layer(p_value: number) : void;

		/** Getter of `collision_mask` property */
		get_collision_mask() : number;

		/** Setter of `collision_mask` property */
		set_collision_mask(p_value: number) : void;

		/** Getter of `occluder_light_mask` property */
		get_occluder_light_mask() : number;

		/** Setter of `occluder_light_mask` property */
		set_occluder_light_mask(p_value: number) : void;
	}
	namespace TileMap {

		/** Emitted when a tilemap setting has changed. */
		const settings_changed: 'settings_changed';
		enum HalfOffset {
			/** Half offset on the X coordinate. */
			HALF_OFFSET_X = 0,
			/** Half offset on the Y coordinate. */
			HALF_OFFSET_Y = 1,
			/** Half offset disabled. */
			HALF_OFFSET_DISABLED = 2,
			/** Half offset on the X coordinate (negative). */
			HALF_OFFSET_NEGATIVE_X = 3,
			/** Half offset on the Y coordinate (negative). */
			HALF_OFFSET_NEGATIVE_Y = 4,
		}
		enum Mode {
			/** Orthogonal orientation mode. */
			MODE_SQUARE = 0,
			/** Isometric orientation mode. */
			MODE_ISOMETRIC = 1,
			/** Custom orientation mode. */
			MODE_CUSTOM = 2,
		}
		enum TileOrigin {
			/** Tile origin at its top-left corner. */
			TILE_ORIGIN_TOP_LEFT = 0,
			/** Tile origin at its center. */
			TILE_ORIGIN_CENTER = 1,
			/** Tile origin at its bottom-left corner. */
			TILE_ORIGIN_BOTTOM_LEFT = 2,
		}

		/** Returned when a cell doesn't exist. */
		const INVALID_CELL: -1;

		/** Orthogonal orientation mode. */
		const MODE_SQUARE: Mode.MODE_SQUARE;

		/** Isometric orientation mode. */
		const MODE_ISOMETRIC: Mode.MODE_ISOMETRIC;

		/** Custom orientation mode. */
		const MODE_CUSTOM: Mode.MODE_CUSTOM;

		/** Half offset on the X coordinate. */
		const HALF_OFFSET_X: HalfOffset.HALF_OFFSET_X;

		/** Half offset on the Y coordinate. */
		const HALF_OFFSET_Y: HalfOffset.HALF_OFFSET_Y;

		/** Half offset disabled. */
		const HALF_OFFSET_DISABLED: HalfOffset.HALF_OFFSET_DISABLED;

		/** Half offset on the X coordinate (negative). */
		const HALF_OFFSET_NEGATIVE_X: HalfOffset.HALF_OFFSET_NEGATIVE_X;

		/** Half offset on the Y coordinate (negative). */
		const HALF_OFFSET_NEGATIVE_Y: HalfOffset.HALF_OFFSET_NEGATIVE_Y;

		/** Tile origin at its top-left corner. */
		const TILE_ORIGIN_TOP_LEFT: TileOrigin.TILE_ORIGIN_TOP_LEFT;

		/** Tile origin at its center. */
		const TILE_ORIGIN_CENTER: TileOrigin.TILE_ORIGIN_CENTER;

		/** Tile origin at its bottom-left corner. */
		const TILE_ORIGIN_BOTTOM_LEFT: TileOrigin.TILE_ORIGIN_BOTTOM_LEFT;
	}

	/** Tile library for tilemaps.
	 A TileSet is a library of tiles for a `TileMap`. It contains a list of tiles, each consisting of a sprite and optional collision shapes.

	 Tiles are referenced by a unique integer ID. */
	class TileSet extends Resource {

		/**  */
		_forward_atlas_subtile_selection(atlastile_id: number, tilemap: Object, tile_location: Vector2) : Vector2;

		/**  */
		_forward_subtile_selection(autotile_id: number, bitmask: number, tilemap: Object, tile_location: Vector2) : Vector2;

		/** Determines when the auto-tiler should consider two different auto-tile IDs to be bound together.

		 **Note:** `neighbor_id` will be `-1` (`TileMap.INVALID_CELL`) when checking a tile against an empty neighbor tile. */
		_is_tile_bound(drawn_id: number, neighbor_id: number) : boolean;

		/** Creates a new tile with the given ID. */
		create_tile(id: number) : void;

		/** Clears all bitmask information of the autotile. */
		autotile_clear_bitmask_map(id: number) : void;

		/** Sets the subtile that will be used as an icon in an atlas/autotile given its coordinates.

		 The subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask information is incomplete. It will also be used to represent it in the TileSet editor. */
		autotile_set_icon_coordinate(id: number, coord: Vector2) : void;

		/** Returns the subtile that's being used as an icon in an atlas/autotile given its coordinates.

		 The subtile defined as the icon will be used as a fallback when the atlas/autotile's bitmask information is incomplete. It will also be used to represent it in the TileSet editor. */
		autotile_get_icon_coordinate(id: number) : Vector2;

		/** Sets the priority of the subtile from an autotile given its coordinates.

		 When more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked. */
		autotile_set_subtile_priority(id: number, coord: Vector2, priority: number) : void;

		/** Returns the priority of the subtile from an autotile given its coordinates.

		 When more than one subtile has the same bitmask value, one of them will be picked randomly for drawing. Its priority will define how often it will be picked. */
		autotile_get_subtile_priority(id: number, coord: Vector2) : number;

		/** Sets the drawing index of the subtile from an atlas/autotile given its coordinates. */
		autotile_set_z_index(id: number, coord: Vector2, z_index: number) : void;

		/** Returns the drawing index of the subtile from an atlas/autotile given its coordinates. */
		autotile_get_z_index(id: number, coord: Vector2) : number;

		/** Sets the light occluder of the subtile from an atlas/autotile given its coordinates. */
		autotile_set_light_occluder(id: number, light_occluder: OccluderPolygon2D, coord: Vector2) : void;

		/** Returns the light occluder of the subtile from an atlas/autotile given its coordinates. */
		autotile_get_light_occluder(id: number, coord: Vector2) : OccluderPolygon2D;

		/** Sets the navigation polygon of the subtile from an atlas/autotile given its coordinates. */
		autotile_set_navigation_polygon(id: number, navigation_polygon: NavigationPolygon, coord: Vector2) : void;

		/** Returns the navigation polygon of the subtile from an atlas/autotile given its coordinates. */
		autotile_get_navigation_polygon(id: number, coord: Vector2) : NavigationPolygon;

		/** Sets the bitmask of the subtile from an autotile given its coordinates.

		 The value is the sum of the values in `AutotileBindings` present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right). */
		autotile_set_bitmask(id: number, bitmask: Vector2, flag: number) : void;

		/** Returns the bitmask of the subtile from an autotile given its coordinates.

		 The value is the sum of the values in `AutotileBindings` present in the subtile (e.g. a value of 5 means the bitmask has bindings in both the top left and top right). */
		autotile_get_bitmask(id: number, coord: Vector2) : number;

		/** Sets the `BitmaskMode` of the autotile. */
		autotile_set_bitmask_mode(id: number, mode: TileSet.BitmaskMode) : void;

		/** Returns the `BitmaskMode` of the autotile. */
		autotile_get_bitmask_mode(id: number) : number;

		/** Sets the spacing between subtiles of the atlas/autotile. */
		autotile_set_spacing(id: number, spacing: number) : void;

		/** Returns the spacing between subtiles of the atlas/autotile. */
		autotile_get_spacing(id: number) : number;

		/** Sets the size of the subtiles in an atlas/autotile. */
		autotile_set_size(id: number, size: Vector2) : void;

		/** Returns the size of the subtiles in an atlas/autotile. */
		autotile_get_size(id: number) : Vector2;

		/** Sets the tile's name. */
		tile_set_name(id: number, name: string) : void;

		/** Returns the tile's name. */
		tile_get_name(id: number) : string;

		/** Sets the tile's texture. */
		tile_set_texture(id: number, texture: Texture) : void;

		/** Returns the tile's texture. */
		tile_get_texture(id: number) : Texture;

		/** Sets the tile's normal map texture.

		 **Note:** Godot expects the normal map to use X+, Y-, and Z+ coordinates. See `url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates`this page`/url` for a comparison of normal map coordinates expected by popular engines. */
		tile_set_normal_map(id: number, normal_map: Texture) : void;

		/** Returns the tile's normal map texture. */
		tile_get_normal_map(id: number) : Texture;

		/** Sets the tile's material. */
		tile_set_material(id: number, material: ShaderMaterial) : void;

		/** Returns the tile's material. */
		tile_get_material(id: number) : ShaderMaterial;

		/** Sets the tile's modulation color. */
		tile_set_modulate(id: number, color: Color) : void;

		/** Returns the tile's modulation color. */
		tile_get_modulate(id: number) : Color;

		/** Sets the tile's texture offset. */
		tile_set_texture_offset(id: number, texture_offset: Vector2) : void;

		/** Returns the texture offset of the tile. */
		tile_get_texture_offset(id: number) : Vector2;

		/** Sets the tile's sub-region in the texture. This is common in texture atlases. */
		tile_set_region(id: number, region: Rect2) : void;

		/** Returns the tile sub-region in the texture. */
		tile_get_region(id: number) : Rect2;

		/** Sets a shape for the tile, enabling collision. */
		tile_set_shape(id: number, shape_id: number, shape: Shape2D) : void;

		/** Returns a tile's given shape. */
		tile_get_shape(id: number, shape_id: number) : Shape2D;

		/** Sets the offset of a tile's shape. */
		tile_set_shape_offset(id: number, shape_id: number, shape_offset: Vector2) : void;

		/** Returns the offset of a tile's shape. */
		tile_get_shape_offset(id: number, shape_id: number) : Vector2;

		/** Sets a `Transform2D` on a tile's shape. */
		tile_set_shape_transform(id: number, shape_id: number, shape_transform: Transform2D) : void;

		/** Returns the `Transform2D` of a tile's shape. */
		tile_get_shape_transform(id: number, shape_id: number) : Transform2D;

		/** Enables one-way collision on a tile's shape. */
		tile_set_shape_one_way(id: number, shape_id: number, one_way: boolean) : void;

		/** Returns the one-way collision value of a tile's shape. */
		tile_get_shape_one_way(id: number, shape_id: number) : boolean;

		/**  */
		tile_set_shape_one_way_margin(id: number, shape_id: number, one_way: number) : void;

		/**  */
		tile_get_shape_one_way_margin(id: number, shape_id: number) : number;

		/** Adds a shape to the tile. */
		//@ts-ignore
		tile_add_shape(id: number, shape: Shape2D, shape_transform: Transform2D, one_way: boolean = false, autotile_coord: Vector2 = Vector2( 0, 0 )) : void;

		/** Returns the number of shapes assigned to a tile. */
		tile_get_shape_count(id: number) : number;

		/** Sets an array of shapes for the tile, enabling collision. */
		tile_set_shapes(id: number, shapes: any[]) : void;

		/** Returns an array of the tile's shapes. */
		tile_get_shapes(id: number) : any[];

		/** Sets the tile's `TileMode`. */
		tile_set_tile_mode(id: number, tilemode: TileSet.TileMode) : void;

		/** Returns the tile's `TileMode`. */
		tile_get_tile_mode(id: number) : number;

		/** Sets the tile's navigation polygon. */
		tile_set_navigation_polygon(id: number, navigation_polygon: NavigationPolygon) : void;

		/** Returns the navigation polygon of the tile. */
		tile_get_navigation_polygon(id: number) : NavigationPolygon;

		/** Sets an offset for the tile's navigation polygon. */
		tile_set_navigation_polygon_offset(id: number, navigation_polygon_offset: Vector2) : void;

		/** Returns the offset of the tile's navigation polygon. */
		tile_get_navigation_polygon_offset(id: number) : Vector2;

		/** Sets a light occluder for the tile. */
		tile_set_light_occluder(id: number, light_occluder: OccluderPolygon2D) : void;

		/** Returns the tile's light occluder. */
		tile_get_light_occluder(id: number) : OccluderPolygon2D;

		/** Sets an offset for the tile's light occluder. */
		tile_set_occluder_offset(id: number, occluder_offset: Vector2) : void;

		/** Returns the offset of the tile's light occluder. */
		tile_get_occluder_offset(id: number) : Vector2;

		/** Sets the tile's drawing index. */
		tile_set_z_index(id: number, z_index: number) : void;

		/** Returns the tile's Z index (drawing layer). */
		tile_get_z_index(id: number) : number;

		/** Removes the given tile ID. */
		remove_tile(id: number) : void;

		/** Clears all tiles. */
		clear() : void;

		/** Returns the ID following the last currently used ID, useful when creating a new tile. */
		get_last_unused_tile_id() : number;

		/** Returns the first tile matching the given name. */
		find_tile_by_name(name: string) : number;

		/** Returns an array of all currently used tile IDs. */
		get_tiles_ids() : any[];
	}
	namespace TileSet {
		enum AutotileBindings {
			/**  */
			BIND_TOPLEFT = 1,
			/**  */
			BIND_TOP = 2,
			/**  */
			BIND_TOPRIGHT = 4,
			/**  */
			BIND_LEFT = 8,
			/**  */
			BIND_CENTER = 16,
			/**  */
			BIND_RIGHT = 32,
			/**  */
			BIND_BOTTOMLEFT = 64,
			/**  */
			BIND_BOTTOM = 128,
			/**  */
			BIND_BOTTOMRIGHT = 256,
		}
		enum BitmaskMode {
			/**  */
			BITMASK_2X2 = 0,
			/**  */
			BITMASK_3X3_MINIMAL = 1,
			/**  */
			BITMASK_3X3 = 2,
		}
		enum TileMode {
			/**  */
			SINGLE_TILE = 0,
			/**  */
			AUTO_TILE = 1,
			/**  */
			ATLAS_TILE = 2,
		}

		/**  */
		const BITMASK_2X2: BitmaskMode.BITMASK_2X2;

		/**  */
		const BITMASK_3X3_MINIMAL: BitmaskMode.BITMASK_3X3_MINIMAL;

		/**  */
		const BITMASK_3X3: BitmaskMode.BITMASK_3X3;

		/**  */
		const BIND_TOPLEFT: AutotileBindings.BIND_TOPLEFT;

		/**  */
		const BIND_TOP: AutotileBindings.BIND_TOP;

		/**  */
		const BIND_TOPRIGHT: AutotileBindings.BIND_TOPRIGHT;

		/**  */
		const BIND_LEFT: AutotileBindings.BIND_LEFT;

		/**  */
		const BIND_CENTER: AutotileBindings.BIND_CENTER;

		/**  */
		const BIND_RIGHT: AutotileBindings.BIND_RIGHT;

		/**  */
		const BIND_BOTTOMLEFT: AutotileBindings.BIND_BOTTOMLEFT;

		/**  */
		const BIND_BOTTOM: AutotileBindings.BIND_BOTTOM;

		/**  */
		const BIND_BOTTOMRIGHT: AutotileBindings.BIND_BOTTOMRIGHT;

		/**  */
		const SINGLE_TILE: TileMode.SINGLE_TILE;

		/**  */
		const AUTO_TILE: TileMode.AUTO_TILE;

		/**  */
		const ATLAS_TILE: TileMode.ATLAS_TILE;
	}

	/** A countdown timer.
	 Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one-shot" mode.

	 **Note:** To create an one-shot timer without instantiating a node, use `SceneTree.create_timer`. */
	class Timer extends Node {

		/** Processing mode. See `TimerProcessMode`. */
		process_mode: number;

		/** Wait time in seconds. */
		wait_time: number;

		/** If `true`, the timer will stop when reaching 0. If `false`, it will restart. */
		one_shot: boolean;

		/** If `true`, the timer will automatically start when entering the scene tree.

		 **Note:** This property is automatically set to `false` after the timer enters the scene tree and starts. */
		autostart: boolean;

		/** If `true`, the timer is paused and will not process until it is unpaused again, even if `start` is called. */
		paused: boolean;

		/** The timer's remaining time in seconds. Returns 0 if the timer is inactive.

		 **Note:** You cannot set this value. To change the timer's remaining time, use `start`. */
		time_left: number;

		/** Starts the timer. Sets `wait_time` to `time_sec` if `time_sec > 0`. This also resets the remaining time to `wait_time`.

		 **Note:** this method will not resume a paused timer. See `paused`. */
		//@ts-ignore
		start(time_sec: number = -1) : void;

		/** Stops the timer. */
		stop() : void;

		/** Returns `true` if the timer is stopped. */
		is_stopped() : boolean;

		/** Getter of `process_mode` property */
		get_timer_process_mode() : number;

		/** Setter of `process_mode` property */
		set_timer_process_mode(p_value: number) : void;

		/** Getter of `wait_time` property */
		get_wait_time() : number;

		/** Setter of `wait_time` property */
		set_wait_time(p_value: number) : void;

		/** Getter of `one_shot` property */
		is_one_shot() : boolean;

		/** Setter of `one_shot` property */
		set_one_shot(p_value: boolean) : void;

		/** Getter of `autostart` property */
		has_autostart() : boolean;

		/** Setter of `autostart` property */
		set_autostart(p_value: boolean) : void;

		/** Getter of `paused` property */
		is_paused() : boolean;

		/** Setter of `paused` property */
		set_paused(p_value: boolean) : void;

		/** Getter of `time_left` property */
		get_time_left() : number;
	}
	namespace Timer {

		/** Emitted when the timer reaches 0. */
		const timeout: 'timeout';
		enum TimerProcessMode {
			/** Update the timer during the physics step at each frame (fixed framerate processing). */
			TIMER_PROCESS_PHYSICS = 0,
			/** Update the timer during the idle time at each frame. */
			TIMER_PROCESS_IDLE = 1,
		}

		/** Update the timer during the physics step at each frame (fixed framerate processing). */
		const TIMER_PROCESS_PHYSICS: TimerProcessMode.TIMER_PROCESS_PHYSICS;

		/** Update the timer during the idle time at each frame. */
		const TIMER_PROCESS_IDLE: TimerProcessMode.TIMER_PROCESS_IDLE;
	}

	/** Flat button helper class.
	 This is a helper class to generate a flat `Button` (see `Button.flat`), creating a `ToolButton` is equivalent to:

	 ```gdscript
	 var btn = Button.new()
	 btn.flat = true
	 ``` */
	class ToolButton extends Button {

		/**  */
		flat: boolean;

		/** Getter of `flat` property */
		is_flat() : boolean;

		/** Setter of `flat` property */
		set_flat(p_value: boolean) : void;
	}
	namespace ToolButton {
	}

	/** Button for touch screen devices.
	 Button for touch screen devices. You can set it to be visible on all screens, or only on touch devices. */
	class TouchScreenButton extends Node2D {

		/** The button's texture for the normal state. */
		normal: Texture;

		/** The button's texture for the pressed state. */
		pressed: Texture;

		/** The button's bitmask. */
		bitmask: BitMap;

		/** The button's shape. */
		shape: Shape2D;

		/** If `true`, the button's shape is centered in the provided texture. If no texture is used, this property has no effect. */
		shape_centered: boolean;

		/** If `true`, the button's shape is visible. */
		shape_visible: boolean;

		/** If `true`, pass-by presses are enabled. */
		passby_press: boolean;

		/** The button's action. Actions can be handled with `InputEventAction`. */
		action: string;

		/** The button's visibility mode. See `VisibilityMode` for possible values. */
		visibility_mode: number;

		/** Returns `true` if this button is currently pressed. */
		is_pressed() : boolean;

		/** Getter of `normal` property */
		get_texture() : Texture;

		/** Setter of `normal` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `pressed` property */
		get_texture_pressed() : Texture;

		/** Setter of `pressed` property */
		set_texture_pressed(p_value: Texture) : void;

		/** Getter of `bitmask` property */
		get_bitmask() : BitMap;

		/** Setter of `bitmask` property */
		set_bitmask(p_value: BitMap) : void;

		/** Getter of `shape` property */
		get_shape() : Shape2D;

		/** Setter of `shape` property */
		set_shape(p_value: Shape2D) : void;

		/** Getter of `shape_centered` property */
		is_shape_centered() : boolean;

		/** Setter of `shape_centered` property */
		set_shape_centered(p_value: boolean) : void;

		/** Getter of `shape_visible` property */
		is_shape_visible() : boolean;

		/** Setter of `shape_visible` property */
		set_shape_visible(p_value: boolean) : void;

		/** Getter of `passby_press` property */
		is_passby_press_enabled() : boolean;

		/** Setter of `passby_press` property */
		set_passby_press(p_value: boolean) : void;

		/** Getter of `action` property */
		get_action() : string;

		/** Setter of `action` property */
		set_action(p_value: string) : void;

		/** Getter of `visibility_mode` property */
		get_visibility_mode() : number;

		/** Setter of `visibility_mode` property */
		set_visibility_mode(p_value: number) : void;
	}
	namespace TouchScreenButton {

		/** Emitted when the button is released (up). */
		const released: 'released';

		/** Emitted when the button is pressed (down). */
		const pressed: 'pressed';
		enum VisibilityMode {
			/** Always visible. */
			VISIBILITY_ALWAYS = 0,
			/** Visible on touch screens only. */
			VISIBILITY_TOUCHSCREEN_ONLY = 1,
		}

		/** Always visible. */
		const VISIBILITY_ALWAYS: VisibilityMode.VISIBILITY_ALWAYS;

		/** Visible on touch screens only. */
		const VISIBILITY_TOUCHSCREEN_ONLY: VisibilityMode.VISIBILITY_TOUCHSCREEN_ONLY;
	}

	/** Language Translation.
	 Translations are resources that can be loaded and unloaded on demand. They map a string to another string. */
	class Translation extends Resource {

		/** The locale of the translation. */
		locale: string;

		/** Adds a message if nonexistent, followed by its translation. */
		add_message(src_message: string, xlated_message: string) : void;

		/** Returns a message's translation. */
		get_message(src_message: string) : string;

		/** Erases a message. */
		erase_message(src_message: string) : void;

		/** Returns all the messages (keys). */
		get_message_list() : PoolStringArray;

		/** Returns the number of existing messages. */
		get_message_count() : number;

		/** Getter of `locale` property */
		get_locale() : string;

		/** Setter of `locale` property */
		set_locale(p_value: string) : void;
	}
	namespace Translation {
	}

	/** Server that manages all translations.
	 Server that manages all translations. Translations can be set to it and removed from it. */
	class TranslationServer extends Object {

		/** Sets the locale of the game. */
		static set_locale(locale: string) : void;

		/** Returns the current locale of the game. */
		static get_locale() : string;

		/** Returns a locale's language and its variant (e.g. `"en_US"` would return `"English (United States)"`). */
		static get_locale_name(locale: string) : string;

		/** Returns the current locale's translation for the given message (key). */
		static translate(message: string) : string;

		/** Adds a `Translation` resource. */
		static add_translation(translation: Translation) : void;

		/** Removes the given translation from the server. */
		static remove_translation(translation: Translation) : void;

		/** Clears the server from all translations. */
		static clear() : void;

		/** Returns an Array of all loaded locales of the game. */
		static get_loaded_locales() : any[];
	}
	namespace TranslationServer {
	}

	/** Control to show a tree of items.
	 This shows a tree of items that can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like text editing, buttons and popups. It can be useful for structured displays and interactions.

	 Trees are built via code, using `TreeItem` objects to create the structure. They have a single root but multiple roots can be simulated if a dummy hidden root is added.

	 ```gdscript
	 func _ready():
	     var tree = Tree.new()
	     var root = tree.create_item()
	     tree.set_hide_root(true)
	     var child1 = tree.create_item(root)
	     var child2 = tree.create_item(root)
	     var subchild1 = tree.create_item(child1)
	     subchild1.set_text(0, "Subchild1")
	 ```

	 To iterate over all the `TreeItem` objects in a `Tree` object, use `TreeItem.get_next` and `TreeItem.get_children` after getting the root through `get_root`. You can use `Object.free` on a `TreeItem` to remove it from the `Tree`. */
	class Tree extends Control {

		/** The number of columns. */
		columns: number;

		/** If `true`, the currently selected cell may be selected again. */
		allow_reselect: boolean;

		/** If `true`, a right mouse button click can select items. */
		allow_rmb_select: boolean;

		/** If `true`, the folding arrow is hidden. */
		hide_folding: boolean;

		/** If `true`, the tree's root is hidden. */
		hide_root: boolean;

		/** The drop mode as an OR combination of flags. See `DropModeFlags` constants. Once dropping is done, reverts to `DROP_MODE_DISABLED`. Setting this during `Control.can_drop_data` is recommended.

		 This controls the drop sections, i.e. the decision and drawing of possible drop locations based on the mouse position. */
		drop_mode_flags: number;

		/** Allows single or multiple selection. See the `SelectMode` constants. */
		select_mode: number;

		/**  */
		rect_clip_content: boolean;

		/**  */
		focus_mode: number;

		/** Clears the tree. This removes all items. */
		clear() : void;

		/** Creates an item in the tree and adds it as a child of `parent`.

		 If `parent` is `null`, the root item will be the parent, or the new item will be the root itself if the tree is empty.

		 The new item will be the `idx`th child of parent, or it will be the last child if there are not enough siblings. */
		//@ts-ignore
		create_item(parent: Object = null, idx: number = -1) : TreeItem;

		/** Returns the tree's root item, or `null` if the tree is empty. */
		get_root() : TreeItem;

		/** Sets the minimum width of a column. Columns that have the "Expand" flag will use their "min_width" in a similar fashion to `Control.size_flags_stretch_ratio`. */
		set_column_min_width(column: number, min_width: number) : void;

		/** If `true`, the column will have the "Expand" flag of `Control`. Columns that have the "Expand" flag will use their "min_width" in a similar fashion to `Control.size_flags_stretch_ratio`. */
		set_column_expand(column: number, expand: boolean) : void;

		/** Returns the column's width in pixels. */
		get_column_width(column: number) : number;

		/** Returns the next selected item after the given one, or `null` if the end is reached.

		 If `from` is `null`, this returns the first selected item. */
		get_next_selected(p_from: Object) : TreeItem;

		/** Returns the currently focused item, or `null` if no item is focused.

		 In `SELECT_ROW` and `SELECT_SINGLE` modes, the focused item is same as the selected item. In `SELECT_MULTI` mode, the focused item is the item under the focus cursor, not necessarily selected.

		 To get the currently selected item(s), use `get_next_selected`. */
		get_selected() : TreeItem;

		/** Returns the currently focused column, or -1 if no column is focused.

		 In `SELECT_SINGLE` mode, the focused column is the selected column. In `SELECT_ROW` mode, the focused column is always 0 if any item is selected. In `SELECT_MULTI` mode, the focused column is the column under the focus cursor, and there are not necessarily any column selected.

		 To tell whether a column of an item is selected, use `TreeItem.is_selected`. */
		get_selected_column() : number;

		/** Returns the last pressed button's index. */
		get_pressed_button() : number;

		/** Returns the currently edited item. This is only available for custom cell mode. */
		get_edited() : TreeItem;

		/** Returns the column for the currently edited item. This is only available for custom cell mode. */
		get_edited_column() : number;

		/** Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See `TreeItem.set_cell_mode`. */
		get_custom_popup_rect() : Rect2;

		/** Returns the rectangle area for the specified item. If `column` is specified, only get the position and size of that column, otherwise get the rectangle containing all columns. */
		//@ts-ignore
		get_item_area_rect(item: Object, column: number = -1) : Rect2;

		/** Returns the tree item at the specified position (relative to the tree origin position). */
		get_item_at_position(position: Vector2) : TreeItem;

		/** Returns the column index at `position`, or -1 if no item is there. */
		get_column_at_position(position: Vector2) : number;

		/** Returns the drop section at `position`, or -100 if no item is there.

		 Values -1, 0, or 1 will be returned for the "above item", "on item", and "below item" drop sections, respectively. See `DropModeFlags` for a description of each drop section.

		 To get the item which the returned drop section is relative to, use `get_item_at_position`. */
		get_drop_section_at_position(position: Vector2) : number;

		/** Makes the currently focused cell visible.

		 This will scroll the tree if necessary. In `SELECT_ROW` mode, this will not do horizontal scrolling, as all the cells in the selected row is focused logically.

		 **Note:** Despite the name of this method, the focus cursor itself is only visible in `SELECT_MULTI` mode. */
		ensure_cursor_is_visible() : void;

		/** If `true`, column titles are visible. */
		set_column_titles_visible(visible: boolean) : void;

		/** Returns `true` if the column titles are being shown. */
		are_column_titles_visible() : boolean;

		/** Sets the title of a column. */
		set_column_title(column: number, title: string) : void;

		/** Returns the column's title. */
		get_column_title(column: number) : string;

		/** Returns the current scrolling position. */
		get_scroll() : Vector2;

		/** Getter of `columns` property */
		get_columns() : number;

		/** Setter of `columns` property */
		set_columns(p_value: number) : void;

		/** Getter of `allow_reselect` property */
		get_allow_reselect() : boolean;

		/** Setter of `allow_reselect` property */
		set_allow_reselect(p_value: boolean) : void;

		/** Getter of `allow_rmb_select` property */
		get_allow_rmb_select() : boolean;

		/** Setter of `allow_rmb_select` property */
		set_allow_rmb_select(p_value: boolean) : void;

		/** Getter of `hide_folding` property */
		is_folding_hidden() : boolean;

		/** Setter of `hide_folding` property */
		set_hide_folding(p_value: boolean) : void;

		/** Getter of `hide_root` property */
		is_root_hidden() : boolean;

		/** Setter of `hide_root` property */
		set_hide_root(p_value: boolean) : void;

		/** Getter of `drop_mode_flags` property */
		get_drop_mode_flags() : number;

		/** Setter of `drop_mode_flags` property */
		set_drop_mode_flags(p_value: number) : void;

		/** Getter of `select_mode` property */
		get_select_mode() : number;

		/** Setter of `select_mode` property */
		set_select_mode(p_value: number) : void;

		/** Getter of `rect_clip_content` property */
		is_clipping_contents() : boolean;

		/** Setter of `rect_clip_content` property */
		set_clip_contents(p_value: boolean) : void;

		/** Getter of `focus_mode` property */
		get_focus_mode() : number;

		/** Setter of `focus_mode` property */
		set_focus_mode(p_value: number) : void;
	}
	namespace Tree {

		/** Emitted when an item's label is double-clicked. */
		const item_activated: 'item_activated';

		/** Emitted instead of `item_selected` if `select_mode` is `SELECT_MULTI`. */
		const multi_selected: 'multi_selected';

		/** Emitted when a column's title is pressed. */
		const column_title_pressed: 'column_title_pressed';

		/** Emitted when a cell with the `TreeItem.CELL_MODE_CUSTOM` is clicked to be edited. */
		const custom_popup_edited: 'custom_popup_edited';

		/** Emitted when an item is collapsed by a click on the folding arrow. */
		const item_collapsed: 'item_collapsed';

		/** Emitted when an item is edited using the right mouse button. */
		const item_rmb_edited: 'item_rmb_edited';

		/** Emitted when an item is edited. */
		const item_edited: 'item_edited';

		/** Emitted when the right mouse button is pressed if right mouse button selection is active and the tree is empty. */
		const empty_tree_rmb_selected: 'empty_tree_rmb_selected';

		/** Emitted when a left mouse button click does not select any item. */
		const nothing_selected: 'nothing_selected';

		/** Emitted when an item's icon is double-clicked. */
		const item_double_clicked: 'item_double_clicked';

		/** Emitted when the right mouse button is pressed in the empty space of the tree. */
		const empty_rmb: 'empty_rmb';

		/** Emitted when an item is selected with the right mouse button. */
		const item_rmb_selected: 'item_rmb_selected';

		/** Emitted when an item is selected. */
		const item_selected: 'item_selected';

		/** Emitted when a cell is selected. */
		const cell_selected: 'cell_selected';

		/** Emitted when a button on the tree was pressed (see `TreeItem.add_button`). */
		const button_pressed: 'button_pressed';

		/** Emitted when a custom button is pressed (i.e. in a `TreeItem.CELL_MODE_CUSTOM` mode cell). */
		const item_custom_button_pressed: 'item_custom_button_pressed';
		enum DropModeFlags {
			/** Disables all drop sections, but still allows to detect the "on item" drop section by `get_drop_section_at_position`.

			 **Note:** This is the default flag, it has no effect when combined with other flags. */
			DROP_MODE_DISABLED = 0,
			/** Enables the "on item" drop section. This drop section covers the entire item.

			 When combined with `DROP_MODE_INBETWEEN`, this drop section halves the height and stays centered vertically. */
			DROP_MODE_ON_ITEM = 1,
			/** Enables "above item" and "below item" drop sections. The "above item" drop section covers the top half of the item, and the "below item" drop section covers the bottom half.

			 When combined with `DROP_MODE_ON_ITEM`, these drop sections halves the height and stays on top / bottom accordingly. */
			DROP_MODE_INBETWEEN = 2,
		}
		enum SelectMode {
			/** Allows selection of a single cell at a time. From the perspective of items, only a single item is allowed to be selected. And there is only one column selected in the selected item.

			 The focus cursor is always hidden in this mode, but it is positioned at the current selection, making the currently selected item the currently focused item. */
			SELECT_SINGLE = 0,
			/** Allows selection of a single row at a time. From the perspective of items, only a single items is allowed to be selected. And all the columns are selected in the selected item.

			 The focus cursor is always hidden in this mode, but it is positioned at the first column of the current selection, making the currently selected item the currently focused item. */
			SELECT_ROW = 1,
			/** Allows selection of multiple cells at the same time. From the perspective of items, multiple items are allowed to be selected. And there can be multiple columns selected in each selected item.

			 The focus cursor is visible in this mode, the item or column under the cursor is not necessarily selected. */
			SELECT_MULTI = 2,
		}

		/** Allows selection of a single cell at a time. From the perspective of items, only a single item is allowed to be selected. And there is only one column selected in the selected item.

		 The focus cursor is always hidden in this mode, but it is positioned at the current selection, making the currently selected item the currently focused item. */
		const SELECT_SINGLE: SelectMode.SELECT_SINGLE;

		/** Allows selection of a single row at a time. From the perspective of items, only a single items is allowed to be selected. And all the columns are selected in the selected item.

		 The focus cursor is always hidden in this mode, but it is positioned at the first column of the current selection, making the currently selected item the currently focused item. */
		const SELECT_ROW: SelectMode.SELECT_ROW;

		/** Allows selection of multiple cells at the same time. From the perspective of items, multiple items are allowed to be selected. And there can be multiple columns selected in each selected item.

		 The focus cursor is visible in this mode, the item or column under the cursor is not necessarily selected. */
		const SELECT_MULTI: SelectMode.SELECT_MULTI;

		/** Disables all drop sections, but still allows to detect the "on item" drop section by `get_drop_section_at_position`.

		 **Note:** This is the default flag, it has no effect when combined with other flags. */
		const DROP_MODE_DISABLED: DropModeFlags.DROP_MODE_DISABLED;

		/** Enables the "on item" drop section. This drop section covers the entire item.

		 When combined with `DROP_MODE_INBETWEEN`, this drop section halves the height and stays centered vertically. */
		const DROP_MODE_ON_ITEM: DropModeFlags.DROP_MODE_ON_ITEM;

		/** Enables "above item" and "below item" drop sections. The "above item" drop section covers the top half of the item, and the "below item" drop section covers the bottom half.

		 When combined with `DROP_MODE_ON_ITEM`, these drop sections halves the height and stays on top / bottom accordingly. */
		const DROP_MODE_INBETWEEN: DropModeFlags.DROP_MODE_INBETWEEN;
	}

	/** Control for a single item inside a `Tree`.
	 Control for a single item inside a `Tree`. May have child `TreeItem`s and be styled as well as contain buttons.

	 You can remove a `TreeItem` by using `Object.free`. */
	class TreeItem extends Object {

		/** If `true`, the TreeItem is collapsed. */
		collapsed: boolean;

		/** If `true`, folding is disabled for this TreeItem. */
		disable_folding: boolean;

		/** The custom minimum height. */
		custom_minimum_height: number;

		/** Sets the given column's cell mode to `mode`. See `TreeCellMode` constants. */
		set_cell_mode(column: number, mode: TreeItem.TreeCellMode) : void;

		/** Returns the column's cell mode. */
		get_cell_mode(column: number) : number;

		/** If `true`, the column `column` is checked. */
		set_checked(column: number, checked: boolean) : void;

		/** Returns `true` if the given column is checked. */
		is_checked(column: number) : boolean;

		/**  */
		set_text(column: number, text: string) : void;

		/** Returns the given column's text. */
		get_text(column: number) : string;

		/**  */
		set_suffix(column: number, text: string) : void;

		/**  */
		get_suffix(column: number) : string;

		/** Sets the given column's icon `Texture`. */
		set_icon(column: number, texture: Texture) : void;

		/** Returns the given column's icon `Texture`. Error if no icon is set. */
		get_icon(column: number) : Texture;

		/** Sets the given column's icon's texture region. */
		set_icon_region(column: number, region: Rect2) : void;

		/** Returns the icon `Texture` region as `Rect2`. */
		get_icon_region(column: number) : Rect2;

		/** Sets the given column's icon's maximum width. */
		set_icon_max_width(column: number, width: number) : void;

		/** Returns the column's icon's maximum width. */
		get_icon_max_width(column: number) : number;

		/** Modulates the given column's icon with `modulate`. */
		set_icon_modulate(column: number, modulate: Color) : void;

		/** Returns the `Color` modulating the column's icon. */
		get_icon_modulate(column: number) : Color;

		/**  */
		set_range(column: number, value: number) : void;

		/**  */
		get_range(column: number) : number;

		/**  */
		//@ts-ignore
		set_range_config(column: number, min: number, max: number, step: number, expr: boolean = false) : void;

		/**  */
		get_range_config(column: number) : object;

		/**  */
		set_metadata(column: number, meta: any) : void;

		/**  */
		get_metadata(column: number) : any;

		/** Sets the given column's custom draw callback to `callback` method on `object`.

		 The `callback` should accept two arguments: the `TreeItem` that is drawn and its position and size as a `Rect2`. */
		set_custom_draw(column: number, p_object: Object, callback: string) : void;

		/** Returns the next TreeItem in the tree. */
		get_next() : TreeItem;

		/** Returns the previous TreeItem in the tree. */
		get_prev() : TreeItem;

		/** Returns the parent TreeItem. */
		get_parent() : TreeItem;

		/** Returns the TreeItem's child items. */
		get_children() : TreeItem;

		/** Returns the next visible TreeItem in the tree.

		 If `wrap` is enabled, the method will wrap around to the first visible element in the tree when called on the last visible element, otherwise it returns `null`. */
		//@ts-ignore
		get_next_visible(wrap: boolean = false) : TreeItem;

		/** Returns the previous visible TreeItem in the tree.

		 If `wrap` is enabled, the method will wrap around to the last visible element in the tree when called on the first visible element, otherwise it returns `null`. */
		//@ts-ignore
		get_prev_visible(wrap: boolean = false) : TreeItem;

		/** Removes the given child `TreeItem` and all its children from the `Tree`. Note that it doesn't free the item from memory, so it can be reused later. To completely remove a `TreeItem` use `Object.free`. */
		remove_child(child: Object) : void;

		/** If `true`, the given column is selectable. */
		set_selectable(column: number, selectable: boolean) : void;

		/** Returns `true` if column `column` is selectable. */
		is_selectable(column: number) : boolean;

		/** Returns `true` if column `column` is selected. */
		is_selected(column: number) : boolean;

		/** Selects the column `column`. */
		select(column: number) : void;

		/** Deselects the given column. */
		deselect(column: number) : void;

		/** If `true`, column `column` is editable. */
		set_editable(column: number, enabled: boolean) : void;

		/** Returns `true` if column `column` is editable. */
		is_editable(column: number) : boolean;

		/** Sets the given column's custom color. */
		set_custom_color(column: number, color: Color) : void;

		/** Resets the color for the given column to default. */
		clear_custom_color(column: number) : void;

		/** Returns the custom color of column `column`. */
		get_custom_color(column: number) : Color;

		/** Sets the given column's custom background color and whether to just use it as an outline. */
		//@ts-ignore
		set_custom_bg_color(column: number, color: Color, just_outline: boolean = false) : void;

		/** Resets the background color for the given column to default. */
		clear_custom_bg_color(column: number) : void;

		/** Returns the custom background color of column `column`. */
		get_custom_bg_color(column: number) : Color;

		/**  */
		set_custom_as_button(column: number, enable: boolean) : void;

		/**  */
		is_custom_set_as_button(column: number) : boolean;

		/** Adds a button with `Texture` `button` at column `column`. The `button_idx` index is used to identify the button when calling other methods. If not specified, the next available index is used, which may be retrieved by calling `get_button_count` immediately after this method. Optionally, the button can be `disabled` and have a `tooltip`. */
		//@ts-ignore
		add_button(column: number, button: Texture, button_idx: number = -1, disabled: boolean = false, tooltip: string = "") : void;

		/** Returns the number of buttons in column `column`. May be used to get the most recently added button's index, if no index was specified. */
		get_button_count(column: number) : number;

		/** Returns the tooltip string for the button at index `button_idx` in column `column`. */
		get_button_tooltip(column: number, button_idx: number) : string;

		/** Returns the `Texture` of the button at index `button_idx` in column `column`. */
		get_button(column: number, button_idx: number) : Texture;

		/** Sets the given column's button `Texture` at index `button_idx` to `button`. */
		set_button(column: number, button_idx: number, button: Texture) : void;

		/** Removes the button at index `button_idx` in column `column`. */
		erase_button(column: number, button_idx: number) : void;

		/** If `true`, disables the button at index `button_idx` in column `column`. */
		set_button_disabled(column: number, button_idx: number, disabled: boolean) : void;

		/** Returns `true` if the button at index `button_idx` for the given column is disabled. */
		is_button_disabled(column: number, button_idx: number) : boolean;

		/** If `true`, column `column` is expanded to the right. */
		set_expand_right(column: number, enable: boolean) : void;

		/** Returns `true` if `expand_right` is set. */
		get_expand_right(column: number) : boolean;

		/** Sets the given column's tooltip text. */
		set_tooltip(column: number, tooltip: string) : void;

		/** Returns the given column's tooltip. */
		get_tooltip(column: number) : string;

		/** Sets the given column's text alignment. See `TextAlign` for possible values. */
		set_text_align(column: number, text_align: TreeItem.TextAlign) : void;

		/** Returns the given column's text alignment. */
		get_text_align(column: number) : number;

		/** Moves this TreeItem to the top in the `Tree` hierarchy. */
		move_to_top() : void;

		/** Moves this TreeItem to the bottom in the `Tree` hierarchy. */
		move_to_bottom() : void;

		/** Calls the `method` on the actual TreeItem and its children recursively. Pass parameters as a comma separated list. */
		call_recursive(method: string, ...args) : any;

		/** Getter of `collapsed` property */
		is_collapsed() : boolean;

		/** Setter of `collapsed` property */
		set_collapsed(p_value: boolean) : void;

		/** Getter of `disable_folding` property */
		is_folding_disabled() : boolean;

		/** Setter of `disable_folding` property */
		set_disable_folding(p_value: boolean) : void;

		/** Getter of `custom_minimum_height` property */
		get_custom_minimum_height() : number;

		/** Setter of `custom_minimum_height` property */
		set_custom_minimum_height(p_value: number) : void;
	}
	namespace TreeItem {
		enum TextAlign {
			/** Align text to the left. See `set_text_align()`. */
			ALIGN_LEFT = 0,
			/** Center text. See `set_text_align()`. */
			ALIGN_CENTER = 1,
			/** Align text to the right. See `set_text_align()`. */
			ALIGN_RIGHT = 2,
		}
		enum TreeCellMode {
			/** Cell contains a string. */
			CELL_MODE_STRING = 0,
			/** Cell can be checked. */
			CELL_MODE_CHECK = 1,
			/** Cell contains a range. */
			CELL_MODE_RANGE = 2,
			/** Cell contains an icon. */
			CELL_MODE_ICON = 3,
			/**  */
			CELL_MODE_CUSTOM = 4,
		}

		/** Cell contains a string. */
		const CELL_MODE_STRING: TreeCellMode.CELL_MODE_STRING;

		/** Cell can be checked. */
		const CELL_MODE_CHECK: TreeCellMode.CELL_MODE_CHECK;

		/** Cell contains a range. */
		const CELL_MODE_RANGE: TreeCellMode.CELL_MODE_RANGE;

		/** Cell contains an icon. */
		const CELL_MODE_ICON: TreeCellMode.CELL_MODE_ICON;

		/**  */
		const CELL_MODE_CUSTOM: TreeCellMode.CELL_MODE_CUSTOM;

		/** Align text to the left. See `set_text_align()`. */
		const ALIGN_LEFT: TextAlign.ALIGN_LEFT;

		/** Center text. See `set_text_align()`. */
		const ALIGN_CENTER: TextAlign.ALIGN_CENTER;

		/** Align text to the right. See `set_text_align()`. */
		const ALIGN_RIGHT: TextAlign.ALIGN_RIGHT;
	}

	/** Internal mesh type.
	 Mesh type used internally for collision calculations. */
	class TriangleMesh extends Reference {
	}
	namespace TriangleMesh {
	}

	/** Smoothly animates a node's properties over time.
	 Tweens are useful for animations requiring a numerical property to be interpolated over a range of values. The name *tween* comes from *in-betweening*, an animation technique where you specify *keyframes* and the computer interpolates the frames that appear between them.

	 `Tween` is more suited than `AnimationPlayer` for animations where you don't know the final values in advance. For example, interpolating a dynamically-chosen camera zoom value is best done with a `Tween` node; it would be difficult to do the same thing with an `AnimationPlayer` node.

	 Here is a brief usage example that makes a 2D node move smoothly between two positions:

	 ```gdscript
	 var tween = get_node("Tween")
	 tween.interpolate_property($Node2D, "position",
	         Vector2(0, 0), Vector2(100, 100), 1,
	         Tween.TRANS_LINEAR, Tween.EASE_IN_OUT)
	 tween.start()
	 ```

	 Many methods require a property name, such as `"position"` above. You can find the correct property name by hovering over the property in the Inspector. You can also provide the components of a property directly by using `"property:component"` (eg. `position:x`), where it would only apply to that particular component.

	 Many of the methods accept `trans_type` and `ease_type`. The first accepts an `TransitionType` constant, and refers to the way the timing of the animation is handled (see `url=https://easings.net/`easings.net`/url` for some examples). The second accepts an `EaseType` constant, and controls where the `trans_type` is applied to the interpolation (in the beginning, the end, or both). If you don't know which transition and easing to pick, you can try different `TransitionType` constants with `EASE_IN_OUT`, and use the one that looks best.

	 `url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/tween_cheatsheet.png`Tween easing and transition types cheatsheet`/url` */
	class Tween extends Node {

		/** If `true`, the tween loops. */
		repeat: boolean;

		/** The tween's animation process thread. See `TweenProcessMode`. */
		playback_process_mode: number;

		/** The tween's speed multiplier. For example, set it to `1.0` for normal speed, `2.0` for two times normal speed, or `0.5` for half of the normal speed. A value of `0` pauses the animation, but see also `set_active` or `stop_all` for this. */
		playback_speed: number;

		/** Returns `true` if any tweens are currently running.

		 **Note:** This method doesn't consider tweens that have ended. */
		is_active() : boolean;

		/** Activates/deactivates the tween. See also `stop_all` and `resume_all`. */
		set_active(active: boolean) : void;

		/** Starts the tween. You can define animations both before and after this. */
		start() : boolean;

		/** Resets a tween to its initial value (the one given, not the one before the tween), given its object and property/method pair. By default, all tweens are removed, unless `key` is specified. */
		//@ts-ignore
		reset(p_object: Object, key: string = "") : boolean;

		/** Resets all tweens to their initial values (the ones given, not those before the tween). */
		reset_all() : boolean;

		/** Stops a tween, given its object and property/method pair. By default, all tweens are stopped, unless `key` is specified. */
		//@ts-ignore
		stop(p_object: Object, key: string = "") : boolean;

		/** Stops animating all tweens. */
		stop_all() : boolean;

		/** Continues animating a stopped tween, given its object and property/method pair. By default, all tweens are resumed, unless `key` is specified. */
		//@ts-ignore
		resume(p_object: Object, key: string = "") : boolean;

		/** Continues animating all stopped tweens. */
		resume_all() : boolean;

		/** Stops animation and removes a tween, given its object and property/method pair. By default, all tweens are removed, unless `key` is specified. */
		//@ts-ignore
		remove(p_object: Object, key: string = "") : boolean;

		/** Stops animation and removes all tweens. */
		remove_all() : boolean;

		/** Sets the interpolation to the given `time` in seconds. */
		seek(time: number) : boolean;

		/** Returns the current time of the tween. */
		tell() : number;

		/** Returns the total time needed for all tweens to end. If you have two tweens, one lasting 10 seconds and the other 20 seconds, it would return 20 seconds, as by that time all tweens would have finished. */
		get_runtime() : number;

		/** Animates `property` of `object` from `initial_val` to `final_val` for `duration` seconds, `delay` seconds later. Setting the initial value to `null` uses the current value of the property.

		 Use `TransitionType` for `trans_type` and `EaseType` for `ease_type` parameters. These values control the timing and direction of the interpolation. See the class description for more information. */
		//@ts-ignore
		interpolate_property(p_object: Object, property: string, initial_val: any, final_val: any, duration: number, trans_type: Tween.TransitionType = 0, ease_type: Tween.EaseType = 2, delay: number = 0) : boolean;

		/** Animates `method` of `object` from `initial_val` to `final_val` for `duration` seconds, `delay` seconds later. Methods are called with consecutive values.

		 Use `TransitionType` for `trans_type` and `EaseType` for `ease_type` parameters. These values control the timing and direction of the interpolation. See the class description for more information. */
		//@ts-ignore
		interpolate_method(p_object: Object, method: string, initial_val: any, final_val: any, duration: number, trans_type: Tween.TransitionType = 0, ease_type: Tween.EaseType = 2, delay: number = 0) : boolean;

		/** Calls `callback` of `object` after `duration`. `arg1`-`arg5` are arguments to be passed to the callback. */
		//@ts-ignore
		interpolate_callback(p_object: Object, duration: number, callback: string, arg1: any = null, arg2: any = null, arg3: any = null, arg4: any = null, arg5: any = null) : boolean;

		/** Calls `callback` of `object` after `duration` on the main thread (similar to `Object.call_deferred`). `arg1`-`arg5` are arguments to be passed to the callback. */
		//@ts-ignore
		interpolate_deferred_callback(p_object: Object, duration: number, callback: string, arg1: any = null, arg2: any = null, arg3: any = null, arg4: any = null, arg5: any = null) : boolean;

		/** Follows `property` of `object` and applies it on `target_property` of `target`, beginning from `initial_val` for `duration` seconds, `delay` seconds later.

		 Use `TransitionType` for `trans_type` and `EaseType` for `ease_type` parameters. These values control the timing and direction of the interpolation. See the class description for more information. */
		//@ts-ignore
		follow_property(p_object: Object, property: string, initial_val: any, target: Object, target_property: string, duration: number, trans_type: Tween.TransitionType = 0, ease_type: Tween.EaseType = 2, delay: number = 0) : boolean;

		/** Follows `method` of `object` and applies the returned value on `target_method` of `target`, beginning from `initial_val` for `duration` seconds, `delay` later. Methods are called with consecutive values.

		 Use `TransitionType` for `trans_type` and `EaseType` for `ease_type` parameters. These values control the timing and direction of the interpolation. See the class description for more information. */
		//@ts-ignore
		follow_method(p_object: Object, method: string, initial_val: any, target: Object, target_method: string, duration: number, trans_type: Tween.TransitionType = 0, ease_type: Tween.EaseType = 2, delay: number = 0) : boolean;

		/** Animates `property` of `object` from the current value of the `initial_val` property of `initial` to `final_val` for `duration` seconds, `delay` seconds later.

		 Use `TransitionType` for `trans_type` and `EaseType` for `ease_type` parameters. These values control the timing and direction of the interpolation. See the class description for more information. */
		//@ts-ignore
		targeting_property(p_object: Object, property: string, initial: Object, initial_val: string, final_val: any, duration: number, trans_type: Tween.TransitionType = 0, ease_type: Tween.EaseType = 2, delay: number = 0) : boolean;

		/** Animates `method` of `object` from the value returned by `initial_method` to `final_val` for `duration` seconds, `delay` seconds later. Methods are animated by calling them with consecutive values.

		 Use `TransitionType` for `trans_type` and `EaseType` for `ease_type` parameters. These values control the timing and direction of the interpolation. See the class description for more information. */
		//@ts-ignore
		targeting_method(p_object: Object, method: string, initial: Object, initial_method: string, final_val: any, duration: number, trans_type: Tween.TransitionType = 0, ease_type: Tween.EaseType = 2, delay: number = 0) : boolean;

		/** Getter of `repeat` property */
		is_repeat() : boolean;

		/** Setter of `repeat` property */
		set_repeat(p_value: boolean) : void;

		/** Getter of `playback_process_mode` property */
		get_tween_process_mode() : number;

		/** Setter of `playback_process_mode` property */
		set_tween_process_mode(p_value: number) : void;

		/** Getter of `playback_speed` property */
		get_speed_scale() : number;

		/** Setter of `playback_speed` property */
		set_speed_scale(p_value: number) : void;
	}
	namespace Tween {

		/** Emitted at each step of the animation. */
		const tween_step: 'tween_step';

		/** Emitted when all processes in a tween end. */
		const tween_all_completed: 'tween_all_completed';

		/** Emitted when a tween ends. */
		const tween_completed: 'tween_completed';

		/** Emitted when a tween starts. */
		const tween_started: 'tween_started';
		enum EaseType {
			/** The interpolation starts slowly and speeds up towards the end. */
			EASE_IN = 0,
			/** The interpolation starts quickly and slows down towards the end. */
			EASE_OUT = 1,
			/** A combination of `EASE_IN` and `EASE_OUT`. The interpolation is slowest at both ends. */
			EASE_IN_OUT = 2,
			/** A combination of `EASE_IN` and `EASE_OUT`. The interpolation is fastest at both ends. */
			EASE_OUT_IN = 3,
		}
		enum TransitionType {
			/** The animation is interpolated linearly. */
			TRANS_LINEAR = 0,
			/** The animation is interpolated using a sine function. */
			TRANS_SINE = 1,
			/** The animation is interpolated with a quintic (to the power of 5) function. */
			TRANS_QUINT = 2,
			/** The animation is interpolated with a quartic (to the power of 4) function. */
			TRANS_QUART = 3,
			/** The animation is interpolated with a quadratic (to the power of 2) function. */
			TRANS_QUAD = 4,
			/** The animation is interpolated with an exponential (to the power of x) function. */
			TRANS_EXPO = 5,
			/** The animation is interpolated with elasticity, wiggling around the edges. */
			TRANS_ELASTIC = 6,
			/** The animation is interpolated with a cubic (to the power of 3) function. */
			TRANS_CUBIC = 7,
			/** The animation is interpolated with a function using square roots. */
			TRANS_CIRC = 8,
			/** The animation is interpolated by bouncing at the end. */
			TRANS_BOUNCE = 9,
			/** The animation is interpolated backing out at ends. */
			TRANS_BACK = 10,
		}
		enum TweenProcessMode {
			/** The tween updates with the `_physics_process` callback. */
			TWEEN_PROCESS_PHYSICS = 0,
			/** The tween updates with the `_process` callback. */
			TWEEN_PROCESS_IDLE = 1,
		}

		/** The tween updates with the `_physics_process` callback. */
		const TWEEN_PROCESS_PHYSICS: TweenProcessMode.TWEEN_PROCESS_PHYSICS;

		/** The tween updates with the `_process` callback. */
		const TWEEN_PROCESS_IDLE: TweenProcessMode.TWEEN_PROCESS_IDLE;

		/** The animation is interpolated linearly. */
		const TRANS_LINEAR: TransitionType.TRANS_LINEAR;

		/** The animation is interpolated using a sine function. */
		const TRANS_SINE: TransitionType.TRANS_SINE;

		/** The animation is interpolated with a quintic (to the power of 5) function. */
		const TRANS_QUINT: TransitionType.TRANS_QUINT;

		/** The animation is interpolated with a quartic (to the power of 4) function. */
		const TRANS_QUART: TransitionType.TRANS_QUART;

		/** The animation is interpolated with a quadratic (to the power of 2) function. */
		const TRANS_QUAD: TransitionType.TRANS_QUAD;

		/** The animation is interpolated with an exponential (to the power of x) function. */
		const TRANS_EXPO: TransitionType.TRANS_EXPO;

		/** The animation is interpolated with elasticity, wiggling around the edges. */
		const TRANS_ELASTIC: TransitionType.TRANS_ELASTIC;

		/** The animation is interpolated with a cubic (to the power of 3) function. */
		const TRANS_CUBIC: TransitionType.TRANS_CUBIC;

		/** The animation is interpolated with a function using square roots. */
		const TRANS_CIRC: TransitionType.TRANS_CIRC;

		/** The animation is interpolated by bouncing at the end. */
		const TRANS_BOUNCE: TransitionType.TRANS_BOUNCE;

		/** The animation is interpolated backing out at ends. */
		const TRANS_BACK: TransitionType.TRANS_BACK;

		/** The interpolation starts slowly and speeds up towards the end. */
		const EASE_IN: EaseType.EASE_IN;

		/** The interpolation starts quickly and slows down towards the end. */
		const EASE_OUT: EaseType.EASE_OUT;

		/** A combination of `EASE_IN` and `EASE_OUT`. The interpolation is slowest at both ends. */
		const EASE_IN_OUT: EaseType.EASE_IN_OUT;

		/** A combination of `EASE_IN` and `EASE_OUT`. The interpolation is fastest at both ends. */
		const EASE_OUT_IN: EaseType.EASE_OUT_IN;
	}

	/** Helper class to implement a UDP server.
	 A simple server that opens a UDP socket and returns connected `PacketPeerUDP` upon receiving new packets. See also `PacketPeerUDP.connect_to_host`.

	 Below a small example of how it can be used:

	 ```gdscript
	 # server.gd
	 extends Node
	 
	 var server := UDPServer.new()
	 var peers = []
	 
	 func _ready():
	     server.listen(4242)
	 
	 func _process(delta):
	     if server.is_connection_available():
	         var peer : PacketPeerUDP = server.take_connection()
	         var pkt = peer.get_packet()
	         print("Accepted peer: %s:%s" % [peer.get_packet_ip(), peer.get_packet_port()])
	         print("Received data: %s" % [pkt.get_string_from_utf8()])
	         # Reply so it knows we received the message.
	         peer.put_packet(pkt)
	         # Keep a reference so we can keep contacting the remote peer.
	         peers.append(peer)
	 
	     for i in range(0, peers.size()):
	         pass # Do something with the connected peers.
	 
	 ```

	 ```gdscript
	 # client.gd
	 extends Node
	 
	 var udp := PacketPeerUDP.new()
	 var connected = false
	 
	 func _ready():
	     udp.connect_to_host("127.0.0.1", 4242)
	 
	 func _process(delta):
	     if !connected:
	         # Try to contact server
	         udp.put_packet("The answer is... 42!".to_utf8())
	     if udp.get_available_packet_count() > 0:
	         print("Connected: %s" % udp.get_packet().get_string_from_utf8())
	         connected = true
	 ``` */
	class UDPServer extends Reference {

		/** Starts the server by opening a UDP socket listening on the given port. You can optionally specify a `bind_address` to only listen for packets sent to that address. See also `PacketPeerUDP.listen`. */
		//@ts-ignore
		listen(port: number, bind_address: string = "*") : number;

		/** Returns `true` if a packet with a new address/port combination is received on the socket. */
		is_connection_available() : boolean;

		/** Returns `true` if the socket is open and listening on a port. */
		is_listening() : boolean;

		/** Returns a `PacketPeerUDP` connected to the address/port combination of the first packet in queue. Will return `null` if no packet is in queue. See also `PacketPeerUDP.connect_to_host`. */
		take_connection() : PacketPeerUDP;

		/** Stops the server, closing the UDP socket if open. Will not disconnect any connected `PacketPeerUDP`. */
		stop() : void;
	}
	namespace UDPServer {
	}

	/** UPNP network functions.
	 Provides UPNP functionality to discover `UPNPDevice`s on the local network and execute commands on them, like managing port mappings (port forwarding) and querying the local and remote network IP address. Note that methods on this class are synchronous and block the calling thread.

	 To forward a specific port:

	 ```gdscript
	 const PORT = 7777
	 var upnp = UPNP.new()
	 upnp.discover(2000, 2, "InternetGatewayDevice")
	 upnp.add_port_mapping(port)
	 ```

	 To close a specific port (e.g. after you have finished using it):

	 ```gdscript
	 upnp.delete_port_mapping(port)
	 ``` */
	class UPNP extends Reference {

		/** Multicast interface to use for discovery. Uses the default multicast interface if empty. */
		discover_multicast_if: string;

		/** If `0`, the local port to use for discovery is chosen automatically by the system. If `1`, discovery will be done from the source port 1900 (same as destination port). Otherwise, the value will be used as the port. */
		discover_local_port: number;

		/** If `true`, IPv6 is used for `UPNPDevice` discovery. */
		discover_ipv6: boolean;

		/** Returns the number of discovered `UPNPDevice`s. */
		get_device_count() : number;

		/** Returns the `UPNPDevice` at the given `index`. */
		get_device(index: number) : UPNPDevice;

		/** Adds the given `UPNPDevice` to the list of discovered devices. */
		add_device(device: UPNPDevice) : void;

		/** Sets the device at `index` from the list of discovered devices to `device`. */
		set_device(index: number, device: UPNPDevice) : void;

		/** Removes the device at `index` from the list of discovered devices. */
		remove_device(index: number) : void;

		/** Clears the list of discovered devices. */
		clear_devices() : void;

		/** Returns the default gateway. That is the first discovered `UPNPDevice` that is also a valid IGD (InternetGatewayDevice). */
		get_gateway() : UPNPDevice;

		/** Discovers local `UPNPDevice`s. Clears the list of previously discovered devices.

		 Filters for IGD (InternetGatewayDevice) type devices by default, as those manage port forwarding. `timeout` is the time to wait for responses in milliseconds. `ttl` is the time-to-live; only touch this if you know what you're doing.

		 See `UPNPResult` for possible return values. */
		//@ts-ignore
		discover(timeout: number = 2000, ttl: number = 2, device_filter: string = "InternetGatewayDevice") : number;

		/** Returns the external `IP` address of the default gateway (see `get_gateway`) as string. Returns an empty string on error. */
		query_external_address() : string;

		/** Adds a mapping to forward the external `port` (between 1 and 65535) on the default gateway (see `get_gateway`) to the `internal_port` on the local machine for the given protocol `proto` (either `TCP` or `UDP`, with UDP being the default). If a port mapping for the given port and protocol combination already exists on that gateway device, this method tries to overwrite it. If that is not desired, you can retrieve the gateway manually with `get_gateway` and call `add_port_mapping` on it, if any.

		 If `internal_port` is `0` (the default), the same port number is used for both the external and the internal port (the `port` value).

		 The description (`desc`) is shown in some router UIs and can be used to point out which application added the mapping. The mapping's lease duration can be limited by specifying a `duration` (in seconds). However, some routers are incompatible with one or both of these, so use with caution and add fallback logic in case of errors to retry without them if in doubt.

		 See `UPNPResult` for possible return values. */
		//@ts-ignore
		add_port_mapping(port: number, port_internal: number = 0, desc: string = "", proto: string = "UDP", duration: number = 0) : number;

		/** Deletes the port mapping for the given port and protocol combination on the default gateway (see `get_gateway`) if one exists. `port` must be a valid port between 1 and 65535, `proto` can be either `TCP` or `UDP`. See `UPNPResult` for possible return values. */
		//@ts-ignore
		delete_port_mapping(port: number, proto: string = "UDP") : number;

		/** Getter of `discover_multicast_if` property */
		get_discover_multicast_if() : string;

		/** Setter of `discover_multicast_if` property */
		set_discover_multicast_if(p_value: string) : void;

		/** Getter of `discover_local_port` property */
		get_discover_local_port() : number;

		/** Setter of `discover_local_port` property */
		set_discover_local_port(p_value: number) : void;

		/** Getter of `discover_ipv6` property */
		is_discover_ipv6() : boolean;

		/** Setter of `discover_ipv6` property */
		set_discover_ipv6(p_value: boolean) : void;
	}
	namespace UPNP {
		enum UPNPResult {
			/** UPNP command or discovery was successful. */
			UPNP_RESULT_SUCCESS = 0,
			/** Not authorized to use the command on the `UPNPDevice`. May be returned when the user disabled UPNP on their router. */
			UPNP_RESULT_NOT_AUTHORIZED = 1,
			/** No port mapping was found for the given port, protocol combination on the given `UPNPDevice`. */
			UPNP_RESULT_PORT_MAPPING_NOT_FOUND = 2,
			/** Inconsistent parameters. */
			UPNP_RESULT_INCONSISTENT_PARAMETERS = 3,
			/** No such entry in array. May be returned if a given port, protocol combination is not found on an `UPNPDevice`. */
			UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY = 4,
			/** The action failed. */
			UPNP_RESULT_ACTION_FAILED = 5,
			/** The `UPNPDevice` does not allow wildcard values for the source IP address. */
			UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED = 6,
			/** The `UPNPDevice` does not allow wildcard values for the external port. */
			UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED = 7,
			/** The `UPNPDevice` does not allow wildcard values for the internal port. */
			UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED = 8,
			/** The remote host value must be a wildcard. */
			UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD = 9,
			/** The external port value must be a wildcard. */
			UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD = 10,
			/** No port maps are available. May also be returned if port mapping functionality is not available. */
			UPNP_RESULT_NO_PORT_MAPS_AVAILABLE = 11,
			/** Conflict with other mechanism. May be returned instead of `UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING` if a port mapping conflicts with an existing one. */
			UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM = 12,
			/** Conflict with an existing port mapping. */
			UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING = 13,
			/** External and internal port values must be the same. */
			UPNP_RESULT_SAME_PORT_VALUES_REQUIRED = 14,
			/** Only permanent leases are supported. Do not use the `duration` parameter when adding port mappings. */
			UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED = 15,
			/** Invalid gateway. */
			UPNP_RESULT_INVALID_GATEWAY = 16,
			/** Invalid port. */
			UPNP_RESULT_INVALID_PORT = 17,
			/** Invalid protocol. */
			UPNP_RESULT_INVALID_PROTOCOL = 18,
			/** Invalid duration. */
			UPNP_RESULT_INVALID_DURATION = 19,
			/** Invalid arguments. */
			UPNP_RESULT_INVALID_ARGS = 20,
			/** Invalid response. */
			UPNP_RESULT_INVALID_RESPONSE = 21,
			/** Invalid parameter. */
			UPNP_RESULT_INVALID_PARAM = 22,
			/** HTTP error. */
			UPNP_RESULT_HTTP_ERROR = 23,
			/** Socket error. */
			UPNP_RESULT_SOCKET_ERROR = 24,
			/** Error allocating memory. */
			UPNP_RESULT_MEM_ALLOC_ERROR = 25,
			/** No gateway available. You may need to call `discover` first, or discovery didn't detect any valid IGDs (InternetGatewayDevices). */
			UPNP_RESULT_NO_GATEWAY = 26,
			/** No devices available. You may need to call `discover` first, or discovery didn't detect any valid `UPNPDevice`s. */
			UPNP_RESULT_NO_DEVICES = 27,
			/** Unknown error. */
			UPNP_RESULT_UNKNOWN_ERROR = 28,
		}

		/** UPNP command or discovery was successful. */
		const UPNP_RESULT_SUCCESS: UPNPResult.UPNP_RESULT_SUCCESS;

		/** Not authorized to use the command on the `UPNPDevice`. May be returned when the user disabled UPNP on their router. */
		const UPNP_RESULT_NOT_AUTHORIZED: UPNPResult.UPNP_RESULT_NOT_AUTHORIZED;

		/** No port mapping was found for the given port, protocol combination on the given `UPNPDevice`. */
		const UPNP_RESULT_PORT_MAPPING_NOT_FOUND: UPNPResult.UPNP_RESULT_PORT_MAPPING_NOT_FOUND;

		/** Inconsistent parameters. */
		const UPNP_RESULT_INCONSISTENT_PARAMETERS: UPNPResult.UPNP_RESULT_INCONSISTENT_PARAMETERS;

		/** No such entry in array. May be returned if a given port, protocol combination is not found on an `UPNPDevice`. */
		const UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY: UPNPResult.UPNP_RESULT_NO_SUCH_ENTRY_IN_ARRAY;

		/** The action failed. */
		const UPNP_RESULT_ACTION_FAILED: UPNPResult.UPNP_RESULT_ACTION_FAILED;

		/** The `UPNPDevice` does not allow wildcard values for the source IP address. */
		const UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED: UPNPResult.UPNP_RESULT_SRC_IP_WILDCARD_NOT_PERMITTED;

		/** The `UPNPDevice` does not allow wildcard values for the external port. */
		const UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED: UPNPResult.UPNP_RESULT_EXT_PORT_WILDCARD_NOT_PERMITTED;

		/** The `UPNPDevice` does not allow wildcard values for the internal port. */
		const UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED: UPNPResult.UPNP_RESULT_INT_PORT_WILDCARD_NOT_PERMITTED;

		/** The remote host value must be a wildcard. */
		const UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD: UPNPResult.UPNP_RESULT_REMOTE_HOST_MUST_BE_WILDCARD;

		/** The external port value must be a wildcard. */
		const UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD: UPNPResult.UPNP_RESULT_EXT_PORT_MUST_BE_WILDCARD;

		/** No port maps are available. May also be returned if port mapping functionality is not available. */
		const UPNP_RESULT_NO_PORT_MAPS_AVAILABLE: UPNPResult.UPNP_RESULT_NO_PORT_MAPS_AVAILABLE;

		/** Conflict with other mechanism. May be returned instead of `UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING` if a port mapping conflicts with an existing one. */
		const UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM: UPNPResult.UPNP_RESULT_CONFLICT_WITH_OTHER_MECHANISM;

		/** Conflict with an existing port mapping. */
		const UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING: UPNPResult.UPNP_RESULT_CONFLICT_WITH_OTHER_MAPPING;

		/** External and internal port values must be the same. */
		const UPNP_RESULT_SAME_PORT_VALUES_REQUIRED: UPNPResult.UPNP_RESULT_SAME_PORT_VALUES_REQUIRED;

		/** Only permanent leases are supported. Do not use the `duration` parameter when adding port mappings. */
		const UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED: UPNPResult.UPNP_RESULT_ONLY_PERMANENT_LEASE_SUPPORTED;

		/** Invalid gateway. */
		const UPNP_RESULT_INVALID_GATEWAY: UPNPResult.UPNP_RESULT_INVALID_GATEWAY;

		/** Invalid port. */
		const UPNP_RESULT_INVALID_PORT: UPNPResult.UPNP_RESULT_INVALID_PORT;

		/** Invalid protocol. */
		const UPNP_RESULT_INVALID_PROTOCOL: UPNPResult.UPNP_RESULT_INVALID_PROTOCOL;

		/** Invalid duration. */
		const UPNP_RESULT_INVALID_DURATION: UPNPResult.UPNP_RESULT_INVALID_DURATION;

		/** Invalid arguments. */
		const UPNP_RESULT_INVALID_ARGS: UPNPResult.UPNP_RESULT_INVALID_ARGS;

		/** Invalid response. */
		const UPNP_RESULT_INVALID_RESPONSE: UPNPResult.UPNP_RESULT_INVALID_RESPONSE;

		/** Invalid parameter. */
		const UPNP_RESULT_INVALID_PARAM: UPNPResult.UPNP_RESULT_INVALID_PARAM;

		/** HTTP error. */
		const UPNP_RESULT_HTTP_ERROR: UPNPResult.UPNP_RESULT_HTTP_ERROR;

		/** Socket error. */
		const UPNP_RESULT_SOCKET_ERROR: UPNPResult.UPNP_RESULT_SOCKET_ERROR;

		/** Error allocating memory. */
		const UPNP_RESULT_MEM_ALLOC_ERROR: UPNPResult.UPNP_RESULT_MEM_ALLOC_ERROR;

		/** No gateway available. You may need to call `discover` first, or discovery didn't detect any valid IGDs (InternetGatewayDevices). */
		const UPNP_RESULT_NO_GATEWAY: UPNPResult.UPNP_RESULT_NO_GATEWAY;

		/** No devices available. You may need to call `discover` first, or discovery didn't detect any valid `UPNPDevice`s. */
		const UPNP_RESULT_NO_DEVICES: UPNPResult.UPNP_RESULT_NO_DEVICES;

		/** Unknown error. */
		const UPNP_RESULT_UNKNOWN_ERROR: UPNPResult.UPNP_RESULT_UNKNOWN_ERROR;
	}

	/** UPNP device.
	 UPNP device. See `UPNP` for UPNP discovery and utility functions. Provides low-level access to UPNP control commands. Allows to manage port mappings (port forwarding) and to query network information of the device (like local and external IP address and status). Note that methods on this class are synchronous and block the calling thread. */
	class UPNPDevice extends Reference {

		/** URL to the device description. */
		description_url: string;

		/** Service type. */
		service_type: string;

		/** IDG control URL. */
		igd_control_url: string;

		/** IGD service type. */
		igd_service_type: string;

		/** Address of the local machine in the network connecting it to this `UPNPDevice`. */
		igd_our_addr: string;

		/** IGD status. See `IGDStatus`. */
		igd_status: number;

		/** Returns `true` if this is a valid IGD (InternetGatewayDevice) which potentially supports port forwarding. */
		is_valid_gateway() : boolean;

		/** Returns the external IP address of this `UPNPDevice` or an empty string. */
		query_external_address() : string;

		/** Adds a port mapping to forward the given external port on this `UPNPDevice` for the given protocol to the local machine. See `UPNP.add_port_mapping`. */
		//@ts-ignore
		add_port_mapping(port: number, port_internal: number = 0, desc: string = "", proto: string = "UDP", duration: number = 0) : number;

		/** Deletes the port mapping identified by the given port and protocol combination on this device. See `UPNP.delete_port_mapping`. */
		//@ts-ignore
		delete_port_mapping(port: number, proto: string = "UDP") : number;

		/** Getter of `description_url` property */
		get_description_url() : string;

		/** Setter of `description_url` property */
		set_description_url(p_value: string) : void;

		/** Getter of `service_type` property */
		get_service_type() : string;

		/** Setter of `service_type` property */
		set_service_type(p_value: string) : void;

		/** Getter of `igd_control_url` property */
		get_igd_control_url() : string;

		/** Setter of `igd_control_url` property */
		set_igd_control_url(p_value: string) : void;

		/** Getter of `igd_service_type` property */
		get_igd_service_type() : string;

		/** Setter of `igd_service_type` property */
		set_igd_service_type(p_value: string) : void;

		/** Getter of `igd_our_addr` property */
		get_igd_our_addr() : string;

		/** Setter of `igd_our_addr` property */
		set_igd_our_addr(p_value: string) : void;

		/** Getter of `igd_status` property */
		get_igd_status() : number;

		/** Setter of `igd_status` property */
		set_igd_status(p_value: number) : void;
	}
	namespace UPNPDevice {
		enum IGDStatus {
			/** OK. */
			IGD_STATUS_OK = 0,
			/** HTTP error. */
			IGD_STATUS_HTTP_ERROR = 1,
			/** Empty HTTP response. */
			IGD_STATUS_HTTP_EMPTY = 2,
			/** Returned response contained no URLs. */
			IGD_STATUS_NO_URLS = 3,
			/** Not a valid IGD. */
			IGD_STATUS_NO_IGD = 4,
			/** Disconnected. */
			IGD_STATUS_DISCONNECTED = 5,
			/** Unknown device. */
			IGD_STATUS_UNKNOWN_DEVICE = 6,
			/** Invalid control. */
			IGD_STATUS_INVALID_CONTROL = 7,
			/** Memory allocation error. */
			IGD_STATUS_MALLOC_ERROR = 8,
			/** Unknown error. */
			IGD_STATUS_UNKNOWN_ERROR = 9,
		}

		/** OK. */
		const IGD_STATUS_OK: IGDStatus.IGD_STATUS_OK;

		/** HTTP error. */
		const IGD_STATUS_HTTP_ERROR: IGDStatus.IGD_STATUS_HTTP_ERROR;

		/** Empty HTTP response. */
		const IGD_STATUS_HTTP_EMPTY: IGDStatus.IGD_STATUS_HTTP_EMPTY;

		/** Returned response contained no URLs. */
		const IGD_STATUS_NO_URLS: IGDStatus.IGD_STATUS_NO_URLS;

		/** Not a valid IGD. */
		const IGD_STATUS_NO_IGD: IGDStatus.IGD_STATUS_NO_IGD;

		/** Disconnected. */
		const IGD_STATUS_DISCONNECTED: IGDStatus.IGD_STATUS_DISCONNECTED;

		/** Unknown device. */
		const IGD_STATUS_UNKNOWN_DEVICE: IGDStatus.IGD_STATUS_UNKNOWN_DEVICE;

		/** Invalid control. */
		const IGD_STATUS_INVALID_CONTROL: IGDStatus.IGD_STATUS_INVALID_CONTROL;

		/** Memory allocation error. */
		const IGD_STATUS_MALLOC_ERROR: IGDStatus.IGD_STATUS_MALLOC_ERROR;

		/** Unknown error. */
		const IGD_STATUS_UNKNOWN_ERROR: IGDStatus.IGD_STATUS_UNKNOWN_ERROR;
	}

	/** Helper to manage undo/redo operations in the editor or custom tools.
	 Helper to manage undo/redo operations in the editor or custom tools. It works by registering methods and property changes inside "actions".

	 Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.

	 Here's an example on how to add an action to the Godot editor's own `UndoRedo`, from a plugin:

	 ```gdscript
	 var undo_redo = get_undo_redo() # Method of EditorPlugin.
	 
	 func do_something():
	     pass # Put your code here.
	 
	 func undo_something():
	     pass # Put here the code that reverts what's done by "do_something()".
	 
	 func _on_MyButton_pressed():
	     var node = get_node("MyNode2D")
	     undo_redo.create_action("Move the node")
	     undo_redo.add_do_method(self, "do_something")
	     undo_redo.add_undo_method(self, "undo_something")
	     undo_redo.add_do_property(node, "position", Vector2(100,100))
	     undo_redo.add_undo_property(node, "position", node.position)
	     undo_redo.commit_action()
	 ```

	 `create_action`, `add_do_method`, `add_undo_method`, `add_do_property`, `add_undo_property`, and `commit_action` should be called one after the other, like in the example. Not doing so could lead to crashes.

	 If you don't need to register a method, you can leave `add_do_method` and `add_undo_method` out; the same goes for properties. You can also register more than one method/property. */
	class UndoRedo extends Object {

		/** Create a new action. After this is called, do all your calls to `add_do_method`, `add_undo_method`, `add_do_property`, and `add_undo_property`, then commit the action with `commit_action`.

		 The way actions are merged is dictated by the `merge_mode` argument. See `MergeMode` for details. */
		//@ts-ignore
		create_action(name: string, merge_mode: UndoRedo.MergeMode = 0) : void;

		/** Commit the action. All "do" methods/properties are called/set when this function is called. */
		commit_action() : void;

		/** Returns `true` if the `UndoRedo` is currently committing the action, i.e. running its "do" method or property change (see `commit_action`). */
		is_commiting_action() : boolean;

		/** Register a method that will be called when the action is committed. */
		add_do_method(p_object: Object, method: string, ...args) : void;

		/** Register a method that will be called when the action is undone. */
		add_undo_method(p_object: Object, method: string, ...args) : void;

		/** Register a property value change for "do". */
		add_do_property(p_object: Object, property: string, value: any) : void;

		/** Register a property value change for "undo". */
		add_undo_property(p_object: Object, property: string, value: any) : void;

		/** Register a reference for "do" that will be erased if the "do" history is lost. This is useful mostly for new nodes created for the "do" call. Do not use for resources. */
		add_do_reference(p_object: Object) : void;

		/** Register a reference for "undo" that will be erased if the "undo" history is lost. This is useful mostly for nodes removed with the "do" call (not the "undo" call!). */
		add_undo_reference(p_object: Object) : void;

		/** Clear the undo/redo history and associated references.

		 Passing `false` to `increase_version` will prevent the version number to be increased from this. */
		//@ts-ignore
		clear_history(increase_version: boolean = true) : void;

		/** Gets the name of the current action. */
		get_current_action_name() : string;

		/** Returns `true` if an "undo" action is available. */
		has_undo() : boolean;

		/** Returns `true` if a "redo" action is available. */
		has_redo() : boolean;

		/** Gets the version. Every time a new action is committed, the `UndoRedo`'s version number is increased automatically.

		 This is useful mostly to check if something changed from a saved version. */
		get_version() : number;

		/** Redo the last action. */
		redo() : boolean;

		/** Undo the last action. */
		undo() : boolean;
	}
	namespace UndoRedo {

		/** Called when `undo` or `redo` was called. */
		const version_changed: 'version_changed';
		enum MergeMode {
			/** Makes "do"/"undo" operations stay in separate actions. */
			MERGE_DISABLE = 0,
			/** Makes so that the action's "do" operation is from the first action created and the "undo" operation is from the last subsequent action with the same name. */
			MERGE_ENDS = 1,
			/** Makes subsequent actions with the same name be merged into one. */
			MERGE_ALL = 2,
		}

		/** Makes "do"/"undo" operations stay in separate actions. */
		const MERGE_DISABLE: MergeMode.MERGE_DISABLE;

		/** Makes so that the action's "do" operation is from the first action created and the "undo" operation is from the last subsequent action with the same name. */
		const MERGE_ENDS: MergeMode.MERGE_ENDS;

		/** Makes subsequent actions with the same name be merged into one. */
		const MERGE_ALL: MergeMode.MERGE_ALL;
	}

	/** Vertical box container.
	 Vertical box container. See `BoxContainer`. */
	class VBoxContainer extends BoxContainer {
	}
	namespace VBoxContainer {
	}

	/** Vertical scroll bar.
	 Vertical version of `ScrollBar`, which goes from top (min) to bottom (max). */
	class VScrollBar extends ScrollBar {

		/**  */
		size_flags_horizontal: number;

		/**  */
		size_flags_vertical: number;

		/** Getter of `size_flags_horizontal` property */
		get_h_size_flags() : number;

		/** Setter of `size_flags_horizontal` property */
		set_h_size_flags(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;
	}
	namespace VScrollBar {
	}

	/** Vertical version of `Separator`.
	 Vertical version of `Separator`. Even though it looks vertical, it is used to separate objects horizontally. */
	class VSeparator extends Separator {
	}
	namespace VSeparator {
	}

	/** Vertical slider.
	 Vertical slider. See `Slider`. This one goes from bottom (min) to top (max). */
	class VSlider extends Slider {

		/**  */
		size_flags_horizontal: number;

		/**  */
		size_flags_vertical: number;

		/** Getter of `size_flags_horizontal` property */
		get_h_size_flags() : number;

		/** Setter of `size_flags_horizontal` property */
		set_h_size_flags(p_value: number) : void;

		/** Getter of `size_flags_vertical` property */
		get_v_size_flags() : number;

		/** Setter of `size_flags_vertical` property */
		set_v_size_flags(p_value: number) : void;
	}
	namespace VSlider {
	}

	/** Vertical split container.
	 Vertical split container. See `SplitContainer`. This goes from top to bottom. */
	class VSplitContainer extends SplitContainer {
	}
	namespace VSplitContainer {
	}

	/** Physics body that simulates the behavior of a car.
	 This node implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. You will need to add a `CollisionShape` for the main body of your vehicle and add `VehicleWheel` nodes for the wheels. You should also add a `MeshInstance` to this node for the 3D model of your car but this model should not include meshes for the wheels. You should control the vehicle by using the `brake`, `engine_force`, and `steering` properties and not change the position or orientation of this node directly.

	 **Note:** The origin point of your VehicleBody will determine the center of gravity of your vehicle so it is better to keep this low and move the `CollisionShape` and `MeshInstance` upwards. */
	class VehicleBody extends RigidBody {

		/** Accelerates the vehicle by applying an engine force. The vehicle is only speed up if the wheels that have `VehicleWheel.use_as_traction` set to `true` and are in contact with a surface. The `RigidBody.mass` of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration.

		 **Note:** The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.

		 A negative value will result in the vehicle reversing. */
		engine_force: number;

		/** Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the `RigidBody.mass` of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking. */
		brake: number;

		/** The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have `VehicleWheel.use_as_steering` set to `true` will automatically be rotated. */
		steering: number;

		/**  */
		mass: number;

		/**  */
		weight: number;

		/** Getter of `engine_force` property */
		get_engine_force() : number;

		/** Setter of `engine_force` property */
		set_engine_force(p_value: number) : void;

		/** Getter of `brake` property */
		get_brake() : number;

		/** Setter of `brake` property */
		set_brake(p_value: number) : void;

		/** Getter of `steering` property */
		get_steering() : number;

		/** Setter of `steering` property */
		set_steering(p_value: number) : void;

		/** Getter of `mass` property */
		get_mass() : number;

		/** Setter of `mass` property */
		set_mass(p_value: number) : void;

		/** Getter of `weight` property */
		get_weight() : number;

		/** Setter of `weight` property */
		set_weight(p_value: number) : void;
	}
	namespace VehicleBody {
	}

	/** Physics object that simulates the behavior of a wheel.
	 This node needs to be used as a child node of `VehicleBody` and simulates the behavior of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface. */
	class VehicleWheel extends Spatial {

		/** Accelerates the wheel by applying an engine force. The wheel is only speed up if it is in contact with a surface. The `RigidBody.mass` of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration.

		 **Note:** The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears.

		 A negative value will result in the wheel reversing. */
		engine_force: number;

		/** Slows down the wheel by applying a braking force. The wheel is only slowed down if it is in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the `RigidBody.mass` of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking. */
		brake: number;

		/** The steering angle for the wheel. Setting this to a non-zero value will result in the vehicle turning when it's moving. */
		steering: number;

		/** If `true`, this wheel transfers engine force to the ground to propel the vehicle forward. This value is used in conjunction with `VehicleBody.engine_force` and ignored if you are using the per-wheel `engine_force` value instead. */
		use_as_traction: boolean;

		/** If `true`, this wheel will be turned when the car steers. This value is used in conjunction with `VehicleBody.steering` and ignored if you are using the per-wheel `steering` value instead. */
		use_as_steering: boolean;

		/** This value affects the roll of your vehicle. If set to 1.0 for all wheels, your vehicle will be prone to rolling over, while a value of 0.0 will resist body roll. */
		wheel_roll_influence: number;

		/** The radius of the wheel in meters. */
		wheel_radius: number;

		/** This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest. */
		wheel_rest_length: number;

		/** This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear.

		 It's best to set this to 1.0 when starting out. */
		wheel_friction_slip: number;

		/** This is the distance the suspension can travel. As Godot units are equivalent to meters, keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car. */
		suspension_travel: number;

		/** This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car. */
		suspension_stiffness: number;

		/** The maximum force the spring can resist. This value should be higher than a quarter of the `RigidBody.mass` of the `VehicleBody` or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3× to 4× this number. */
		suspension_max_force: number;

		/** The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car. */
		damping_compression: number;

		/** The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the `damping_compression` property. For a `damping_compression` value of 0.3, try a relaxation value of 0.5. */
		damping_relaxation: number;

		/** Returns `true` if this wheel is in contact with a surface. */
		is_in_contact() : boolean;

		/** Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is skidding (the wheel has lost grip, e.g. icy terrain), 1.0 means not skidding (the wheel has full grip, e.g. dry asphalt road). */
		get_skidinfo() : number;

		/** Returns the rotational speed of the wheel in revolutions per minute. */
		get_rpm() : number;

		/** Getter of `engine_force` property */
		get_engine_force() : number;

		/** Setter of `engine_force` property */
		set_engine_force(p_value: number) : void;

		/** Getter of `brake` property */
		get_brake() : number;

		/** Setter of `brake` property */
		set_brake(p_value: number) : void;

		/** Getter of `steering` property */
		get_steering() : number;

		/** Setter of `steering` property */
		set_steering(p_value: number) : void;

		/** Getter of `use_as_traction` property */
		is_used_as_traction() : boolean;

		/** Setter of `use_as_traction` property */
		set_use_as_traction(p_value: boolean) : void;

		/** Getter of `use_as_steering` property */
		is_used_as_steering() : boolean;

		/** Setter of `use_as_steering` property */
		set_use_as_steering(p_value: boolean) : void;

		/** Getter of `wheel_roll_influence` property */
		get_roll_influence() : number;

		/** Setter of `wheel_roll_influence` property */
		set_roll_influence(p_value: number) : void;

		/** Getter of `wheel_radius` property */
		get_radius() : number;

		/** Setter of `wheel_radius` property */
		set_radius(p_value: number) : void;

		/** Getter of `wheel_rest_length` property */
		get_suspension_rest_length() : number;

		/** Setter of `wheel_rest_length` property */
		set_suspension_rest_length(p_value: number) : void;

		/** Getter of `wheel_friction_slip` property */
		get_friction_slip() : number;

		/** Setter of `wheel_friction_slip` property */
		set_friction_slip(p_value: number) : void;

		/** Getter of `suspension_travel` property */
		get_suspension_travel() : number;

		/** Setter of `suspension_travel` property */
		set_suspension_travel(p_value: number) : void;

		/** Getter of `suspension_stiffness` property */
		get_suspension_stiffness() : number;

		/** Setter of `suspension_stiffness` property */
		set_suspension_stiffness(p_value: number) : void;

		/** Getter of `suspension_max_force` property */
		get_suspension_max_force() : number;

		/** Setter of `suspension_max_force` property */
		set_suspension_max_force(p_value: number) : void;

		/** Getter of `damping_compression` property */
		get_damping_compression() : number;

		/** Setter of `damping_compression` property */
		set_damping_compression(p_value: number) : void;

		/** Getter of `damping_relaxation` property */
		get_damping_relaxation() : number;

		/** Setter of `damping_relaxation` property */
		set_damping_relaxation(p_value: number) : void;
	}
	namespace VehicleWheel {
	}

	/** Control for playing video streams.
	 Control node for playing video streams using `VideoStream` resources.

	 Supported video formats are `url=https://www.webmproject.org/`WebM`/url` (`VideoStreamWebm`), `url=https://www.theora.org/`Ogg Theora`/url` (`VideoStreamTheora`), and any format exposed via a GDNative plugin using `VideoStreamGDNative`. */
	class VideoPlayer extends Control {

		/** The embedded audio track to play. */
		audio_track: number;

		/** The assigned video stream. See description for supported formats. */
		stream: VideoStream;

		/** Audio volume in dB. */
		volume_db: number;

		/** Audio volume as a linear value. */
		volume: number;

		/** If `true`, playback starts when the scene loads. */
		autoplay: boolean;

		/** If `true`, the video is paused. */
		paused: boolean;

		/** If `true`, the video scales to the control size. Otherwise, the control minimum size will be automatically adjusted to match the video stream's dimensions. */
		expand: boolean;

		/** Amount of time in milliseconds to store in buffer while playing. */
		buffering_msec: number;

		/** The current position of the stream, in seconds. */
		stream_position: number;

		/** Audio bus to use for sound playback. */
		bus: string;

		/** Starts the video playback from the beginning. If the video is paused, this will not unpause the video. */
		play() : void;

		/** Stops the video playback and sets the stream position to 0.

		 **Note:** Although the stream position will be set to 0, the first frame of the video stream won't become the current frame. */
		stop() : void;

		/** Returns `true` if the video is playing.

		 **Note:** The video is still considered playing if paused during playback. */
		is_playing() : boolean;

		/** Returns the video stream's name, or `"<No Stream>"` if no video stream is assigned. */
		get_stream_name() : string;

		/** Returns the current frame as a `Texture`. */
		get_video_texture() : Texture;

		/** Getter of `audio_track` property */
		get_audio_track() : number;

		/** Setter of `audio_track` property */
		set_audio_track(p_value: number) : void;

		/** Getter of `stream` property */
		get_stream() : VideoStream;

		/** Setter of `stream` property */
		set_stream(p_value: VideoStream) : void;

		/** Getter of `volume_db` property */
		get_volume_db() : number;

		/** Setter of `volume_db` property */
		set_volume_db(p_value: number) : void;

		/** Getter of `volume` property */
		get_volume() : number;

		/** Setter of `volume` property */
		set_volume(p_value: number) : void;

		/** Getter of `autoplay` property */
		has_autoplay() : boolean;

		/** Setter of `autoplay` property */
		set_autoplay(p_value: boolean) : void;

		/** Getter of `paused` property */
		is_paused() : boolean;

		/** Setter of `paused` property */
		set_paused(p_value: boolean) : void;

		/** Getter of `expand` property */
		has_expand() : boolean;

		/** Setter of `expand` property */
		set_expand(p_value: boolean) : void;

		/** Getter of `buffering_msec` property */
		get_buffering_msec() : number;

		/** Setter of `buffering_msec` property */
		set_buffering_msec(p_value: number) : void;

		/** Getter of `stream_position` property */
		get_stream_position() : number;

		/** Setter of `stream_position` property */
		set_stream_position(p_value: number) : void;

		/** Getter of `bus` property */
		get_bus() : string;

		/** Setter of `bus` property */
		set_bus(p_value: string) : void;
	}
	namespace VideoPlayer {

		/** Emitted when playback is finished. */
		const finished: 'finished';
	}

	/** Base resource for video streams.
	 Base resource type for all video streams. Classes that derive from `VideoStream` can all be used as resource types to play back videos in `VideoPlayer`. */
	class VideoStream extends Resource {
	}
	namespace VideoStream {
	}

	/** `VideoStream` resource for for video formats implemented via GDNative.
	 `VideoStream` resource for for video formats implemented via GDNative.

	 It can be used via `url=https://github.com/KidRigger/godot-videodecoder`godot-videodecoder`/url` which uses the `url=https://ffmpeg.org`FFmpeg`/url` library. */
	class VideoStreamGDNative extends VideoStream {

		/** Sets the video file that this `VideoStreamGDNative` resource handles. The supported extensions depend on the GDNative plugins used to expose video formats. */
		set_file(file: string) : void;

		/** Returns the video file handled by this `VideoStreamGDNative`. */
		get_file() : string;
	}
	namespace VideoStreamGDNative {
	}

	/** `VideoStream` resource for Ogg Theora videos.
	 `VideoStream` resource handling the `url=https://www.theora.org/`Ogg Theora`/url` video format with `.ogv` extension. */
	class VideoStreamTheora extends VideoStream {

		/** Sets the Ogg Theora video file that this `VideoStreamTheora` resource handles. The `file` name should have the `.o` extension. */
		set_file(file: string) : void;

		/** Returns the Ogg Theora video file handled by this `VideoStreamTheora`. */
		get_file() : string;
	}
	namespace VideoStreamTheora {
	}

	/** `VideoStream` resource for WebM videos.
	 `VideoStream` resource handling the `url=https://www.webmproject.org/`WebM`/url` video format with `.webm` extension. */
	class VideoStreamWebm extends VideoStream {

		/** Sets the WebM video file that this `VideoStreamWebm` resource handles. The `file` name should have the `.webm` extension. */
		set_file(file: string) : void;

		/** Returns the WebM video file handled by this `VideoStreamWebm`. */
		get_file() : string;
	}
	namespace VideoStreamWebm {
	}

	/** Creates a sub-view into the screen.
	 A Viewport creates a different view into the screen, or a sub-view inside another viewport. Children 2D Nodes will display on it, and children Camera 3D nodes will render on it too.

	 Optionally, a viewport can have its own 2D or 3D world, so they don't share what they draw with other viewports.

	 If a viewport is a child of a `ViewportContainer`, it will automatically take up its size, otherwise it must be set manually.

	 Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it.

	 Also, viewports can be assigned to different screens in case the devices have multiple screens.

	 Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw. */
	class Viewport extends Node {

		/** If `true`, the viewport will be used in AR/VR process. */
		arvr: boolean;

		/** The width and height of viewport. */
		size: Vector2;

		/** If `true`, the size override affects stretch as well. */
		size_override_stretch: boolean;

		/** If `true`, the viewport will use `World` defined in `world` property. */
		own_world: boolean;

		/** The custom `World` which can be used as 3D environment source. */
		world: World;

		/** The custom `World2D` which can be used as 2D environment source. */
		world_2d: World2D;

		/** If `true`, the viewport should render its background as transparent. */
		transparent_bg: boolean;

		/**  */
		handle_input_locally: boolean;

		/** The multisample anti-aliasing mode. A higher number results in smoother edges at the cost of significantly worse performance. A value of 4 is best unless targeting very high-end systems. */
		msaa: number;

		/** If `true`, the viewport rendering will receive benefits from High Dynamic Range algorithm. High Dynamic Range allows the viewport to receive values that are outside the 0-1 range. In Godot HDR uses 16 bits, meaning it does not store the full range of a floating point number.

		 **Note:** Requires `usage` to be set to `USAGE_3D` or `USAGE_3D_NO_EFFECTS`, since HDR is not supported for 2D. */
		hdr: boolean;

		/** If `true`, the viewport will disable 3D rendering. For actual disabling use `usage`. */
		disable_3d: boolean;

		/** If `true`, the result after 3D rendering will not have a linear to sRGB color conversion applied. This is important when the viewport is used as a render target where the result is used as a texture on a 3D object rendered in another viewport. It is also important if the viewport is used to create data that is not color based (noise, heightmaps, pickmaps, etc.). Do not enable this when the viewport is used as a texture on a 2D object or if the viewport is your final output. */
		keep_3d_linear: boolean;

		/** The rendering mode of viewport. */
		usage: number;

		/** If `true`, renders the Viewport directly to the screen instead of to the root viewport. Only available in GLES2. This is a low-level optimization and should not be used in most cases. If used, reading from the Viewport or from `SCREEN_TEXTURE` becomes unavailable. For more information see `VisualServer.viewport_set_render_direct_to_screen`. */
		render_direct_to_screen: boolean;

		/** The overlay mode for test rendered geometry in debug purposes. */
		debug_draw: number;

		/** If `true`, the result of rendering will be flipped vertically. */
		render_target_v_flip: boolean;

		/** The clear mode when viewport used as a render target. */
		render_target_clear_mode: number;

		/** The update mode when viewport used as a render target. */
		render_target_update_mode: number;

		/** If `true`, the viewport will process 2D audio streams. */
		audio_listener_enable_2d: boolean;

		/** If `true`, the viewport will process 3D audio streams. */
		audio_listener_enable_3d: boolean;

		/** If `true`, the objects rendered by viewport become subjects of mouse picking process. */
		physics_object_picking: boolean;

		/** If `true`, the viewport will not receive input event. */
		gui_disable_input: boolean;

		/** If `true`, the GUI controls on the viewport will lay pixel perfectly. */
		gui_snap_controls_to_pixels: boolean;

		/** The shadow atlas' resolution (used for omni and spot lights). The value will be rounded up to the nearest power of 2.

		 **Note:** If this is set to 0, shadows won't be visible. Since user-created viewports default to a value of 0, this value must be set above 0 manually. */
		shadow_atlas_size: number;

		/** The subdivision amount of the first quadrant on the shadow atlas. */
		shadow_atlas_quad_0: number;

		/** The subdivision amount of the second quadrant on the shadow atlas. */
		shadow_atlas_quad_1: number;

		/** The subdivision amount of the third quadrant on the shadow atlas. */
		shadow_atlas_quad_2: number;

		/** The subdivision amount of the fourth quadrant on the shadow atlas. */
		shadow_atlas_quad_3: number;

		/** The canvas transform of the viewport, useful for changing the on-screen positions of all child `CanvasItem`s. This is relative to the global canvas transform of the viewport. */
		canvas_transform: Transform2D;

		/** The global canvas transform of the viewport. The canvas transform is relative to this. */
		global_canvas_transform: Transform2D;

		/** Returns the 2D world of the viewport. */
		find_world_2d() : World2D;

		/** Returns the 3D world of the viewport, or if none the world of the parent viewport. */
		find_world() : World;

		/** Returns the total transform of the viewport. */
		get_final_transform() : Transform2D;

		/** Returns the visible rectangle in global screen coordinates. */
		get_visible_rect() : Rect2;

		/** Sets the size override of the viewport. If the `enable` parameter is `true` the override is used, otherwise it uses the default size. If the size parameter is `(-1, -1)`, it won't update the size. */
		//@ts-ignore
		set_size_override(enable: boolean, size: Vector2 = Vector2( -1, -1 ), margin: Vector2 = Vector2( 0, 0 )) : void;

		/** Returns the size override set with `set_size_override`. */
		get_size_override() : Vector2;

		/** Returns `true` if the size override is enabled. See `set_size_override`. */
		is_size_override_enabled() : boolean;

		/** Returns information about the viewport from the rendering pipeline. */
		get_render_info(info: Viewport.RenderInfo) : number;

		/** Returns the viewport's texture.

		 **Note:** Due to the way OpenGL works, the resulting `ViewportTexture` is flipped vertically. You can use `Image.flip_y` on the result of `Texture.get_data` to flip it back, for example:

		 ```gdscript
		 var img = get_viewport().get_texture().get_data()
		 img.flip_y()
		 ``` */
		get_texture() : ViewportTexture;

		/** Returns the viewport's RID from the `VisualServer`. */
		get_viewport_rid() : RID;

		/**  */
		input(local_event: InputEvent) : void;

		/**  */
		unhandled_input(local_event: InputEvent) : void;

		/** Forces update of the 2D and 3D worlds. */
		update_worlds() : void;

		/** Returns the active 3D camera. */
		get_camera() : Camera;

		/** Attaches this `Viewport` to the root `Viewport` with the specified rectangle. This bypasses the need for another node to display this `Viewport` but makes you responsible for updating the position of this `Viewport` manually. */
		set_attach_to_screen_rect(rect: Rect2) : void;

		/** Returns the mouse position relative to the viewport. */
		get_mouse_position() : Vector2;

		/** Warps the mouse to a position relative to the viewport. */
		warp_mouse(to_position: Vector2) : void;

		/** Returns `true` if there are visible modals on-screen. */
		gui_has_modal_stack() : boolean;

		/** Returns the drag data from the GUI, that was previously returned by `Control.get_drag_data`. */
		gui_get_drag_data() : any;

		/** Returns `true` if the viewport is currently performing a drag operation. */
		gui_is_dragging() : boolean;

		/** Returns the topmost modal in the stack. */
		get_modal_stack_top() : Control;

		/** Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible. */
		set_shadow_atlas_quadrant_subdiv(quadrant: number, subdiv: Viewport.ShadowAtlasQuadrantSubdiv) : void;

		/** Returns the `ShadowAtlasQuadrantSubdiv` of the specified quadrant. */
		get_shadow_atlas_quadrant_subdiv(quadrant: number) : number;

		/** Stops the input from propagating further down the `SceneTree`. */
		set_input_as_handled() : void;

		/**  */
		is_input_handled() : boolean;

		/** Getter of `arvr` property */
		use_arvr() : boolean;

		/** Setter of `arvr` property */
		set_use_arvr(p_value: boolean) : void;

		/** Getter of `size` property */
		get_size() : Vector2;

		/** Setter of `size` property */
		set_size(p_value: Vector2) : void;

		/** Getter of `size_override_stretch` property */
		is_size_override_stretch_enabled() : boolean;

		/** Setter of `size_override_stretch` property */
		set_size_override_stretch(p_value: boolean) : void;

		/** Getter of `own_world` property */
		is_using_own_world() : boolean;

		/** Setter of `own_world` property */
		set_use_own_world(p_value: boolean) : void;

		/** Getter of `world` property */
		get_world() : World;

		/** Setter of `world` property */
		set_world(p_value: World) : void;

		/** Getter of `world_2d` property */
		get_world_2d() : World2D;

		/** Setter of `world_2d` property */
		set_world_2d(p_value: World2D) : void;

		/** Getter of `transparent_bg` property */
		has_transparent_background() : boolean;

		/** Setter of `transparent_bg` property */
		set_transparent_background(p_value: boolean) : void;

		/** Getter of `handle_input_locally` property */
		is_handling_input_locally() : boolean;

		/** Setter of `handle_input_locally` property */
		set_handle_input_locally(p_value: boolean) : void;

		/** Getter of `msaa` property */
		get_msaa() : number;

		/** Setter of `msaa` property */
		set_msaa(p_value: number) : void;

		/** Getter of `hdr` property */
		get_hdr() : boolean;

		/** Setter of `hdr` property */
		set_hdr(p_value: boolean) : void;

		/** Getter of `disable_3d` property */
		is_3d_disabled() : boolean;

		/** Setter of `disable_3d` property */
		set_disable_3d(p_value: boolean) : void;

		/** Getter of `keep_3d_linear` property */
		get_keep_3d_linear() : boolean;

		/** Setter of `keep_3d_linear` property */
		set_keep_3d_linear(p_value: boolean) : void;

		/** Getter of `usage` property */
		get_usage() : number;

		/** Setter of `usage` property */
		set_usage(p_value: number) : void;

		/** Getter of `render_direct_to_screen` property */
		is_using_render_direct_to_screen() : boolean;

		/** Setter of `render_direct_to_screen` property */
		set_use_render_direct_to_screen(p_value: boolean) : void;

		/** Getter of `debug_draw` property */
		get_debug_draw() : number;

		/** Setter of `debug_draw` property */
		set_debug_draw(p_value: number) : void;

		/** Getter of `render_target_v_flip` property */
		get_vflip() : boolean;

		/** Setter of `render_target_v_flip` property */
		set_vflip(p_value: boolean) : void;

		/** Getter of `render_target_clear_mode` property */
		get_clear_mode() : number;

		/** Setter of `render_target_clear_mode` property */
		set_clear_mode(p_value: number) : void;

		/** Getter of `render_target_update_mode` property */
		get_update_mode() : number;

		/** Setter of `render_target_update_mode` property */
		set_update_mode(p_value: number) : void;

		/** Getter of `audio_listener_enable_2d` property */
		is_audio_listener_2d() : boolean;

		/** Setter of `audio_listener_enable_2d` property */
		set_as_audio_listener_2d(p_value: boolean) : void;

		/** Getter of `audio_listener_enable_3d` property */
		is_audio_listener() : boolean;

		/** Setter of `audio_listener_enable_3d` property */
		set_as_audio_listener(p_value: boolean) : void;

		/** Getter of `physics_object_picking` property */
		get_physics_object_picking() : boolean;

		/** Setter of `physics_object_picking` property */
		set_physics_object_picking(p_value: boolean) : void;

		/** Getter of `gui_disable_input` property */
		is_input_disabled() : boolean;

		/** Setter of `gui_disable_input` property */
		set_disable_input(p_value: boolean) : void;

		/** Getter of `gui_snap_controls_to_pixels` property */
		is_snap_controls_to_pixels_enabled() : boolean;

		/** Setter of `gui_snap_controls_to_pixels` property */
		set_snap_controls_to_pixels(p_value: boolean) : void;

		/** Getter of `shadow_atlas_size` property */
		get_shadow_atlas_size() : number;

		/** Setter of `shadow_atlas_size` property */
		set_shadow_atlas_size(p_value: number) : void;

		/** Getter of `shadow_atlas_quad_0` property */
		get_shadow_atlas_quadrant_subdiv() : number;

		/** Setter of `shadow_atlas_quad_0` property */
		set_shadow_atlas_quadrant_subdiv(p_value: number) : void;

		/** Getter of `shadow_atlas_quad_1` property */
		get_shadow_atlas_quadrant_subdiv() : number;

		/** Setter of `shadow_atlas_quad_1` property */
		set_shadow_atlas_quadrant_subdiv(p_value: number) : void;

		/** Getter of `shadow_atlas_quad_2` property */
		get_shadow_atlas_quadrant_subdiv() : number;

		/** Setter of `shadow_atlas_quad_2` property */
		set_shadow_atlas_quadrant_subdiv(p_value: number) : void;

		/** Getter of `shadow_atlas_quad_3` property */
		get_shadow_atlas_quadrant_subdiv() : number;

		/** Setter of `shadow_atlas_quad_3` property */
		set_shadow_atlas_quadrant_subdiv(p_value: number) : void;

		/** Getter of `canvas_transform` property */
		get_canvas_transform() : Transform2D;

		/** Setter of `canvas_transform` property */
		set_canvas_transform(p_value: Transform2D) : void;

		/** Getter of `global_canvas_transform` property */
		get_global_canvas_transform() : Transform2D;

		/** Setter of `global_canvas_transform` property */
		set_global_canvas_transform(p_value: Transform2D) : void;
	}
	namespace Viewport {

		/** Emitted when the size of the viewport is changed, whether by `set_size_override`, resize of window, or some other means. */
		const size_changed: 'size_changed';

		/** Emitted when a Control node grabs keyboard focus. */
		const gui_focus_changed: 'gui_focus_changed';
		enum ClearMode {
			/** Always clear the render target before drawing. */
			CLEAR_MODE_ALWAYS = 0,
			/** Never clear the render target. */
			CLEAR_MODE_NEVER = 1,
			/** Clear the render target next frame, then switch to `CLEAR_MODE_NEVER`. */
			CLEAR_MODE_ONLY_NEXT_FRAME = 2,
		}
		enum DebugDraw {
			/** Objects are displayed normally. */
			DEBUG_DRAW_DISABLED = 0,
			/** Objects are displayed without light information. */
			DEBUG_DRAW_UNSHADED = 1,
			/** Objected are displayed semi-transparent with additive blending so you can see where they intersect. */
			DEBUG_DRAW_OVERDRAW = 2,
			/** Objects are displayed in wireframe style. */
			DEBUG_DRAW_WIREFRAME = 3,
		}
		enum MSAA {
			/** Multisample anti-aliasing mode disabled. This is the default value. */
			MSAA_DISABLED = 0,
			/** Use 2x Multisample Antialiasing. */
			MSAA_2X = 1,
			/** Use 4x Multisample Antialiasing. */
			MSAA_4X = 2,
			/** Use 8x Multisample Antialiasing. Likely unsupported on low-end and older hardware. */
			MSAA_8X = 3,
			/** Use 16x Multisample Antialiasing. Likely unsupported on medium and low-end hardware. */
			MSAA_16X = 4,
		}
		enum RenderInfo {
			/** Amount of objects in frame. */
			RENDER_INFO_OBJECTS_IN_FRAME = 0,
			/** Amount of vertices in frame. */
			RENDER_INFO_VERTICES_IN_FRAME = 1,
			/** Amount of material changes in frame. */
			RENDER_INFO_MATERIAL_CHANGES_IN_FRAME = 2,
			/** Amount of shader changes in frame. */
			RENDER_INFO_SHADER_CHANGES_IN_FRAME = 3,
			/** Amount of surface changes in frame. */
			RENDER_INFO_SURFACE_CHANGES_IN_FRAME = 4,
			/** Amount of draw calls in frame. */
			RENDER_INFO_DRAW_CALLS_IN_FRAME = 5,
			/** Amount of items or joined items in frame. */
			RENDER_INFO_2D_ITEMS_IN_FRAME = 6,
			/** Amount of draw calls in frame. */
			RENDER_INFO_2D_DRAW_CALLS_IN_FRAME = 7,
			/** Represents the size of the `RenderInfo` enum. */
			RENDER_INFO_MAX = 8,
		}
		enum ShadowAtlasQuadrantSubdiv {
			/** This quadrant will not be used. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED = 0,
			/** This quadrant will only be used by one shadow map. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_1 = 1,
			/** This quadrant will be split in 4 and used by up to 4 shadow maps. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_4 = 2,
			/** This quadrant will be split 16 ways and used by up to 16 shadow maps. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_16 = 3,
			/** This quadrant will be split 64 ways and used by up to 64 shadow maps. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_64 = 4,
			/** This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the `shadow_atlas_size` is very high, the shadows in this quadrant will be very low resolution. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_256 = 5,
			/** This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the `shadow_atlas_size` is very high, the shadows in this quadrant will be very low resolution. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_1024 = 6,
			/** Represents the size of the `ShadowAtlasQuadrantSubdiv` enum. */
			SHADOW_ATLAS_QUADRANT_SUBDIV_MAX = 7,
		}
		enum UpdateMode {
			/** Do not update the render target. */
			UPDATE_DISABLED = 0,
			/** Update the render target once, then switch to `UPDATE_DISABLED`. */
			UPDATE_ONCE = 1,
			/** Update the render target only when it is visible. This is the default value. */
			UPDATE_WHEN_VISIBLE = 2,
			/** Always update the render target. */
			UPDATE_ALWAYS = 3,
		}
		enum Usage {
			/** Allocates all buffers needed for drawing 2D scenes. This takes less VRAM than the 3D usage modes. */
			USAGE_2D = 0,
			/** Allocates buffers needed for 2D scenes without allocating a buffer for screen copy. Accordingly, you cannot read from the screen. Of the `Usage` types, this requires the least VRAM. */
			USAGE_2D_NO_SAMPLING = 1,
			/** Allocates full buffers for drawing 3D scenes and all 3D effects including buffers needed for 2D scenes and effects. */
			USAGE_3D = 2,
			/** Allocates buffers needed for drawing 3D scenes. But does not allocate buffers needed for reading from the screen and post-processing effects. Saves some VRAM. */
			USAGE_3D_NO_EFFECTS = 3,
		}

		/** Do not update the render target. */
		const UPDATE_DISABLED: UpdateMode.UPDATE_DISABLED;

		/** Update the render target once, then switch to `UPDATE_DISABLED`. */
		const UPDATE_ONCE: UpdateMode.UPDATE_ONCE;

		/** Update the render target only when it is visible. This is the default value. */
		const UPDATE_WHEN_VISIBLE: UpdateMode.UPDATE_WHEN_VISIBLE;

		/** Always update the render target. */
		const UPDATE_ALWAYS: UpdateMode.UPDATE_ALWAYS;

		/** This quadrant will not be used. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED;

		/** This quadrant will only be used by one shadow map. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_1: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_1;

		/** This quadrant will be split in 4 and used by up to 4 shadow maps. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_4: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_4;

		/** This quadrant will be split 16 ways and used by up to 16 shadow maps. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_16: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_16;

		/** This quadrant will be split 64 ways and used by up to 64 shadow maps. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_64: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_64;

		/** This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the `shadow_atlas_size` is very high, the shadows in this quadrant will be very low resolution. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_256: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_256;

		/** This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the `shadow_atlas_size` is very high, the shadows in this quadrant will be very low resolution. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_1024: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_1024;

		/** Represents the size of the `ShadowAtlasQuadrantSubdiv` enum. */
		const SHADOW_ATLAS_QUADRANT_SUBDIV_MAX: ShadowAtlasQuadrantSubdiv.SHADOW_ATLAS_QUADRANT_SUBDIV_MAX;

		/** Amount of objects in frame. */
		const RENDER_INFO_OBJECTS_IN_FRAME: RenderInfo.RENDER_INFO_OBJECTS_IN_FRAME;

		/** Amount of vertices in frame. */
		const RENDER_INFO_VERTICES_IN_FRAME: RenderInfo.RENDER_INFO_VERTICES_IN_FRAME;

		/** Amount of material changes in frame. */
		const RENDER_INFO_MATERIAL_CHANGES_IN_FRAME: RenderInfo.RENDER_INFO_MATERIAL_CHANGES_IN_FRAME;

		/** Amount of shader changes in frame. */
		const RENDER_INFO_SHADER_CHANGES_IN_FRAME: RenderInfo.RENDER_INFO_SHADER_CHANGES_IN_FRAME;

		/** Amount of surface changes in frame. */
		const RENDER_INFO_SURFACE_CHANGES_IN_FRAME: RenderInfo.RENDER_INFO_SURFACE_CHANGES_IN_FRAME;

		/** Amount of draw calls in frame. */
		const RENDER_INFO_DRAW_CALLS_IN_FRAME: RenderInfo.RENDER_INFO_DRAW_CALLS_IN_FRAME;

		/** Amount of items or joined items in frame. */
		const RENDER_INFO_2D_ITEMS_IN_FRAME: RenderInfo.RENDER_INFO_2D_ITEMS_IN_FRAME;

		/** Amount of draw calls in frame. */
		const RENDER_INFO_2D_DRAW_CALLS_IN_FRAME: RenderInfo.RENDER_INFO_2D_DRAW_CALLS_IN_FRAME;

		/** Represents the size of the `RenderInfo` enum. */
		const RENDER_INFO_MAX: RenderInfo.RENDER_INFO_MAX;

		/** Objects are displayed normally. */
		const DEBUG_DRAW_DISABLED: DebugDraw.DEBUG_DRAW_DISABLED;

		/** Objects are displayed without light information. */
		const DEBUG_DRAW_UNSHADED: DebugDraw.DEBUG_DRAW_UNSHADED;

		/** Objected are displayed semi-transparent with additive blending so you can see where they intersect. */
		const DEBUG_DRAW_OVERDRAW: DebugDraw.DEBUG_DRAW_OVERDRAW;

		/** Objects are displayed in wireframe style. */
		const DEBUG_DRAW_WIREFRAME: DebugDraw.DEBUG_DRAW_WIREFRAME;

		/** Multisample anti-aliasing mode disabled. This is the default value. */
		const MSAA_DISABLED: MSAA.MSAA_DISABLED;

		/** Use 2x Multisample Antialiasing. */
		const MSAA_2X: MSAA.MSAA_2X;

		/** Use 4x Multisample Antialiasing. */
		const MSAA_4X: MSAA.MSAA_4X;

		/** Use 8x Multisample Antialiasing. Likely unsupported on low-end and older hardware. */
		const MSAA_8X: MSAA.MSAA_8X;

		/** Use 16x Multisample Antialiasing. Likely unsupported on medium and low-end hardware. */
		const MSAA_16X: MSAA.MSAA_16X;

		/** Allocates all buffers needed for drawing 2D scenes. This takes less VRAM than the 3D usage modes. */
		const USAGE_2D: Usage.USAGE_2D;

		/** Allocates buffers needed for 2D scenes without allocating a buffer for screen copy. Accordingly, you cannot read from the screen. Of the `Usage` types, this requires the least VRAM. */
		const USAGE_2D_NO_SAMPLING: Usage.USAGE_2D_NO_SAMPLING;

		/** Allocates full buffers for drawing 3D scenes and all 3D effects including buffers needed for 2D scenes and effects. */
		const USAGE_3D: Usage.USAGE_3D;

		/** Allocates buffers needed for drawing 3D scenes. But does not allocate buffers needed for reading from the screen and post-processing effects. Saves some VRAM. */
		const USAGE_3D_NO_EFFECTS: Usage.USAGE_3D_NO_EFFECTS;

		/** Always clear the render target before drawing. */
		const CLEAR_MODE_ALWAYS: ClearMode.CLEAR_MODE_ALWAYS;

		/** Never clear the render target. */
		const CLEAR_MODE_NEVER: ClearMode.CLEAR_MODE_NEVER;

		/** Clear the render target next frame, then switch to `CLEAR_MODE_NEVER`. */
		const CLEAR_MODE_ONLY_NEXT_FRAME: ClearMode.CLEAR_MODE_ONLY_NEXT_FRAME;
	}

	/** Control for holding `Viewport`s.
	 A `Container` node that holds a `Viewport`, automatically setting its size.

	 **Note:** Changing a ViewportContainer's `Control.rect_scale` will cause its contents to appear distorted. To change its visual size without causing distortion, adjust the node's margins instead (if it's not already in a container). */
	class ViewportContainer extends Container {

		/** If `true`, the viewport will be scaled to the control's size. */
		stretch: boolean;

		/** Divides the viewport's effective resolution by this value while preserving its scale. This can be used to speed up rendering.

		 For example, a 1280×720 viewport with `stretch_shrink` set to `2` will be rendered at 640×360 while occupying the same size in the container.

		 **Note:** `stretch` must be `true` for this property to work. */
		stretch_shrink: number;

		/** Getter of `stretch` property */
		is_stretch_enabled() : boolean;

		/** Setter of `stretch` property */
		set_stretch(p_value: boolean) : void;

		/** Getter of `stretch_shrink` property */
		get_stretch_shrink() : number;

		/** Setter of `stretch_shrink` property */
		set_stretch_shrink(p_value: number) : void;
	}
	namespace ViewportContainer {
	}

	/** Texture which displays the content of a `Viewport`.
	 Displays the content of a `Viewport` node as a dynamic `Texture`. This can be used to mix controls, 2D, and 3D elements in the same scene.

	 To create a ViewportTexture in code, use the `Viewport.get_texture` method on the target viewport. */
	class ViewportTexture extends Texture {

		/** The path to the `Viewport` node to display. This is relative to the scene root, not to the node which uses the texture. */
		viewport_path: string;

		/**  */
		flags: number;

		/**  */
		resource_local_to_scene: boolean;

		/** Getter of `viewport_path` property */
		get_viewport_path_in_scene() : string;

		/** Setter of `viewport_path` property */
		set_viewport_path_in_scene(p_value: string) : void;

		/** Getter of `flags` property */
		get_flags() : number;

		/** Setter of `flags` property */
		set_flags(p_value: number) : void;

		/** Getter of `resource_local_to_scene` property */
		is_local_to_scene() : boolean;

		/** Setter of `resource_local_to_scene` property */
		set_local_to_scene(p_value: boolean) : void;
	}
	namespace ViewportTexture {
	}

	/** Enables certain nodes only when approximately visible.
	 The VisibilityEnabler will disable `RigidBody` and `AnimationPlayer` nodes when they are not visible. It will only affect other nodes within the same scene as the VisibilityEnabler itself.

	 **Note:** VisibilityEnabler uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. If you need exact visibility checking, use another method such as adding an `Area` node as a child of a `Camera` node.

	 **Note:** VisibilityEnabler will not affect nodes added after scene initialization. */
	class VisibilityEnabler extends VisibilityNotifier {

		/** If `true`, `AnimationPlayer` nodes will be paused. */
		pause_animations: boolean;

		/** If `true`, `RigidBody` nodes will be paused. */
		freeze_bodies: boolean;

		/** Sets active state of the enabler identified by given `Enabler` constant. */
		set_enabler(enabler: VisibilityEnabler.Enabler, enabled: boolean) : void;

		/** Returns whether the enabler identified by given `Enabler` constant is active. */
		is_enabler_enabled(enabler: VisibilityEnabler.Enabler) : boolean;

		/** Getter of `pause_animations` property */
		is_enabler_enabled() : boolean;

		/** Setter of `pause_animations` property */
		set_enabler(p_value: boolean) : void;

		/** Getter of `freeze_bodies` property */
		is_enabler_enabled() : boolean;

		/** Setter of `freeze_bodies` property */
		set_enabler(p_value: boolean) : void;
	}
	namespace VisibilityEnabler {
		enum Enabler {
			/** This enabler will pause `AnimationPlayer` nodes. */
			ENABLER_PAUSE_ANIMATIONS = 0,
			/** This enabler will freeze `RigidBody` nodes. */
			ENABLER_FREEZE_BODIES = 1,
			/** Represents the size of the `Enabler` enum. */
			ENABLER_MAX = 2,
		}

		/** This enabler will pause `AnimationPlayer` nodes. */
		const ENABLER_PAUSE_ANIMATIONS: Enabler.ENABLER_PAUSE_ANIMATIONS;

		/** This enabler will freeze `RigidBody` nodes. */
		const ENABLER_FREEZE_BODIES: Enabler.ENABLER_FREEZE_BODIES;

		/** Represents the size of the `Enabler` enum. */
		const ENABLER_MAX: Enabler.ENABLER_MAX;
	}

	/** Enables certain nodes only when approximately visible.
	 The VisibilityEnabler2D will disable `RigidBody2D`, `AnimationPlayer`, and other nodes when they are not visible. It will only affect nodes with the same root node as the VisibilityEnabler2D, and the root node itself.

	 **Note:** For performance reasons, VisibilityEnabler2D uses an approximate heuristic with precision determined by `ProjectSettings.world/2d/cell_size`. If you need exact visibility checking, use another method such as adding an `Area2D` node as a child of a `Camera2D` node.

	 **Note:** VisibilityEnabler2D will not affect nodes added after scene initialization. */
	class VisibilityEnabler2D extends VisibilityNotifier2D {

		/** If `true`, `AnimationPlayer` nodes will be paused. */
		pause_animations: boolean;

		/** If `true`, `RigidBody2D` nodes will be paused. */
		freeze_bodies: boolean;

		/** If `true`, `Particles2D` nodes will be paused. */
		pause_particles: boolean;

		/** If `true`, `AnimatedSprite` nodes will be paused. */
		pause_animated_sprites: boolean;

		/** If `true`, the parent's `Node._process` will be stopped. */
		process_parent: boolean;

		/** If `true`, the parent's `Node._physics_process` will be stopped. */
		physics_process_parent: boolean;

		/** Sets active state of the enabler identified by given `Enabler` constant. */
		set_enabler(enabler: VisibilityEnabler2D.Enabler, enabled: boolean) : void;

		/** Returns whether the enabler identified by given `Enabler` constant is active. */
		is_enabler_enabled(enabler: VisibilityEnabler2D.Enabler) : boolean;

		/** Getter of `pause_animations` property */
		is_enabler_enabled() : boolean;

		/** Setter of `pause_animations` property */
		set_enabler(p_value: boolean) : void;

		/** Getter of `freeze_bodies` property */
		is_enabler_enabled() : boolean;

		/** Setter of `freeze_bodies` property */
		set_enabler(p_value: boolean) : void;

		/** Getter of `pause_particles` property */
		is_enabler_enabled() : boolean;

		/** Setter of `pause_particles` property */
		set_enabler(p_value: boolean) : void;

		/** Getter of `pause_animated_sprites` property */
		is_enabler_enabled() : boolean;

		/** Setter of `pause_animated_sprites` property */
		set_enabler(p_value: boolean) : void;

		/** Getter of `process_parent` property */
		is_enabler_enabled() : boolean;

		/** Setter of `process_parent` property */
		set_enabler(p_value: boolean) : void;

		/** Getter of `physics_process_parent` property */
		is_enabler_enabled() : boolean;

		/** Setter of `physics_process_parent` property */
		set_enabler(p_value: boolean) : void;
	}
	namespace VisibilityEnabler2D {
		enum Enabler {
			/** This enabler will pause `AnimationPlayer` nodes. */
			ENABLER_PAUSE_ANIMATIONS = 0,
			/** This enabler will freeze `RigidBody2D` nodes. */
			ENABLER_FREEZE_BODIES = 1,
			/** This enabler will stop `Particles2D` nodes. */
			ENABLER_PAUSE_PARTICLES = 2,
			/** This enabler will stop the parent's _process function. */
			ENABLER_PARENT_PROCESS = 3,
			/** This enabler will stop the parent's _physics_process function. */
			ENABLER_PARENT_PHYSICS_PROCESS = 4,
			/** This enabler will stop `AnimatedSprite` nodes animations. */
			ENABLER_PAUSE_ANIMATED_SPRITES = 5,
			/** Represents the size of the `Enabler` enum. */
			ENABLER_MAX = 6,
		}

		/** This enabler will pause `AnimationPlayer` nodes. */
		const ENABLER_PAUSE_ANIMATIONS: Enabler.ENABLER_PAUSE_ANIMATIONS;

		/** This enabler will freeze `RigidBody2D` nodes. */
		const ENABLER_FREEZE_BODIES: Enabler.ENABLER_FREEZE_BODIES;

		/** This enabler will stop `Particles2D` nodes. */
		const ENABLER_PAUSE_PARTICLES: Enabler.ENABLER_PAUSE_PARTICLES;

		/** This enabler will stop the parent's _process function. */
		const ENABLER_PARENT_PROCESS: Enabler.ENABLER_PARENT_PROCESS;

		/** This enabler will stop the parent's _physics_process function. */
		const ENABLER_PARENT_PHYSICS_PROCESS: Enabler.ENABLER_PARENT_PHYSICS_PROCESS;

		/** This enabler will stop `AnimatedSprite` nodes animations. */
		const ENABLER_PAUSE_ANIMATED_SPRITES: Enabler.ENABLER_PAUSE_ANIMATED_SPRITES;

		/** Represents the size of the `Enabler` enum. */
		const ENABLER_MAX: Enabler.ENABLER_MAX;
	}

	/** Detects approximately when the node is visible on screen.
	 The VisibilityNotifier detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a `Camera`'s view.

	 **Note:** VisibilityNotifier uses an approximate heuristic for performance reasons. It doesn't take walls and other occlusion into account. If you need exact visibility checking, use another method such as adding an `Area` node as a child of a `Camera` node. */
	class VisibilityNotifier extends Spatial {

		/** The VisibilityNotifier's bounding box. */
		aabb: AABB;

		/** If `true`, the bounding box is on the screen.

		 **Note:** It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return `false` right after it is instantiated, even if it will be on screen in the draw pass. */
		is_on_screen() : boolean;

		/** Getter of `aabb` property */
		get_aabb() : AABB;

		/** Setter of `aabb` property */
		set_aabb(p_value: AABB) : void;
	}
	namespace VisibilityNotifier {

		/** Emitted when the VisibilityNotifier exits a `Camera`'s view. */
		const camera_exited: 'camera_exited';

		/** Emitted when the VisibilityNotifier enters the screen. */
		const screen_entered: 'screen_entered';

		/** Emitted when the VisibilityNotifier enters a `Camera`'s view. */
		const camera_entered: 'camera_entered';

		/** Emitted when the VisibilityNotifier exits the screen. */
		const screen_exited: 'screen_exited';
	}

	/** Detects approximately when the node is visible on screen.
	 The VisibilityNotifier2D detects when it is visible on the screen. It also notifies when its bounding rectangle enters or exits the screen or a viewport.

	 **Note:** For performance reasons, VisibilityNotifier2D uses an approximate heuristic with precision determined by `ProjectSettings.world/2d/cell_size`. If you need exact visibility checking, use another method such as adding an `Area2D` node as a child of a `Camera2D` node. */
	class VisibilityNotifier2D extends Node2D {

		/** The VisibilityNotifier2D's bounding rectangle. */
		rect: Rect2;

		/** If `true`, the bounding rectangle is on the screen.

		 **Note:** It takes one frame for the node's visibility to be assessed once added to the scene tree, so this method will return `false` right after it is instantiated, even if it will be on screen in the draw pass. */
		is_on_screen() : boolean;

		/** Getter of `rect` property */
		get_rect() : Rect2;

		/** Setter of `rect` property */
		set_rect(p_value: Rect2) : void;
	}
	namespace VisibilityNotifier2D {

		/** Emitted when the VisibilityNotifier2D enters the screen. */
		const screen_entered: 'screen_entered';

		/** Emitted when the VisibilityNotifier2D enters a `Viewport`'s view. */
		const viewport_entered: 'viewport_entered';

		/** Emitted when the VisibilityNotifier2D exits the screen. */
		const screen_exited: 'screen_exited';

		/** Emitted when the VisibilityNotifier2D exits a `Viewport`'s view. */
		const viewport_exited: 'viewport_exited';
	}

	/** Parent of all visual 3D nodes.
	 The `VisualInstance` is used to connect a resource to a visual representation. All visual 3D nodes inherit from the `VisualInstance`. In general, you should not access the `VisualInstance` properties directly as they are accessed and managed by the nodes that inherit from `VisualInstance`. `VisualInstance` is the node representation of the `VisualServer` instance. */
	class VisualInstance extends Spatial {

		/** The render layer(s) this `VisualInstance` is drawn on.

		 This object will only be visible for `Camera`s whose cull mask includes the render object this `VisualInstance` is set to. */
		layers: number;

		/** Sets the resource that is instantiated by this `VisualInstance`, which changes how the engine handles the `VisualInstance` under the hood. Equivalent to `VisualServer.instance_set_base`. */
		set_base(base: RID) : void;

		/** Returns the RID of the resource associated with this `VisualInstance`. For example, if the Node is a `MeshInstance`, this will return the RID of the associated `Mesh`. */
		get_base() : RID;

		/** Returns the RID of this instance. This RID is the same as the RID returned by `VisualServer.instance_create`. This RID is needed if you want to call `VisualServer` functions directly on this `VisualInstance`. */
		get_instance() : RID;

		/** Enables a particular layer in `layers`. */
		set_layer_mask_bit(layer: number, enabled: boolean) : void;

		/** Returns `true` when the specified layer is enabled in `layers` and `false` otherwise. */
		get_layer_mask_bit(layer: number) : boolean;

		/** Returns the transformed `AABB` (also known as the bounding box) for this `VisualInstance`.

		 Transformed in this case means the `AABB` plus the position, rotation, and scale of the `Spatial`'s `Transform`. */
		get_transformed_aabb() : AABB;

		/** Returns the `AABB` (also known as the bounding box) for this `VisualInstance`. */
		get_aabb() : AABB;

		/** Getter of `layers` property */
		get_layer_mask() : number;

		/** Setter of `layers` property */
		set_layer_mask(p_value: number) : void;
	}
	namespace VisualInstance {
	}

	/** A script implemented in the Visual Script programming environment.
	 A script implemented in the  Visual Script programming environment. The script extends the functionality of all objects that instance it.

	 `Object.set_script` extends an existing object, if that object's class matches one of the script's base classes.

	 You are most likely to use this class via the Visual Script editor or when writing plugins for it. */
	class VisualScript extends Script {

		/** Add a function with the specified name to the VisualScript. */
		add_function(name: string) : void;

		/** Returns whether a function exists with the specified name. */
		has_function(name: string) : boolean;

		/** Remove a specific function and its nodes from the script. */
		remove_function(name: string) : void;

		/** Change the name of a function. */
		rename_function(name: string, new_name: string) : void;

		/** Position the center of the screen for a function. */
		set_function_scroll(name: string, ofs: Vector2) : void;

		/** Returns the position of the center of the screen for a given function. */
		get_function_scroll(name: string) : Vector2;

		/** Add a node to a function of the VisualScript. */
		//@ts-ignore
		add_node(func: string, id: number, node: VisualScriptNode, position: Vector2 = Vector2( 0, 0 )) : void;

		/** Remove a specific node. */
		remove_node(func: string, id: number) : void;

		/** Returns the id of a function's entry point node. */
		get_function_node_id(name: string) : number;

		/** Returns a node given its id and its function. */
		get_node(func: string, id: number) : VisualScriptNode;

		/** Returns whether a node exists with the given id. */
		has_node(func: string, id: number) : boolean;

		/** Position a node on the screen. */
		set_node_position(func: string, id: number, position: Vector2) : void;

		/** Returns a node's position in pixels. */
		get_node_position(func: string, id: number) : Vector2;

		/** Connect two sequence ports. The execution will flow from of `from_node`'s `from_output` into `to_node`.

		 Unlike `data_connect`, there isn't a `to_port`, since the target node can have only one sequence port. */
		sequence_connect(func: string, from_node: number, from_output: number, to_node: number) : void;

		/** Disconnect two sequence ports previously connected with `sequence_connect`. */
		sequence_disconnect(func: string, from_node: number, from_output: number, to_node: number) : void;

		/** Returns whether the specified sequence ports are connected. */
		has_sequence_connection(func: string, from_node: number, from_output: number, to_node: number) : boolean;

		/** Connect two data ports. The value of `from_node`'s `from_port` would be fed into `to_node`'s `to_port`. */
		data_connect(func: string, from_node: number, from_port: number, to_node: number, to_port: number) : void;

		/** Disconnect two data ports previously connected with `data_connect`. */
		data_disconnect(func: string, from_node: number, from_port: number, to_node: number, to_port: number) : void;

		/** Returns whether the specified data ports are connected. */
		has_data_connection(func: string, from_node: number, from_port: number, to_node: number, to_port: number) : boolean;

		/** Add a variable to the VisualScript, optionally giving it a default value or marking it as exported. */
		//@ts-ignore
		add_variable(name: string, default_value: any = null, p_export: boolean = false) : void;

		/** Returns whether a variable exists with the specified name. */
		has_variable(name: string) : boolean;

		/** Remove a variable with the given name. */
		remove_variable(name: string) : void;

		/** Change the default (initial) value of a variable. */
		set_variable_default_value(name: string, value: any) : void;

		/** Returns the default (initial) value of a variable. */
		get_variable_default_value(name: string) : any;

		/** Set a variable's info, using the same format as `get_variable_info`. */
		set_variable_info(name: string, value: object) : void;

		/** Returns the information for a given variable as a dictionary. The information includes its name, type, hint and usage. */
		get_variable_info(name: string) : object;

		/** Change whether a variable is exported. */
		set_variable_export(name: string, enable: boolean) : void;

		/** Returns whether a variable is exported. */
		get_variable_export(name: string) : boolean;

		/** Change the name of a variable. */
		rename_variable(name: string, new_name: string) : void;

		/** Add a custom signal with the specified name to the VisualScript. */
		add_custom_signal(name: string) : void;

		/** Returns whether a signal exists with the specified name. */
		has_custom_signal(name: string) : boolean;

		/** Add an argument to a custom signal added with `add_custom_signal`. */
		//@ts-ignore
		custom_signal_add_argument(name: string, type: VariantType, argname: string, index: number = -1) : void;

		/** Change the type of a custom signal's argument. */
		custom_signal_set_argument_type(name: string, argidx: number, type: VariantType) : void;

		/** Get the type of a custom signal's argument. */
		custom_signal_get_argument_type(name: string, argidx: number) : number;

		/** Rename a custom signal's argument. */
		custom_signal_set_argument_name(name: string, argidx: number, argname: string) : void;

		/** Get the name of a custom signal's argument. */
		custom_signal_get_argument_name(name: string, argidx: number) : string;

		/** Remove a specific custom signal's argument. */
		custom_signal_remove_argument(name: string, argidx: number) : void;

		/** Get the count of a custom signal's arguments. */
		custom_signal_get_argument_count(name: string) : number;

		/** Swap two of the arguments of a custom signal. */
		custom_signal_swap_argument(name: string, argidx: number, withidx: number) : void;

		/** Remove a custom signal with the given name. */
		remove_custom_signal(name: string) : void;

		/** Change the name of a custom signal. */
		rename_custom_signal(name: string, new_name: string) : void;

		/** Set the base type of the script. */
		set_instance_base_type(type: string) : void;
	}
	namespace VisualScript {

		/** Emitted when the ports of a node are changed. */
		const node_ports_changed: 'node_ports_changed';
	}

	/** A Visual Script node representing a constant from the base types.
	 A Visual Script node representing a constant from base types, such as `Vector3.AXIS_X`. */
	class VisualScriptBasicTypeConstant extends VisualScriptNode {

		/** The type to get the constant from. */
		basic_type: number;

		/** The name of the constant to return. */
		constant: string;

		/** Getter of `basic_type` property */
		get_basic_type() : number;

		/** Setter of `basic_type` property */
		set_basic_type(p_value: number) : void;

		/** Getter of `constant` property */
		get_basic_type_constant() : string;

		/** Setter of `constant` property */
		set_basic_type_constant(p_value: string) : void;
	}
	namespace VisualScriptBasicTypeConstant {
	}

	/** A Visual Script node used to call built-in functions.
	 A built-in function used inside a `VisualScript`. It is usually a math function or an utility function.

	 See also `@GDScript`, for the same functions in the GDScript language. */
	class VisualScriptBuiltinFunc extends VisualScriptNode {

		/** The function to be executed. */
		'function': number;

		/** Getter of `function` property */
		get_func() : number;

		/** Setter of `function` property */
		set_func(p_value: number) : void;
	}
	namespace VisualScriptBuiltinFunc {
		enum BuiltinFunc {
			/** Return the sine of the input. */
			MATH_SIN = 0,
			/** Return the cosine of the input. */
			MATH_COS = 1,
			/** Return the tangent of the input. */
			MATH_TAN = 2,
			/** Return the hyperbolic sine of the input. */
			MATH_SINH = 3,
			/** Return the hyperbolic cosine of the input. */
			MATH_COSH = 4,
			/** Return the hyperbolic tangent of the input. */
			MATH_TANH = 5,
			/** Return the arc sine of the input. */
			MATH_ASIN = 6,
			/** Return the arc cosine of the input. */
			MATH_ACOS = 7,
			/** Return the arc tangent of the input. */
			MATH_ATAN = 8,
			/** Return the arc tangent of the input, using the signs of both parameters to determine the exact angle. */
			MATH_ATAN2 = 9,
			/** Return the square root of the input. */
			MATH_SQRT = 10,
			/** Return the remainder of one input divided by the other, using floating-point numbers. */
			MATH_FMOD = 11,
			/** Return the positive remainder of one input divided by the other, using floating-point numbers. */
			MATH_FPOSMOD = 12,
			/** Return the input rounded down. */
			MATH_FLOOR = 13,
			/** Return the input rounded up. */
			MATH_CEIL = 14,
			/** Return the input rounded to the nearest integer. */
			MATH_ROUND = 15,
			/** Return the absolute value of the input. */
			MATH_ABS = 16,
			/** Return the sign of the input, turning it into 1, -1, or 0. Useful to determine if the input is positive or negative. */
			MATH_SIGN = 17,
			/** Return the input raised to a given power. */
			MATH_POW = 18,
			/** Return the natural logarithm of the input. Note that this is not the typical base-10 logarithm function calculators use. */
			MATH_LOG = 19,
			/** Return the mathematical constant **e** raised to the specified power of the input. **e** has an approximate value of 2.71828. */
			MATH_EXP = 20,
			/** Return whether the input is NaN (Not a Number) or not. NaN is usually produced by dividing 0 by 0, though other ways exist. */
			MATH_ISNAN = 21,
			/** Return whether the input is an infinite floating-point number or not. Infinity is usually produced by dividing a number by 0, though other ways exist. */
			MATH_ISINF = 22,
			/** Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in. */
			MATH_EASE = 23,
			/** Return the number of digit places after the decimal that the first non-zero digit occurs. */
			MATH_DECIMALS = 24,
			/** Return the input snapped to a given step. */
			MATH_STEPIFY = 25,
			/** Return a number linearly interpolated between the first two inputs, based on the third input. Uses the formula `a + (a - b) * t`. */
			MATH_LERP = 26,
			/**  */
			MATH_INVERSE_LERP = 27,
			/**  */
			MATH_RANGE_LERP = 28,
			/** Moves the number toward a value, based on the third input. */
			MATH_MOVE_TOWARD = 29,
			/** Return the result of `value` decreased by `step` * `amount`. */
			MATH_DECTIME = 30,
			/** Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time. */
			MATH_RANDOMIZE = 31,
			/** Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use it with the remainder function. */
			MATH_RAND = 32,
			/** Return a random floating-point value between 0 and 1. To obtain a random value between 0 to N, you can use it with multiplication. */
			MATH_RANDF = 33,
			/** Return a random floating-point value between the two inputs. */
			MATH_RANDOM = 34,
			/** Set the seed for the random number generator. */
			MATH_SEED = 35,
			/** Return a random value from the given seed, along with the new seed. */
			MATH_RANDSEED = 36,
			/** Convert the input from degrees to radians. */
			MATH_DEG2RAD = 37,
			/** Convert the input from radians to degrees. */
			MATH_RAD2DEG = 38,
			/** Convert the input from linear volume to decibel volume. */
			MATH_LINEAR2DB = 39,
			/** Convert the input from decibel volume to linear volume. */
			MATH_DB2LINEAR = 40,
			/** Converts a 2D point expressed in the polar coordinate system (a distance from the origin `r` and an angle `th`) to the cartesian coordinate system (X and Y axis). */
			MATH_POLAR2CARTESIAN = 41,
			/** Converts a 2D point expressed in the cartesian coordinate system (X and Y axis) to the polar coordinate system (a distance from the origin and an angle). */
			MATH_CARTESIAN2POLAR = 42,
			/**  */
			MATH_WRAP = 43,
			/**  */
			MATH_WRAPF = 44,
			/** Return the greater of the two numbers, also known as their maximum. */
			LOGIC_MAX = 45,
			/** Return the lesser of the two numbers, also known as their minimum. */
			LOGIC_MIN = 46,
			/** Return the input clamped inside the given range, ensuring the result is never outside it. Equivalent to `min(max(input, range_low), range_high)`. */
			LOGIC_CLAMP = 47,
			/** Return the nearest power of 2 to the input. */
			LOGIC_NEAREST_PO2 = 48,
			/** Create a `WeakRef` from the input. */
			OBJ_WEAKREF = 49,
			/** Create a `FuncRef` from the input. */
			FUNC_FUNCREF = 50,
			/** Convert between types. */
			TYPE_CONVERT = 51,
			/** Return the type of the input as an integer. Check `Variant.Type` for the integers that might be returned. */
			TYPE_OF = 52,
			/** Checks if a type is registered in the `ClassDB`. */
			TYPE_EXISTS = 53,
			/** Return a character with the given ascii value. */
			TEXT_CHAR = 54,
			/** Convert the input to a string. */
			TEXT_STR = 55,
			/** Print the given string to the output window. */
			TEXT_PRINT = 56,
			/** Print the given string to the standard error output. */
			TEXT_PRINTERR = 57,
			/** Print the given string to the standard output, without adding a newline. */
			TEXT_PRINTRAW = 58,
			/** Serialize a `Variant` to a string. */
			VAR_TO_STR = 59,
			/** Deserialize a `Variant` from a string serialized using `VAR_TO_STR`. */
			STR_TO_VAR = 60,
			/** Serialize a `Variant` to a `PoolByteArray`. */
			VAR_TO_BYTES = 61,
			/** Deserialize a `Variant` from a `PoolByteArray` serialized using `VAR_TO_BYTES`. */
			BYTES_TO_VAR = 62,
			/** Return the `Color` with the given name and alpha ranging from 0 to 1.

			 **Note:** Names are defined in `color_names.inc`. */
			COLORN = 63,
			/** Return a number smoothly interpolated between the first two inputs, based on the third input. Similar to `MATH_LERP`, but interpolates faster at the beginning and slower at the end. Using Hermite interpolation formula:

			 ```gdscript
			 var t = clamp((weight - from) / (to - from), 0.0, 1.0)
			 return t * t * (3.0 - 2.0 * t)
			 ``` */
			MATH_SMOOTHSTEP = 64,
			/**  */
			MATH_POSMOD = 65,
			/**  */
			MATH_LERP_ANGLE = 66,
			/**  */
			TEXT_ORD = 67,
			/** Represents the size of the `BuiltinFunc` enum. */
			FUNC_MAX = 68,
		}

		/** Return the sine of the input. */
		const MATH_SIN: BuiltinFunc.MATH_SIN;

		/** Return the cosine of the input. */
		const MATH_COS: BuiltinFunc.MATH_COS;

		/** Return the tangent of the input. */
		const MATH_TAN: BuiltinFunc.MATH_TAN;

		/** Return the hyperbolic sine of the input. */
		const MATH_SINH: BuiltinFunc.MATH_SINH;

		/** Return the hyperbolic cosine of the input. */
		const MATH_COSH: BuiltinFunc.MATH_COSH;

		/** Return the hyperbolic tangent of the input. */
		const MATH_TANH: BuiltinFunc.MATH_TANH;

		/** Return the arc sine of the input. */
		const MATH_ASIN: BuiltinFunc.MATH_ASIN;

		/** Return the arc cosine of the input. */
		const MATH_ACOS: BuiltinFunc.MATH_ACOS;

		/** Return the arc tangent of the input. */
		const MATH_ATAN: BuiltinFunc.MATH_ATAN;

		/** Return the arc tangent of the input, using the signs of both parameters to determine the exact angle. */
		const MATH_ATAN2: BuiltinFunc.MATH_ATAN2;

		/** Return the square root of the input. */
		const MATH_SQRT: BuiltinFunc.MATH_SQRT;

		/** Return the remainder of one input divided by the other, using floating-point numbers. */
		const MATH_FMOD: BuiltinFunc.MATH_FMOD;

		/** Return the positive remainder of one input divided by the other, using floating-point numbers. */
		const MATH_FPOSMOD: BuiltinFunc.MATH_FPOSMOD;

		/** Return the input rounded down. */
		const MATH_FLOOR: BuiltinFunc.MATH_FLOOR;

		/** Return the input rounded up. */
		const MATH_CEIL: BuiltinFunc.MATH_CEIL;

		/** Return the input rounded to the nearest integer. */
		const MATH_ROUND: BuiltinFunc.MATH_ROUND;

		/** Return the absolute value of the input. */
		const MATH_ABS: BuiltinFunc.MATH_ABS;

		/** Return the sign of the input, turning it into 1, -1, or 0. Useful to determine if the input is positive or negative. */
		const MATH_SIGN: BuiltinFunc.MATH_SIGN;

		/** Return the input raised to a given power. */
		const MATH_POW: BuiltinFunc.MATH_POW;

		/** Return the natural logarithm of the input. Note that this is not the typical base-10 logarithm function calculators use. */
		const MATH_LOG: BuiltinFunc.MATH_LOG;

		/** Return the mathematical constant **e** raised to the specified power of the input. **e** has an approximate value of 2.71828. */
		const MATH_EXP: BuiltinFunc.MATH_EXP;

		/** Return whether the input is NaN (Not a Number) or not. NaN is usually produced by dividing 0 by 0, though other ways exist. */
		const MATH_ISNAN: BuiltinFunc.MATH_ISNAN;

		/** Return whether the input is an infinite floating-point number or not. Infinity is usually produced by dividing a number by 0, though other ways exist. */
		const MATH_ISINF: BuiltinFunc.MATH_ISINF;

		/** Easing function, based on exponent. 0 is constant, 1 is linear, 0 to 1 is ease-in, 1+ is ease out. Negative values are in-out/out in. */
		const MATH_EASE: BuiltinFunc.MATH_EASE;

		/** Return the number of digit places after the decimal that the first non-zero digit occurs. */
		const MATH_DECIMALS: BuiltinFunc.MATH_DECIMALS;

		/** Return the input snapped to a given step. */
		const MATH_STEPIFY: BuiltinFunc.MATH_STEPIFY;

		/** Return a number linearly interpolated between the first two inputs, based on the third input. Uses the formula `a + (a - b) * t`. */
		const MATH_LERP: BuiltinFunc.MATH_LERP;

		/**  */
		const MATH_INVERSE_LERP: BuiltinFunc.MATH_INVERSE_LERP;

		/**  */
		const MATH_RANGE_LERP: BuiltinFunc.MATH_RANGE_LERP;

		/** Moves the number toward a value, based on the third input. */
		const MATH_MOVE_TOWARD: BuiltinFunc.MATH_MOVE_TOWARD;

		/** Return the result of `value` decreased by `step` * `amount`. */
		const MATH_DECTIME: BuiltinFunc.MATH_DECTIME;

		/** Randomize the seed (or the internal state) of the random number generator. Current implementation reseeds using a number based on time. */
		const MATH_RANDOMIZE: BuiltinFunc.MATH_RANDOMIZE;

		/** Return a random 32 bits integer value. To obtain a random value between 0 to N (where N is smaller than 2^32 - 1), you can use it with the remainder function. */
		const MATH_RAND: BuiltinFunc.MATH_RAND;

		/** Return a random floating-point value between 0 and 1. To obtain a random value between 0 to N, you can use it with multiplication. */
		const MATH_RANDF: BuiltinFunc.MATH_RANDF;

		/** Return a random floating-point value between the two inputs. */
		const MATH_RANDOM: BuiltinFunc.MATH_RANDOM;

		/** Set the seed for the random number generator. */
		const MATH_SEED: BuiltinFunc.MATH_SEED;

		/** Return a random value from the given seed, along with the new seed. */
		const MATH_RANDSEED: BuiltinFunc.MATH_RANDSEED;

		/** Convert the input from degrees to radians. */
		const MATH_DEG2RAD: BuiltinFunc.MATH_DEG2RAD;

		/** Convert the input from radians to degrees. */
		const MATH_RAD2DEG: BuiltinFunc.MATH_RAD2DEG;

		/** Convert the input from linear volume to decibel volume. */
		const MATH_LINEAR2DB: BuiltinFunc.MATH_LINEAR2DB;

		/** Convert the input from decibel volume to linear volume. */
		const MATH_DB2LINEAR: BuiltinFunc.MATH_DB2LINEAR;

		/** Converts a 2D point expressed in the polar coordinate system (a distance from the origin `r` and an angle `th`) to the cartesian coordinate system (X and Y axis). */
		const MATH_POLAR2CARTESIAN: BuiltinFunc.MATH_POLAR2CARTESIAN;

		/** Converts a 2D point expressed in the cartesian coordinate system (X and Y axis) to the polar coordinate system (a distance from the origin and an angle). */
		const MATH_CARTESIAN2POLAR: BuiltinFunc.MATH_CARTESIAN2POLAR;

		/**  */
		const MATH_WRAP: BuiltinFunc.MATH_WRAP;

		/**  */
		const MATH_WRAPF: BuiltinFunc.MATH_WRAPF;

		/** Return the greater of the two numbers, also known as their maximum. */
		const LOGIC_MAX: BuiltinFunc.LOGIC_MAX;

		/** Return the lesser of the two numbers, also known as their minimum. */
		const LOGIC_MIN: BuiltinFunc.LOGIC_MIN;

		/** Return the input clamped inside the given range, ensuring the result is never outside it. Equivalent to `min(max(input, range_low), range_high)`. */
		const LOGIC_CLAMP: BuiltinFunc.LOGIC_CLAMP;

		/** Return the nearest power of 2 to the input. */
		const LOGIC_NEAREST_PO2: BuiltinFunc.LOGIC_NEAREST_PO2;

		/** Create a `WeakRef` from the input. */
		const OBJ_WEAKREF: BuiltinFunc.OBJ_WEAKREF;

		/** Create a `FuncRef` from the input. */
		const FUNC_FUNCREF: BuiltinFunc.FUNC_FUNCREF;

		/** Convert between types. */
		const TYPE_CONVERT: BuiltinFunc.TYPE_CONVERT;

		/** Return the type of the input as an integer. Check `Variant.Type` for the integers that might be returned. */
		const TYPE_OF: BuiltinFunc.TYPE_OF;

		/** Checks if a type is registered in the `ClassDB`. */
		const TYPE_EXISTS: BuiltinFunc.TYPE_EXISTS;

		/** Return a character with the given ascii value. */
		const TEXT_CHAR: BuiltinFunc.TEXT_CHAR;

		/** Convert the input to a string. */
		const TEXT_STR: BuiltinFunc.TEXT_STR;

		/** Print the given string to the output window. */
		const TEXT_PRINT: BuiltinFunc.TEXT_PRINT;

		/** Print the given string to the standard error output. */
		const TEXT_PRINTERR: BuiltinFunc.TEXT_PRINTERR;

		/** Print the given string to the standard output, without adding a newline. */
		const TEXT_PRINTRAW: BuiltinFunc.TEXT_PRINTRAW;

		/** Serialize a `Variant` to a string. */
		const VAR_TO_STR: BuiltinFunc.VAR_TO_STR;

		/** Deserialize a `Variant` from a string serialized using `VAR_TO_STR`. */
		const STR_TO_VAR: BuiltinFunc.STR_TO_VAR;

		/** Serialize a `Variant` to a `PoolByteArray`. */
		const VAR_TO_BYTES: BuiltinFunc.VAR_TO_BYTES;

		/** Deserialize a `Variant` from a `PoolByteArray` serialized using `VAR_TO_BYTES`. */
		const BYTES_TO_VAR: BuiltinFunc.BYTES_TO_VAR;

		/** Return the `Color` with the given name and alpha ranging from 0 to 1.

		 **Note:** Names are defined in `color_names.inc`. */
		const COLORN: BuiltinFunc.COLORN;

		/** Return a number smoothly interpolated between the first two inputs, based on the third input. Similar to `MATH_LERP`, but interpolates faster at the beginning and slower at the end. Using Hermite interpolation formula:

		 ```gdscript
		 var t = clamp((weight - from) / (to - from), 0.0, 1.0)
		 return t * t * (3.0 - 2.0 * t)
		 ``` */
		const MATH_SMOOTHSTEP: BuiltinFunc.MATH_SMOOTHSTEP;

		/**  */
		const MATH_POSMOD: BuiltinFunc.MATH_POSMOD;

		/**  */
		const MATH_LERP_ANGLE: BuiltinFunc.MATH_LERP_ANGLE;

		/**  */
		const TEXT_ORD: BuiltinFunc.TEXT_ORD;

		/** Represents the size of the `BuiltinFunc` enum. */
		const FUNC_MAX: BuiltinFunc.FUNC_MAX;
	}

	/** Gets a constant from a given class.
	 This node returns a constant from a given class, such as `TYPE_INT`. See the given class' documentation for available constants.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (variant): `value` */
	class VisualScriptClassConstant extends VisualScriptNode {

		/** The constant's parent class. */
		base_type: string;

		/** The constant to return. See the given class for its available constants. */
		constant: string;

		/** Getter of `base_type` property */
		get_base_type() : string;

		/** Setter of `base_type` property */
		set_base_type(p_value: string) : void;

		/** Getter of `constant` property */
		get_class_constant() : string;

		/** Setter of `constant` property */
		set_class_constant(p_value: string) : void;
	}
	namespace VisualScriptClassConstant {
	}

	/** A Visual Script node used to annotate the script.
	 A Visual Script node used to display annotations in the script, so that code may be documented.

	 Comment nodes can be resized so they encompass a group of nodes. */
	class VisualScriptComment extends VisualScriptNode {

		/** The comment node's title. */
		title: string;

		/** The text inside the comment node. */
		description: string;

		/** The comment node's size (in pixels). */
		size: Vector2;

		/** Getter of `title` property */
		get_title() : string;

		/** Setter of `title` property */
		set_title(p_value: string) : void;

		/** Getter of `description` property */
		get_description() : string;

		/** Setter of `description` property */
		set_description(p_value: string) : void;

		/** Getter of `size` property */
		get_size() : Vector2;

		/** Setter of `size` property */
		set_size(p_value: Vector2) : void;
	}
	namespace VisualScriptComment {
	}

	/** A Visual Script Node used to create array from a list of items.
	 A Visual Script Node used to compose array from the list of elements provided with custom in-graph UI hard coded in the VisualScript Editor. */
	class VisualScriptComposeArray extends VisualScriptLists {
	}
	namespace VisualScriptComposeArray {
	}

	/** A Visual Script node which branches the flow.
	 A Visual Script node that checks a `bool` input port. If `true`, it will exit via the "true" sequence port. If `false`, it will exit via the "false" sequence port. After exiting either, it exits via the "done" port. Sequence ports may be left disconnected.

	 **Input Ports:**

	 - Sequence: `if (cond) is`

	 - Data (boolean): `cond`

	 **Output Ports:**

	 - Sequence: `true`

	 - Sequence: `false`

	 - Sequence: `done` */
	class VisualScriptCondition extends VisualScriptNode {
	}
	namespace VisualScriptCondition {
	}

	/** Gets a contant's value.
	 This node returns a constant's value.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (variant): `get` */
	class VisualScriptConstant extends VisualScriptNode {

		/** The constant's type. */
		type: number;

		/** The constant's value. */
		value: any;

		/** Getter of `type` property */
		get_constant_type() : number;

		/** Setter of `type` property */
		set_constant_type(p_value: number) : void;

		/** Getter of `value` property */
		get_constant_value() : any;

		/** Setter of `value` property */
		set_constant_value(p_value: any) : void;
	}
	namespace VisualScriptConstant {
	}

	/** A Visual Script node which calls a base type constructor.
	 A Visual Script node which calls a base type constructor. It can be used for type conversion as well. */
	class VisualScriptConstructor extends VisualScriptNode {

		/**  */
		set_constructor_type(type: VariantType) : void;

		/**  */
		get_constructor_type() : number;

		/**  */
		set_constructor(p_constructor: object) : void;

		/**  */
		get_constructor() : object;
	}
	namespace VisualScriptConstructor {
	}

	/** A scripted Visual Script node.
	 A custom Visual Script node which can be scripted in powerful ways. */
	class VisualScriptCustomNode extends VisualScriptNode {

		/** Return the node's title. */
		_get_caption() : string;

		/** Return the node's category. */
		_get_category() : string;

		/** Return the count of input value ports. */
		_get_input_value_port_count() : number;

		/** Return the specified input port's name. */
		_get_input_value_port_name(idx: number) : string;

		/** Return the specified input port's type. See the `Variant.Type` values. */
		_get_input_value_port_type(idx: number) : number;

		/** Return the amount of output **sequence** ports. */
		_get_output_sequence_port_count() : number;

		/** Return the specified **sequence** output's name. */
		_get_output_sequence_port_text(idx: number) : string;

		/** Return the amount of output value ports. */
		_get_output_value_port_count() : number;

		/** Return the specified output's name. */
		_get_output_value_port_name(idx: number) : string;

		/** Return the specified output's type. See the `Variant.Type` values. */
		_get_output_value_port_type(idx: number) : number;

		/** Return the custom node's text, which is shown right next to the input **sequence** port (if there is none, on the place that is usually taken by it). */
		_get_text() : string;

		/** Return the size of the custom node's working memory. See `_step` for more details. */
		_get_working_memory_size() : number;

		/** Return whether the custom node has an input **sequence** port. */
		_has_input_sequence_port() : boolean;

		/** Execute the custom node's logic, returning the index of the output sequence port to use or a `String` when there is an error.

		 The `inputs` array contains the values of the input ports.

		 `outputs` is an array whose indices should be set to the respective outputs.

		 The `start_mode` is usually `START_MODE_BEGIN_SEQUENCE`, unless you have used the `STEP_*` constants.

		 `working_mem` is an array which can be used to persist information between runs of the custom node.

		 When returning, you can mask the returned value with one of the `STEP_*` constants. */
		_step(inputs: any[], outputs: any[], start_mode: number, working_mem: any[]) : any;
	}
	namespace VisualScriptCustomNode {
		enum StartMode {
			/** The start mode used the first time when `_step` is called. */
			START_MODE_BEGIN_SEQUENCE = 0,
			/** The start mode used when `_step` is called after coming back from a `STEP_PUSH_STACK_BIT`. */
			START_MODE_CONTINUE_SEQUENCE = 1,
			/** The start mode used when `_step` is called after resuming from `STEP_YIELD_BIT`. */
			START_MODE_RESUME_YIELD = 2,
		}

		/** The start mode used the first time when `_step` is called. */
		const START_MODE_BEGIN_SEQUENCE: StartMode.START_MODE_BEGIN_SEQUENCE;

		/** The start mode used when `_step` is called after coming back from a `STEP_PUSH_STACK_BIT`. */
		const START_MODE_CONTINUE_SEQUENCE: StartMode.START_MODE_CONTINUE_SEQUENCE;

		/** The start mode used when `_step` is called after resuming from `STEP_YIELD_BIT`. */
		const START_MODE_RESUME_YIELD: StartMode.START_MODE_RESUME_YIELD;

		/** Hint used by `_step` to tell that control should return to it when there is no other node left to execute.

		 This is used by `VisualScriptCondition` to redirect the sequence to the "Done" port after the `true`/`false` branch has finished execution. */
		const STEP_PUSH_STACK_BIT: 16777216;

		/** Hint used by `_step` to tell that control should return back, either hitting a previous `STEP_PUSH_STACK_BIT` or exiting the function. */
		const STEP_GO_BACK_BIT: 33554432;

		/**  */
		const STEP_NO_ADVANCE_BIT: 67108864;

		/** Hint used by `_step` to tell that control should stop and exit the function. */
		const STEP_EXIT_FUNCTION_BIT: 134217728;

		/** Hint used by `_step` to tell that the function should be yielded.

		 Using this requires you to have at least one working memory slot, which is used for the `VisualScriptFunctionState`. */
		const STEP_YIELD_BIT: 268435456;
	}

	/** A Visual Script node which deconstructs a base type instance into its parts.
	  */
	class VisualScriptDeconstruct extends VisualScriptNode {

		/** The type to deconstruct. */
		type: number;

		/** Getter of `type` property */
		get_deconstruct_type() : number;

		/** Setter of `type` property */
		set_deconstruct_type(p_value: number) : void;
	}
	namespace VisualScriptDeconstruct {
	}

	/** 
	  */
	class VisualScriptEditor extends Object {

		/** Add a custom Visual Script node to the editor. It'll be placed under "Custom Nodes" with the `category` as the parameter. */
		static add_custom_node(name: string, category: string, script: Script) : void;

		/** Remove a custom Visual Script node from the editor. Custom nodes already placed on scripts won't be removed. */
		static remove_custom_node(name: string, category: string) : void;
	}
	namespace VisualScriptEditor {

		/** Emitted when a custom Visual Script node is added or removed. */
		const custom_nodes_updated: 'custom_nodes_updated';
	}

	/** Emits a specified signal.
	 Emits a specified signal when it is executed.

	 **Input Ports:**

	 - Sequence: `emit`

	 **Output Ports:**

	 - Sequence */
	class VisualScriptEmitSignal extends VisualScriptNode {

		/** The signal to emit. */
		signal: string;

		/** Getter of `signal` property */
		get_signal() : string;

		/** Setter of `signal` property */
		set_signal(p_value: string) : void;
	}
	namespace VisualScriptEmitSignal {
	}

	/** A Visual Script node returning a singleton from `@GlobalScope`.
	  */
	class VisualScriptEngineSingleton extends VisualScriptNode {

		/** The singleton's name. */
		constant: string;

		/** Getter of `constant` property */
		get_singleton() : string;

		/** Setter of `constant` property */
		set_singleton(p_value: string) : void;
	}
	namespace VisualScriptEngineSingleton {
	}

	/** 
	  */
	class VisualScriptExpression extends VisualScriptNode {
	}
	namespace VisualScriptExpression {
	}

	/** 
	  */
	class VisualScriptFunction extends VisualScriptNode {
	}
	namespace VisualScriptFunction {
	}

	/** 
	  */
	class VisualScriptFunctionCall extends VisualScriptNode {

		/**  */
		call_mode: number;

		/**  */
		base_type: string;

		/**  */
		base_script: string;

		/**  */
		singleton: string;

		/**  */
		basic_type: number;

		/**  */
		node_path: string;

		/**  */
		'function': string;

		/**  */
		use_default_args: number;

		/**  */
		validate: boolean;

		/**  */
		rpc_call_mode: number;

		/** Getter of `call_mode` property */
		get_call_mode() : number;

		/** Setter of `call_mode` property */
		set_call_mode(p_value: number) : void;

		/** Getter of `base_type` property */
		get_base_type() : string;

		/** Setter of `base_type` property */
		set_base_type(p_value: string) : void;

		/** Getter of `base_script` property */
		get_base_script() : string;

		/** Setter of `base_script` property */
		set_base_script(p_value: string) : void;

		/** Getter of `singleton` property */
		get_singleton() : string;

		/** Setter of `singleton` property */
		set_singleton(p_value: string) : void;

		/** Getter of `basic_type` property */
		get_basic_type() : number;

		/** Setter of `basic_type` property */
		set_basic_type(p_value: number) : void;

		/** Getter of `node_path` property */
		get_base_path() : string;

		/** Setter of `node_path` property */
		set_base_path(p_value: string) : void;

		/** Getter of `function` property */
		get_function() : string;

		/** Setter of `function` property */
		set_function(p_value: string) : void;

		/** Getter of `use_default_args` property */
		get_use_default_args() : number;

		/** Setter of `use_default_args` property */
		set_use_default_args(p_value: number) : void;

		/** Getter of `validate` property */
		get_validate() : boolean;

		/** Setter of `validate` property */
		set_validate(p_value: boolean) : void;

		/** Getter of `rpc_call_mode` property */
		get_rpc_call_mode() : number;

		/** Setter of `rpc_call_mode` property */
		set_rpc_call_mode(p_value: number) : void;
	}
	namespace VisualScriptFunctionCall {
		enum CallMode {
			/**  */
			CALL_MODE_SELF = 0,
			/**  */
			CALL_MODE_NODE_PATH = 1,
			/**  */
			CALL_MODE_INSTANCE = 2,
			/**  */
			CALL_MODE_BASIC_TYPE = 3,
			/**  */
			CALL_MODE_SINGLETON = 4,
		}
		enum RPCCallMode {
			/**  */
			RPC_DISABLED = 0,
			/**  */
			RPC_RELIABLE = 1,
			/**  */
			RPC_UNRELIABLE = 2,
			/**  */
			RPC_RELIABLE_TO_ID = 3,
			/**  */
			RPC_UNRELIABLE_TO_ID = 4,
		}

		/**  */
		const CALL_MODE_SELF: CallMode.CALL_MODE_SELF;

		/**  */
		const CALL_MODE_NODE_PATH: CallMode.CALL_MODE_NODE_PATH;

		/**  */
		const CALL_MODE_INSTANCE: CallMode.CALL_MODE_INSTANCE;

		/**  */
		const CALL_MODE_BASIC_TYPE: CallMode.CALL_MODE_BASIC_TYPE;

		/**  */
		const CALL_MODE_SINGLETON: CallMode.CALL_MODE_SINGLETON;

		/**  */
		const RPC_DISABLED: RPCCallMode.RPC_DISABLED;

		/**  */
		const RPC_RELIABLE: RPCCallMode.RPC_RELIABLE;

		/**  */
		const RPC_UNRELIABLE: RPCCallMode.RPC_UNRELIABLE;

		/**  */
		const RPC_RELIABLE_TO_ID: RPCCallMode.RPC_RELIABLE_TO_ID;

		/**  */
		const RPC_UNRELIABLE_TO_ID: RPCCallMode.RPC_UNRELIABLE_TO_ID;
	}

	/** 
	  */
	class VisualScriptFunctionState extends Reference {

		/**  */
		connect_to_signal(obj: Object, signals: string, args: any[]) : void;

		/**  */
		//@ts-ignore
		resume(args: any[] = null) : any;

		/**  */
		is_valid() : boolean;
	}
	namespace VisualScriptFunctionState {
	}

	/** 
	  */
	class VisualScriptGlobalConstant extends VisualScriptNode {

		/**  */
		constant: number;

		/** Getter of `constant` property */
		get_global_constant() : number;

		/** Setter of `constant` property */
		set_global_constant(p_value: number) : void;
	}
	namespace VisualScriptGlobalConstant {
	}

	/** 
	  */
	class VisualScriptIndexGet extends VisualScriptNode {
	}
	namespace VisualScriptIndexGet {
	}

	/** 
	  */
	class VisualScriptIndexSet extends VisualScriptNode {
	}
	namespace VisualScriptIndexSet {
	}

	/** 
	  */
	class VisualScriptInputAction extends VisualScriptNode {

		/**  */
		action: string;

		/**  */
		mode: number;

		/** Getter of `action` property */
		get_action_name() : string;

		/** Setter of `action` property */
		set_action_name(p_value: string) : void;

		/** Getter of `mode` property */
		get_action_mode() : number;

		/** Setter of `mode` property */
		set_action_mode(p_value: number) : void;
	}
	namespace VisualScriptInputAction {
		enum Mode {
			/**  */
			MODE_PRESSED = 0,
			/**  */
			MODE_RELEASED = 1,
			/**  */
			MODE_JUST_PRESSED = 2,
			/**  */
			MODE_JUST_RELEASED = 3,
		}

		/**  */
		const MODE_PRESSED: Mode.MODE_PRESSED;

		/**  */
		const MODE_RELEASED: Mode.MODE_RELEASED;

		/**  */
		const MODE_JUST_PRESSED: Mode.MODE_JUST_PRESSED;

		/**  */
		const MODE_JUST_RELEASED: Mode.MODE_JUST_RELEASED;
	}

	/** Steps through items in a given input.
	 This node steps through each item in a given input. Input can be any sequence data type, such as an `Array` or `String`. When each item has been processed, execution passed out the `exit` Sequence port.

	 **Input Ports:**

	 - Sequence: `for (elem) in (input)`

	 - Data (variant): `input`

	 **Output Ports:**

	 - Sequence: `each`

	 - Sequence: `exit`

	 - Data (variant): `elem` */
	class VisualScriptIterator extends VisualScriptNode {
	}
	namespace VisualScriptIterator {
	}

	/** A Visual Script virtual class for in-graph editable nodes.
	 A Visual Script virtual class that defines the shape and the default behaviour of the nodes that have to be in-graph editable nodes. */
	class VisualScriptLists extends VisualScriptNode {

		/**  */
		add_input_data_port(type: VariantType, name: string, index: number) : void;

		/**  */
		set_input_data_port_name(index: number, name: string) : void;

		/**  */
		set_input_data_port_type(index: number, type: VariantType) : void;

		/**  */
		remove_input_data_port(index: number) : void;

		/**  */
		add_output_data_port(type: VariantType, name: string, index: number) : void;

		/**  */
		set_output_data_port_name(index: number, name: string) : void;

		/**  */
		set_output_data_port_type(index: number, type: VariantType) : void;

		/**  */
		remove_output_data_port(index: number) : void;
	}
	namespace VisualScriptLists {
	}

	/** Gets a local variable's value.
	 Returns a local variable's value. "Var Name" must be supplied, with an optional type.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (variant): `get` */
	class VisualScriptLocalVar extends VisualScriptNode {

		/** The local variable's name. */
		var_name: string;

		/** The local variable's type. */
		type: number;

		/** Getter of `var_name` property */
		get_var_name() : string;

		/** Setter of `var_name` property */
		set_var_name(p_value: string) : void;

		/** Getter of `type` property */
		get_var_type() : number;

		/** Setter of `type` property */
		set_var_type(p_value: number) : void;
	}
	namespace VisualScriptLocalVar {
	}

	/** Changes a local variable's value.
	 Changes a local variable's value to the given input. The new value is also provided on an output Data port.

	 **Input Ports:**

	 - Sequence

	 - Data (variant): `set`

	 **Output Ports:**

	 - Sequence

	 - Data (variant): `get` */
	class VisualScriptLocalVarSet extends VisualScriptNode {

		/** The local variable's name. */
		var_name: string;

		/** The local variable's type. */
		type: number;

		/** Getter of `var_name` property */
		get_var_name() : string;

		/** Setter of `var_name` property */
		set_var_name(p_value: string) : void;

		/** Getter of `type` property */
		get_var_type() : number;

		/** Setter of `type` property */
		set_var_type(p_value: number) : void;
	}
	namespace VisualScriptLocalVarSet {
	}

	/** Commonly used mathematical constants.
	 Provides common math constants, such as Pi, on an output Data port.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (variant): `get` */
	class VisualScriptMathConstant extends VisualScriptNode {

		/** The math constant. */
		constant: number;

		/** Getter of `constant` property */
		get_math_constant() : number;

		/** Setter of `constant` property */
		set_math_constant(p_value: number) : void;
	}
	namespace VisualScriptMathConstant {
		enum MathConstant {
			/** Unity: `1`. */
			MATH_CONSTANT_ONE = 0,
			/** Pi: `3.141593`. */
			MATH_CONSTANT_PI = 1,
			/** Pi divided by two: `1.570796`. */
			MATH_CONSTANT_HALF_PI = 2,
			/** Tau: `6.283185`. */
			MATH_CONSTANT_TAU = 3,
			/** Mathematical constant `e`, the natural log base: `2.718282`. */
			MATH_CONSTANT_E = 4,
			/** Square root of two: `1.414214`. */
			MATH_CONSTANT_SQRT2 = 5,
			/** Infinity: `inf`. */
			MATH_CONSTANT_INF = 6,
			/** Not a number: `nan`. */
			MATH_CONSTANT_NAN = 7,
			/** Represents the size of the `MathConstant` enum. */
			MATH_CONSTANT_MAX = 8,
		}

		/** Unity: `1`. */
		const MATH_CONSTANT_ONE: MathConstant.MATH_CONSTANT_ONE;

		/** Pi: `3.141593`. */
		const MATH_CONSTANT_PI: MathConstant.MATH_CONSTANT_PI;

		/** Pi divided by two: `1.570796`. */
		const MATH_CONSTANT_HALF_PI: MathConstant.MATH_CONSTANT_HALF_PI;

		/** Tau: `6.283185`. */
		const MATH_CONSTANT_TAU: MathConstant.MATH_CONSTANT_TAU;

		/** Mathematical constant `e`, the natural log base: `2.718282`. */
		const MATH_CONSTANT_E: MathConstant.MATH_CONSTANT_E;

		/** Square root of two: `1.414214`. */
		const MATH_CONSTANT_SQRT2: MathConstant.MATH_CONSTANT_SQRT2;

		/** Infinity: `inf`. */
		const MATH_CONSTANT_INF: MathConstant.MATH_CONSTANT_INF;

		/** Not a number: `nan`. */
		const MATH_CONSTANT_NAN: MathConstant.MATH_CONSTANT_NAN;

		/** Represents the size of the `MathConstant` enum. */
		const MATH_CONSTANT_MAX: MathConstant.MATH_CONSTANT_MAX;
	}

	/** A node which is part of a `VisualScript`.
	 A node which is part of a `VisualScript`. Not to be confused with `Node`, which is a part of a `SceneTree`. */
	class VisualScriptNode extends Resource {

		/** Returns the `VisualScript` instance the node is bound to. */
		get_visual_script() : VisualScript;

		/** Change the default value of a given port. */
		set_default_input_value(port_idx: number, value: any) : void;

		/** Returns the default value of a given port. The default value is used when nothing is connected to the port. */
		get_default_input_value(port_idx: number) : any;

		/** Notify that the node's ports have changed. Usually used in conjunction with `VisualScriptCustomNode` . */
		ports_changed_notify() : void;
	}
	namespace VisualScriptNode {

		/** Emitted when the available input/output ports are changed. */
		const ports_changed: 'ports_changed';
	}

	/** 
	 **Input Ports:**

	 - Data (variant): `A`

	 - Data (variant): `B`

	 **Output Ports:**

	 - Data (variant): `result` */
	class VisualScriptOperator extends VisualScriptNode {

		/**  */
		operator: number;

		/**  */
		type: number;

		/** Getter of `operator` property */
		get_operator() : number;

		/** Setter of `operator` property */
		set_operator(p_value: number) : void;

		/** Getter of `type` property */
		get_typed() : number;

		/** Setter of `type` property */
		set_typed(p_value: number) : void;
	}
	namespace VisualScriptOperator {
	}

	/** Creates a new `Resource` or loads one from the filesystem.
	 Creates a new `Resource` or loads one from the filesystem.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (object): `res` */
	class VisualScriptPreload extends VisualScriptNode {

		/** The `Resource` to load. */
		resource: Resource;

		/** Getter of `resource` property */
		get_preload() : Resource;

		/** Setter of `resource` property */
		set_preload(p_value: Resource) : void;
	}
	namespace VisualScriptPreload {
	}

	/** 
	  */
	class VisualScriptPropertyGet extends VisualScriptNode {

		/**  */
		set_mode: number;

		/**  */
		base_type: string;

		/**  */
		base_script: string;

		/**  */
		basic_type: number;

		/**  */
		node_path: string;

		/**  */
		property: string;

		/**  */
		index: string;

		/** Getter of `set_mode` property */
		get_call_mode() : number;

		/** Setter of `set_mode` property */
		set_call_mode(p_value: number) : void;

		/** Getter of `base_type` property */
		get_base_type() : string;

		/** Setter of `base_type` property */
		set_base_type(p_value: string) : void;

		/** Getter of `base_script` property */
		get_base_script() : string;

		/** Setter of `base_script` property */
		set_base_script(p_value: string) : void;

		/** Getter of `basic_type` property */
		get_basic_type() : number;

		/** Setter of `basic_type` property */
		set_basic_type(p_value: number) : void;

		/** Getter of `node_path` property */
		get_base_path() : string;

		/** Setter of `node_path` property */
		set_base_path(p_value: string) : void;

		/** Getter of `property` property */
		get_property() : string;

		/** Setter of `property` property */
		set_property(p_value: string) : void;

		/** Getter of `index` property */
		get_index() : string;

		/** Setter of `index` property */
		set_index(p_value: string) : void;
	}
	namespace VisualScriptPropertyGet {
		enum CallMode {
			/**  */
			CALL_MODE_SELF = 0,
			/**  */
			CALL_MODE_NODE_PATH = 1,
			/**  */
			CALL_MODE_INSTANCE = 2,
		}

		/**  */
		const CALL_MODE_SELF: CallMode.CALL_MODE_SELF;

		/**  */
		const CALL_MODE_NODE_PATH: CallMode.CALL_MODE_NODE_PATH;

		/**  */
		const CALL_MODE_INSTANCE: CallMode.CALL_MODE_INSTANCE;
	}

	/** 
	  */
	class VisualScriptPropertySet extends VisualScriptNode {

		/**  */
		set_mode: number;

		/**  */
		base_type: string;

		/**  */
		base_script: string;

		/**  */
		basic_type: number;

		/**  */
		node_path: string;

		/**  */
		property: string;

		/**  */
		index: string;

		/**  */
		assign_op: number;

		/** Getter of `set_mode` property */
		get_call_mode() : number;

		/** Setter of `set_mode` property */
		set_call_mode(p_value: number) : void;

		/** Getter of `base_type` property */
		get_base_type() : string;

		/** Setter of `base_type` property */
		set_base_type(p_value: string) : void;

		/** Getter of `base_script` property */
		get_base_script() : string;

		/** Setter of `base_script` property */
		set_base_script(p_value: string) : void;

		/** Getter of `basic_type` property */
		get_basic_type() : number;

		/** Setter of `basic_type` property */
		set_basic_type(p_value: number) : void;

		/** Getter of `node_path` property */
		get_base_path() : string;

		/** Setter of `node_path` property */
		set_base_path(p_value: string) : void;

		/** Getter of `property` property */
		get_property() : string;

		/** Setter of `property` property */
		set_property(p_value: string) : void;

		/** Getter of `index` property */
		get_index() : string;

		/** Setter of `index` property */
		set_index(p_value: string) : void;

		/** Getter of `assign_op` property */
		get_assign_op() : number;

		/** Setter of `assign_op` property */
		set_assign_op(p_value: number) : void;
	}
	namespace VisualScriptPropertySet {
		enum AssignOp {
			/**  */
			ASSIGN_OP_NONE = 0,
			/**  */
			ASSIGN_OP_ADD = 1,
			/**  */
			ASSIGN_OP_SUB = 2,
			/**  */
			ASSIGN_OP_MUL = 3,
			/**  */
			ASSIGN_OP_DIV = 4,
			/**  */
			ASSIGN_OP_MOD = 5,
			/**  */
			ASSIGN_OP_SHIFT_LEFT = 6,
			/**  */
			ASSIGN_OP_SHIFT_RIGHT = 7,
			/**  */
			ASSIGN_OP_BIT_AND = 8,
			/**  */
			ASSIGN_OP_BIT_OR = 9,
			/**  */
			ASSIGN_OP_BIT_XOR = 10,
		}
		enum CallMode {
			/**  */
			CALL_MODE_SELF = 0,
			/**  */
			CALL_MODE_NODE_PATH = 1,
			/**  */
			CALL_MODE_INSTANCE = 2,
			/**  */
			CALL_MODE_BASIC_TYPE = 3,
		}

		/**  */
		const CALL_MODE_SELF: CallMode.CALL_MODE_SELF;

		/**  */
		const CALL_MODE_NODE_PATH: CallMode.CALL_MODE_NODE_PATH;

		/**  */
		const CALL_MODE_INSTANCE: CallMode.CALL_MODE_INSTANCE;

		/**  */
		const CALL_MODE_BASIC_TYPE: CallMode.CALL_MODE_BASIC_TYPE;

		/**  */
		const ASSIGN_OP_NONE: AssignOp.ASSIGN_OP_NONE;

		/**  */
		const ASSIGN_OP_ADD: AssignOp.ASSIGN_OP_ADD;

		/**  */
		const ASSIGN_OP_SUB: AssignOp.ASSIGN_OP_SUB;

		/**  */
		const ASSIGN_OP_MUL: AssignOp.ASSIGN_OP_MUL;

		/**  */
		const ASSIGN_OP_DIV: AssignOp.ASSIGN_OP_DIV;

		/**  */
		const ASSIGN_OP_MOD: AssignOp.ASSIGN_OP_MOD;

		/**  */
		const ASSIGN_OP_SHIFT_LEFT: AssignOp.ASSIGN_OP_SHIFT_LEFT;

		/**  */
		const ASSIGN_OP_SHIFT_RIGHT: AssignOp.ASSIGN_OP_SHIFT_RIGHT;

		/**  */
		const ASSIGN_OP_BIT_AND: AssignOp.ASSIGN_OP_BIT_AND;

		/**  */
		const ASSIGN_OP_BIT_OR: AssignOp.ASSIGN_OP_BIT_OR;

		/**  */
		const ASSIGN_OP_BIT_XOR: AssignOp.ASSIGN_OP_BIT_XOR;
	}

	/** 
	  */
	class VisualScriptResourcePath extends VisualScriptNode {

		/**  */
		path: string;

		/** Getter of `path` property */
		get_resource_path() : string;

		/** Setter of `path` property */
		set_resource_path(p_value: string) : void;
	}
	namespace VisualScriptResourcePath {
	}

	/** Exits a function and returns an optional value.
	 Ends the execution of a function and returns control to the calling function. Optionally, it can return a `Variant` value.

	 **Input Ports:**

	 - Sequence

	 - Data (variant): `result` (optional)

	 **Output Ports:**

	 none */
	class VisualScriptReturn extends VisualScriptNode {

		/** If `true`, the `return` input port is available. */
		return_enabled: boolean;

		/** The return value's data type. */
		return_type: number;

		/** Getter of `return_enabled` property */
		is_return_value_enabled() : boolean;

		/** Setter of `return_enabled` property */
		set_enable_return_value(p_value: boolean) : void;

		/** Getter of `return_type` property */
		get_return_type() : number;

		/** Setter of `return_type` property */
		set_return_type(p_value: number) : void;
	}
	namespace VisualScriptReturn {
	}

	/** Node reference.
	 A direct reference to a node.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data: `node` (obj) */
	class VisualScriptSceneNode extends VisualScriptNode {

		/** The node's path in the scene tree. */
		node_path: string;

		/** Getter of `node_path` property */
		get_node_path() : string;

		/** Setter of `node_path` property */
		set_node_path(p_value: string) : void;
	}
	namespace VisualScriptSceneNode {
	}

	/** 
	  */
	class VisualScriptSceneTree extends VisualScriptNode {
	}
	namespace VisualScriptSceneTree {
	}

	/** Chooses between two input values.
	 Chooses between two input values based on a Boolean condition.

	 **Input Ports:**

	 - Data (boolean): `cond`

	 - Data (variant): `a`

	 - Data (variant): `b`

	 **Output Ports:**

	 - Data (variant): `out` */
	class VisualScriptSelect extends VisualScriptNode {

		/** The input variables' type. */
		type: number;

		/** Getter of `type` property */
		get_typed() : number;

		/** Setter of `type` property */
		set_typed(p_value: number) : void;
	}
	namespace VisualScriptSelect {
	}

	/** Outputs a reference to the current instance.
	 Provides a reference to the node running the visual script.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (object): `instance` */
	class VisualScriptSelf extends VisualScriptNode {
	}
	namespace VisualScriptSelf {
	}

	/** Executes a series of Sequence ports.
	 Steps through a series of one or more output Sequence ports. The `current` data port outputs the currently executing item.

	 **Input Ports:**

	 - Sequence: `in order`

	 **Output Ports:**

	 - Sequence: `1`

	 - Sequence: `2 - n` (optional)

	 - Data (int): `current` */
	class VisualScriptSequence extends VisualScriptNode {

		/** The number of steps in the sequence. */
		steps: number;

		/** Getter of `steps` property */
		get_steps() : number;

		/** Setter of `steps` property */
		set_steps(p_value: number) : void;
	}
	namespace VisualScriptSequence {
	}

	/** 
	  */
	class VisualScriptSubCall extends VisualScriptNode {

		/**  */
		_subcall(p_arguments: any) : any;
	}
	namespace VisualScriptSubCall {
	}

	/** Branches program flow based on a given input's value.
	 Branches the flow based on an input's value. Use **Case Count** in the Inspector to set the number of branches and each comparison's optional type.

	 **Input Ports:**

	 - Sequence: `'input' is`

	 - Data (variant): `=`

	 - Data (variant): `=` (optional)

	 - Data (variant): `input`

	 **Output Ports:**

	 - Sequence

	 - Sequence (optional)

	 - Sequence: `done` */
	class VisualScriptSwitch extends VisualScriptNode {
	}
	namespace VisualScriptSwitch {
	}

	/** 
	  */
	class VisualScriptTypeCast extends VisualScriptNode {

		/**  */
		base_type: string;

		/**  */
		base_script: string;

		/** Getter of `base_type` property */
		get_base_type() : string;

		/** Setter of `base_type` property */
		set_base_type(p_value: string) : void;

		/** Getter of `base_script` property */
		get_base_script() : string;

		/** Setter of `base_script` property */
		set_base_script(p_value: string) : void;
	}
	namespace VisualScriptTypeCast {
	}

	/** Gets a variable's value.
	 Returns a variable's value. "Var Name" must be supplied, with an optional type.

	 **Input Ports:**

	 none

	 **Output Ports:**

	 - Data (variant): `value` */
	class VisualScriptVariableGet extends VisualScriptNode {

		/** The variable's name. */
		var_name: string;

		/** Getter of `var_name` property */
		get_variable() : string;

		/** Setter of `var_name` property */
		set_variable(p_value: string) : void;
	}
	namespace VisualScriptVariableGet {
	}

	/** Changes a variable's value.
	 Changes a variable's value to the given input.

	 **Input Ports:**

	 - Sequence

	 - Data (variant): `set`

	 **Output Ports:**

	 - Sequence */
	class VisualScriptVariableSet extends VisualScriptNode {

		/** The variable's name. */
		var_name: string;

		/** Getter of `var_name` property */
		get_variable() : string;

		/** Setter of `var_name` property */
		set_variable(p_value: string) : void;
	}
	namespace VisualScriptVariableSet {
	}

	/** Conditional loop.
	 Loops while a condition is `true`. Execution continues out the `exit` Sequence port when the loop terminates.

	 **Input Ports:**

	 - Sequence: `while(cond)`

	 - Data (bool): `cond`

	 **Output Ports:**

	 - Sequence: `repeat`

	 - Sequence: `exit` */
	class VisualScriptWhile extends VisualScriptNode {
	}
	namespace VisualScriptWhile {
	}

	/** 
	  */
	class VisualScriptYield extends VisualScriptNode {

		/**  */
		mode: number;

		/**  */
		wait_time: number;

		/** Getter of `mode` property */
		get_yield_mode() : number;

		/** Setter of `mode` property */
		set_yield_mode(p_value: number) : void;

		/** Getter of `wait_time` property */
		get_wait_time() : number;

		/** Setter of `wait_time` property */
		set_wait_time(p_value: number) : void;
	}
	namespace VisualScriptYield {
		enum YieldMode {
			/**  */
			YIELD_FRAME = 1,
			/**  */
			YIELD_PHYSICS_FRAME = 2,
			/**  */
			YIELD_WAIT = 3,
		}

		/**  */
		const YIELD_FRAME: YieldMode.YIELD_FRAME;

		/**  */
		const YIELD_PHYSICS_FRAME: YieldMode.YIELD_PHYSICS_FRAME;

		/**  */
		const YIELD_WAIT: YieldMode.YIELD_WAIT;
	}

	/** 
	  */
	class VisualScriptYieldSignal extends VisualScriptNode {

		/**  */
		call_mode: number;

		/**  */
		base_type: string;

		/**  */
		node_path: string;

		/**  */
		signal: string;

		/** Getter of `call_mode` property */
		get_call_mode() : number;

		/** Setter of `call_mode` property */
		set_call_mode(p_value: number) : void;

		/** Getter of `base_type` property */
		get_base_type() : string;

		/** Setter of `base_type` property */
		set_base_type(p_value: string) : void;

		/** Getter of `node_path` property */
		get_base_path() : string;

		/** Setter of `node_path` property */
		set_base_path(p_value: string) : void;

		/** Getter of `signal` property */
		get_signal() : string;

		/** Setter of `signal` property */
		set_signal(p_value: string) : void;
	}
	namespace VisualScriptYieldSignal {
		enum CallMode {
			/**  */
			CALL_MODE_SELF = 0,
			/**  */
			CALL_MODE_NODE_PATH = 1,
			/**  */
			CALL_MODE_INSTANCE = 2,
		}

		/**  */
		const CALL_MODE_SELF: CallMode.CALL_MODE_SELF;

		/**  */
		const CALL_MODE_NODE_PATH: CallMode.CALL_MODE_NODE_PATH;

		/**  */
		const CALL_MODE_INSTANCE: CallMode.CALL_MODE_INSTANCE;
	}

	/** Server for anything visible.
	 Server for anything visible. The visual server is the API backend for everything visible. The whole scene system mounts on it to display.

	 The visual server is completely opaque, the internals are entirely implementation specific and cannot be accessed.

	 The visual server can be used to bypass the scene system entirely.

	 Resources are created using the `*_create` functions.

	 All objects are drawn to a viewport. You can use the `Viewport` attached to the `SceneTree` or you can create one yourself with `viewport_create`. When using a custom scenario or canvas, the scenario or canvas needs to be attached to the viewport using `viewport_set_scenario` or `viewport_attach_canvas`.

	 In 3D, all visual objects must be associated with a scenario. The scenario is a visual representation of the world. If accessing the visual server from a running game, the scenario can be accessed from the scene tree from any `Spatial` node with `Spatial.get_world`. Otherwise, a scenario can be created with `scenario_create`.

	 Similarly in 2D, a canvas is needed to draw all canvas items.

	 In 3D, all visible objects are comprised of a resource and an instance. A resource can be a mesh, a particle system, a light, or any other 3D object. In order to be visible resources must be attached to an instance using `instance_set_base`. The instance must also be attached to the scenario using `instance_set_scenario` in order to be visible.

	 In 2D, all visible objects are some form of canvas item. In order to be visible, a canvas item needs to be the child of a canvas attached to a viewport, or it needs to be the child of another canvas item that is eventually attached to the canvas. */
	class VisualServer extends Object {

		/** If `false`, disables rendering completely, but the engine logic is still being processed. You can call `force_draw` to draw a frame even with rendering disabled. */
		static render_loop_enabled: boolean;

		/** Synchronizes threads. */
		static force_sync() : void;

		/** Forces a frame to be drawn when the function is called. Drawing a frame updates all `Viewport`s that are set to update. Use with extreme caution. */
		//@ts-ignore
		static force_draw(swap_buffers: boolean = true, frame_step: number = 0.0) : void;

		/** Not implemented in Godot 3.x. */
		static sync() : void;

		/** Draws a frame. *This method is deprecated*, please use `force_draw` instead. */
		//@ts-ignore
		static draw(swap_buffers: boolean = true, frame_step: number = 0.0) : void;

		/** Creates an empty texture and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `texture_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static texture_create() : RID;

		/** Creates a texture, allocates the space for an image, and fills in the image. */
		//@ts-ignore
		static texture_create_from_image(image: Image, flags: number = 7) : RID;

		/** Allocates the GPU memory for the texture. */
		//@ts-ignore
		static texture_allocate(texture: RID, width: number, height: number, depth_3d: number, format: Image.Format, type: VisualServer.TextureType, flags: number = 7) : void;

		/** Sets the texture's image data. If it's a CubeMap, it sets the image data at a cube side. */
		//@ts-ignore
		static texture_set_data(texture: RID, image: Image, layer: number = 0) : void;

		/** Sets a part of the data for a texture. Warning: this function calls the underlying graphics API directly and may corrupt your texture if used improperly. */
		//@ts-ignore
		static texture_set_data_partial(texture: RID, image: Image, src_x: number, src_y: number, src_w: number, src_h: number, dst_x: number, dst_y: number, dst_mip: number, layer: number = 0) : void;

		/** Returns a copy of a texture's image unless it's a CubeMap, in which case it returns the `RID` of the image at one of the cubes sides. */
		//@ts-ignore
		static texture_get_data(texture: RID, cube_side: number = 0) : Image;

		/** Sets the texture's flags. See `TextureFlags` for options. */
		static texture_set_flags(texture: RID, flags: number) : void;

		/** Returns the flags of a texture. */
		static texture_get_flags(texture: RID) : number;

		/** Returns the format of the texture's image. */
		static texture_get_format(texture: RID) : number;

		/** Returns the type of the texture, can be any of the `TextureType`. */
		static texture_get_type(texture: RID) : number;

		/** Returns the opengl id of the texture's image. */
		static texture_get_texid(texture: RID) : number;

		/** Returns the texture's width. */
		static texture_get_width(texture: RID) : number;

		/** Returns the texture's height. */
		static texture_get_height(texture: RID) : number;

		/** Returns the depth of the texture. */
		static texture_get_depth(texture: RID) : number;

		/** Resizes the texture to the specified dimensions. */
		static texture_set_size_override(texture: RID, width: number, height: number, depth: number) : void;

		/** Sets the texture's path. */
		static texture_set_path(texture: RID, path: string) : void;

		/** Returns the texture's path. */
		static texture_get_path(texture: RID) : string;

		/** If `true`, sets internal processes to shrink all image data to half the size. */
		static texture_set_shrink_all_x2_on_set_data(shrink: boolean) : void;

		/** Binds the texture to a texture slot. */
		static texture_bind(texture: RID, p_number: number) : void;

		/** Returns a list of all the textures and their information. */
		static texture_debug_usage() : any[];

		/** If `true`, the image will be stored in the texture's images array if overwritten. */
		static textures_keep_original(enable: boolean) : void;

		/** Creates an empty sky and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `sky_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static sky_create() : RID;

		/** Sets a sky's texture. */
		static sky_set_texture(sky: RID, cube_map: RID, radiance_size: number) : void;

		/** Creates an empty shader and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `shader_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static shader_create() : RID;

		/** Sets a shader's code. */
		static shader_set_code(shader: RID, code: string) : void;

		/** Returns a shader's code. */
		static shader_get_code(shader: RID) : string;

		/** Returns the parameters of a shader. */
		static shader_get_param_list(shader: RID) : any[];

		/** Sets a shader's default texture. Overwrites the texture given by name. */
		static shader_set_default_texture_param(shader: RID, name: string, texture: RID) : void;

		/** Returns a default texture from a shader searched by name. */
		static shader_get_default_texture_param(shader: RID, name: string) : RID;

		/** Creates an empty material and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `material_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static material_create() : RID;

		/** Sets a shader material's shader. */
		static material_set_shader(shader_material: RID, shader: RID) : void;

		/** Returns the shader of a certain material's shader. Returns an empty RID if the material doesn't have a shader. */
		static material_get_shader(shader_material: RID) : RID;

		/** Sets a material's parameter. */
		static material_set_param(material: RID, parameter: string, value: any) : void;

		/** Returns the value of a certain material's parameter. */
		static material_get_param(material: RID, parameter: string) : any;

		/** Returns the default value for the param if available. Otherwise returns an empty `Variant`. */
		static material_get_param_default(material: RID, parameter: string) : any;

		/** Sets a material's render priority. */
		static material_set_render_priority(material: RID, priority: number) : void;

		/** Sets a material's line width. */
		static material_set_line_width(material: RID, width: number) : void;

		/** Sets an object's next material. */
		static material_set_next_pass(material: RID, next_material: RID) : void;

		/** Creates a new mesh and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `mesh_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this mesh to an instance using `instance_set_base` using the returned RID. */
		static mesh_create() : RID;

		/** Function is unused in Godot 3.x. */
		static mesh_surface_get_format_offset(format: number, vertex_len: number, index_len: number, array_index: number) : number;

		/** Function is unused in Godot 3.x. */
		static mesh_surface_get_format_stride(format: number, vertex_len: number, index_len: number) : number;

		/** Adds a surface generated from the Arrays to a mesh. See `PrimitiveType` constants for types. */
		//@ts-ignore
		static mesh_add_surface_from_arrays(mesh: RID, primitive: VisualServer.PrimitiveType, arrays: any[], blend_shapes: any[] = [  ], compress_format: number = 97280) : void;

		/** Sets a mesh's blend shape count. */
		static mesh_set_blend_shape_count(mesh: RID, amount: number) : void;

		/** Returns a mesh's blend shape count. */
		static mesh_get_blend_shape_count(mesh: RID) : number;

		/** Sets a mesh's blend shape mode. */
		static mesh_set_blend_shape_mode(mesh: RID, mode: VisualServer.BlendShapeMode) : void;

		/** Returns a mesh's blend shape mode. */
		static mesh_get_blend_shape_mode(mesh: RID) : number;

		/** Updates a specific region of a vertex buffer for the specified surface. Warning: this function alters the vertex buffer directly with no safety mechanisms, you can easily corrupt your mesh. */
		static mesh_surface_update_region(mesh: RID, surface: number, offset: number, data: PoolByteArray) : void;

		/** Sets a mesh's surface's material. */
		static mesh_surface_set_material(mesh: RID, surface: number, material: RID) : void;

		/** Returns a mesh's surface's material. */
		static mesh_surface_get_material(mesh: RID, surface: number) : RID;

		/** Returns a mesh's surface's amount of vertices. */
		static mesh_surface_get_array_len(mesh: RID, surface: number) : number;

		/** Returns a mesh's surface's amount of indices. */
		static mesh_surface_get_array_index_len(mesh: RID, surface: number) : number;

		/** Returns a mesh's surface's vertex buffer. */
		static mesh_surface_get_array(mesh: RID, surface: number) : PoolByteArray;

		/** Returns a mesh's surface's index buffer. */
		static mesh_surface_get_index_array(mesh: RID, surface: number) : PoolByteArray;

		/** Returns a mesh's surface's buffer arrays. */
		static mesh_surface_get_arrays(mesh: RID, surface: number) : any[];

		/** Returns a mesh's surface's arrays for blend shapes. */
		static mesh_surface_get_blend_shape_arrays(mesh: RID, surface: number) : any[];

		/** Returns the format of a mesh's surface. */
		static mesh_surface_get_format(mesh: RID, surface: number) : number;

		/** Returns the primitive type of a mesh's surface. */
		static mesh_surface_get_primitive_type(mesh: RID, surface: number) : number;

		/** Returns a mesh's surface's aabb. */
		static mesh_surface_get_aabb(mesh: RID, surface: number) : AABB;

		/** Returns the aabb of a mesh's surface's skeleton. */
		static mesh_surface_get_skeleton_aabb(mesh: RID, surface: number) : any[];

		/** Removes a mesh's surface. */
		static mesh_remove_surface(mesh: RID, index: number) : void;

		/** Returns a mesh's number of surfaces. */
		static mesh_get_surface_count(mesh: RID) : number;

		/** Sets a mesh's custom aabb. */
		static mesh_set_custom_aabb(mesh: RID, aabb: AABB) : void;

		/** Returns a mesh's custom aabb. */
		static mesh_get_custom_aabb(mesh: RID) : AABB;

		/** Removes all surfaces from a mesh. */
		static mesh_clear(mesh: RID) : void;

		/** Creates a new multimesh on the VisualServer and returns an `RID` handle. This RID will be used in all `multimesh_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this multimesh to an instance using `instance_set_base` using the returned RID. */
		static multimesh_create() : RID;

		/** Allocates space for the multimesh data. Format parameters determine how the data will be stored by OpenGL. See `MultimeshTransformFormat`, `MultimeshColorFormat`, and `MultimeshCustomDataFormat` for usage. Equivalent to `MultiMesh.instance_count`. */
		//@ts-ignore
		static multimesh_allocate(multimesh: RID, instances: number, transform_format: VisualServer.MultimeshTransformFormat, color_format: VisualServer.MultimeshColorFormat, custom_data_format: VisualServer.MultimeshCustomDataFormat = 0) : void;

		/** Returns the number of instances allocated for this multimesh. */
		static multimesh_get_instance_count(multimesh: RID) : number;

		/** Sets the mesh to be drawn by the multimesh. Equivalent to `MultiMesh.mesh`. */
		static multimesh_set_mesh(multimesh: RID, mesh: RID) : void;

		/** Sets the `Transform` for this instance. Equivalent to `MultiMesh.set_instance_transform`. */
		static multimesh_instance_set_transform(multimesh: RID, index: number, transform: Transform) : void;

		/** Sets the `Transform2D` for this instance. For use when multimesh is used in 2D. Equivalent to `MultiMesh.set_instance_transform_2d`. */
		static multimesh_instance_set_transform_2d(multimesh: RID, index: number, transform: Transform2D) : void;

		/** Sets the color by which this instance will be modulated. Equivalent to `MultiMesh.set_instance_color`. */
		static multimesh_instance_set_color(multimesh: RID, index: number, color: Color) : void;

		/** Sets the custom data for this instance. Custom data is passed as a `Color`, but is interpreted as a `vec4` in the shader. Equivalent to `MultiMesh.set_instance_custom_data`. */
		static multimesh_instance_set_custom_data(multimesh: RID, index: number, custom_data: Color) : void;

		/** Returns the RID of the mesh that will be used in drawing this multimesh. */
		static multimesh_get_mesh(multimesh: RID) : RID;

		/** Calculates and returns the axis-aligned bounding box that encloses all instances within the multimesh. */
		static multimesh_get_aabb(multimesh: RID) : AABB;

		/** Returns the `Transform` of the specified instance. */
		static multimesh_instance_get_transform(multimesh: RID, index: number) : Transform;

		/** Returns the `Transform2D` of the specified instance. For use when the multimesh is set to use 2D transforms. */
		static multimesh_instance_get_transform_2d(multimesh: RID, index: number) : Transform2D;

		/** Returns the color by which the specified instance will be modulated. */
		static multimesh_instance_get_color(multimesh: RID, index: number) : Color;

		/** Returns the custom data associated with the specified instance. */
		static multimesh_instance_get_custom_data(multimesh: RID, index: number) : Color;

		/** Sets the number of instances visible at a given time. If -1, all instances that have been allocated are drawn. Equivalent to `MultiMesh.visible_instance_count`. */
		static multimesh_set_visible_instances(multimesh: RID, visible: number) : void;

		/** Returns the number of visible instances for this multimesh. */
		static multimesh_get_visible_instances(multimesh: RID) : number;

		/** Sets all data related to the instances in one go. This is especially useful when loading the data from disk or preparing the data from GDNative.

		 

		 All data is packed in one large float array. An array may look like this: Transform for instance 1, color data for instance 1, custom data for instance 1, transform for instance 2, color data for instance 2, etc.

		 

		 `Transform` is stored as 12 floats, `Transform2D` is stored as 8 floats, `COLOR_8BIT` / `CUSTOM_DATA_8BIT` is stored as 1 float (4 bytes as is) and `COLOR_FLOAT` / `CUSTOM_DATA_FLOAT` is stored as 4 floats. */
		static multimesh_set_as_bulk_array(multimesh: RID, array: PoolRealArray) : void;

		/** Creates an immediate geometry and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `immediate_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this immediate geometry to an instance using `instance_set_base` using the returned RID. */
		static immediate_create() : RID;

		/** Sets up `ImmediateGeometry` internals to prepare for drawing. Equivalent to `ImmediateGeometry.begin`. */
		static immediate_begin(immediate: RID, primitive: VisualServer.PrimitiveType, texture: RID) : void;

		/** Adds the next vertex using the information provided in advance. Equivalent to `ImmediateGeometry.add_vertex`. */
		static immediate_vertex(immediate: RID, vertex: Vector3) : void;

		/** Adds the next vertex using the information provided in advance. This is a helper class that calls `immediate_vertex` under the hood. Equivalent to `ImmediateGeometry.add_vertex`. */
		static immediate_vertex_2d(immediate: RID, vertex: Vector2) : void;

		/** Sets the normal to be used with next vertex. Equivalent to `ImmediateGeometry.set_normal`. */
		static immediate_normal(immediate: RID, normal: Vector3) : void;

		/** Sets the tangent to be used with next vertex. Equivalent to `ImmediateGeometry.set_tangent`. */
		static immediate_tangent(immediate: RID, tangent: Plane) : void;

		/** Sets the color to be used with next vertex. Equivalent to `ImmediateGeometry.set_color`. */
		static immediate_color(immediate: RID, color: Color) : void;

		/** Sets the UV to be used with next vertex. Equivalent to `ImmediateGeometry.set_uv`. */
		static immediate_uv(immediate: RID, tex_uv: Vector2) : void;

		/** Sets the UV2 to be used with next vertex. Equivalent to `ImmediateGeometry.set_uv2`. */
		static immediate_uv2(immediate: RID, tex_uv: Vector2) : void;

		/** Ends drawing the `ImmediateGeometry` and displays it. Equivalent to `ImmediateGeometry.end`. */
		static immediate_end(immediate: RID) : void;

		/** Clears everything that was set up between `immediate_begin` and `immediate_end`. Equivalent to `ImmediateGeometry.clear`. */
		static immediate_clear(immediate: RID) : void;

		/** Sets the material to be used to draw the `ImmediateGeometry`. */
		static immediate_set_material(immediate: RID, material: RID) : void;

		/** Returns the material assigned to the `ImmediateGeometry`. */
		static immediate_get_material(immediate: RID) : RID;

		/** Creates a skeleton and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `skeleton_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static skeleton_create() : RID;

		/** Allocates the GPU buffers for this skeleton. */
		//@ts-ignore
		static skeleton_allocate(skeleton: RID, bones: number, is_2d_skeleton: boolean = false) : void;

		/** Returns the number of bones allocated for this skeleton. */
		static skeleton_get_bone_count(skeleton: RID) : number;

		/** Sets the `Transform` for a specific bone of this skeleton. */
		static skeleton_bone_set_transform(skeleton: RID, bone: number, transform: Transform) : void;

		/** Returns the `Transform` set for a specific bone of this skeleton. */
		static skeleton_bone_get_transform(skeleton: RID, bone: number) : Transform;

		/** Sets the `Transform2D` for a specific bone of this skeleton. */
		static skeleton_bone_set_transform_2d(skeleton: RID, bone: number, transform: Transform2D) : void;

		/** Returns the `Transform2D` set for a specific bone of this skeleton. */
		static skeleton_bone_get_transform_2d(skeleton: RID, bone: number) : Transform2D;

		/** Creates a directional light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID can be used in most `light_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this directional light to an instance using `instance_set_base` using the returned RID. */
		static directional_light_create() : RID;

		/** Creates a new omni light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID can be used in most `light_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this omni light to an instance using `instance_set_base` using the returned RID. */
		static omni_light_create() : RID;

		/** Creates a spot light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID can be used in most `light_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this spot light to an instance using `instance_set_base` using the returned RID. */
		static spot_light_create() : RID;

		/** Sets the color of the light. Equivalent to `Light.light_color`. */
		static light_set_color(light: RID, color: Color) : void;

		/** Sets the specified light parameter. See `LightParam` for options. Equivalent to `Light.set_param`. */
		static light_set_param(light: RID, param: VisualServer.LightParam, value: number) : void;

		/** If `true`, light will cast shadows. Equivalent to `Light.shadow_enabled`. */
		static light_set_shadow(light: RID, enabled: boolean) : void;

		/** Sets the color of the shadow cast by the light. Equivalent to `Light.shadow_color`. */
		static light_set_shadow_color(light: RID, color: Color) : void;

		/** Not implemented in Godot 3.x. */
		static light_set_projector(light: RID, texture: RID) : void;

		/** If `true`, light will subtract light instead of adding light. Equivalent to `Light.light_negative`. */
		static light_set_negative(light: RID, enable: boolean) : void;

		/** Sets the cull mask for this Light. Lights only affect objects in the selected layers. Equivalent to `Light.light_cull_mask`. */
		static light_set_cull_mask(light: RID, mask: number) : void;

		/** If `true`, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double sided shadows with `instance_geometry_set_cast_shadows_setting`. Equivalent to `Light.shadow_reverse_cull_face`. */
		static light_set_reverse_cull_face_mode(light: RID, enabled: boolean) : void;

		/** Sets whether GI probes capture light information from this light. */
		static light_set_use_gi(light: RID, enabled: boolean) : void;

		/** Sets whether to use a dual paraboloid or a cubemap for the shadow map. Dual paraboloid is faster but may suffer from artifacts. Equivalent to `OmniLight.omni_shadow_mode`. */
		static light_omni_set_shadow_mode(light: RID, mode: VisualServer.LightOmniShadowMode) : void;

		/** Sets whether to use vertical or horizontal detail for this omni light. This can be used to alleviate artifacts in the shadow map. Equivalent to `OmniLight.omni_shadow_detail`. */
		static light_omni_set_shadow_detail(light: RID, detail: VisualServer.LightOmniShadowDetail) : void;

		/** Sets the shadow mode for this directional light. Equivalent to `DirectionalLight.directional_shadow_mode`. See `LightDirectionalShadowMode` for options. */
		static light_directional_set_shadow_mode(light: RID, mode: VisualServer.LightDirectionalShadowMode) : void;

		/** If `true`, this directional light will blend between shadow map splits resulting in a smoother transition between them. Equivalent to `DirectionalLight.directional_shadow_blend_splits`. */
		static light_directional_set_blend_splits(light: RID, enable: boolean) : void;

		/** Sets the shadow depth range mode for this directional light. Equivalent to `DirectionalLight.directional_shadow_depth_range`. See `LightDirectionalShadowDepthRangeMode` for options. */
		static light_directional_set_shadow_depth_range_mode(light: RID, range_mode: VisualServer.LightDirectionalShadowDepthRangeMode) : void;

		/** Creates a reflection probe and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `reflection_probe_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this reflection probe to an instance using `instance_set_base` using the returned RID. */
		static reflection_probe_create() : RID;

		/** Sets how often the reflection probe updates. Can either be once or every frame. See `ReflectionProbeUpdateMode` for options. */
		static reflection_probe_set_update_mode(probe: RID, mode: VisualServer.ReflectionProbeUpdateMode) : void;

		/** Sets the intensity of the reflection probe. Intensity modulates the strength of the reflection. Equivalent to `ReflectionProbe.intensity`. */
		static reflection_probe_set_intensity(probe: RID, intensity: number) : void;

		/** Sets the ambient light color for this reflection probe when set to interior mode. Equivalent to `ReflectionProbe.interior_ambient_color`. */
		static reflection_probe_set_interior_ambient(probe: RID, color: Color) : void;

		/** Sets the energy multiplier for this reflection probes ambient light contribution when set to interior mode. Equivalent to `ReflectionProbe.interior_ambient_energy`. */
		static reflection_probe_set_interior_ambient_energy(probe: RID, energy: number) : void;

		/** Sets the contribution value for how much the reflection affects the ambient light for this reflection probe when set to interior mode. Useful so that ambient light matches the color of the room. Equivalent to `ReflectionProbe.interior_ambient_contrib`. */
		static reflection_probe_set_interior_ambient_probe_contribution(probe: RID, contrib: number) : void;

		/** Sets the max distance away from the probe an object can be before it is culled. Equivalent to `ReflectionProbe.max_distance`. */
		static reflection_probe_set_max_distance(probe: RID, distance: number) : void;

		/** Sets the size of the area that the reflection probe will capture. Equivalent to `ReflectionProbe.extents`. */
		static reflection_probe_set_extents(probe: RID, extents: Vector3) : void;

		/** Sets the origin offset to be used when this reflection probe is in box project mode. Equivalent to `ReflectionProbe.origin_offset`. */
		static reflection_probe_set_origin_offset(probe: RID, offset: Vector3) : void;

		/** If `true`, reflections will ignore sky contribution. Equivalent to `ReflectionProbe.interior_enable`. */
		static reflection_probe_set_as_interior(probe: RID, enable: boolean) : void;

		/** If `true`, uses box projection. This can make reflections look more correct in certain situations. Equivalent to `ReflectionProbe.box_projection`. */
		static reflection_probe_set_enable_box_projection(probe: RID, enable: boolean) : void;

		/** If `true`, computes shadows in the reflection probe. This makes the reflection much slower to compute. Equivalent to `ReflectionProbe.enable_shadows`. */
		static reflection_probe_set_enable_shadows(probe: RID, enable: boolean) : void;

		/** Sets the render cull mask for this reflection probe. Only instances with a matching cull mask will be rendered by this probe. Equivalent to `ReflectionProbe.cull_mask`. */
		static reflection_probe_set_cull_mask(probe: RID, layers: number) : void;

		/** Creates a GI probe and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `gi_probe_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this GI probe to an instance using `instance_set_base` using the returned RID. */
		static gi_probe_create() : RID;

		/** Sets the axis-aligned bounding box that covers the extent of the GI probe. */
		static gi_probe_set_bounds(probe: RID, bounds: AABB) : void;

		/** Returns the axis-aligned bounding box that covers the full extent of the GI probe. */
		static gi_probe_get_bounds(probe: RID) : AABB;

		/** Sets the size of individual cells within the GI probe. */
		static gi_probe_set_cell_size(probe: RID, range: number) : void;

		/** Returns the cell size set by `gi_probe_set_cell_size`. */
		static gi_probe_get_cell_size(probe: RID) : number;

		/** Sets the to cell `Transform` for this GI probe. */
		static gi_probe_set_to_cell_xform(probe: RID, xform: Transform) : void;

		/** Returns the Transform set by `gi_probe_set_to_cell_xform`. */
		static gi_probe_get_to_cell_xform(probe: RID) : Transform;

		/** Sets the data to be used in the GI probe for lighting calculations. Normally this is created and called internally within the `GIProbe` node. You should not try to set this yourself. */
		static gi_probe_set_dynamic_data(probe: RID, data: PoolIntArray) : void;

		/** Returns the data used by the GI probe. */
		static gi_probe_get_dynamic_data(probe: RID) : PoolIntArray;

		/** Sets the dynamic range of the GI probe. Dynamic range sets the limit for how bright lights can be. A smaller range captures greater detail but limits how bright lights can be. Equivalent to `GIProbe.dynamic_range`. */
		static gi_probe_set_dynamic_range(probe: RID, range: number) : void;

		/** Returns the dynamic range set for this GI probe. Equivalent to `GIProbe.dynamic_range`. */
		static gi_probe_get_dynamic_range(probe: RID) : number;

		/** Sets the energy multiplier for this GI probe. A higher energy makes the indirect light from the GI probe brighter. Equivalent to `GIProbe.energy`. */
		static gi_probe_set_energy(probe: RID, energy: number) : void;

		/** Returns the energy multiplier for this GI probe. Equivalent to `GIProbe.energy`. */
		static gi_probe_get_energy(probe: RID) : number;

		/** Sets the bias value to avoid self-occlusion. Equivalent to `GIProbe.bias`. */
		static gi_probe_set_bias(probe: RID, bias: number) : void;

		/** Returns the bias value for the GI probe. Bias is used to avoid self occlusion. Equivalent to `GIProbeData.bias`. */
		static gi_probe_get_bias(probe: RID) : number;

		/** Sets the normal bias for this GI probe. Normal bias behaves similar to the other form of bias and may help reduce self-occlusion. Equivalent to `GIProbe.normal_bias`. */
		static gi_probe_set_normal_bias(probe: RID, bias: number) : void;

		/** Returns the normal bias for this GI probe. Equivalent to `GIProbe.normal_bias`. */
		static gi_probe_get_normal_bias(probe: RID) : number;

		/** Sets the propagation of light within this GI probe. Equivalent to `GIProbe.propagation`. */
		static gi_probe_set_propagation(probe: RID, propagation: number) : void;

		/** Returns the propagation value for this GI probe. Equivalent to `GIProbe.propagation`. */
		static gi_probe_get_propagation(probe: RID) : number;

		/** Sets the interior value of this GI probe. A GI probe set to interior does not include the sky when calculating lighting. Equivalent to `GIProbe.interior`. */
		static gi_probe_set_interior(probe: RID, enable: boolean) : void;

		/** Returns `true` if the GI probe is set to interior, meaning it does not account for sky light. Equivalent to `GIProbe.interior`. */
		static gi_probe_is_interior(probe: RID) : boolean;

		/** Sets the compression setting for the GI probe data. Compressed data will take up less space but may look worse. Equivalent to `GIProbe.compress`. */
		static gi_probe_set_compress(probe: RID, enable: boolean) : void;

		/** Returns `true` if the GI probe data associated with this GI probe is compressed. Equivalent to `GIProbe.compress`. */
		static gi_probe_is_compressed(probe: RID) : boolean;

		/** Creates a lightmap capture and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `lightmap_capture_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach this lightmap capture to an instance using `instance_set_base` using the returned RID. */
		static lightmap_capture_create() : RID;

		/** Sets the size of the area covered by the lightmap capture. Equivalent to `BakedLightmapData.bounds`. */
		static lightmap_capture_set_bounds(capture: RID, bounds: AABB) : void;

		/** Returns the size of the lightmap capture area. */
		static lightmap_capture_get_bounds(capture: RID) : AABB;

		/** Sets the octree to be used by this lightmap capture. This function is normally used by the `BakedLightmap` node. Equivalent to `BakedLightmapData.octree`. */
		static lightmap_capture_set_octree(capture: RID, octree: PoolByteArray) : void;

		/** Sets the octree cell transform for this lightmap capture's octree. Equivalent to `BakedLightmapData.cell_space_transform`. */
		static lightmap_capture_set_octree_cell_transform(capture: RID, xform: Transform) : void;

		/** Returns the cell transform for this lightmap capture's octree. */
		static lightmap_capture_get_octree_cell_transform(capture: RID) : Transform;

		/** Sets the subdivision level of this lightmap capture's octree. Equivalent to `BakedLightmapData.cell_subdiv`. */
		static lightmap_capture_set_octree_cell_subdiv(capture: RID, subdiv: number) : void;

		/** Returns the cell subdivision amount used by this lightmap capture's octree. */
		static lightmap_capture_get_octree_cell_subdiv(capture: RID) : number;

		/** Returns the octree used by the lightmap capture. */
		static lightmap_capture_get_octree(capture: RID) : PoolByteArray;

		/** Sets the energy multiplier for this lightmap capture. Equivalent to `BakedLightmapData.energy`. */
		static lightmap_capture_set_energy(capture: RID, energy: number) : void;

		/** Returns the energy multiplier used by the lightmap capture. */
		static lightmap_capture_get_energy(capture: RID) : number;

		/** Creates a particle system and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `particles_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 To place in a scene, attach these particles to an instance using `instance_set_base` using the returned RID. */
		static particles_create() : RID;

		/** If `true`, particles will emit over time. Setting to false does not reset the particles, but only stops their emission. Equivalent to `Particles.emitting`. */
		static particles_set_emitting(particles: RID, emitting: boolean) : void;

		/** Returns `true` if particles are currently set to emitting. */
		static particles_get_emitting(particles: RID) : boolean;

		/** Sets the number of particles to be drawn and allocates the memory for them. Equivalent to `Particles.amount`. */
		static particles_set_amount(particles: RID, amount: number) : void;

		/** Sets the lifetime of each particle in the system. Equivalent to `Particles.lifetime`. */
		static particles_set_lifetime(particles: RID, lifetime: number) : void;

		/** If `true`, particles will emit once and then stop. Equivalent to `Particles.one_shot`. */
		static particles_set_one_shot(particles: RID, one_shot: boolean) : void;

		/** Sets the preprocess time for the particles animation. This lets you delay starting an animation until after the particles have begun emitting. Equivalent to `Particles.preprocess`. */
		static particles_set_pre_process_time(particles: RID, time: number) : void;

		/** Sets the explosiveness ratio. Equivalent to `Particles.explosiveness`. */
		static particles_set_explosiveness_ratio(particles: RID, ratio: number) : void;

		/** Sets the emission randomness ratio. This randomizes the emission of particles within their phase. Equivalent to `Particles.randomness`. */
		static particles_set_randomness_ratio(particles: RID, ratio: number) : void;

		/** Sets a custom axis-aligned bounding box for the particle system. Equivalent to `Particles.visibility_aabb`. */
		static particles_set_custom_aabb(particles: RID, aabb: AABB) : void;

		/** Sets the speed scale of the particle system. Equivalent to `Particles.speed_scale`. */
		static particles_set_speed_scale(particles: RID, scale: number) : void;

		/** If `true`, particles use local coordinates. If `false` they use global coordinates. Equivalent to `Particles.local_coords`. */
		static particles_set_use_local_coordinates(particles: RID, enable: boolean) : void;

		/** Sets the material for processing the particles. Note: this is not the material used to draw the materials. Equivalent to `Particles.process_material`. */
		static particles_set_process_material(particles: RID, material: RID) : void;

		/** Sets the frame rate that the particle system rendering will be fixed to. Equivalent to `Particles.fixed_fps`. */
		static particles_set_fixed_fps(particles: RID, fps: number) : void;

		/** If `true`, uses fractional delta which smooths the movement of the particles. Equivalent to `Particles.fract_delta`. */
		static particles_set_fractional_delta(particles: RID, enable: boolean) : void;

		/** Returns `true` if particles are not emitting and particles are set to inactive. */
		static particles_is_inactive(particles: RID) : boolean;

		/** Add particle system to list of particle systems that need to be updated. Update will take place on the next frame, or on the next call to `instances_cull_aabb`, `instances_cull_convex`, or `instances_cull_ray`. */
		static particles_request_process(particles: RID) : void;

		/** Reset the particles on the next update. Equivalent to `Particles.restart`. */
		static particles_restart(particles: RID) : void;

		/** Sets the draw order of the particles to one of the named enums from `ParticlesDrawOrder`. See `ParticlesDrawOrder` for options. Equivalent to `Particles.draw_order`. */
		static particles_set_draw_order(particles: RID, order: VisualServer.ParticlesDrawOrder) : void;

		/** Sets the number of draw passes to use. Equivalent to `Particles.draw_passes`. */
		static particles_set_draw_passes(particles: RID, count: number) : void;

		/** Sets the mesh to be used for the specified draw pass. Equivalent to `Particles.draw_pass_1`, `Particles.draw_pass_2`, `Particles.draw_pass_3`, and `Particles.draw_pass_4`. */
		static particles_set_draw_pass_mesh(particles: RID, pass: number, mesh: RID) : void;

		/** Calculates and returns the axis-aligned bounding box that contains all the particles. Equivalent to `Particles.capture_aabb`. */
		static particles_get_current_aabb(particles: RID) : AABB;

		/** Sets the `Transform` that will be used by the particles when they first emit. */
		static particles_set_emission_transform(particles: RID, transform: Transform) : void;

		/** Creates a camera and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `camera_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static camera_create() : RID;

		/** Sets camera to use perspective projection. Objects on the screen becomes smaller when they are far away. */
		static camera_set_perspective(camera: RID, fovy_degrees: number, z_near: number, z_far: number) : void;

		/** Sets camera to use orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are. */
		static camera_set_orthogonal(camera: RID, size: number, z_near: number, z_far: number) : void;

		/** Sets camera to use frustum projection. This mode allows adjusting the `offset` argument to create "tilted frustum" effects. */
		static camera_set_frustum(camera: RID, size: number, offset: Vector2, z_near: number, z_far: number) : void;

		/** Sets `Transform` of camera. */
		static camera_set_transform(camera: RID, transform: Transform) : void;

		/** Sets the cull mask associated with this camera. The cull mask describes which 3D layers are rendered by this camera. Equivalent to `Camera.cull_mask`. */
		static camera_set_cull_mask(camera: RID, layers: number) : void;

		/** Sets the environment used by this camera. Equivalent to `Camera.environment`. */
		static camera_set_environment(camera: RID, env: RID) : void;

		/** If `true`, preserves the horizontal aspect ratio which is equivalent to `Camera.KEEP_WIDTH`. If `false`, preserves the vertical aspect ratio which is equivalent to `Camera.KEEP_HEIGHT`. */
		static camera_set_use_vertical_aspect(camera: RID, enable: boolean) : void;

		/** Creates an empty viewport and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `viewport_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static viewport_create() : RID;

		/** If `true`, the viewport uses augmented or virtual reality technologies. See `ARVRInterface`. */
		static viewport_set_use_arvr(viewport: RID, use_arvr: boolean) : void;

		/** Sets the viewport's width and height. */
		static viewport_set_size(viewport: RID, width: number, height: number) : void;

		/** If `true`, sets the viewport active, else sets it inactive. */
		static viewport_set_active(viewport: RID, active: boolean) : void;

		/** Sets the viewport's parent to another viewport. */
		static viewport_set_parent_viewport(viewport: RID, parent_viewport: RID) : void;

		/** Copies viewport to a region of the screen specified by `rect`. If `Viewport.render_direct_to_screen` is `true`, then viewport does not use a framebuffer and the contents of the viewport are rendered directly to screen. However, note that the root viewport is drawn last, therefore it will draw over the screen. Accordingly, you must set the root viewport to an area that does not cover the area that you have attached this viewport to.

		 For example, you can set the root viewport to not render at all with the following code:

		 ```gdscript
		 func _ready():
		     get_viewport().set_attach_to_screen_rect(Rect2())
		     $Viewport.set_attach_to_screen_rect(Rect2(0, 0, 600, 600))
		 ```

		 Using this can result in significant optimization, especially on lower-end devices. However, it comes at the cost of having to manage your viewports manually. For a further optimization see, `viewport_set_render_direct_to_screen`. */
		//@ts-ignore
		static viewport_attach_to_screen(viewport: RID, rect: Rect2 = Rect2( 0, 0, 0, 0 ), screen: number = 0) : void;

		/** If `true`, render the contents of the viewport directly to screen. This allows a low-level optimization where you can skip drawing a viewport to the root viewport. While this optimization can result in a significant increase in speed (especially on older devices), it comes at a cost of usability. When this is enabled, you cannot read from the viewport or from the `SCREEN_TEXTURE`. You also lose the benefit of certain window settings, such as the various stretch modes. Another consequence to be aware of is that in 2D the rendering happens in window coordinates, so if you have a viewport that is double the size of the window, and you set this, then only the portion that fits within the window will be drawn, no automatic scaling is possible, even if your game scene is significantly larger than the window size. */
		static viewport_set_render_direct_to_screen(viewport: RID, enabled: boolean) : void;

		/** Detaches the viewport from the screen. */
		static viewport_detach(viewport: RID) : void;

		/** Sets when the viewport should be updated. See `ViewportUpdateMode` constants for options. */
		static viewport_set_update_mode(viewport: RID, update_mode: VisualServer.ViewportUpdateMode) : void;

		/** If `true`, the viewport's rendering is flipped vertically. */
		static viewport_set_vflip(viewport: RID, enabled: boolean) : void;

		/** Sets the clear mode of a viewport. See `ViewportClearMode` for options. */
		static viewport_set_clear_mode(viewport: RID, clear_mode: VisualServer.ViewportClearMode) : void;

		/** Returns the viewport's last rendered frame. */
		static viewport_get_texture(viewport: RID) : RID;

		/** Currently unimplemented in Godot 3.x. */
		static viewport_set_hide_scenario(viewport: RID, hidden: boolean) : void;

		/** If `true`, the viewport's canvas is not rendered. */
		static viewport_set_hide_canvas(viewport: RID, hidden: boolean) : void;

		/** If `true`, rendering of a viewport's environment is disabled. */
		static viewport_set_disable_environment(viewport: RID, disabled: boolean) : void;

		/** If `true`, a viewport's 3D rendering is disabled. */
		static viewport_set_disable_3d(viewport: RID, disabled: boolean) : void;

		/** Sets a viewport's camera. */
		static viewport_attach_camera(viewport: RID, camera: RID) : void;

		/** Sets a viewport's scenario.

		 The scenario contains information about the `ScenarioDebugMode`, environment information, reflection atlas etc. */
		static viewport_set_scenario(viewport: RID, scenario: RID) : void;

		/** Sets a viewport's canvas. */
		static viewport_attach_canvas(viewport: RID, canvas: RID) : void;

		/** Detaches a viewport from a canvas and vice versa. */
		static viewport_remove_canvas(viewport: RID, canvas: RID) : void;

		/** Sets the transformation of a viewport's canvas. */
		static viewport_set_canvas_transform(viewport: RID, canvas: RID, offset: Transform2D) : void;

		/** If `true`, the viewport renders its background as transparent. */
		static viewport_set_transparent_background(viewport: RID, enabled: boolean) : void;

		/** Sets the viewport's global transformation matrix. */
		static viewport_set_global_canvas_transform(viewport: RID, transform: Transform2D) : void;

		/** Sets the stacking order for a viewport's canvas.

		 `layer` is the actual canvas layer, while `sublayer` specifies the stacking order of the canvas among those in the same layer. */
		static viewport_set_canvas_stacking(viewport: RID, canvas: RID, layer: number, sublayer: number) : void;

		/** Sets the size of the shadow atlas's images (used for omni and spot lights). The value will be rounded up to the nearest power of 2. */
		static viewport_set_shadow_atlas_size(viewport: RID, size: number) : void;

		/** Sets the shadow atlas quadrant's subdivision. */
		static viewport_set_shadow_atlas_quadrant_subdivision(viewport: RID, quadrant: number, subdivision: number) : void;

		/** Sets the anti-aliasing mode. See `ViewportMSAA` for options. */
		static viewport_set_msaa(viewport: RID, msaa: VisualServer.ViewportMSAA) : void;

		/** If `true`, the viewport renders to hdr. */
		static viewport_set_hdr(viewport: RID, enabled: boolean) : void;

		/** Sets the viewport's 2D/3D mode. See `ViewportUsage` constants for options. */
		static viewport_set_usage(viewport: RID, usage: VisualServer.ViewportUsage) : void;

		/** Returns a viewport's render information. For options, see the `ViewportRenderInfo` constants. */
		static viewport_get_render_info(viewport: RID, info: VisualServer.ViewportRenderInfo) : number;

		/** Sets the debug draw mode of a viewport. See `ViewportDebugDraw` for options. */
		static viewport_set_debug_draw(viewport: RID, draw: VisualServer.ViewportDebugDraw) : void;

		/** Creates an environment and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `environment_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static environment_create() : RID;

		/** Sets the *BGMode* of the environment. Equivalent to `Environment.background_mode`. */
		static environment_set_background(env: RID, bg: VisualServer.EnvironmentBG) : void;

		/** Sets the `Sky` to be used as the environment's background when using *BGMode* sky. Equivalent to `Environment.background_sky`. */
		static environment_set_sky(env: RID, sky: RID) : void;

		/** Sets a custom field of view for the background `Sky`. Equivalent to `Environment.background_sky_custom_fov`. */
		static environment_set_sky_custom_fov(env: RID, scale: number) : void;

		/** Sets the rotation of the background `Sky` expressed as a `Basis`. Equivalent to `Environment.background_sky_orientation`. */
		static environment_set_sky_orientation(env: RID, orientation: Basis) : void;

		/** Color displayed for clear areas of the scene (if using Custom color or Color+Sky background modes). */
		static environment_set_bg_color(env: RID, color: Color) : void;

		/** Sets the intensity of the background color. */
		static environment_set_bg_energy(env: RID, energy: number) : void;

		/** Sets the maximum layer to use if using Canvas background mode. */
		static environment_set_canvas_max_layer(env: RID, max_layer: number) : void;

		/** Sets the ambient light parameters. See `Environment` for more details. */
		//@ts-ignore
		static environment_set_ambient_light(env: RID, color: Color, energy: number = 1.0, sky_contibution: number = 0.0) : void;

		/** Sets the values to be used with the "DoF Near Blur" post-process effect. See `Environment` for more details. */
		static environment_set_dof_blur_near(env: RID, enable: boolean, distance: number, transition: number, far_amount: number, quality: VisualServer.EnvironmentDOFBlurQuality) : void;

		/** Sets the values to be used with the "DoF Far Blur" post-process effect. See `Environment` for more details. */
		static environment_set_dof_blur_far(env: RID, enable: boolean, distance: number, transition: number, far_amount: number, quality: VisualServer.EnvironmentDOFBlurQuality) : void;

		/** Sets the variables to be used with the "glow" post-process effect. See `Environment` for more details. */
		static environment_set_glow(env: RID, enable: boolean, level_flags: number, intensity: number, strength: number, bloom_threshold: number, blend_mode: VisualServer.EnvironmentGlowBlendMode, hdr_bleed_threshold: number, hdr_bleed_scale: number, hdr_luminance_cap: number, bicubic_upscale: boolean) : void;

		/** Sets the variables to be used with the "tonemap" post-process effect. See `Environment` for more details. */
		static environment_set_tonemap(env: RID, tone_mapper: VisualServer.EnvironmentToneMapper, exposure: number, white: number, auto_exposure: boolean, min_luminance: number, max_luminance: number, auto_exp_speed: number, auto_exp_grey: number) : void;

		/** Sets the values to be used with the "Adjustment" post-process effect. See `Environment` for more details. */
		static environment_set_adjustment(env: RID, enable: boolean, brightness: number, contrast: number, saturation: number, ramp: RID) : void;

		/** Sets the variables to be used with the "screen space reflections" post-process effect. See `Environment` for more details. */
		static environment_set_ssr(env: RID, enable: boolean, max_steps: number, fade_in: number, fade_out: number, depth_tolerance: number, roughness: boolean) : void;

		/** Sets the variables to be used with the "Screen Space Ambient Occlusion (SSAO)" post-process effect. See `Environment` for more details. */
		static environment_set_ssao(env: RID, enable: boolean, radius: number, intensity: number, radius2: number, intensity2: number, bias: number, light_affect: number, ao_channel_affect: number, color: Color, quality: VisualServer.EnvironmentSSAOQuality, blur: VisualServer.EnvironmentSSAOBlur, bilateral_sharpness: number) : void;

		/** Sets the variables to be used with the scene fog. See `Environment` for more details. */
		static environment_set_fog(env: RID, enable: boolean, color: Color, sun_color: Color, sun_amount: number) : void;

		/** Sets the variables to be used with the fog depth effect. See `Environment` for more details. */
		static environment_set_fog_depth(env: RID, enable: boolean, depth_begin: number, depth_end: number, depth_curve: number, transmit: boolean, transmit_curve: number) : void;

		/** Sets the variables to be used with the fog height effect. See `Environment` for more details. */
		static environment_set_fog_height(env: RID, enable: boolean, min_height: number, max_height: number, height_curve: number) : void;

		/** Creates a scenario and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `scenario_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 The scenario is the 3D world that all the visual instances exist in. */
		static scenario_create() : RID;

		/** Sets the `ScenarioDebugMode` for this scenario. See `ScenarioDebugMode` for options. */
		static scenario_set_debug(scenario: RID, debug_mode: VisualServer.ScenarioDebugMode) : void;

		/** Sets the environment that will be used with this scenario. */
		static scenario_set_environment(scenario: RID, environment: RID) : void;

		/** Sets the size of the reflection atlas shared by all reflection probes in this scenario. */
		static scenario_set_reflection_atlas_size(scenario: RID, size: number, subdiv: number) : void;

		/** Sets the fallback environment to be used by this scenario. The fallback environment is used if no environment is set. Internally, this is used by the editor to provide a default environment. */
		static scenario_set_fallback_environment(scenario: RID, environment: RID) : void;

		/** Creates a visual instance, adds it to the VisualServer, and sets both base and scenario. It can be accessed with the RID that is returned. This RID will be used in all `instance_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static instance_create2(base: RID, scenario: RID) : RID;

		/** Creates a visual instance and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `instance_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method.

		 An instance is a way of placing a 3D object in the scenario. Objects like particles, meshes, and reflection probes need to be associated with an instance to be visible in the scenario using `instance_set_base`. */
		static instance_create() : RID;

		/** Sets the base of the instance. A base can be any of the 3D objects that are created in the VisualServer that can be displayed. For example, any of the light types, mesh, multimesh, immediate geometry, particle system, reflection probe, lightmap capture, and the GI probe are all types that can be set as the base of an instance in order to be displayed in the scenario. */
		static instance_set_base(instance: RID, base: RID) : void;

		/** Sets the scenario that the instance is in. The scenario is the 3D world that the objects will be displayed in. */
		static instance_set_scenario(instance: RID, scenario: RID) : void;

		/** Sets the render layers that this instance will be drawn to. Equivalent to `VisualInstance.layers`. */
		static instance_set_layer_mask(instance: RID, mask: number) : void;

		/** Sets the world space transform of the instance. Equivalent to `Spatial.transform`. */
		static instance_set_transform(instance: RID, transform: Transform) : void;

		/** Attaches a unique Object ID to instance. Object ID must be attached to instance for proper culling with `instances_cull_aabb`, `instances_cull_convex`, and `instances_cull_ray`. */
		static instance_attach_object_instance_id(instance: RID, id: number) : void;

		/** Sets the weight for a given blend shape associated with this instance. */
		static instance_set_blend_shape_weight(instance: RID, shape: number, weight: number) : void;

		/** Sets the material of a specific surface. Equivalent to `MeshInstance.set_surface_material`. */
		static instance_set_surface_material(instance: RID, surface: number, material: RID) : void;

		/** Sets whether an instance is drawn or not. Equivalent to `Spatial.visible`. */
		static instance_set_visible(instance: RID, visible: boolean) : void;

		/** Sets the lightmap to use with this instance. */
		static instance_set_use_lightmap(instance: RID, lightmap_instance: RID, lightmap: RID) : void;

		/** Sets a custom AABB to use when culling objects from the view frustum. Equivalent to `GeometryInstance.set_custom_aabb`. */
		static instance_set_custom_aabb(instance: RID, aabb: AABB) : void;

		/** Attaches a skeleton to an instance. Removes the previous skeleton from the instance. */
		static instance_attach_skeleton(instance: RID, skeleton: RID) : void;

		/** Function not implemented in Godot 3.x. */
		static instance_set_exterior(instance: RID, enabled: boolean) : void;

		/** Sets a margin to increase the size of the AABB when culling objects from the view frustum. This allows you avoid culling objects that fall outside the view frustum. Equivalent to `GeometryInstance.extra_cull_margin`. */
		static instance_set_extra_visibility_margin(instance: RID, margin: number) : void;

		/** Sets the flag for a given `InstanceFlags`. See `InstanceFlags` for more details. */
		static instance_geometry_set_flag(instance: RID, flag: VisualServer.InstanceFlags, enabled: boolean) : void;

		/** Sets the shadow casting setting to one of `ShadowCastingSetting`. Equivalent to `GeometryInstance.cast_shadow`. */
		static instance_geometry_set_cast_shadows_setting(instance: RID, shadow_casting_setting: VisualServer.ShadowCastingSetting) : void;

		/** Sets a material that will override the material for all surfaces on the mesh associated with this instance. Equivalent to `GeometryInstance.material_override`. */
		static instance_geometry_set_material_override(instance: RID, material: RID) : void;

		/** Not implemented in Godot 3.x. */
		static instance_geometry_set_draw_range(instance: RID, min: number, max: number, min_margin: number, max_margin: number) : void;

		/** Not implemented in Godot 3.x. */
		static instance_geometry_set_as_instance_lod(instance: RID, as_lod_of_instance: RID) : void;

		/** Returns an array of object IDs intersecting with the provided AABB. Only visual 3D nodes are considered, such as `MeshInstance` or `DirectionalLight`. Use `@GDScript.instance_from_id` to obtain the actual nodes. A scenario RID must be provided, which is available in the `World` you want to query. This forces an update for all resources queued to update.

		 **Warning:** This function is primarily intended for editor usage. For in-game use cases, prefer physics collision. */
		static instances_cull_aabb(aabb: AABB, scenario: RID) : any[];

		/** Returns an array of object IDs intersecting with the provided 3D ray. Only visual 3D nodes are considered, such as `MeshInstance` or `DirectionalLight`. Use `@GDScript.instance_from_id` to obtain the actual nodes. A scenario RID must be provided, which is available in the `World` you want to query. This forces an update for all resources queued to update.

		 **Warning:** This function is primarily intended for editor usage. For in-game use cases, prefer physics collision. */
		static instances_cull_ray(p_from: Vector3, to: Vector3, scenario: RID) : any[];

		/** Returns an array of object IDs intersecting with the provided convex shape. Only visual 3D nodes are considered, such as `MeshInstance` or `DirectionalLight`. Use `@GDScript.instance_from_id` to obtain the actual nodes. A scenario RID must be provided, which is available in the `World` you want to query. This forces an update for all resources queued to update.

		 **Warning:** This function is primarily intended for editor usage. For in-game use cases, prefer physics collision. */
		static instances_cull_convex(convex: any[], scenario: RID) : any[];

		/** Creates a canvas and returns the assigned `RID`. It can be accessed with the RID that is returned. This RID will be used in all `canvas_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static canvas_create() : RID;

		/** A copy of the canvas item will be drawn with a local offset of the mirroring `Vector2`. */
		static canvas_set_item_mirroring(canvas: RID, item: RID, mirroring: Vector2) : void;

		/** Modulates all colors in the given canvas. */
		static canvas_set_modulate(canvas: RID, color: Color) : void;

		/** Creates a new `CanvasItem` and returns its `RID`. It can be accessed with the RID that is returned. This RID will be used in all `canvas_item_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static canvas_item_create() : RID;

		/** Sets the parent for the `CanvasItem`. The parent can be another canvas item, or it can be the root canvas that is attached to the viewport. */
		static canvas_item_set_parent(item: RID, parent: RID) : void;

		/** Sets if the canvas item (including its children) is visible. */
		static canvas_item_set_visible(item: RID, visible: boolean) : void;

		/** The light mask. See `LightOccluder2D` for more information on light masks. */
		static canvas_item_set_light_mask(item: RID, mask: number) : void;

		/** Sets the `CanvasItem`'s `Transform2D`. */
		static canvas_item_set_transform(item: RID, transform: Transform2D) : void;

		/** Sets clipping for the `CanvasItem`. */
		static canvas_item_set_clip(item: RID, clip: boolean) : void;

		/** Enables the use of distance fields for GUI elements that are rendering distance field based fonts. */
		static canvas_item_set_distance_field_mode(item: RID, enabled: boolean) : void;

		/** Defines a custom drawing rectangle for the `CanvasItem`. */
		//@ts-ignore
		static canvas_item_set_custom_rect(item: RID, use_custom_rect: boolean, rect: Rect2 = Rect2( 0, 0, 0, 0 )) : void;

		/** Sets the color that modulates the `CanvasItem` and its children. */
		static canvas_item_set_modulate(item: RID, color: Color) : void;

		/** Sets the color that modulates the `CanvasItem` without children. */
		static canvas_item_set_self_modulate(item: RID, color: Color) : void;

		/** Sets `CanvasItem` to be drawn behind its parent. */
		static canvas_item_set_draw_behind_parent(item: RID, enabled: boolean) : void;

		/** Adds a line command to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_line(item: RID, p_from: Vector2, to: Vector2, color: Color, width: number = 1.0, antialiased: boolean = false) : void;

		/** Adds a polyline, which is a line from multiple points with a width, to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_polyline(item: RID, points: PoolVector2Array, colors: PoolColorArray, width: number = 1.0, antialiased: boolean = false) : void;

		/** Adds a rectangle to the `CanvasItem`'s draw commands. */
		static canvas_item_add_rect(item: RID, rect: Rect2, color: Color) : void;

		/** Adds a circle command to the `CanvasItem`'s draw commands. */
		static canvas_item_add_circle(item: RID, pos: Vector2, radius: number, color: Color) : void;

		/** Adds a textured rect to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_texture_rect(item: RID, rect: Rect2, texture: RID, tile: boolean = false, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: RID = new RID()) : void;

		/** Adds a texture rect with region setting to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_texture_rect_region(item: RID, rect: Rect2, texture: RID, src_rect: Rect2, modulate: Color = Color( 1, 1, 1, 1 ), transpose: boolean = false, normal_map: RID = new RID(), clip_uv: boolean = true) : void;

		/** Adds a nine patch image to the `CanvasItem`'s draw commands.

		 See `NinePatchRect` for more explanation. */
		//@ts-ignore
		static canvas_item_add_nine_patch(item: RID, rect: Rect2, source: Rect2, texture: RID, topleft: Vector2, bottomright: Vector2, x_axis_mode: VisualServer.NinePatchAxisMode = 0, y_axis_mode: VisualServer.NinePatchAxisMode = 0, draw_center: boolean = true, modulate: Color = Color( 1, 1, 1, 1 ), normal_map: RID = new RID()) : void;

		/** Adds a primitive to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_primitive(item: RID, points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array, texture: RID, width: number = 1.0, normal_map: RID = new RID()) : void;

		/** Adds a polygon to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_polygon(item: RID, points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array = PoolVector2Array(  ), texture: RID = new RID(), normal_map: RID = new RID(), antialiased: boolean = false) : void;

		/** Adds a triangle array to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_triangle_array(item: RID, indices: PoolIntArray, points: PoolVector2Array, colors: PoolColorArray, uvs: PoolVector2Array = PoolVector2Array(  ), bones: PoolIntArray = PoolIntArray(  ), weights: PoolRealArray = PoolRealArray(  ), texture: RID = new RID(), count: number = -1, normal_map: RID = new RID(), antialiased: boolean = false, antialiasing_use_indices: boolean = false) : void;

		/** Adds a mesh command to the `CanvasItem`'s draw commands. */
		//@ts-ignore
		static canvas_item_add_mesh(item: RID, mesh: RID, transform: Transform2D = Transform2D( 1, 0, 0, 1, 0, 0 ), modulate: Color = Color( 1, 1, 1, 1 ), texture: RID = new RID(), normal_map: RID = new RID()) : void;

		/** Adds a `MultiMesh` to the `CanvasItem`'s draw commands. Only affects its aabb at the moment. */
		static canvas_item_add_multimesh(item: RID, mesh: RID, texture: RID, normal_map: RID) : void;

		/** Adds a particle system to the `CanvasItem`'s draw commands. */
		static canvas_item_add_particles(item: RID, particles: RID, texture: RID, normal_map: RID) : void;

		/** Adds a `Transform2D` command to the `CanvasItem`'s draw commands.

		 This sets the extra_matrix uniform when executed. This affects the later commands of the canvas item. */
		static canvas_item_add_set_transform(item: RID, transform: Transform2D) : void;

		/** If ignore is `true`, the VisualServer does not perform clipping. */
		static canvas_item_add_clip_ignore(item: RID, ignore: boolean) : void;

		/** Sets if `CanvasItem`'s children should be sorted by y-position. */
		static canvas_item_set_sort_children_by_y(item: RID, enabled: boolean) : void;

		/** Sets the `CanvasItem`'s Z index, i.e. its draw order (lower indexes are drawn first). */
		static canvas_item_set_z_index(item: RID, z_index: number) : void;

		/** If this is enabled, the Z index of the parent will be added to the children's Z index. */
		static canvas_item_set_z_as_relative_to_parent(item: RID, enabled: boolean) : void;

		/** Sets the `CanvasItem` to copy a rect to the backbuffer. */
		static canvas_item_set_copy_to_backbuffer(item: RID, enabled: boolean, rect: Rect2) : void;

		/** Clears the `CanvasItem` and removes all commands in it. */
		static canvas_item_clear(item: RID) : void;

		/** Sets the index for the `CanvasItem`. */
		static canvas_item_set_draw_index(item: RID, index: number) : void;

		/** Sets a new material to the `CanvasItem`. */
		static canvas_item_set_material(item: RID, material: RID) : void;

		/** Sets if the `CanvasItem` uses its parent's material. */
		static canvas_item_set_use_parent_material(item: RID, enabled: boolean) : void;

		/** Creates a canvas light and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_light_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static canvas_light_create() : RID;

		/** Attaches the canvas light to the canvas. Removes it from its previous canvas. */
		static canvas_light_attach_to_canvas(light: RID, canvas: RID) : void;

		/** Enables or disables a canvas light. */
		static canvas_light_set_enabled(light: RID, enabled: boolean) : void;

		/** Sets the texture's scale factor of the light. Equivalent to `Light2D.texture_scale`. */
		static canvas_light_set_scale(light: RID, scale: number) : void;

		/** Sets the canvas light's `Transform2D`. */
		static canvas_light_set_transform(light: RID, transform: Transform2D) : void;

		/** Sets texture to be used by light. Equivalent to `Light2D.texture`. */
		static canvas_light_set_texture(light: RID, texture: RID) : void;

		/** Sets the offset of the light's texture. Equivalent to `Light2D.offset`. */
		static canvas_light_set_texture_offset(light: RID, offset: Vector2) : void;

		/** Sets the color for a light. */
		static canvas_light_set_color(light: RID, color: Color) : void;

		/** Sets a canvas light's height. */
		static canvas_light_set_height(light: RID, height: number) : void;

		/** Sets a canvas light's energy. */
		static canvas_light_set_energy(light: RID, energy: number) : void;

		/** Sets the Z range of objects that will be affected by this light. Equivalent to `Light2D.range_z_min` and `Light2D.range_z_max`. */
		static canvas_light_set_z_range(light: RID, min_z: number, max_z: number) : void;

		/** The layer range that gets rendered with this light. */
		static canvas_light_set_layer_range(light: RID, min_layer: number, max_layer: number) : void;

		/** The light mask. See `LightOccluder2D` for more information on light masks. */
		static canvas_light_set_item_cull_mask(light: RID, mask: number) : void;

		/** The binary mask used to determine which layers this canvas light's shadows affects. See `LightOccluder2D` for more information on light masks. */
		static canvas_light_set_item_shadow_cull_mask(light: RID, mask: number) : void;

		/** The mode of the light, see `CanvasLightMode` constants. */
		static canvas_light_set_mode(light: RID, mode: VisualServer.CanvasLightMode) : void;

		/** Enables or disables the canvas light's shadow. */
		static canvas_light_set_shadow_enabled(light: RID, enabled: boolean) : void;

		/** Sets the width of the shadow buffer, size gets scaled to the next power of two for this. */
		static canvas_light_set_shadow_buffer_size(light: RID, size: number) : void;

		/** Sets the length of the shadow's gradient. */
		static canvas_light_set_shadow_gradient_length(light: RID, length: number) : void;

		/** Sets the canvas light's shadow's filter, see `CanvasLightShadowFilter` constants. */
		static canvas_light_set_shadow_filter(light: RID, filter: VisualServer.CanvasLightShadowFilter) : void;

		/** Sets the color of the canvas light's shadow. */
		static canvas_light_set_shadow_color(light: RID, color: Color) : void;

		/** Smoothens the shadow. The lower, the smoother. */
		static canvas_light_set_shadow_smooth(light: RID, smooth: number) : void;

		/** Creates a light occluder and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_light_ocluder_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static canvas_light_occluder_create() : RID;

		/** Attaches a light occluder to the canvas. Removes it from its previous canvas. */
		static canvas_light_occluder_attach_to_canvas(occluder: RID, canvas: RID) : void;

		/** Enables or disables light occluder. */
		static canvas_light_occluder_set_enabled(occluder: RID, enabled: boolean) : void;

		/** Sets a light occluder's polygon. */
		static canvas_light_occluder_set_polygon(occluder: RID, polygon: RID) : void;

		/** Sets a light occluder's `Transform2D`. */
		static canvas_light_occluder_set_transform(occluder: RID, transform: Transform2D) : void;

		/** The light mask. See `LightOccluder2D` for more information on light masks. */
		static canvas_light_occluder_set_light_mask(occluder: RID, mask: number) : void;

		/** Creates a new light occluder polygon and adds it to the VisualServer. It can be accessed with the RID that is returned. This RID will be used in all `canvas_occluder_polygon_*` VisualServer functions.

		 Once finished with your RID, you will want to free the RID using the VisualServer's `free_rid` static method. */
		static canvas_occluder_polygon_create() : RID;

		/** Sets the shape of the occluder polygon. */
		static canvas_occluder_polygon_set_shape(occluder_polygon: RID, shape: PoolVector2Array, closed: boolean) : void;

		/** Sets the shape of the occluder polygon as lines. */
		static canvas_occluder_polygon_set_shape_as_lines(occluder_polygon: RID, shape: PoolVector2Array) : void;

		/** Sets an occluder polygons cull mode. See `CanvasOccluderPolygonCullMode` constants. */
		static canvas_occluder_polygon_set_cull_mode(occluder_polygon: RID, mode: VisualServer.CanvasOccluderPolygonCullMode) : void;

		/** Sets margin size, where black bars (or images, if `black_bars_set_images` was used) are rendered. */
		static black_bars_set_margins(left: number, top: number, right: number, bottom: number) : void;

		/** Sets images to be rendered in the window margin. */
		static black_bars_set_images(left: RID, top: RID, right: RID, bottom: RID) : void;

		/** Tries to free an object in the VisualServer. */
		static free_rid(rid: RID) : void;

		/** Schedules a callback to the corresponding named `method` on `where` after a frame has been drawn.

		 The callback method must use only 1 argument which will be called with `userdata`. */
		static request_frame_drawn_callback(where: Object, method: string, userdata: any) : void;

		/** Returns `true` if changes have been made to the VisualServer's data. `draw` is usually called if this happens. */
		static has_changed() : boolean;

		/** Initializes the visual server. This function is called internally by platform-dependent code during engine initialization. If called from a running game, it will not do anything. */
		static init() : void;

		/** Removes buffers and clears testcubes. */
		static finish() : void;

		/** Returns a certain information, see `RenderInfo` for options. */
		static get_render_info(info: VisualServer.RenderInfo) : number;

		/** Returns the name of the video adapter (e.g. "GeForce GTX 1080/PCIe/SSE2").

		 **Note:** When running a headless or server binary, this function returns an empty string. */
		static get_video_adapter_name() : string;

		/** Returns the vendor of the video adapter (e.g. "NVIDIA Corporation").

		 **Note:** When running a headless or server binary, this function returns an empty string. */
		static get_video_adapter_vendor() : string;

		/** Returns a mesh of a sphere with the given amount of horizontal and vertical subdivisions. */
		static make_sphere_mesh(latitudes: number, longitudes: number, radius: number) : RID;

		/** Returns the id of the test cube. Creates one if none exists. */
		static get_test_cube() : RID;

		/** Returns the id of the test texture. Creates one if none exists. */
		static get_test_texture() : RID;

		/** Returns the id of a white texture. Creates one if none exists. */
		static get_white_texture() : RID;

		/** Sets a boot image. The color defines the background color. If `scale` is `true`, the image will be scaled to fit the screen size. If `use_filter` is `true`, the image will be scaled with linear interpolation. If `use_filter` is `false`, the image will be scaled with nearest-neighbor interpolation. */
		//@ts-ignore
		static set_boot_image(image: Image, color: Color, scale: boolean, use_filter: boolean = true) : void;

		/** Sets the default clear color which is used when a specific clear color has not been selected. */
		static set_default_clear_color(color: Color) : void;

		/** Sets the scale to apply to the passage of time for the shaders' `TIME` builtin.

		 The default value is `1.0`, which means `TIME` will count the real time as it goes by, without narrowing or stretching it. */
		static set_shader_time_scale(scale: number) : void;

		/** Not yet implemented. Always returns `false`. */
		static has_feature(feature: VisualServer.Features) : boolean;

		/** Returns `true` if the OS supports a certain feature. Features might be `s3tc`, `etc`, `etc2` and `pvrtc`. */
		static has_os_feature(feature: string) : boolean;

		/** If `true`, the engine will generate wireframes for use with the wireframe debug mode. */
		static set_debug_generate_wireframes(generate: boolean) : void;

		/** Getter of `render_loop_enabled` property */
		static is_render_loop_enabled() : boolean;

		/** Setter of `render_loop_enabled` property */
		static set_render_loop_enabled(p_value: boolean) : void;
	}
	namespace VisualServer {

		/** Emitted at the end of the frame, after the VisualServer has finished updating all the Viewports. */
		const frame_post_draw: 'frame_post_draw';

		/** Emitted at the beginning of the frame, before the VisualServer updates all the Viewports. */
		const frame_pre_draw: 'frame_pre_draw';
		enum ArrayFormat {
			/** Flag used to mark a vertex array. */
			ARRAY_FORMAT_VERTEX = 1,
			/** Flag used to mark a normal array. */
			ARRAY_FORMAT_NORMAL = 2,
			/** Flag used to mark a tangent array. */
			ARRAY_FORMAT_TANGENT = 4,
			/** Flag used to mark a color array. */
			ARRAY_FORMAT_COLOR = 8,
			/** Flag used to mark an UV coordinates array. */
			ARRAY_FORMAT_TEX_UV = 16,
			/** Flag used to mark an UV coordinates array for the second UV coordinates. */
			ARRAY_FORMAT_TEX_UV2 = 32,
			/** Flag used to mark a bone information array. */
			ARRAY_FORMAT_BONES = 64,
			/** Flag used to mark a weights array. */
			ARRAY_FORMAT_WEIGHTS = 128,
			/** Flag used to mark an index array. */
			ARRAY_FORMAT_INDEX = 256,
			/** Flag used to mark a compressed (half float) vertex array. */
			ARRAY_COMPRESS_VERTEX = 512,
			/** Flag used to mark a compressed (half float) normal array. */
			ARRAY_COMPRESS_NORMAL = 1024,
			/** Flag used to mark a compressed (half float) tangent array. */
			ARRAY_COMPRESS_TANGENT = 2048,
			/** Flag used to mark a compressed (half float) color array. */
			ARRAY_COMPRESS_COLOR = 4096,
			/** Flag used to mark a compressed (half float) UV coordinates array. */
			ARRAY_COMPRESS_TEX_UV = 8192,
			/** Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates. */
			ARRAY_COMPRESS_TEX_UV2 = 16384,
			/** Flag used to mark a compressed bone array. */
			ARRAY_COMPRESS_BONES = 32768,
			/** Flag used to mark a compressed (half float) weight array. */
			ARRAY_COMPRESS_WEIGHTS = 65536,
			/** Flag used to mark a compressed index array. */
			ARRAY_COMPRESS_INDEX = 131072,
			/** Flag used to mark that the array contains 2D vertices. */
			ARRAY_FLAG_USE_2D_VERTICES = 262144,
			/** Flag used to mark that the array uses 16-bit bones instead of 8-bit. */
			ARRAY_FLAG_USE_16_BIT_BONES = 524288,
			/** Used to set flags `ARRAY_COMPRESS_NORMAL`, `ARRAY_COMPRESS_TANGENT`, `ARRAY_COMPRESS_COLOR`, `ARRAY_COMPRESS_TEX_UV`, `ARRAY_COMPRESS_TEX_UV2` and `ARRAY_COMPRESS_WEIGHTS` quickly. */
			ARRAY_COMPRESS_DEFAULT = 97280,
		}
		enum ArrayType {
			/** Array is a vertex array. */
			ARRAY_VERTEX = 0,
			/** Array is a normal array. */
			ARRAY_NORMAL = 1,
			/** Array is a tangent array. */
			ARRAY_TANGENT = 2,
			/** Array is a color array. */
			ARRAY_COLOR = 3,
			/** Array is an UV coordinates array. */
			ARRAY_TEX_UV = 4,
			/** Array is an UV coordinates array for the second UV coordinates. */
			ARRAY_TEX_UV2 = 5,
			/** Array contains bone information. */
			ARRAY_BONES = 6,
			/** Array is weight information. */
			ARRAY_WEIGHTS = 7,
			/** Array is index array. */
			ARRAY_INDEX = 8,
			/** Represents the size of the `ArrayType` enum. */
			ARRAY_MAX = 9,
		}
		enum BlendShapeMode {
			/** Blend shapes are normalized. */
			BLEND_SHAPE_MODE_NORMALIZED = 0,
			/** Blend shapes are relative to base weight. */
			BLEND_SHAPE_MODE_RELATIVE = 1,
		}
		enum CanvasLightMode {
			/** Adds light color additive to the canvas. */
			CANVAS_LIGHT_MODE_ADD = 0,
			/** Adds light color subtractive to the canvas. */
			CANVAS_LIGHT_MODE_SUB = 1,
			/** The light adds color depending on transparency. */
			CANVAS_LIGHT_MODE_MIX = 2,
			/** The light adds color depending on mask. */
			CANVAS_LIGHT_MODE_MASK = 3,
		}
		enum CanvasLightShadowFilter {
			/** Do not apply a filter to canvas light shadows. */
			CANVAS_LIGHT_FILTER_NONE = 0,
			/** Use PCF3 filtering to filter canvas light shadows. */
			CANVAS_LIGHT_FILTER_PCF3 = 1,
			/** Use PCF5 filtering to filter canvas light shadows. */
			CANVAS_LIGHT_FILTER_PCF5 = 2,
			/** Use PCF7 filtering to filter canvas light shadows. */
			CANVAS_LIGHT_FILTER_PCF7 = 3,
			/** Use PCF9 filtering to filter canvas light shadows. */
			CANVAS_LIGHT_FILTER_PCF9 = 4,
			/** Use PCF13 filtering to filter canvas light shadows. */
			CANVAS_LIGHT_FILTER_PCF13 = 5,
		}
		enum CanvasOccluderPolygonCullMode {
			/** Culling of the canvas occluder is disabled. */
			CANVAS_OCCLUDER_POLYGON_CULL_DISABLED = 0,
			/** Culling of the canvas occluder is clockwise. */
			CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE = 1,
			/** Culling of the canvas occluder is counterclockwise. */
			CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE = 2,
		}
		enum CubeMapSide {
			/** Marks the left side of a cubemap. */
			CUBEMAP_LEFT = 0,
			/** Marks the right side of a cubemap. */
			CUBEMAP_RIGHT = 1,
			/** Marks the bottom side of a cubemap. */
			CUBEMAP_BOTTOM = 2,
			/** Marks the top side of a cubemap. */
			CUBEMAP_TOP = 3,
			/** Marks the front side of a cubemap. */
			CUBEMAP_FRONT = 4,
			/** Marks the back side of a cubemap. */
			CUBEMAP_BACK = 5,
		}
		enum EnvironmentBG {
			/** Use the clear color as background. */
			ENV_BG_CLEAR_COLOR = 0,
			/** Use a specified color as the background. */
			ENV_BG_COLOR = 1,
			/** Use a sky resource for the background. */
			ENV_BG_SKY = 2,
			/** Use a custom color for background, but use a sky for shading and reflections. */
			ENV_BG_COLOR_SKY = 3,
			/** Use a specified canvas layer as the background. This can be useful for instantiating a 2D scene in a 3D world. */
			ENV_BG_CANVAS = 4,
			/** Do not clear the background, use whatever was rendered last frame as the background. */
			ENV_BG_KEEP = 5,
			/** Represents the size of the `EnvironmentBG` enum. */
			ENV_BG_MAX = 7,
		}
		enum EnvironmentDOFBlurQuality {
			/** Use lowest blur quality. Fastest, but may look bad. */
			ENV_DOF_BLUR_QUALITY_LOW = 0,
			/** Use medium blur quality. */
			ENV_DOF_BLUR_QUALITY_MEDIUM = 1,
			/** Used highest blur quality. Looks the best, but is the slowest. */
			ENV_DOF_BLUR_QUALITY_HIGH = 2,
		}
		enum EnvironmentGlowBlendMode {
			/** Add the effect of the glow on top of the scene. */
			GLOW_BLEND_MODE_ADDITIVE = 0,
			/** Blends the glow effect with the screen. Does not get as bright as additive. */
			GLOW_BLEND_MODE_SCREEN = 1,
			/** Produces a subtle color disturbance around objects. */
			GLOW_BLEND_MODE_SOFTLIGHT = 2,
			/** Shows the glow effect by itself without the underlying scene. */
			GLOW_BLEND_MODE_REPLACE = 3,
		}
		enum EnvironmentSSAOBlur {
			/** Disables the blur set for SSAO. Will make SSAO look noisier. */
			ENV_SSAO_BLUR_DISABLED = 0,
			/** Perform a 1x1 blur on the SSAO output. */
			ENV_SSAO_BLUR_1x1 = 1,
			/** Performs a 2x2 blur on the SSAO output. */
			ENV_SSAO_BLUR_2x2 = 2,
			/** Performs a 3x3 blur on the SSAO output. Use this for smoothest SSAO. */
			ENV_SSAO_BLUR_3x3 = 3,
		}
		enum EnvironmentSSAOQuality {
			/** Lowest quality of screen space ambient occlusion. */
			ENV_SSAO_QUALITY_LOW = 0,
			/** Medium quality screen space ambient occlusion. */
			ENV_SSAO_QUALITY_MEDIUM = 1,
			/** Highest quality screen space ambient occlusion. */
			ENV_SSAO_QUALITY_HIGH = 2,
		}
		enum EnvironmentToneMapper {
			/** Output color as they came in. */
			ENV_TONE_MAPPER_LINEAR = 0,
			/** Use the Reinhard tonemapper. */
			ENV_TONE_MAPPER_REINHARD = 1,
			/** Use the filmic tonemapper. */
			ENV_TONE_MAPPER_FILMIC = 2,
			/** Use the ACES tonemapper. */
			ENV_TONE_MAPPER_ACES = 3,
		}
		enum Features {
			/** Hardware supports shaders. This enum is currently unused in Godot 3.x. */
			FEATURE_SHADERS = 0,
			/** Hardware supports multithreading. This enum is currently unused in Godot 3.x. */
			FEATURE_MULTITHREADED = 1,
		}
		enum InstanceFlags {
			/** Allows the instance to be used in baked lighting. */
			INSTANCE_FLAG_USE_BAKED_LIGHT = 0,
			/** When set, manually requests to draw geometry on next frame. */
			INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE = 1,
			/** Represents the size of the `InstanceFlags` enum. */
			INSTANCE_FLAG_MAX = 2,
		}
		enum InstanceType {
			/** The instance does not have a type. */
			INSTANCE_NONE = 0,
			/** The instance is a mesh. */
			INSTANCE_MESH = 1,
			/** The instance is a multimesh. */
			INSTANCE_MULTIMESH = 2,
			/** The instance is an immediate geometry. */
			INSTANCE_IMMEDIATE = 3,
			/** The instance is a particle emitter. */
			INSTANCE_PARTICLES = 4,
			/** The instance is a light. */
			INSTANCE_LIGHT = 5,
			/** The instance is a reflection probe. */
			INSTANCE_REFLECTION_PROBE = 6,
			/** The instance is a GI probe. */
			INSTANCE_GI_PROBE = 7,
			/** The instance is a lightmap capture. */
			INSTANCE_LIGHTMAP_CAPTURE = 8,
			/** Represents the size of the `InstanceType` enum. */
			INSTANCE_MAX = 9,
			/** A combination of the flags of geometry instances (mesh, multimesh, immediate and particles). */
			INSTANCE_GEOMETRY_MASK = 30,
		}
		enum LightDirectionalShadowDepthRangeMode {
			/** Keeps shadows stable as camera moves but has lower effective resolution. */
			LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE = 0,
			/** Optimize use of shadow maps, increasing the effective resolution. But may result in shadows moving or flickering slightly. */
			LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED = 1,
		}
		enum LightDirectionalShadowMode {
			/** Use orthogonal shadow projection for directional light. */
			LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL = 0,
			/** Use 2 splits for shadow projection when using directional light. */
			LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS = 1,
			/** Use 4 splits for shadow projection when using directional light. */
			LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS = 2,
		}
		enum LightOmniShadowDetail {
			/** Use more detail vertically when computing shadow map. */
			LIGHT_OMNI_SHADOW_DETAIL_VERTICAL = 0,
			/** Use more detail horizontally when computing shadow map. */
			LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL = 1,
		}
		enum LightOmniShadowMode {
			/** Use a dual paraboloid shadow map for omni lights. */
			LIGHT_OMNI_SHADOW_DUAL_PARABOLOID = 0,
			/** Use a cubemap shadow map for omni lights. Slower but better quality than dual paraboloid. */
			LIGHT_OMNI_SHADOW_CUBE = 1,
		}
		enum LightParam {
			/** The light's energy. */
			LIGHT_PARAM_ENERGY = 0,
			/** The light's influence on specularity. */
			LIGHT_PARAM_SPECULAR = 2,
			/** The light's range. */
			LIGHT_PARAM_RANGE = 3,
			/** The light's attenuation. */
			LIGHT_PARAM_ATTENUATION = 4,
			/** The spotlight's angle. */
			LIGHT_PARAM_SPOT_ANGLE = 5,
			/** The spotlight's attenuation. */
			LIGHT_PARAM_SPOT_ATTENUATION = 6,
			/** Scales the shadow color. */
			LIGHT_PARAM_CONTACT_SHADOW_SIZE = 7,
			/** Max distance that shadows will be rendered. */
			LIGHT_PARAM_SHADOW_MAX_DISTANCE = 8,
			/** Proportion of shadow atlas occupied by the first split. */
			LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET = 9,
			/** Proportion of shadow atlas occupied by the second split. */
			LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET = 10,
			/** Proportion of shadow atlas occupied by the third split. The fourth split occupies the rest. */
			LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET = 11,
			/** Normal bias used to offset shadow lookup by object normal. Can be used to fix self-shadowing artifacts. */
			LIGHT_PARAM_SHADOW_NORMAL_BIAS = 12,
			/** Bias the shadow lookup to fix self-shadowing artifacts. */
			LIGHT_PARAM_SHADOW_BIAS = 13,
			/** Increases bias on further splits to fix self-shadowing that only occurs far away from the camera. */
			LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE = 14,
			/** Represents the size of the `LightParam` enum. */
			LIGHT_PARAM_MAX = 15,
		}
		enum LightType {
			/** Is a directional (sun) light. */
			LIGHT_DIRECTIONAL = 0,
			/** Is an omni light. */
			LIGHT_OMNI = 1,
			/** Is a spot light. */
			LIGHT_SPOT = 2,
		}
		enum MultimeshColorFormat {
			/** MultiMesh does not use per-instance color. */
			MULTIMESH_COLOR_NONE = 0,
			/** MultiMesh color uses 8 bits per component. This packs the color into a single float. */
			MULTIMESH_COLOR_8BIT = 1,
			/** MultiMesh color uses a float per channel. */
			MULTIMESH_COLOR_FLOAT = 2,
		}
		enum MultimeshCustomDataFormat {
			/** MultiMesh does not use custom data. */
			MULTIMESH_CUSTOM_DATA_NONE = 0,
			/** MultiMesh custom data uses 8 bits per component. This packs the 4-component custom data into a single float. */
			MULTIMESH_CUSTOM_DATA_8BIT = 1,
			/** MultiMesh custom data uses a float per component. */
			MULTIMESH_CUSTOM_DATA_FLOAT = 2,
		}
		enum MultimeshTransformFormat {
			/** Use `Transform2D` to store MultiMesh transform. */
			MULTIMESH_TRANSFORM_2D = 0,
			/** Use `Transform` to store MultiMesh transform. */
			MULTIMESH_TRANSFORM_3D = 1,
		}
		enum NinePatchAxisMode {
			/** The nine patch gets stretched where needed. */
			NINE_PATCH_STRETCH = 0,
			/** The nine patch gets filled with tiles where needed. */
			NINE_PATCH_TILE = 1,
			/** The nine patch gets filled with tiles where needed and stretches them a bit if needed. */
			NINE_PATCH_TILE_FIT = 2,
		}
		enum ParticlesDrawOrder {
			/** Draw particles in the order that they appear in the particles array. */
			PARTICLES_DRAW_ORDER_INDEX = 0,
			/** Sort particles based on their lifetime. */
			PARTICLES_DRAW_ORDER_LIFETIME = 1,
			/** Sort particles based on their distance to the camera. */
			PARTICLES_DRAW_ORDER_VIEW_DEPTH = 2,
		}
		enum PrimitiveType {
			/** Primitive to draw consists of points. */
			PRIMITIVE_POINTS = 0,
			/** Primitive to draw consists of lines. */
			PRIMITIVE_LINES = 1,
			/** Primitive to draw consists of a line strip from start to end. */
			PRIMITIVE_LINE_STRIP = 2,
			/** Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex). */
			PRIMITIVE_LINE_LOOP = 3,
			/** Primitive to draw consists of triangles. */
			PRIMITIVE_TRIANGLES = 4,
			/** Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle). */
			PRIMITIVE_TRIANGLE_STRIP = 5,
			/** Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle). */
			PRIMITIVE_TRIANGLE_FAN = 6,
			/** Represents the size of the `PrimitiveType` enum. */
			PRIMITIVE_MAX = 7,
		}
		enum ReflectionProbeUpdateMode {
			/** Reflection probe will update reflections once and then stop. */
			REFLECTION_PROBE_UPDATE_ONCE = 0,
			/** Reflection probe will update each frame. This mode is necessary to capture moving objects. */
			REFLECTION_PROBE_UPDATE_ALWAYS = 1,
		}
		enum RenderInfo {
			/** The amount of objects in the frame. */
			INFO_OBJECTS_IN_FRAME = 0,
			/** The amount of vertices in the frame. */
			INFO_VERTICES_IN_FRAME = 1,
			/** The amount of modified materials in the frame. */
			INFO_MATERIAL_CHANGES_IN_FRAME = 2,
			/** The amount of shader rebinds in the frame. */
			INFO_SHADER_CHANGES_IN_FRAME = 3,
			/** The amount of surface changes in the frame. */
			INFO_SURFACE_CHANGES_IN_FRAME = 4,
			/** The amount of draw calls in frame. */
			INFO_DRAW_CALLS_IN_FRAME = 5,
			/** The amount of 2d items in the frame. */
			INFO_2D_ITEMS_IN_FRAME = 6,
			/** The amount of 2d draw calls in frame. */
			INFO_2D_DRAW_CALLS_IN_FRAME = 7,
			/** Unimplemented in the GLES2 and GLES3 rendering backends, always returns 0. */
			INFO_USAGE_VIDEO_MEM_TOTAL = 8,
			/** The amount of video memory used, i.e. texture and vertex memory combined. */
			INFO_VIDEO_MEM_USED = 9,
			/** The amount of texture memory used. */
			INFO_TEXTURE_MEM_USED = 10,
			/** The amount of vertex memory used. */
			INFO_VERTEX_MEM_USED = 11,
		}
		enum ScenarioDebugMode {
			/** Do not use a debug mode. */
			SCENARIO_DEBUG_DISABLED = 0,
			/** Draw all objects as wireframe models. */
			SCENARIO_DEBUG_WIREFRAME = 1,
			/** Draw all objects in a way that displays how much overdraw is occurring. Overdraw occurs when a section of pixels is drawn and shaded and then another object covers it up. To optimize a scene, you should reduce overdraw. */
			SCENARIO_DEBUG_OVERDRAW = 2,
			/** Draw all objects without shading. Equivalent to setting all objects shaders to `unshaded`. */
			SCENARIO_DEBUG_SHADELESS = 3,
		}
		enum ShaderMode {
			/** Shader is a 3D shader. */
			SHADER_SPATIAL = 0,
			/** Shader is a 2D shader. */
			SHADER_CANVAS_ITEM = 1,
			/** Shader is a particle shader. */
			SHADER_PARTICLES = 2,
			/** Represents the size of the `ShaderMode` enum. */
			SHADER_MAX = 3,
		}
		enum ShadowCastingSetting {
			/** Disable shadows from this instance. */
			SHADOW_CASTING_SETTING_OFF = 0,
			/** Cast shadows from this instance. */
			SHADOW_CASTING_SETTING_ON = 1,
			/** Disable backface culling when rendering the shadow of the object. This is slightly slower but may result in more correct shadows. */
			SHADOW_CASTING_SETTING_DOUBLE_SIDED = 2,
			/** Only render the shadows from the object. The object itself will not be drawn. */
			SHADOW_CASTING_SETTING_SHADOWS_ONLY = 3,
		}
		enum TextureFlags {
			/** Generates mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio. */
			TEXTURE_FLAG_MIPMAPS = 1,
			/** Repeats the texture (instead of clamp to edge). */
			TEXTURE_FLAG_REPEAT = 2,
			/** Uses a magnifying filter, to enable smooth zooming in of the texture. */
			TEXTURE_FLAG_FILTER = 4,
			/** Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.

			 This results in better-looking textures when viewed from oblique angles. */
			TEXTURE_FLAG_ANISOTROPIC_FILTER = 8,
			/** Converts the texture to the sRGB color space. */
			TEXTURE_FLAG_CONVERT_TO_LINEAR = 16,
			/** Repeats the texture with alternate sections mirrored. */
			TEXTURE_FLAG_MIRRORED_REPEAT = 32,
			/** Texture is a video surface. */
			TEXTURE_FLAG_USED_FOR_STREAMING = 2048,
			/** Default flags. `TEXTURE_FLAG_MIPMAPS`, `TEXTURE_FLAG_REPEAT` and `TEXTURE_FLAG_FILTER` are enabled. */
			TEXTURE_FLAGS_DEFAULT = 7,
		}
		enum TextureType {
			/** Normal texture with 2 dimensions, width and height. */
			TEXTURE_TYPE_2D = 0,
			/** Texture made up of six faces, can be looked up with a `vec3` in shader. */
			TEXTURE_TYPE_CUBEMAP = 2,
			/** An array of 2-dimensional textures. */
			TEXTURE_TYPE_2D_ARRAY = 3,
			/** A 3-dimensional texture with width, height, and depth. */
			TEXTURE_TYPE_3D = 4,
		}
		enum ViewportClearMode {
			/** The viewport is always cleared before drawing. */
			VIEWPORT_CLEAR_ALWAYS = 0,
			/** The viewport is never cleared before drawing. */
			VIEWPORT_CLEAR_NEVER = 1,
			/** The viewport is cleared once, then the clear mode is set to `VIEWPORT_CLEAR_NEVER`. */
			VIEWPORT_CLEAR_ONLY_NEXT_FRAME = 2,
		}
		enum ViewportDebugDraw {
			/** Debug draw is disabled. Default setting. */
			VIEWPORT_DEBUG_DRAW_DISABLED = 0,
			/** Debug draw sets objects to unshaded. */
			VIEWPORT_DEBUG_DRAW_UNSHADED = 1,
			/** Overwrites clear color to `(0,0,0,0)`. */
			VIEWPORT_DEBUG_DRAW_OVERDRAW = 2,
			/** Debug draw draws objects in wireframe. */
			VIEWPORT_DEBUG_DRAW_WIREFRAME = 3,
		}
		enum ViewportMSAA {
			/** Multisample antialiasing is disabled. */
			VIEWPORT_MSAA_DISABLED = 0,
			/** Multisample antialiasing is set to 2×. */
			VIEWPORT_MSAA_2X = 1,
			/** Multisample antialiasing is set to 4×. */
			VIEWPORT_MSAA_4X = 2,
			/** Multisample antialiasing is set to 8×. */
			VIEWPORT_MSAA_8X = 3,
			/** Multisample antialiasing is set to 16×. */
			VIEWPORT_MSAA_16X = 4,
			/** Multisample antialiasing is set to 2× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go). */
			VIEWPORT_MSAA_EXT_2X = 5,
			/** Multisample antialiasing is set to 4× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go). */
			VIEWPORT_MSAA_EXT_4X = 6,
		}
		enum ViewportRenderInfo {
			/** Number of objects drawn in a single frame. */
			VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME = 0,
			/** Number of vertices drawn in a single frame. */
			VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME = 1,
			/** Number of material changes during this frame. */
			VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME = 2,
			/** Number of shader changes during this frame. */
			VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME = 3,
			/** Number of surface changes during this frame. */
			VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME = 4,
			/** Number of draw calls during this frame. */
			VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME = 5,
			/** Number of 2d items drawn this frame. */
			VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME = 6,
			/** Number of 2d draw calls during this frame. */
			VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME = 7,
			/** Represents the size of the `ViewportRenderInfo` enum. */
			VIEWPORT_RENDER_INFO_MAX = 8,
		}
		enum ViewportUpdateMode {
			/** Do not update the viewport. */
			VIEWPORT_UPDATE_DISABLED = 0,
			/** Update the viewport once then set to disabled. */
			VIEWPORT_UPDATE_ONCE = 1,
			/** Update the viewport whenever it is visible. */
			VIEWPORT_UPDATE_WHEN_VISIBLE = 2,
			/** Always update the viewport. */
			VIEWPORT_UPDATE_ALWAYS = 3,
		}
		enum ViewportUsage {
			/** The Viewport does not render 3D but samples. */
			VIEWPORT_USAGE_2D = 0,
			/** The Viewport does not render 3D and does not sample. */
			VIEWPORT_USAGE_2D_NO_SAMPLING = 1,
			/** The Viewport renders 3D with effects. */
			VIEWPORT_USAGE_3D = 2,
			/** The Viewport renders 3D but without effects. */
			VIEWPORT_USAGE_3D_NO_EFFECTS = 3,
		}

		/** Marks an error that shows that the index array is empty. */
		const NO_INDEX_ARRAY: -1;

		/** Number of weights/bones per vertex. */
		const ARRAY_WEIGHTS_SIZE: 4;

		/** The minimum Z-layer for canvas items. */
		const CANVAS_ITEM_Z_MIN: -4096;

		/** The maximum Z-layer for canvas items. */
		const CANVAS_ITEM_Z_MAX: 4096;

		/** Max number of glow levels that can be used with glow post-process effect. */
		const MAX_GLOW_LEVELS: 7;

		/** Unused enum in Godot 3.x. */
		const MAX_CURSORS: 8;

		/** The minimum renderpriority of all materials. */
		const MATERIAL_RENDER_PRIORITY_MIN: -128;

		/** The maximum renderpriority of all materials. */
		const MATERIAL_RENDER_PRIORITY_MAX: 127;

		/** Marks the left side of a cubemap. */
		const CUBEMAP_LEFT: CubeMapSide.CUBEMAP_LEFT;

		/** Marks the right side of a cubemap. */
		const CUBEMAP_RIGHT: CubeMapSide.CUBEMAP_RIGHT;

		/** Marks the bottom side of a cubemap. */
		const CUBEMAP_BOTTOM: CubeMapSide.CUBEMAP_BOTTOM;

		/** Marks the top side of a cubemap. */
		const CUBEMAP_TOP: CubeMapSide.CUBEMAP_TOP;

		/** Marks the front side of a cubemap. */
		const CUBEMAP_FRONT: CubeMapSide.CUBEMAP_FRONT;

		/** Marks the back side of a cubemap. */
		const CUBEMAP_BACK: CubeMapSide.CUBEMAP_BACK;

		/** Normal texture with 2 dimensions, width and height. */
		const TEXTURE_TYPE_2D: TextureType.TEXTURE_TYPE_2D;

		/** Texture made up of six faces, can be looked up with a `vec3` in shader. */
		const TEXTURE_TYPE_CUBEMAP: TextureType.TEXTURE_TYPE_CUBEMAP;

		/** An array of 2-dimensional textures. */
		const TEXTURE_TYPE_2D_ARRAY: TextureType.TEXTURE_TYPE_2D_ARRAY;

		/** A 3-dimensional texture with width, height, and depth. */
		const TEXTURE_TYPE_3D: TextureType.TEXTURE_TYPE_3D;

		/** Generates mipmaps, which are smaller versions of the same texture to use when zoomed out, keeping the aspect ratio. */
		const TEXTURE_FLAG_MIPMAPS: TextureFlags.TEXTURE_FLAG_MIPMAPS;

		/** Repeats the texture (instead of clamp to edge). */
		const TEXTURE_FLAG_REPEAT: TextureFlags.TEXTURE_FLAG_REPEAT;

		/** Uses a magnifying filter, to enable smooth zooming in of the texture. */
		const TEXTURE_FLAG_FILTER: TextureFlags.TEXTURE_FLAG_FILTER;

		/** Uses anisotropic mipmap filtering. Generates smaller versions of the same texture with different aspect ratios.

		 This results in better-looking textures when viewed from oblique angles. */
		const TEXTURE_FLAG_ANISOTROPIC_FILTER: TextureFlags.TEXTURE_FLAG_ANISOTROPIC_FILTER;

		/** Converts the texture to the sRGB color space. */
		const TEXTURE_FLAG_CONVERT_TO_LINEAR: TextureFlags.TEXTURE_FLAG_CONVERT_TO_LINEAR;

		/** Repeats the texture with alternate sections mirrored. */
		const TEXTURE_FLAG_MIRRORED_REPEAT: TextureFlags.TEXTURE_FLAG_MIRRORED_REPEAT;

		/** Texture is a video surface. */
		const TEXTURE_FLAG_USED_FOR_STREAMING: TextureFlags.TEXTURE_FLAG_USED_FOR_STREAMING;

		/** Default flags. `TEXTURE_FLAG_MIPMAPS`, `TEXTURE_FLAG_REPEAT` and `TEXTURE_FLAG_FILTER` are enabled. */
		const TEXTURE_FLAGS_DEFAULT: TextureFlags.TEXTURE_FLAGS_DEFAULT;

		/** Shader is a 3D shader. */
		const SHADER_SPATIAL: ShaderMode.SHADER_SPATIAL;

		/** Shader is a 2D shader. */
		const SHADER_CANVAS_ITEM: ShaderMode.SHADER_CANVAS_ITEM;

		/** Shader is a particle shader. */
		const SHADER_PARTICLES: ShaderMode.SHADER_PARTICLES;

		/** Represents the size of the `ShaderMode` enum. */
		const SHADER_MAX: ShaderMode.SHADER_MAX;

		/** Array is a vertex array. */
		const ARRAY_VERTEX: ArrayType.ARRAY_VERTEX;

		/** Array is a normal array. */
		const ARRAY_NORMAL: ArrayType.ARRAY_NORMAL;

		/** Array is a tangent array. */
		const ARRAY_TANGENT: ArrayType.ARRAY_TANGENT;

		/** Array is a color array. */
		const ARRAY_COLOR: ArrayType.ARRAY_COLOR;

		/** Array is an UV coordinates array. */
		const ARRAY_TEX_UV: ArrayType.ARRAY_TEX_UV;

		/** Array is an UV coordinates array for the second UV coordinates. */
		const ARRAY_TEX_UV2: ArrayType.ARRAY_TEX_UV2;

		/** Array contains bone information. */
		const ARRAY_BONES: ArrayType.ARRAY_BONES;

		/** Array is weight information. */
		const ARRAY_WEIGHTS: ArrayType.ARRAY_WEIGHTS;

		/** Array is index array. */
		const ARRAY_INDEX: ArrayType.ARRAY_INDEX;

		/** Represents the size of the `ArrayType` enum. */
		const ARRAY_MAX: ArrayType.ARRAY_MAX;

		/** Flag used to mark a vertex array. */
		const ARRAY_FORMAT_VERTEX: ArrayFormat.ARRAY_FORMAT_VERTEX;

		/** Flag used to mark a normal array. */
		const ARRAY_FORMAT_NORMAL: ArrayFormat.ARRAY_FORMAT_NORMAL;

		/** Flag used to mark a tangent array. */
		const ARRAY_FORMAT_TANGENT: ArrayFormat.ARRAY_FORMAT_TANGENT;

		/** Flag used to mark a color array. */
		const ARRAY_FORMAT_COLOR: ArrayFormat.ARRAY_FORMAT_COLOR;

		/** Flag used to mark an UV coordinates array. */
		const ARRAY_FORMAT_TEX_UV: ArrayFormat.ARRAY_FORMAT_TEX_UV;

		/** Flag used to mark an UV coordinates array for the second UV coordinates. */
		const ARRAY_FORMAT_TEX_UV2: ArrayFormat.ARRAY_FORMAT_TEX_UV2;

		/** Flag used to mark a bone information array. */
		const ARRAY_FORMAT_BONES: ArrayFormat.ARRAY_FORMAT_BONES;

		/** Flag used to mark a weights array. */
		const ARRAY_FORMAT_WEIGHTS: ArrayFormat.ARRAY_FORMAT_WEIGHTS;

		/** Flag used to mark an index array. */
		const ARRAY_FORMAT_INDEX: ArrayFormat.ARRAY_FORMAT_INDEX;

		/** Flag used to mark a compressed (half float) vertex array. */
		const ARRAY_COMPRESS_VERTEX: ArrayFormat.ARRAY_COMPRESS_VERTEX;

		/** Flag used to mark a compressed (half float) normal array. */
		const ARRAY_COMPRESS_NORMAL: ArrayFormat.ARRAY_COMPRESS_NORMAL;

		/** Flag used to mark a compressed (half float) tangent array. */
		const ARRAY_COMPRESS_TANGENT: ArrayFormat.ARRAY_COMPRESS_TANGENT;

		/** Flag used to mark a compressed (half float) color array. */
		const ARRAY_COMPRESS_COLOR: ArrayFormat.ARRAY_COMPRESS_COLOR;

		/** Flag used to mark a compressed (half float) UV coordinates array. */
		const ARRAY_COMPRESS_TEX_UV: ArrayFormat.ARRAY_COMPRESS_TEX_UV;

		/** Flag used to mark a compressed (half float) UV coordinates array for the second UV coordinates. */
		const ARRAY_COMPRESS_TEX_UV2: ArrayFormat.ARRAY_COMPRESS_TEX_UV2;

		/** Flag used to mark a compressed bone array. */
		const ARRAY_COMPRESS_BONES: ArrayFormat.ARRAY_COMPRESS_BONES;

		/** Flag used to mark a compressed (half float) weight array. */
		const ARRAY_COMPRESS_WEIGHTS: ArrayFormat.ARRAY_COMPRESS_WEIGHTS;

		/** Flag used to mark a compressed index array. */
		const ARRAY_COMPRESS_INDEX: ArrayFormat.ARRAY_COMPRESS_INDEX;

		/** Flag used to mark that the array contains 2D vertices. */
		const ARRAY_FLAG_USE_2D_VERTICES: ArrayFormat.ARRAY_FLAG_USE_2D_VERTICES;

		/** Flag used to mark that the array uses 16-bit bones instead of 8-bit. */
		const ARRAY_FLAG_USE_16_BIT_BONES: ArrayFormat.ARRAY_FLAG_USE_16_BIT_BONES;

		/** Used to set flags `ARRAY_COMPRESS_NORMAL`, `ARRAY_COMPRESS_TANGENT`, `ARRAY_COMPRESS_COLOR`, `ARRAY_COMPRESS_TEX_UV`, `ARRAY_COMPRESS_TEX_UV2` and `ARRAY_COMPRESS_WEIGHTS` quickly. */
		const ARRAY_COMPRESS_DEFAULT: ArrayFormat.ARRAY_COMPRESS_DEFAULT;

		/** Primitive to draw consists of points. */
		const PRIMITIVE_POINTS: PrimitiveType.PRIMITIVE_POINTS;

		/** Primitive to draw consists of lines. */
		const PRIMITIVE_LINES: PrimitiveType.PRIMITIVE_LINES;

		/** Primitive to draw consists of a line strip from start to end. */
		const PRIMITIVE_LINE_STRIP: PrimitiveType.PRIMITIVE_LINE_STRIP;

		/** Primitive to draw consists of a line loop (a line strip with a line between the last and the first vertex). */
		const PRIMITIVE_LINE_LOOP: PrimitiveType.PRIMITIVE_LINE_LOOP;

		/** Primitive to draw consists of triangles. */
		const PRIMITIVE_TRIANGLES: PrimitiveType.PRIMITIVE_TRIANGLES;

		/** Primitive to draw consists of a triangle strip (the last 3 vertices are always combined to make a triangle). */
		const PRIMITIVE_TRIANGLE_STRIP: PrimitiveType.PRIMITIVE_TRIANGLE_STRIP;

		/** Primitive to draw consists of a triangle strip (the last 2 vertices are always combined with the first to make a triangle). */
		const PRIMITIVE_TRIANGLE_FAN: PrimitiveType.PRIMITIVE_TRIANGLE_FAN;

		/** Represents the size of the `PrimitiveType` enum. */
		const PRIMITIVE_MAX: PrimitiveType.PRIMITIVE_MAX;

		/** Blend shapes are normalized. */
		const BLEND_SHAPE_MODE_NORMALIZED: BlendShapeMode.BLEND_SHAPE_MODE_NORMALIZED;

		/** Blend shapes are relative to base weight. */
		const BLEND_SHAPE_MODE_RELATIVE: BlendShapeMode.BLEND_SHAPE_MODE_RELATIVE;

		/** Is a directional (sun) light. */
		const LIGHT_DIRECTIONAL: LightType.LIGHT_DIRECTIONAL;

		/** Is an omni light. */
		const LIGHT_OMNI: LightType.LIGHT_OMNI;

		/** Is a spot light. */
		const LIGHT_SPOT: LightType.LIGHT_SPOT;

		/** The light's energy. */
		const LIGHT_PARAM_ENERGY: LightParam.LIGHT_PARAM_ENERGY;

		/** The light's influence on specularity. */
		const LIGHT_PARAM_SPECULAR: LightParam.LIGHT_PARAM_SPECULAR;

		/** The light's range. */
		const LIGHT_PARAM_RANGE: LightParam.LIGHT_PARAM_RANGE;

		/** The light's attenuation. */
		const LIGHT_PARAM_ATTENUATION: LightParam.LIGHT_PARAM_ATTENUATION;

		/** The spotlight's angle. */
		const LIGHT_PARAM_SPOT_ANGLE: LightParam.LIGHT_PARAM_SPOT_ANGLE;

		/** The spotlight's attenuation. */
		const LIGHT_PARAM_SPOT_ATTENUATION: LightParam.LIGHT_PARAM_SPOT_ATTENUATION;

		/** Scales the shadow color. */
		const LIGHT_PARAM_CONTACT_SHADOW_SIZE: LightParam.LIGHT_PARAM_CONTACT_SHADOW_SIZE;

		/** Max distance that shadows will be rendered. */
		const LIGHT_PARAM_SHADOW_MAX_DISTANCE: LightParam.LIGHT_PARAM_SHADOW_MAX_DISTANCE;

		/** Proportion of shadow atlas occupied by the first split. */
		const LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET: LightParam.LIGHT_PARAM_SHADOW_SPLIT_1_OFFSET;

		/** Proportion of shadow atlas occupied by the second split. */
		const LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET: LightParam.LIGHT_PARAM_SHADOW_SPLIT_2_OFFSET;

		/** Proportion of shadow atlas occupied by the third split. The fourth split occupies the rest. */
		const LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET: LightParam.LIGHT_PARAM_SHADOW_SPLIT_3_OFFSET;

		/** Normal bias used to offset shadow lookup by object normal. Can be used to fix self-shadowing artifacts. */
		const LIGHT_PARAM_SHADOW_NORMAL_BIAS: LightParam.LIGHT_PARAM_SHADOW_NORMAL_BIAS;

		/** Bias the shadow lookup to fix self-shadowing artifacts. */
		const LIGHT_PARAM_SHADOW_BIAS: LightParam.LIGHT_PARAM_SHADOW_BIAS;

		/** Increases bias on further splits to fix self-shadowing that only occurs far away from the camera. */
		const LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE: LightParam.LIGHT_PARAM_SHADOW_BIAS_SPLIT_SCALE;

		/** Represents the size of the `LightParam` enum. */
		const LIGHT_PARAM_MAX: LightParam.LIGHT_PARAM_MAX;

		/** Use a dual paraboloid shadow map for omni lights. */
		const LIGHT_OMNI_SHADOW_DUAL_PARABOLOID: LightOmniShadowMode.LIGHT_OMNI_SHADOW_DUAL_PARABOLOID;

		/** Use a cubemap shadow map for omni lights. Slower but better quality than dual paraboloid. */
		const LIGHT_OMNI_SHADOW_CUBE: LightOmniShadowMode.LIGHT_OMNI_SHADOW_CUBE;

		/** Use more detail vertically when computing shadow map. */
		const LIGHT_OMNI_SHADOW_DETAIL_VERTICAL: LightOmniShadowDetail.LIGHT_OMNI_SHADOW_DETAIL_VERTICAL;

		/** Use more detail horizontally when computing shadow map. */
		const LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL: LightOmniShadowDetail.LIGHT_OMNI_SHADOW_DETAIL_HORIZONTAL;

		/** Use orthogonal shadow projection for directional light. */
		const LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL: LightDirectionalShadowMode.LIGHT_DIRECTIONAL_SHADOW_ORTHOGONAL;

		/** Use 2 splits for shadow projection when using directional light. */
		const LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS: LightDirectionalShadowMode.LIGHT_DIRECTIONAL_SHADOW_PARALLEL_2_SPLITS;

		/** Use 4 splits for shadow projection when using directional light. */
		const LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS: LightDirectionalShadowMode.LIGHT_DIRECTIONAL_SHADOW_PARALLEL_4_SPLITS;

		/** Keeps shadows stable as camera moves but has lower effective resolution. */
		const LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE: LightDirectionalShadowDepthRangeMode.LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_STABLE;

		/** Optimize use of shadow maps, increasing the effective resolution. But may result in shadows moving or flickering slightly. */
		const LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED: LightDirectionalShadowDepthRangeMode.LIGHT_DIRECTIONAL_SHADOW_DEPTH_RANGE_OPTIMIZED;

		/** Do not update the viewport. */
		const VIEWPORT_UPDATE_DISABLED: ViewportUpdateMode.VIEWPORT_UPDATE_DISABLED;

		/** Update the viewport once then set to disabled. */
		const VIEWPORT_UPDATE_ONCE: ViewportUpdateMode.VIEWPORT_UPDATE_ONCE;

		/** Update the viewport whenever it is visible. */
		const VIEWPORT_UPDATE_WHEN_VISIBLE: ViewportUpdateMode.VIEWPORT_UPDATE_WHEN_VISIBLE;

		/** Always update the viewport. */
		const VIEWPORT_UPDATE_ALWAYS: ViewportUpdateMode.VIEWPORT_UPDATE_ALWAYS;

		/** The viewport is always cleared before drawing. */
		const VIEWPORT_CLEAR_ALWAYS: ViewportClearMode.VIEWPORT_CLEAR_ALWAYS;

		/** The viewport is never cleared before drawing. */
		const VIEWPORT_CLEAR_NEVER: ViewportClearMode.VIEWPORT_CLEAR_NEVER;

		/** The viewport is cleared once, then the clear mode is set to `VIEWPORT_CLEAR_NEVER`. */
		const VIEWPORT_CLEAR_ONLY_NEXT_FRAME: ViewportClearMode.VIEWPORT_CLEAR_ONLY_NEXT_FRAME;

		/** Multisample antialiasing is disabled. */
		const VIEWPORT_MSAA_DISABLED: ViewportMSAA.VIEWPORT_MSAA_DISABLED;

		/** Multisample antialiasing is set to 2×. */
		const VIEWPORT_MSAA_2X: ViewportMSAA.VIEWPORT_MSAA_2X;

		/** Multisample antialiasing is set to 4×. */
		const VIEWPORT_MSAA_4X: ViewportMSAA.VIEWPORT_MSAA_4X;

		/** Multisample antialiasing is set to 8×. */
		const VIEWPORT_MSAA_8X: ViewportMSAA.VIEWPORT_MSAA_8X;

		/** Multisample antialiasing is set to 16×. */
		const VIEWPORT_MSAA_16X: ViewportMSAA.VIEWPORT_MSAA_16X;

		/** Multisample antialiasing is set to 2× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go). */
		const VIEWPORT_MSAA_EXT_2X: ViewportMSAA.VIEWPORT_MSAA_EXT_2X;

		/** Multisample antialiasing is set to 4× on external texture. Special mode for GLES2 Android VR (Oculus Quest and Go). */
		const VIEWPORT_MSAA_EXT_4X: ViewportMSAA.VIEWPORT_MSAA_EXT_4X;

		/** The Viewport does not render 3D but samples. */
		const VIEWPORT_USAGE_2D: ViewportUsage.VIEWPORT_USAGE_2D;

		/** The Viewport does not render 3D and does not sample. */
		const VIEWPORT_USAGE_2D_NO_SAMPLING: ViewportUsage.VIEWPORT_USAGE_2D_NO_SAMPLING;

		/** The Viewport renders 3D with effects. */
		const VIEWPORT_USAGE_3D: ViewportUsage.VIEWPORT_USAGE_3D;

		/** The Viewport renders 3D but without effects. */
		const VIEWPORT_USAGE_3D_NO_EFFECTS: ViewportUsage.VIEWPORT_USAGE_3D_NO_EFFECTS;

		/** Number of objects drawn in a single frame. */
		const VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_OBJECTS_IN_FRAME;

		/** Number of vertices drawn in a single frame. */
		const VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_VERTICES_IN_FRAME;

		/** Number of material changes during this frame. */
		const VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_MATERIAL_CHANGES_IN_FRAME;

		/** Number of shader changes during this frame. */
		const VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_SHADER_CHANGES_IN_FRAME;

		/** Number of surface changes during this frame. */
		const VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_SURFACE_CHANGES_IN_FRAME;

		/** Number of draw calls during this frame. */
		const VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_DRAW_CALLS_IN_FRAME;

		/** Number of 2d items drawn this frame. */
		const VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_2D_ITEMS_IN_FRAME;

		/** Number of 2d draw calls during this frame. */
		const VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME: ViewportRenderInfo.VIEWPORT_RENDER_INFO_2D_DRAW_CALLS_IN_FRAME;

		/** Represents the size of the `ViewportRenderInfo` enum. */
		const VIEWPORT_RENDER_INFO_MAX: ViewportRenderInfo.VIEWPORT_RENDER_INFO_MAX;

		/** Debug draw is disabled. Default setting. */
		const VIEWPORT_DEBUG_DRAW_DISABLED: ViewportDebugDraw.VIEWPORT_DEBUG_DRAW_DISABLED;

		/** Debug draw sets objects to unshaded. */
		const VIEWPORT_DEBUG_DRAW_UNSHADED: ViewportDebugDraw.VIEWPORT_DEBUG_DRAW_UNSHADED;

		/** Overwrites clear color to `(0,0,0,0)`. */
		const VIEWPORT_DEBUG_DRAW_OVERDRAW: ViewportDebugDraw.VIEWPORT_DEBUG_DRAW_OVERDRAW;

		/** Debug draw draws objects in wireframe. */
		const VIEWPORT_DEBUG_DRAW_WIREFRAME: ViewportDebugDraw.VIEWPORT_DEBUG_DRAW_WIREFRAME;

		/** Do not use a debug mode. */
		const SCENARIO_DEBUG_DISABLED: ScenarioDebugMode.SCENARIO_DEBUG_DISABLED;

		/** Draw all objects as wireframe models. */
		const SCENARIO_DEBUG_WIREFRAME: ScenarioDebugMode.SCENARIO_DEBUG_WIREFRAME;

		/** Draw all objects in a way that displays how much overdraw is occurring. Overdraw occurs when a section of pixels is drawn and shaded and then another object covers it up. To optimize a scene, you should reduce overdraw. */
		const SCENARIO_DEBUG_OVERDRAW: ScenarioDebugMode.SCENARIO_DEBUG_OVERDRAW;

		/** Draw all objects without shading. Equivalent to setting all objects shaders to `unshaded`. */
		const SCENARIO_DEBUG_SHADELESS: ScenarioDebugMode.SCENARIO_DEBUG_SHADELESS;

		/** The instance does not have a type. */
		const INSTANCE_NONE: InstanceType.INSTANCE_NONE;

		/** The instance is a mesh. */
		const INSTANCE_MESH: InstanceType.INSTANCE_MESH;

		/** The instance is a multimesh. */
		const INSTANCE_MULTIMESH: InstanceType.INSTANCE_MULTIMESH;

		/** The instance is an immediate geometry. */
		const INSTANCE_IMMEDIATE: InstanceType.INSTANCE_IMMEDIATE;

		/** The instance is a particle emitter. */
		const INSTANCE_PARTICLES: InstanceType.INSTANCE_PARTICLES;

		/** The instance is a light. */
		const INSTANCE_LIGHT: InstanceType.INSTANCE_LIGHT;

		/** The instance is a reflection probe. */
		const INSTANCE_REFLECTION_PROBE: InstanceType.INSTANCE_REFLECTION_PROBE;

		/** The instance is a GI probe. */
		const INSTANCE_GI_PROBE: InstanceType.INSTANCE_GI_PROBE;

		/** The instance is a lightmap capture. */
		const INSTANCE_LIGHTMAP_CAPTURE: InstanceType.INSTANCE_LIGHTMAP_CAPTURE;

		/** Represents the size of the `InstanceType` enum. */
		const INSTANCE_MAX: InstanceType.INSTANCE_MAX;

		/** A combination of the flags of geometry instances (mesh, multimesh, immediate and particles). */
		const INSTANCE_GEOMETRY_MASK: InstanceType.INSTANCE_GEOMETRY_MASK;

		/** Allows the instance to be used in baked lighting. */
		const INSTANCE_FLAG_USE_BAKED_LIGHT: InstanceFlags.INSTANCE_FLAG_USE_BAKED_LIGHT;

		/** When set, manually requests to draw geometry on next frame. */
		const INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE: InstanceFlags.INSTANCE_FLAG_DRAW_NEXT_FRAME_IF_VISIBLE;

		/** Represents the size of the `InstanceFlags` enum. */
		const INSTANCE_FLAG_MAX: InstanceFlags.INSTANCE_FLAG_MAX;

		/** Disable shadows from this instance. */
		const SHADOW_CASTING_SETTING_OFF: ShadowCastingSetting.SHADOW_CASTING_SETTING_OFF;

		/** Cast shadows from this instance. */
		const SHADOW_CASTING_SETTING_ON: ShadowCastingSetting.SHADOW_CASTING_SETTING_ON;

		/** Disable backface culling when rendering the shadow of the object. This is slightly slower but may result in more correct shadows. */
		const SHADOW_CASTING_SETTING_DOUBLE_SIDED: ShadowCastingSetting.SHADOW_CASTING_SETTING_DOUBLE_SIDED;

		/** Only render the shadows from the object. The object itself will not be drawn. */
		const SHADOW_CASTING_SETTING_SHADOWS_ONLY: ShadowCastingSetting.SHADOW_CASTING_SETTING_SHADOWS_ONLY;

		/** The nine patch gets stretched where needed. */
		const NINE_PATCH_STRETCH: NinePatchAxisMode.NINE_PATCH_STRETCH;

		/** The nine patch gets filled with tiles where needed. */
		const NINE_PATCH_TILE: NinePatchAxisMode.NINE_PATCH_TILE;

		/** The nine patch gets filled with tiles where needed and stretches them a bit if needed. */
		const NINE_PATCH_TILE_FIT: NinePatchAxisMode.NINE_PATCH_TILE_FIT;

		/** Adds light color additive to the canvas. */
		const CANVAS_LIGHT_MODE_ADD: CanvasLightMode.CANVAS_LIGHT_MODE_ADD;

		/** Adds light color subtractive to the canvas. */
		const CANVAS_LIGHT_MODE_SUB: CanvasLightMode.CANVAS_LIGHT_MODE_SUB;

		/** The light adds color depending on transparency. */
		const CANVAS_LIGHT_MODE_MIX: CanvasLightMode.CANVAS_LIGHT_MODE_MIX;

		/** The light adds color depending on mask. */
		const CANVAS_LIGHT_MODE_MASK: CanvasLightMode.CANVAS_LIGHT_MODE_MASK;

		/** Do not apply a filter to canvas light shadows. */
		const CANVAS_LIGHT_FILTER_NONE: CanvasLightShadowFilter.CANVAS_LIGHT_FILTER_NONE;

		/** Use PCF3 filtering to filter canvas light shadows. */
		const CANVAS_LIGHT_FILTER_PCF3: CanvasLightShadowFilter.CANVAS_LIGHT_FILTER_PCF3;

		/** Use PCF5 filtering to filter canvas light shadows. */
		const CANVAS_LIGHT_FILTER_PCF5: CanvasLightShadowFilter.CANVAS_LIGHT_FILTER_PCF5;

		/** Use PCF7 filtering to filter canvas light shadows. */
		const CANVAS_LIGHT_FILTER_PCF7: CanvasLightShadowFilter.CANVAS_LIGHT_FILTER_PCF7;

		/** Use PCF9 filtering to filter canvas light shadows. */
		const CANVAS_LIGHT_FILTER_PCF9: CanvasLightShadowFilter.CANVAS_LIGHT_FILTER_PCF9;

		/** Use PCF13 filtering to filter canvas light shadows. */
		const CANVAS_LIGHT_FILTER_PCF13: CanvasLightShadowFilter.CANVAS_LIGHT_FILTER_PCF13;

		/** Culling of the canvas occluder is disabled. */
		const CANVAS_OCCLUDER_POLYGON_CULL_DISABLED: CanvasOccluderPolygonCullMode.CANVAS_OCCLUDER_POLYGON_CULL_DISABLED;

		/** Culling of the canvas occluder is clockwise. */
		const CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE: CanvasOccluderPolygonCullMode.CANVAS_OCCLUDER_POLYGON_CULL_CLOCKWISE;

		/** Culling of the canvas occluder is counterclockwise. */
		const CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE: CanvasOccluderPolygonCullMode.CANVAS_OCCLUDER_POLYGON_CULL_COUNTER_CLOCKWISE;

		/** The amount of objects in the frame. */
		const INFO_OBJECTS_IN_FRAME: RenderInfo.INFO_OBJECTS_IN_FRAME;

		/** The amount of vertices in the frame. */
		const INFO_VERTICES_IN_FRAME: RenderInfo.INFO_VERTICES_IN_FRAME;

		/** The amount of modified materials in the frame. */
		const INFO_MATERIAL_CHANGES_IN_FRAME: RenderInfo.INFO_MATERIAL_CHANGES_IN_FRAME;

		/** The amount of shader rebinds in the frame. */
		const INFO_SHADER_CHANGES_IN_FRAME: RenderInfo.INFO_SHADER_CHANGES_IN_FRAME;

		/** The amount of surface changes in the frame. */
		const INFO_SURFACE_CHANGES_IN_FRAME: RenderInfo.INFO_SURFACE_CHANGES_IN_FRAME;

		/** The amount of draw calls in frame. */
		const INFO_DRAW_CALLS_IN_FRAME: RenderInfo.INFO_DRAW_CALLS_IN_FRAME;

		/** The amount of 2d items in the frame. */
		const INFO_2D_ITEMS_IN_FRAME: RenderInfo.INFO_2D_ITEMS_IN_FRAME;

		/** The amount of 2d draw calls in frame. */
		const INFO_2D_DRAW_CALLS_IN_FRAME: RenderInfo.INFO_2D_DRAW_CALLS_IN_FRAME;

		/** Unimplemented in the GLES2 and GLES3 rendering backends, always returns 0. */
		const INFO_USAGE_VIDEO_MEM_TOTAL: RenderInfo.INFO_USAGE_VIDEO_MEM_TOTAL;

		/** The amount of video memory used, i.e. texture and vertex memory combined. */
		const INFO_VIDEO_MEM_USED: RenderInfo.INFO_VIDEO_MEM_USED;

		/** The amount of texture memory used. */
		const INFO_TEXTURE_MEM_USED: RenderInfo.INFO_TEXTURE_MEM_USED;

		/** The amount of vertex memory used. */
		const INFO_VERTEX_MEM_USED: RenderInfo.INFO_VERTEX_MEM_USED;

		/** Hardware supports shaders. This enum is currently unused in Godot 3.x. */
		const FEATURE_SHADERS: Features.FEATURE_SHADERS;

		/** Hardware supports multithreading. This enum is currently unused in Godot 3.x. */
		const FEATURE_MULTITHREADED: Features.FEATURE_MULTITHREADED;

		/** Use `Transform2D` to store MultiMesh transform. */
		const MULTIMESH_TRANSFORM_2D: MultimeshTransformFormat.MULTIMESH_TRANSFORM_2D;

		/** Use `Transform` to store MultiMesh transform. */
		const MULTIMESH_TRANSFORM_3D: MultimeshTransformFormat.MULTIMESH_TRANSFORM_3D;

		/** MultiMesh does not use per-instance color. */
		const MULTIMESH_COLOR_NONE: MultimeshColorFormat.MULTIMESH_COLOR_NONE;

		/** MultiMesh color uses 8 bits per component. This packs the color into a single float. */
		const MULTIMESH_COLOR_8BIT: MultimeshColorFormat.MULTIMESH_COLOR_8BIT;

		/** MultiMesh color uses a float per channel. */
		const MULTIMESH_COLOR_FLOAT: MultimeshColorFormat.MULTIMESH_COLOR_FLOAT;

		/** MultiMesh does not use custom data. */
		const MULTIMESH_CUSTOM_DATA_NONE: MultimeshCustomDataFormat.MULTIMESH_CUSTOM_DATA_NONE;

		/** MultiMesh custom data uses 8 bits per component. This packs the 4-component custom data into a single float. */
		const MULTIMESH_CUSTOM_DATA_8BIT: MultimeshCustomDataFormat.MULTIMESH_CUSTOM_DATA_8BIT;

		/** MultiMesh custom data uses a float per component. */
		const MULTIMESH_CUSTOM_DATA_FLOAT: MultimeshCustomDataFormat.MULTIMESH_CUSTOM_DATA_FLOAT;

		/** Reflection probe will update reflections once and then stop. */
		const REFLECTION_PROBE_UPDATE_ONCE: ReflectionProbeUpdateMode.REFLECTION_PROBE_UPDATE_ONCE;

		/** Reflection probe will update each frame. This mode is necessary to capture moving objects. */
		const REFLECTION_PROBE_UPDATE_ALWAYS: ReflectionProbeUpdateMode.REFLECTION_PROBE_UPDATE_ALWAYS;

		/** Draw particles in the order that they appear in the particles array. */
		const PARTICLES_DRAW_ORDER_INDEX: ParticlesDrawOrder.PARTICLES_DRAW_ORDER_INDEX;

		/** Sort particles based on their lifetime. */
		const PARTICLES_DRAW_ORDER_LIFETIME: ParticlesDrawOrder.PARTICLES_DRAW_ORDER_LIFETIME;

		/** Sort particles based on their distance to the camera. */
		const PARTICLES_DRAW_ORDER_VIEW_DEPTH: ParticlesDrawOrder.PARTICLES_DRAW_ORDER_VIEW_DEPTH;

		/** Use the clear color as background. */
		const ENV_BG_CLEAR_COLOR: EnvironmentBG.ENV_BG_CLEAR_COLOR;

		/** Use a specified color as the background. */
		const ENV_BG_COLOR: EnvironmentBG.ENV_BG_COLOR;

		/** Use a sky resource for the background. */
		const ENV_BG_SKY: EnvironmentBG.ENV_BG_SKY;

		/** Use a custom color for background, but use a sky for shading and reflections. */
		const ENV_BG_COLOR_SKY: EnvironmentBG.ENV_BG_COLOR_SKY;

		/** Use a specified canvas layer as the background. This can be useful for instantiating a 2D scene in a 3D world. */
		const ENV_BG_CANVAS: EnvironmentBG.ENV_BG_CANVAS;

		/** Do not clear the background, use whatever was rendered last frame as the background. */
		const ENV_BG_KEEP: EnvironmentBG.ENV_BG_KEEP;

		/** Represents the size of the `EnvironmentBG` enum. */
		const ENV_BG_MAX: EnvironmentBG.ENV_BG_MAX;

		/** Use lowest blur quality. Fastest, but may look bad. */
		const ENV_DOF_BLUR_QUALITY_LOW: EnvironmentDOFBlurQuality.ENV_DOF_BLUR_QUALITY_LOW;

		/** Use medium blur quality. */
		const ENV_DOF_BLUR_QUALITY_MEDIUM: EnvironmentDOFBlurQuality.ENV_DOF_BLUR_QUALITY_MEDIUM;

		/** Used highest blur quality. Looks the best, but is the slowest. */
		const ENV_DOF_BLUR_QUALITY_HIGH: EnvironmentDOFBlurQuality.ENV_DOF_BLUR_QUALITY_HIGH;

		/** Add the effect of the glow on top of the scene. */
		const GLOW_BLEND_MODE_ADDITIVE: EnvironmentGlowBlendMode.GLOW_BLEND_MODE_ADDITIVE;

		/** Blends the glow effect with the screen. Does not get as bright as additive. */
		const GLOW_BLEND_MODE_SCREEN: EnvironmentGlowBlendMode.GLOW_BLEND_MODE_SCREEN;

		/** Produces a subtle color disturbance around objects. */
		const GLOW_BLEND_MODE_SOFTLIGHT: EnvironmentGlowBlendMode.GLOW_BLEND_MODE_SOFTLIGHT;

		/** Shows the glow effect by itself without the underlying scene. */
		const GLOW_BLEND_MODE_REPLACE: EnvironmentGlowBlendMode.GLOW_BLEND_MODE_REPLACE;

		/** Output color as they came in. */
		const ENV_TONE_MAPPER_LINEAR: EnvironmentToneMapper.ENV_TONE_MAPPER_LINEAR;

		/** Use the Reinhard tonemapper. */
		const ENV_TONE_MAPPER_REINHARD: EnvironmentToneMapper.ENV_TONE_MAPPER_REINHARD;

		/** Use the filmic tonemapper. */
		const ENV_TONE_MAPPER_FILMIC: EnvironmentToneMapper.ENV_TONE_MAPPER_FILMIC;

		/** Use the ACES tonemapper. */
		const ENV_TONE_MAPPER_ACES: EnvironmentToneMapper.ENV_TONE_MAPPER_ACES;

		/** Lowest quality of screen space ambient occlusion. */
		const ENV_SSAO_QUALITY_LOW: EnvironmentSSAOQuality.ENV_SSAO_QUALITY_LOW;

		/** Medium quality screen space ambient occlusion. */
		const ENV_SSAO_QUALITY_MEDIUM: EnvironmentSSAOQuality.ENV_SSAO_QUALITY_MEDIUM;

		/** Highest quality screen space ambient occlusion. */
		const ENV_SSAO_QUALITY_HIGH: EnvironmentSSAOQuality.ENV_SSAO_QUALITY_HIGH;

		/** Disables the blur set for SSAO. Will make SSAO look noisier. */
		const ENV_SSAO_BLUR_DISABLED: EnvironmentSSAOBlur.ENV_SSAO_BLUR_DISABLED;

		/** Perform a 1x1 blur on the SSAO output. */
		const ENV_SSAO_BLUR_1x1: EnvironmentSSAOBlur.ENV_SSAO_BLUR_1x1;

		/** Performs a 2x2 blur on the SSAO output. */
		const ENV_SSAO_BLUR_2x2: EnvironmentSSAOBlur.ENV_SSAO_BLUR_2x2;

		/** Performs a 3x3 blur on the SSAO output. Use this for smoothest SSAO. */
		const ENV_SSAO_BLUR_3x3: EnvironmentSSAOBlur.ENV_SSAO_BLUR_3x3;
	}

	/** A custom shader program with a visual editor.
	 This class allows you to define a custom shader program that can be used for various materials to render objects.

	 The visual shader editor creates the shader. */
	class VisualShader extends Shader {

		/** The offset vector of the whole graph. */
		graph_offset: Vector2;

		/**  */
		code: string;

		/** Sets the mode of this shader. */
		set_mode(mode: Shader.Mode) : void;

		/** Adds the specified node to the shader. */
		add_node(type: VisualShader.Type, node: VisualShaderNode, position: Vector2, id: number) : void;

		/** Returns the shader node instance with specified `type` and `id`. */
		get_node(type: VisualShader.Type, id: number) : VisualShaderNode;

		/** Sets the position of the specified node. */
		set_node_position(type: VisualShader.Type, id: number, position: Vector2) : void;

		/** Returns the position of the specified node within the shader graph. */
		get_node_position(type: VisualShader.Type, id: number) : Vector2;

		/** Returns the list of all nodes in the shader with the specified type. */
		get_node_list(type: VisualShader.Type) : PoolIntArray;

		/**  */
		get_valid_node_id(type: VisualShader.Type) : number;

		/** Removes the specified node from the shader. */
		remove_node(type: VisualShader.Type, id: number) : void;

		/** Returns `true` if the specified node and port connection exist. */
		is_node_connection(type: VisualShader.Type, from_node: number, from_port: number, to_node: number, to_port: number) : boolean;

		/** Returns `true` if the specified nodes and ports can be connected together. */
		can_connect_nodes(type: VisualShader.Type, from_node: number, from_port: number, to_node: number, to_port: number) : boolean;

		/** Connects the specified nodes and ports. */
		connect_nodes(type: VisualShader.Type, from_node: number, from_port: number, to_node: number, to_port: number) : number;

		/** Connects the specified nodes and ports. */
		disconnect_nodes(type: VisualShader.Type, from_node: number, from_port: number, to_node: number, to_port: number) : void;

		/** Connects the specified nodes and ports, even if they can't be connected. Such connection is invalid and will not function properly. */
		connect_nodes_forced(type: VisualShader.Type, from_node: number, from_port: number, to_node: number, to_port: number) : void;

		/** Returns the list of connected nodes with the specified type. */
		get_node_connections(type: VisualShader.Type) : any[];

		/** Getter of `graph_offset` property */
		get_graph_offset() : Vector2;

		/** Setter of `graph_offset` property */
		set_graph_offset(p_value: Vector2) : void;

		/** Getter of `code` property */
		get_code() : string;

		/** Setter of `code` property */
		set_code(p_value: string) : void;
	}
	namespace VisualShader {
		enum Type {
			/** A vertex shader, operating on vertices. */
			TYPE_VERTEX = 0,
			/** A fragment shader, operating on fragments (pixels). */
			TYPE_FRAGMENT = 1,
			/** A shader for light calculations. */
			TYPE_LIGHT = 2,
			/** Represents the size of the `Type` enum. */
			TYPE_MAX = 3,
		}

		/** A vertex shader, operating on vertices. */
		const TYPE_VERTEX: Type.TYPE_VERTEX;

		/** A fragment shader, operating on fragments (pixels). */
		const TYPE_FRAGMENT: Type.TYPE_FRAGMENT;

		/** A shader for light calculations. */
		const TYPE_LIGHT: Type.TYPE_LIGHT;

		/** Represents the size of the `Type` enum. */
		const TYPE_MAX: Type.TYPE_MAX;

		/**  */
		const NODE_ID_INVALID: -1;

		/**  */
		const NODE_ID_OUTPUT: 0;
	}

	/** Base class for nodes in a visual shader graph.
	  */
	class VisualShaderNode extends Resource {

		/** Sets the output port index which will be showed for preview. If set to `-1` no port will be open for preview. */
		output_port_for_preview: number;

		/** Sets the default value for the selected input `port`. */
		set_input_port_default_value(port: number, value: any) : void;

		/** Returns the default value of the input `port`. */
		get_input_port_default_value(port: number) : any;

		/** Sets the default input ports values using an `Array` of the form ``index0, value0, index1, value1, ...``. For example: ``0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)``. */
		set_default_input_values(values: any[]) : void;

		/** Returns an `Array` containing default values for all of the input ports of the node in the form ``index0, value0, index1, value1, ...``. */
		get_default_input_values() : any[];

		/** Getter of `output_port_for_preview` property */
		get_output_port_for_preview() : number;

		/** Setter of `output_port_for_preview` property */
		set_output_port_for_preview(p_value: number) : void;
	}
	namespace VisualShaderNode {

		/** Emitted when the node requests an editor refresh. Currently called only in setter of `VisualShaderNodeTexture.source`, `VisualShaderNodeTexture`, and `VisualShaderNodeCubeMap` (and their derivatives). */
		const editor_refresh_request: 'editor_refresh_request';
		enum PortType {
			/** Floating-point scalar. Translated to `float` type in shader code. */
			PORT_TYPE_SCALAR = 0,
			/** 3D vector of floating-point values. Translated to `vec3` type in shader code. */
			PORT_TYPE_VECTOR = 1,
			/** Boolean type. Translated to `bool` type in shader code. */
			PORT_TYPE_BOOLEAN = 2,
			/** Transform type. Translated to `mat4` type in shader code. */
			PORT_TYPE_TRANSFORM = 3,
			/** Sampler type. Translated to reference of sampler uniform in shader code. Can only be used for input ports in non-uniform nodes. */
			PORT_TYPE_SAMPLER = 4,
			/** Represents the size of the `PortType` enum. */
			PORT_TYPE_MAX = 5,
		}

		/** Floating-point scalar. Translated to `float` type in shader code. */
		const PORT_TYPE_SCALAR: PortType.PORT_TYPE_SCALAR;

		/** 3D vector of floating-point values. Translated to `vec3` type in shader code. */
		const PORT_TYPE_VECTOR: PortType.PORT_TYPE_VECTOR;

		/** Boolean type. Translated to `bool` type in shader code. */
		const PORT_TYPE_BOOLEAN: PortType.PORT_TYPE_BOOLEAN;

		/** Transform type. Translated to `mat4` type in shader code. */
		const PORT_TYPE_TRANSFORM: PortType.PORT_TYPE_TRANSFORM;

		/** Sampler type. Translated to reference of sampler uniform in shader code. Can only be used for input ports in non-uniform nodes. */
		const PORT_TYPE_SAMPLER: PortType.PORT_TYPE_SAMPLER;

		/** Represents the size of the `PortType` enum. */
		const PORT_TYPE_MAX: PortType.PORT_TYPE_MAX;
	}

	/** A boolean constant to be used within the visual shader graph.
	 Has only one output port and no inputs.

	 Translated to `bool` in the shader language. */
	class VisualShaderNodeBooleanConstant extends VisualShaderNode {

		/** A boolean constant which represents a state of this node. */
		constant: boolean;

		/** Getter of `constant` property */
		get_constant() : boolean;

		/** Setter of `constant` property */
		set_constant(p_value: boolean) : void;
	}
	namespace VisualShaderNodeBooleanConstant {
	}

	/** A boolean uniform to be used within the visual shader graph.
	 Translated to `uniform bool` in the shader language. */
	class VisualShaderNodeBooleanUniform extends VisualShaderNodeUniform {
	}
	namespace VisualShaderNodeBooleanUniform {
	}

	/** A `Color` constant to be used within the visual shader graph.
	 Has two output ports representing RGB and alpha channels of `Color`.

	 Translated to `vec3 rgb` and `float alpha` in the shader language. */
	class VisualShaderNodeColorConstant extends VisualShaderNode {

		/** A `Color` constant which represents a state of this node. */
		constant: Color;

		/** Getter of `constant` property */
		get_constant() : Color;

		/** Setter of `constant` property */
		set_constant(p_value: Color) : void;
	}
	namespace VisualShaderNodeColorConstant {
	}

	/** A `Color` function to be used within the visual shader graph.
	 Accept a `Color` to the input port and transform it according to `function`. */
	class VisualShaderNodeColorFunc extends VisualShaderNode {

		/** A function to be applied to the input color. See `Function` for options. */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeColorFunc {
		enum Function {
			/** Converts the color to grayscale using the following formula:

			 ```gdscript
			 vec3 c = input;
			 float max1 = max(c.r, c.g);
			 float max2 = max(max1, c.b);
			 float max3 = max(max1, max2);
			 return vec3(max3, max3, max3);
			 ``` */
			FUNC_GRAYSCALE = 0,
			/** Applies sepia tone effect using the following formula:

			 ```gdscript
			 vec3 c = input;
			 float r = (c.r * 0.393) + (c.g * 0.769) + (c.b * 0.189);
			 float g = (c.r * 0.349) + (c.g * 0.686) + (c.b * 0.168);
			 float b = (c.r * 0.272) + (c.g * 0.534) + (c.b * 0.131);
			 return vec3(r, g, b);
			 ``` */
			FUNC_SEPIA = 1,
		}

		/** Converts the color to grayscale using the following formula:

		 ```gdscript
		 vec3 c = input;
		 float max1 = max(c.r, c.g);
		 float max2 = max(max1, c.b);
		 float max3 = max(max1, max2);
		 return vec3(max3, max3, max3);
		 ``` */
		const FUNC_GRAYSCALE: Function.FUNC_GRAYSCALE;

		/** Applies sepia tone effect using the following formula:

		 ```gdscript
		 vec3 c = input;
		 float r = (c.r * 0.393) + (c.g * 0.769) + (c.b * 0.189);
		 float g = (c.r * 0.349) + (c.g * 0.686) + (c.b * 0.168);
		 float b = (c.r * 0.272) + (c.g * 0.534) + (c.b * 0.131);
		 return vec3(r, g, b);
		 ``` */
		const FUNC_SEPIA: Function.FUNC_SEPIA;
	}

	/** A `Color` operator to be used within the visual shader graph.
	 Applies `operator` to two color inputs. */
	class VisualShaderNodeColorOp extends VisualShaderNode {

		/** An operator to be applied to the inputs. See `Operator` for options. */
		operator: number;

		/** Getter of `operator` property */
		get_operator() : number;

		/** Setter of `operator` property */
		set_operator(p_value: number) : void;
	}
	namespace VisualShaderNodeColorOp {
		enum Operator {
			/** Produce a screen effect with the following formula:

			 ```gdscript
			 result = vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b);
			 ``` */
			OP_SCREEN = 0,
			/** Produce a difference effect with the following formula:

			 ```gdscript
			 result = abs(a - b);
			 ``` */
			OP_DIFFERENCE = 1,
			/** Produce a darken effect with the following formula:

			 ```gdscript
			 result = min(a, b);
			 ``` */
			OP_DARKEN = 2,
			/** Produce a lighten effect with the following formula:

			 ```gdscript
			 result = max(a, b);
			 ``` */
			OP_LIGHTEN = 3,
			/** Produce an overlay effect with the following formula:

			 ```gdscript
			 for (int i = 0; i < 3; i++) {
			     float base = a[i];
			     float blend = b[i];
			     if (base < 0.5) {
			         result[i] = 2.0 * base * blend;
			     } else {
			         result[i] = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
			     }
			 }
			 ``` */
			OP_OVERLAY = 4,
			/** Produce a dodge effect with the following formula:

			 ```gdscript
			 result = a / (vec3(1.0) - b);
			 ``` */
			OP_DODGE = 5,
			/** Produce a burn effect with the following formula:

			 ```gdscript
			 result = vec3(1.0) - (vec3(1.0) - a) / b;
			 ``` */
			OP_BURN = 6,
			/** Produce a soft light effect with the following formula:

			 ```gdscript
			 for (int i = 0; i < 3; i++) {
			     float base = a[i];
			     float blend = b[i];
			     if (base < 0.5) {
			         result[i] = base * (blend + 0.5);
			     } else {
			         result[i] = 1.0 - (1.0 - base) * (1.0 - (blend - 0.5));
			     }
			 }
			 ``` */
			OP_SOFT_LIGHT = 7,
			/** Produce a hard light effect with the following formula:

			 ```gdscript
			 for (int i = 0; i < 3; i++) {
			     float base = a[i];
			     float blend = b[i];
			     if (base < 0.5) {
			         result[i] = base * (2.0 * blend);
			     } else {
			         result[i] = 1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5));
			     }
			 }
			 ``` */
			OP_HARD_LIGHT = 8,
		}

		/** Produce a screen effect with the following formula:

		 ```gdscript
		 result = vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b);
		 ``` */
		const OP_SCREEN: Operator.OP_SCREEN;

		/** Produce a difference effect with the following formula:

		 ```gdscript
		 result = abs(a - b);
		 ``` */
		const OP_DIFFERENCE: Operator.OP_DIFFERENCE;

		/** Produce a darken effect with the following formula:

		 ```gdscript
		 result = min(a, b);
		 ``` */
		const OP_DARKEN: Operator.OP_DARKEN;

		/** Produce a lighten effect with the following formula:

		 ```gdscript
		 result = max(a, b);
		 ``` */
		const OP_LIGHTEN: Operator.OP_LIGHTEN;

		/** Produce an overlay effect with the following formula:

		 ```gdscript
		 for (int i = 0; i < 3; i++) {
		     float base = a[i];
		     float blend = b[i];
		     if (base < 0.5) {
		         result[i] = 2.0 * base * blend;
		     } else {
		         result[i] = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
		     }
		 }
		 ``` */
		const OP_OVERLAY: Operator.OP_OVERLAY;

		/** Produce a dodge effect with the following formula:

		 ```gdscript
		 result = a / (vec3(1.0) - b);
		 ``` */
		const OP_DODGE: Operator.OP_DODGE;

		/** Produce a burn effect with the following formula:

		 ```gdscript
		 result = vec3(1.0) - (vec3(1.0) - a) / b;
		 ``` */
		const OP_BURN: Operator.OP_BURN;

		/** Produce a soft light effect with the following formula:

		 ```gdscript
		 for (int i = 0; i < 3; i++) {
		     float base = a[i];
		     float blend = b[i];
		     if (base < 0.5) {
		         result[i] = base * (blend + 0.5);
		     } else {
		         result[i] = 1.0 - (1.0 - base) * (1.0 - (blend - 0.5));
		     }
		 }
		 ``` */
		const OP_SOFT_LIGHT: Operator.OP_SOFT_LIGHT;

		/** Produce a hard light effect with the following formula:

		 ```gdscript
		 for (int i = 0; i < 3; i++) {
		     float base = a[i];
		     float blend = b[i];
		     if (base < 0.5) {
		         result[i] = base * (2.0 * blend);
		     } else {
		         result[i] = 1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5));
		     }
		 }
		 ``` */
		const OP_HARD_LIGHT: Operator.OP_HARD_LIGHT;
	}

	/** A `Color` uniform to be used within the visual shader graph.
	 Translated to `uniform vec4` in the shader language. */
	class VisualShaderNodeColorUniform extends VisualShaderNodeUniform {
	}
	namespace VisualShaderNodeColorUniform {
	}

	/** A comparison function for common types within the visual shader graph.
	 Compares `a` and `b` of `type` by `function`. Returns a boolean scalar. Translates to `if` instruction in shader code. */
	class VisualShaderNodeCompare extends VisualShaderNode {

		/** The type to be used in the comparison. See `ComparisonType` for options. */
		type: number;

		/** A comparison function. See `Function` for options. */
		'function': number;

		/** Extra condition which is applied if `type` is set to `CTYPE_VECTOR`. */
		condition: number;

		/** Getter of `type` property */
		get_comparison_type() : number;

		/** Setter of `type` property */
		set_comparison_type(p_value: number) : void;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;

		/** Getter of `condition` property */
		get_condition() : number;

		/** Setter of `condition` property */
		set_condition(p_value: number) : void;
	}
	namespace VisualShaderNodeCompare {
		enum ComparisonType {
			/** A floating-point scalar. */
			CTYPE_SCALAR = 0,
			/** A 3D vector type. */
			CTYPE_VECTOR = 1,
			/** A boolean type. */
			CTYPE_BOOLEAN = 2,
			/** A transform (`mat4`) type. */
			CTYPE_TRANSFORM = 3,
		}
		enum Condition {
			/** The result will be true if all of component in vector satisfy the comparison condition. */
			COND_ALL = 0,
			/** The result will be true if any of component in vector satisfy the comparison condition. */
			COND_ANY = 1,
		}
		enum Function {
			/** Comparison for equality (`a == b`). */
			FUNC_EQUAL = 0,
			/** Comparison for inequality (`a != b`). */
			FUNC_NOT_EQUAL = 1,
			/** Comparison for greater than (`a > b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
			FUNC_GREATER_THAN = 2,
			/** Comparison for greater than or equal (`a >= b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
			FUNC_GREATER_THAN_EQUAL = 3,
			/** Comparison for less than (`a < b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
			FUNC_LESS_THAN = 4,
			/** Comparison for less than or equal (`a < b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
			FUNC_LESS_THAN_EQUAL = 5,
		}

		/** A floating-point scalar. */
		const CTYPE_SCALAR: ComparisonType.CTYPE_SCALAR;

		/** A 3D vector type. */
		const CTYPE_VECTOR: ComparisonType.CTYPE_VECTOR;

		/** A boolean type. */
		const CTYPE_BOOLEAN: ComparisonType.CTYPE_BOOLEAN;

		/** A transform (`mat4`) type. */
		const CTYPE_TRANSFORM: ComparisonType.CTYPE_TRANSFORM;

		/** Comparison for equality (`a == b`). */
		const FUNC_EQUAL: Function.FUNC_EQUAL;

		/** Comparison for inequality (`a != b`). */
		const FUNC_NOT_EQUAL: Function.FUNC_NOT_EQUAL;

		/** Comparison for greater than (`a > b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
		const FUNC_GREATER_THAN: Function.FUNC_GREATER_THAN;

		/** Comparison for greater than or equal (`a >= b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
		const FUNC_GREATER_THAN_EQUAL: Function.FUNC_GREATER_THAN_EQUAL;

		/** Comparison for less than (`a < b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
		const FUNC_LESS_THAN: Function.FUNC_LESS_THAN;

		/** Comparison for less than or equal (`a < b`). Cannot be used if `type` set to `CTYPE_BOOLEAN` or `CTYPE_TRANSFORM`. */
		const FUNC_LESS_THAN_EQUAL: Function.FUNC_LESS_THAN_EQUAL;

		/** The result will be true if all of component in vector satisfy the comparison condition. */
		const COND_ALL: Condition.COND_ALL;

		/** The result will be true if any of component in vector satisfy the comparison condition. */
		const COND_ANY: Condition.COND_ANY;
	}

	/** A `CubeMap` sampling node to be used within the visual shader graph.
	 Translated to `texture(cubemap, vec3)` in the shader language. Returns a color vector and alpha channel as scalar. */
	class VisualShaderNodeCubeMap extends VisualShaderNode {

		/** Defines which source should be used for the sampling. See `Source` for options. */
		source: number;

		/** The `CubeMap` texture to sample when using `SOURCE_TEXTURE` as `source`. */
		cube_map: CubeMap;

		/** Defines the type of data provided by the source texture. See `TextureType` for options. */
		texture_type: number;

		/** Getter of `source` property */
		get_source() : number;

		/** Setter of `source` property */
		set_source(p_value: number) : void;

		/** Getter of `cube_map` property */
		get_cube_map() : CubeMap;

		/** Setter of `cube_map` property */
		set_cube_map(p_value: CubeMap) : void;

		/** Getter of `texture_type` property */
		get_texture_type() : number;

		/** Setter of `texture_type` property */
		set_texture_type(p_value: number) : void;
	}
	namespace VisualShaderNodeCubeMap {
		enum Source {
			/** Use the `CubeMap` set via `cube_map`. If this is set to `source`, the `samplerCube` port is ignored. */
			SOURCE_TEXTURE = 0,
			/** Use the `CubeMap` sampler reference passed via the `samplerCube` port. If this is set to `source`, the `cube_map` texture is ignored. */
			SOURCE_PORT = 1,
		}
		enum TextureType {
			/** No hints are added to the uniform declaration. */
			TYPE_DATA = 0,
			/** Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion. */
			TYPE_COLOR = 1,
			/** Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map. */
			TYPE_NORMALMAP = 2,
		}

		/** Use the `CubeMap` set via `cube_map`. If this is set to `source`, the `samplerCube` port is ignored. */
		const SOURCE_TEXTURE: Source.SOURCE_TEXTURE;

		/** Use the `CubeMap` sampler reference passed via the `samplerCube` port. If this is set to `source`, the `cube_map` texture is ignored. */
		const SOURCE_PORT: Source.SOURCE_PORT;

		/** No hints are added to the uniform declaration. */
		const TYPE_DATA: TextureType.TYPE_DATA;

		/** Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion. */
		const TYPE_COLOR: TextureType.TYPE_COLOR;

		/** Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map. */
		const TYPE_NORMALMAP: TextureType.TYPE_NORMALMAP;
	}

	/** A `CubeMap` uniform node to be used within the visual shader graph.
	 Translated to `uniform samplerCube` in the shader language. The output value can be used as port for `VisualShaderNodeCubeMap`. */
	class VisualShaderNodeCubeMapUniform extends VisualShaderNodeTextureUniform {
	}
	namespace VisualShaderNodeCubeMapUniform {
	}

	/** Virtual class to define custom `VisualShaderNode`s for use in the Visual Shader Editor.
	 By inheriting this class you can create a custom `VisualShader` script addon which will be automatically added to the Visual Shader Editor. The `VisualShaderNode`'s behavior is defined by overriding the provided virtual methods.

	 In order for the node to be registered as an editor addon, you must use the `tool` keyword and provide a `class_name` for your custom script. For example:

	 ```gdscript
	 tool
	 extends VisualShaderNodeCustom
	 class_name VisualShaderNodeNoise
	 ``` */
	class VisualShaderNodeCustom extends VisualShaderNode {

		/** Override this method to define the category of the associated custom node in the Visual Shader Editor's members dialog.

		 Defining this method is **optional**. If not overridden, the node will be filed under the "Custom" category. */
		_get_category() : string;

		/** Override this method to define the actual shader code of the associated custom node. The shader code should be returned as a string, which can have multiple lines (the `"""` multiline string construct can be used for convenience).

		 The `input_vars` and `output_vars` arrays contain the string names of the various input and output variables, as defined by `_get_input_*` and `_get_output_*` virtual methods in this class.

		 The output ports can be assigned values in the shader code. For example, `return output_vars`0` + " = " + input_vars`0` + ";"`.

		 You can customize the generated code based on the shader `mode` (see `Shader.Mode`) and/or `type` (see `VisualShader.Type`).

		 Defining this method is **required**. */
		_get_code(input_vars: any[], output_vars: any[], mode: number, type: number) : string;

		/** Override this method to define the description of the associated custom node in the Visual Shader Editor's members dialog.

		 Defining this method is **optional**. */
		_get_description() : string;

		/** Override this method to add shader code on top of the global shader, to define your own standard library of reusable methods, varyings, constants, uniforms, etc. The shader code should be returned as a string, which can have multiple lines (the `"""` multiline string construct can be used for convenience).

		 Be careful with this functionality as it can cause name conflicts with other custom nodes, so be sure to give the defined entities unique names.

		 You can customize the generated code based on the shader `mode` (see `Shader.Mode`).

		 Defining this method is **optional**. */
		_get_global_code(mode: number) : string;

		/** Override this method to define the amount of input ports of the associated custom node.

		 Defining this method is **required**. If not overridden, the node has no input ports. */
		_get_input_port_count() : number;

		/** Override this method to define the names of input ports of the associated custom node. The names are used both for the input slots in the editor and as identifiers in the shader code, and are passed in the `input_vars` array in `_get_code`.

		 Defining this method is **optional**, but recommended. If not overridden, input ports are named as `"in" + str(port)`. */
		_get_input_port_name(port: number) : string;

		/** Override this method to define the returned type of each input port of the associated custom node (see `VisualShaderNode.PortType` for possible types).

		 Defining this method is **optional**, but recommended. If not overridden, input ports will return the `VisualShaderNode.PORT_TYPE_SCALAR` type. */
		_get_input_port_type(port: number) : number;

		/** Override this method to define the name of the associated custom node in the Visual Shader Editor's members dialog and graph.

		 Defining this method is **optional**, but recommended. If not overridden, the node will be named as "Unnamed". */
		_get_name() : string;

		/** Override this method to define the amount of output ports of the associated custom node.

		 Defining this method is **required**. If not overridden, the node has no output ports. */
		_get_output_port_count() : number;

		/** Override this method to define the names of output ports of the associated custom node. The names are used both for the output slots in the editor and as identifiers in the shader code, and are passed in the `output_vars` array in `_get_code`.

		 Defining this method is **optional**, but recommended. If not overridden, output ports are named as `"out" + str(port)`. */
		_get_output_port_name(port: number) : string;

		/** Override this method to define the returned type of each output port of the associated custom node (see `VisualShaderNode.PortType` for possible types).

		 Defining this method is **optional**, but recommended. If not overridden, output ports will return the `VisualShaderNode.PORT_TYPE_SCALAR` type. */
		_get_output_port_type(port: number) : number;

		/** Override this method to define the return icon of the associated custom node in the Visual Shader Editor's members dialog.

		 Defining this method is **optional**. If not overridden, no return icon is shown. */
		_get_return_icon_type() : number;

		/** Override this method to define the subcategory of the associated custom node in the Visual Shader Editor's members dialog.

		 Defining this method is **optional**. If not overridden, the node will be filed under the root of the main category (see `_get_category`). */
		_get_subcategory() : string;
	}
	namespace VisualShaderNodeCustom {
	}

	/** Calculates the determinant of a `Transform` within the visual shader graph.
	 Translates to `deteminant(x)` in the shader language. */
	class VisualShaderNodeDeterminant extends VisualShaderNode {
	}
	namespace VisualShaderNodeDeterminant {
	}

	/** Calculates a dot product of two vectors within the visual shader graph.
	 Translates to `dot(a, b)` in the shader language. */
	class VisualShaderNodeDotProduct extends VisualShaderNode {
	}
	namespace VisualShaderNodeDotProduct {
	}

	/** A custom visual shader graph expression written in Godot Shading Language.
	 Custom Godot Shading Language expression, with a custom amount of input and output ports.

	 The provided code is directly injected into the graph's matching shader function (`vertex`, `fragment`, or `light`), so it cannot be used to to declare functions, varyings, uniforms, or global constants. See `VisualShaderNodeGlobalExpression` for such global definitions. */
	class VisualShaderNodeExpression extends VisualShaderNodeGroupBase {

		/** An expression in Godot Shading Language, which will be injected at the start of the graph's matching shader function (`vertex`, `fragment`, or `light`), and thus cannot be used to declare functions, varyings, uniforms, or global constants. */
		expression: string;

		/** Getter of `expression` property */
		get_expression() : string;

		/** Setter of `expression` property */
		set_expression(p_value: string) : void;
	}
	namespace VisualShaderNodeExpression {
	}

	/** Returns the vector that points in the same direction as a reference vector within the visual shader graph.
	 Translates to `faceforward(N, I, Nref)` in the shader language. The function has three vector parameters: `N`, the vector to orient, `I`, the incident vector, and `Nref`, the reference vector. If the dot product of `I` and `Nref` is smaller than zero the return value is `N`. Otherwise `-N` is returned. */
	class VisualShaderNodeFaceForward extends VisualShaderNode {
	}
	namespace VisualShaderNodeFaceForward {
	}

	/** A Fresnel effect to be used within the visual shader graph.
	 Returns falloff based on the dot product of surface normal and view direction of camera (pass associated inputs to it). */
	class VisualShaderNodeFresnel extends VisualShaderNode {
	}
	namespace VisualShaderNodeFresnel {
	}

	/** A custom global visual shader graph expression written in Godot Shading Language.
	 Custom Godot Shader Language expression, which is placed on top of the generated shader. You can place various function definitions inside to call later in `VisualShaderNodeExpression`s (which are injected in the main shader functions). You can also declare varyings, uniforms and global constants. */
	class VisualShaderNodeGlobalExpression extends VisualShaderNodeExpression {
	}
	namespace VisualShaderNodeGlobalExpression {
	}

	/** Base class for a family of nodes with variable amount of input and output ports within the visual shader graph.
	 Currently, has no direct usage, use the derived classes instead. */
	class VisualShaderNodeGroupBase extends VisualShaderNode {

		/** The size of the node in the visual shader graph. */
		size: Vector2;

		/** Defines all input ports using a `String` formatted as a colon-separated list: `id,type,name;` (see `add_input_port`). */
		set_inputs(inputs: string) : void;

		/** Returns a `String` description of the input ports as as colon-separated list using the format `id,type,name;` (see `add_input_port`). */
		get_inputs() : string;

		/** Defines all output ports using a `String` formatted as a colon-separated list: `id,type,name;` (see `add_output_port`). */
		set_outputs(outputs: string) : void;

		/** Returns a `String` description of the output ports as as colon-separated list using the format `id,type,name;` (see `add_output_port`). */
		get_outputs() : string;

		/** Returns `true` if the specified port name does not override an existed port name and is valid within the shader. */
		is_valid_port_name(name: string) : boolean;

		/** Adds an input port with the specified `type` (see `VisualShaderNode.PortType`) and `name`. */
		add_input_port(id: number, type: number, name: string) : void;

		/** Removes the specified input port. */
		remove_input_port(id: number) : void;

		/** Returns the number of input ports in use. Alternative for `get_free_input_port_id`. */
		get_input_port_count() : number;

		/** Returns `true` if the specified input port exists. */
		has_input_port(id: number) : boolean;

		/** Removes all previously specified input ports. */
		clear_input_ports() : void;

		/** Adds an output port with the specified `type` (see `VisualShaderNode.PortType`) and `name`. */
		add_output_port(id: number, type: number, name: string) : void;

		/** Removes the specified output port. */
		remove_output_port(id: number) : void;

		/** Returns the number of output ports in use. Alternative for `get_free_output_port_id`. */
		get_output_port_count() : number;

		/** Returns `true` if the specified output port exists. */
		has_output_port(id: number) : boolean;

		/** Removes all previously specified output ports. */
		clear_output_ports() : void;

		/** Renames the specified input port. */
		set_input_port_name(id: number, name: string) : void;

		/** Sets the specified input port's type (see `VisualShaderNode.PortType`). */
		set_input_port_type(id: number, type: number) : void;

		/** Renames the specified output port. */
		set_output_port_name(id: number, name: string) : void;

		/** Sets the specified output port's type (see `VisualShaderNode.PortType`). */
		set_output_port_type(id: number, type: number) : void;

		/** Returns a free input port ID which can be used in `add_input_port`. */
		get_free_input_port_id() : number;

		/** Returns a free output port ID which can be used in `add_output_port`. */
		get_free_output_port_id() : number;

		/** Getter of `size` property */
		get_size() : Vector2;

		/** Setter of `size` property */
		set_size(p_value: Vector2) : void;
	}
	namespace VisualShaderNodeGroupBase {
	}

	/** 
	  */
	class VisualShaderNodeIf extends VisualShaderNode {
	}
	namespace VisualShaderNodeIf {
	}

	/** 
	 Gives access to input variables (built-ins) available for the shader. See the shading reference for the list of available built-ins for each shader type (check `Tutorials` section for link). */
	class VisualShaderNodeInput extends VisualShaderNode {

		/** One of the several input constants in lower-case style like: "vertex"(`VERTEX`) or "point_size"(`POINT_SIZE`). */
		input_name: string;

		/**  */
		get_input_real_name() : string;

		/** Getter of `input_name` property */
		get_input_name() : string;

		/** Setter of `input_name` property */
		set_input_name(p_value: string) : void;
	}
	namespace VisualShaderNodeInput {

		/**  */
		const input_type_changed: 'input_type_changed';
	}

	/** A boolean comparison operator to be used within the visual shader graph.
	 Returns the boolean result of the comparison between `INF` or `NaN` and a scalar parameter. */
	class VisualShaderNodeIs extends VisualShaderNode {

		/** The comparison function. See `Function` for options. */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeIs {
		enum Function {
			/** Comparison with `INF` (Infinity). */
			FUNC_IS_INF = 0,
			/** Comparison with `NaN` (Not a Number; denotes invalid numeric results, e.g. division by zero). */
			FUNC_IS_NAN = 1,
		}

		/** Comparison with `INF` (Infinity). */
		const FUNC_IS_INF: Function.FUNC_IS_INF;

		/** Comparison with `NaN` (Not a Number; denotes invalid numeric results, e.g. division by zero). */
		const FUNC_IS_NAN: Function.FUNC_IS_NAN;
	}

	/** Calculates an outer product of two vectors within the visual shader graph.
	 `OuterProduct` treats the first parameter `c` as a column vector (matrix with one column) and the second parameter `r` as a row vector (matrix with one row) and does a linear algebraic matrix multiply `c * r`, yielding a matrix whose number of rows is the number of components in `c` and whose number of columns is the number of components in `r`. */
	class VisualShaderNodeOuterProduct extends VisualShaderNode {
	}
	namespace VisualShaderNodeOuterProduct {
	}

	/** Represents the output shader parameters within the visual shader graph.
	 This visual shader node is present in all shader graphs in form of "Output" block with mutliple output value ports. */
	class VisualShaderNodeOutput extends VisualShaderNode {
	}
	namespace VisualShaderNodeOutput {
	}

	/** Clamps a scalar value within the visual shader graph.
	 Constrains a value to lie between `min` and `max` values. */
	class VisualShaderNodeScalarClamp extends VisualShaderNode {
	}
	namespace VisualShaderNodeScalarClamp {
	}

	/** 
	  */
	class VisualShaderNodeScalarConstant extends VisualShaderNode {

		/**  */
		constant: number;

		/** Getter of `constant` property */
		get_constant() : number;

		/** Setter of `constant` property */
		set_constant(p_value: number) : void;
	}
	namespace VisualShaderNodeScalarConstant {
	}

	/** Calculates a scalar derivative within the visual shader graph.
	 This node is only available in `Fragment` and `Light` visual shaders. */
	class VisualShaderNodeScalarDerivativeFunc extends VisualShaderNode {

		/** The derivative type. See `Function` for options. */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeScalarDerivativeFunc {
		enum Function {
			/** Sum of absolute derivative in `x` and `y`. */
			FUNC_SUM = 0,
			/** Derivative in `x` using local differencing. */
			FUNC_X = 1,
			/** Derivative in `y` using local differencing. */
			FUNC_Y = 2,
		}

		/** Sum of absolute derivative in `x` and `y`. */
		const FUNC_SUM: Function.FUNC_SUM;

		/** Derivative in `x` using local differencing. */
		const FUNC_X: Function.FUNC_X;

		/** Derivative in `y` using local differencing. */
		const FUNC_Y: Function.FUNC_Y;
	}

	/** 
	  */
	class VisualShaderNodeScalarFunc extends VisualShaderNode {

		/**  */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeScalarFunc {
		enum Function {
			/**  */
			FUNC_SIN = 0,
			/**  */
			FUNC_COS = 1,
			/**  */
			FUNC_TAN = 2,
			/**  */
			FUNC_ASIN = 3,
			/**  */
			FUNC_ACOS = 4,
			/**  */
			FUNC_ATAN = 5,
			/**  */
			FUNC_SINH = 6,
			/**  */
			FUNC_COSH = 7,
			/**  */
			FUNC_TANH = 8,
			/**  */
			FUNC_LOG = 9,
			/**  */
			FUNC_EXP = 10,
			/**  */
			FUNC_SQRT = 11,
			/**  */
			FUNC_ABS = 12,
			/**  */
			FUNC_SIGN = 13,
			/**  */
			FUNC_FLOOR = 14,
			/**  */
			FUNC_ROUND = 15,
			/**  */
			FUNC_CEIL = 16,
			/**  */
			FUNC_FRAC = 17,
			/**  */
			FUNC_SATURATE = 18,
			/**  */
			FUNC_NEGATE = 19,
			/**  */
			FUNC_ACOSH = 20,
			/**  */
			FUNC_ASINH = 21,
			/**  */
			FUNC_ATANH = 22,
			/**  */
			FUNC_DEGREES = 23,
			/**  */
			FUNC_EXP2 = 24,
			/**  */
			FUNC_INVERSE_SQRT = 25,
			/**  */
			FUNC_LOG2 = 26,
			/**  */
			FUNC_RADIANS = 27,
			/**  */
			FUNC_RECIPROCAL = 28,
			/**  */
			FUNC_ROUNDEVEN = 29,
			/**  */
			FUNC_TRUNC = 30,
			/**  */
			FUNC_ONEMINUS = 31,
		}

		/**  */
		const FUNC_SIN: Function.FUNC_SIN;

		/**  */
		const FUNC_COS: Function.FUNC_COS;

		/**  */
		const FUNC_TAN: Function.FUNC_TAN;

		/**  */
		const FUNC_ASIN: Function.FUNC_ASIN;

		/**  */
		const FUNC_ACOS: Function.FUNC_ACOS;

		/**  */
		const FUNC_ATAN: Function.FUNC_ATAN;

		/**  */
		const FUNC_SINH: Function.FUNC_SINH;

		/**  */
		const FUNC_COSH: Function.FUNC_COSH;

		/**  */
		const FUNC_TANH: Function.FUNC_TANH;

		/**  */
		const FUNC_LOG: Function.FUNC_LOG;

		/**  */
		const FUNC_EXP: Function.FUNC_EXP;

		/**  */
		const FUNC_SQRT: Function.FUNC_SQRT;

		/**  */
		const FUNC_ABS: Function.FUNC_ABS;

		/**  */
		const FUNC_SIGN: Function.FUNC_SIGN;

		/**  */
		const FUNC_FLOOR: Function.FUNC_FLOOR;

		/**  */
		const FUNC_ROUND: Function.FUNC_ROUND;

		/**  */
		const FUNC_CEIL: Function.FUNC_CEIL;

		/**  */
		const FUNC_FRAC: Function.FUNC_FRAC;

		/**  */
		const FUNC_SATURATE: Function.FUNC_SATURATE;

		/**  */
		const FUNC_NEGATE: Function.FUNC_NEGATE;

		/**  */
		const FUNC_ACOSH: Function.FUNC_ACOSH;

		/**  */
		const FUNC_ASINH: Function.FUNC_ASINH;

		/**  */
		const FUNC_ATANH: Function.FUNC_ATANH;

		/**  */
		const FUNC_DEGREES: Function.FUNC_DEGREES;

		/**  */
		const FUNC_EXP2: Function.FUNC_EXP2;

		/**  */
		const FUNC_INVERSE_SQRT: Function.FUNC_INVERSE_SQRT;

		/**  */
		const FUNC_LOG2: Function.FUNC_LOG2;

		/**  */
		const FUNC_RADIANS: Function.FUNC_RADIANS;

		/**  */
		const FUNC_RECIPROCAL: Function.FUNC_RECIPROCAL;

		/**  */
		const FUNC_ROUNDEVEN: Function.FUNC_ROUNDEVEN;

		/**  */
		const FUNC_TRUNC: Function.FUNC_TRUNC;

		/**  */
		const FUNC_ONEMINUS: Function.FUNC_ONEMINUS;
	}

	/** Linearly interpolates between two scalars within the visual shader graph.
	 Translates to `mix(a, b, weight)` in the shader language. */
	class VisualShaderNodeScalarInterp extends VisualShaderNode {
	}
	namespace VisualShaderNodeScalarInterp {
	}

	/** 
	  */
	class VisualShaderNodeScalarOp extends VisualShaderNode {

		/**  */
		operator: number;

		/** Getter of `operator` property */
		get_operator() : number;

		/** Setter of `operator` property */
		set_operator(p_value: number) : void;
	}
	namespace VisualShaderNodeScalarOp {
		enum Operator {
			/**  */
			OP_ADD = 0,
			/**  */
			OP_SUB = 1,
			/**  */
			OP_MUL = 2,
			/**  */
			OP_DIV = 3,
			/**  */
			OP_MOD = 4,
			/**  */
			OP_POW = 5,
			/**  */
			OP_MAX = 6,
			/**  */
			OP_MIN = 7,
			/**  */
			OP_ATAN2 = 8,
			/**  */
			OP_STEP = 9,
		}

		/**  */
		const OP_ADD: Operator.OP_ADD;

		/**  */
		const OP_SUB: Operator.OP_SUB;

		/**  */
		const OP_MUL: Operator.OP_MUL;

		/**  */
		const OP_DIV: Operator.OP_DIV;

		/**  */
		const OP_MOD: Operator.OP_MOD;

		/**  */
		const OP_POW: Operator.OP_POW;

		/**  */
		const OP_MAX: Operator.OP_MAX;

		/**  */
		const OP_MIN: Operator.OP_MIN;

		/**  */
		const OP_ATAN2: Operator.OP_ATAN2;

		/**  */
		const OP_STEP: Operator.OP_STEP;
	}

	/** Calculates a scalar SmoothStep function within the visual shader graph.
	 Translates to `smoothstep(edge0, edge1, x)` in the shader language.

	 Returns `0.0` if `x` is smaller than `edge0` and `1.0` if `x` is larger than `edge1`. Otherwise the return value is interpolated between `0.0` and `1.0` using Hermite polynomials. */
	class VisualShaderNodeScalarSmoothStep extends VisualShaderNode {
	}
	namespace VisualShaderNodeScalarSmoothStep {
	}

	/** A boolean/scalar function for use within the visual shader graph.
	 Returns an associated scalar if the provided boolean value is `true` or `false`. */
	class VisualShaderNodeScalarSwitch extends VisualShaderNodeSwitch {
	}
	namespace VisualShaderNodeScalarSwitch {
	}

	/** 
	  */
	class VisualShaderNodeScalarUniform extends VisualShaderNodeUniform {
	}
	namespace VisualShaderNodeScalarUniform {
	}

	/** A boolean/vector function for use within the visual shader graph.
	 Returns an associated vector if the provided boolean value is `true` or `false`. */
	class VisualShaderNodeSwitch extends VisualShaderNode {
	}
	namespace VisualShaderNodeSwitch {
	}

	/** Performs a texture lookup within the visual shader graph.
	 Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from. */
	class VisualShaderNodeTexture extends VisualShaderNode {

		/** Determines the source for the lookup. See `Source` for options. */
		source: number;

		/** The source texture, if needed for the selected `source`. */
		texture: Texture;

		/** Specifies the type of the texture if `source` is set to `SOURCE_TEXTURE`. See `TextureType` for options. */
		texture_type: number;

		/** Getter of `source` property */
		get_source() : number;

		/** Setter of `source` property */
		set_source(p_value: number) : void;

		/** Getter of `texture` property */
		get_texture() : Texture;

		/** Setter of `texture` property */
		set_texture(p_value: Texture) : void;

		/** Getter of `texture_type` property */
		get_texture_type() : number;

		/** Setter of `texture_type` property */
		set_texture_type(p_value: number) : void;
	}
	namespace VisualShaderNodeTexture {
		enum Source {
			/** Use the texture given as an argument for this function. */
			SOURCE_TEXTURE = 0,
			/** Use the current viewport's texture as the source. */
			SOURCE_SCREEN = 1,
			/** Use the texture from this shader's texture built-in (e.g. a texture of a `Sprite`). */
			SOURCE_2D_TEXTURE = 2,
			/** Use the texture from this shader's normal map built-in. */
			SOURCE_2D_NORMAL = 3,
			/** Use the depth texture available for this shader. */
			SOURCE_DEPTH = 4,
			/** Use the texture provided in the input port for this function. */
			SOURCE_PORT = 5,
		}
		enum TextureType {
			/** No hints are added to the uniform declaration. */
			TYPE_DATA = 0,
			/** Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion. */
			TYPE_COLOR = 1,
			/** Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map. */
			TYPE_NORMALMAP = 2,
		}

		/** Use the texture given as an argument for this function. */
		const SOURCE_TEXTURE: Source.SOURCE_TEXTURE;

		/** Use the current viewport's texture as the source. */
		const SOURCE_SCREEN: Source.SOURCE_SCREEN;

		/** Use the texture from this shader's texture built-in (e.g. a texture of a `Sprite`). */
		const SOURCE_2D_TEXTURE: Source.SOURCE_2D_TEXTURE;

		/** Use the texture from this shader's normal map built-in. */
		const SOURCE_2D_NORMAL: Source.SOURCE_2D_NORMAL;

		/** Use the depth texture available for this shader. */
		const SOURCE_DEPTH: Source.SOURCE_DEPTH;

		/** Use the texture provided in the input port for this function. */
		const SOURCE_PORT: Source.SOURCE_PORT;

		/** No hints are added to the uniform declaration. */
		const TYPE_DATA: TextureType.TYPE_DATA;

		/** Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion. */
		const TYPE_COLOR: TextureType.TYPE_COLOR;

		/** Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map. */
		const TYPE_NORMALMAP: TextureType.TYPE_NORMALMAP;
	}

	/** Performs a uniform texture lookup within the visual shader graph.
	 Performs a lookup operation on the texture provided as a uniform for the shader. */
	class VisualShaderNodeTextureUniform extends VisualShaderNodeUniform {

		/** Defines the type of data provided by the source texture. See `TextureType` for options. */
		texture_type: number;

		/** Sets the default color if no texture is assigned to the uniform. */
		color_default: number;

		/** Getter of `texture_type` property */
		get_texture_type() : number;

		/** Setter of `texture_type` property */
		set_texture_type(p_value: number) : void;

		/** Getter of `color_default` property */
		get_color_default() : number;

		/** Setter of `color_default` property */
		set_color_default(p_value: number) : void;
	}
	namespace VisualShaderNodeTextureUniform {
		enum ColorDefault {
			/** Defaults to white color. */
			COLOR_DEFAULT_WHITE = 0,
			/** Defaults to black color. */
			COLOR_DEFAULT_BLACK = 1,
		}
		enum TextureType {
			/** No hints are added to the uniform declaration. */
			TYPE_DATA = 0,
			/** Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion. */
			TYPE_COLOR = 1,
			/** Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map. */
			TYPE_NORMALMAP = 2,
			/** Adds `hint_aniso` as hint to the uniform declaration to use for a flowmap. */
			TYPE_ANISO = 3,
		}

		/** No hints are added to the uniform declaration. */
		const TYPE_DATA: TextureType.TYPE_DATA;

		/** Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion. */
		const TYPE_COLOR: TextureType.TYPE_COLOR;

		/** Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map. */
		const TYPE_NORMALMAP: TextureType.TYPE_NORMALMAP;

		/** Adds `hint_aniso` as hint to the uniform declaration to use for a flowmap. */
		const TYPE_ANISO: TextureType.TYPE_ANISO;

		/** Defaults to white color. */
		const COLOR_DEFAULT_WHITE: ColorDefault.COLOR_DEFAULT_WHITE;

		/** Defaults to black color. */
		const COLOR_DEFAULT_BLACK: ColorDefault.COLOR_DEFAULT_BLACK;
	}

	/** Performs a uniform texture lookup with triplanar within the visual shader graph.
	 Performs a lookup operation on the texture provided as a uniform for the shader, with support for triplanar mapping. */
	class VisualShaderNodeTextureUniformTriplanar extends VisualShaderNodeTextureUniform {
	}
	namespace VisualShaderNodeTextureUniformTriplanar {
	}

	/** Composes a `Transform` from four `Vector3`s within the visual shader graph.
	 Creates a 4x4 transform matrix using four vectors of type `vec3`. Each vector is one row in the matrix and the last column is a `vec4(0, 0, 0, 1)`. */
	class VisualShaderNodeTransformCompose extends VisualShaderNode {
	}
	namespace VisualShaderNodeTransformCompose {
	}

	/** A `Transform` constant for use within the visual shader graph.
	 A constant `Transform`, which can be used as an input node. */
	class VisualShaderNodeTransformConstant extends VisualShaderNode {

		/** A `Transform` constant which represents the state of this node. */
		constant: Transform;

		/** Getter of `constant` property */
		get_constant() : Transform;

		/** Setter of `constant` property */
		set_constant(p_value: Transform) : void;
	}
	namespace VisualShaderNodeTransformConstant {
	}

	/** Decomposes a `Transform` into four `Vector3`s within the visual shader graph.
	 Takes a 4x4 transform matrix and decomposes it into four `vec3` values, one from each row of the matrix. */
	class VisualShaderNodeTransformDecompose extends VisualShaderNode {
	}
	namespace VisualShaderNodeTransformDecompose {
	}

	/** Computes a `Transform` function within the visual shader graph.
	 Computes an inverse or transpose function on the provided `Transform`. */
	class VisualShaderNodeTransformFunc extends VisualShaderNode {

		/** The function to be computed. See `Function` for options. */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeTransformFunc {
		enum Function {
			/** Perform the inverse operation on the `Transform` matrix. */
			FUNC_INVERSE = 0,
			/** Perform the transpose operation on the `Transform` matrix. */
			FUNC_TRANSPOSE = 1,
		}

		/** Perform the inverse operation on the `Transform` matrix. */
		const FUNC_INVERSE: Function.FUNC_INVERSE;

		/** Perform the transpose operation on the `Transform` matrix. */
		const FUNC_TRANSPOSE: Function.FUNC_TRANSPOSE;
	}

	/** Multiplies `Transform` by `Transform` within the visual shader graph.
	 A multiplication operation on two transforms (4x4 matrices), with support for different multiplication operators. */
	class VisualShaderNodeTransformMult extends VisualShaderNode {

		/** The multiplication type to be performed on the transforms. See `Operator` for options. */
		operator: number;

		/** Getter of `operator` property */
		get_operator() : number;

		/** Setter of `operator` property */
		set_operator(p_value: number) : void;
	}
	namespace VisualShaderNodeTransformMult {
		enum Operator {
			/** Multiplies transform `a` by the transform `b`. */
			OP_AxB = 0,
			/** Multiplies transform `b` by the transform `a`. */
			OP_BxA = 1,
			/** Performs a component-wise multiplication of transform `a` by the transform `b`. */
			OP_AxB_COMP = 2,
			/** Performs a component-wise multiplication of transform `b` by the transform `a`. */
			OP_BxA_COMP = 3,
		}

		/** Multiplies transform `a` by the transform `b`. */
		const OP_AxB: Operator.OP_AxB;

		/** Multiplies transform `b` by the transform `a`. */
		const OP_BxA: Operator.OP_BxA;

		/** Performs a component-wise multiplication of transform `a` by the transform `b`. */
		const OP_AxB_COMP: Operator.OP_AxB_COMP;

		/** Performs a component-wise multiplication of transform `b` by the transform `a`. */
		const OP_BxA_COMP: Operator.OP_BxA_COMP;
	}

	/** A `Transform` uniform for use within the visual shader graph.
	 Translated to `uniform mat4` in the shader language. */
	class VisualShaderNodeTransformUniform extends VisualShaderNodeUniform {
	}
	namespace VisualShaderNodeTransformUniform {
	}

	/** Multiplies a `Transform` and a `Vector3` within the visual shader graph.
	 A multiplication operation on a transform (4x4 matrix) and a vector, with support for different multiplication operators. */
	class VisualShaderNodeTransformVecMult extends VisualShaderNode {

		/** The multiplication type to be performed. See `Operator` for options. */
		operator: number;

		/** Getter of `operator` property */
		get_operator() : number;

		/** Setter of `operator` property */
		set_operator(p_value: number) : void;
	}
	namespace VisualShaderNodeTransformVecMult {
		enum Operator {
			/** Multiplies transform `a` by the vector `b`. */
			OP_AxB = 0,
			/** Multiplies vector `b` by the transform `a`. */
			OP_BxA = 1,
			/** Multiplies transform `a` by the vector `b`, skipping the last row and column of the transform. */
			OP_3x3_AxB = 2,
			/** Multiplies vector `b` by the transform `a`, skipping the last row and column of the transform. */
			OP_3x3_BxA = 3,
		}

		/** Multiplies transform `a` by the vector `b`. */
		const OP_AxB: Operator.OP_AxB;

		/** Multiplies vector `b` by the transform `a`. */
		const OP_BxA: Operator.OP_BxA;

		/** Multiplies transform `a` by the vector `b`, skipping the last row and column of the transform. */
		const OP_3x3_AxB: Operator.OP_3x3_AxB;

		/** Multiplies vector `b` by the transform `a`, skipping the last row and column of the transform. */
		const OP_3x3_BxA: Operator.OP_3x3_BxA;
	}

	/** A base type for the uniforms within the visual shader graph.
	 A uniform represents a variable in the shader which is set externally, i.e. from the `ShaderMaterial`. Uniforms are exposed as properties in the `ShaderMaterial` and can be assigned from the inspector or from a script. */
	class VisualShaderNodeUniform extends VisualShaderNode {

		/** Name of the uniform, by which it can be accessed through the `ShaderMaterial` properties. */
		uniform_name: string;

		/** Getter of `uniform_name` property */
		get_uniform_name() : string;

		/** Setter of `uniform_name` property */
		set_uniform_name(p_value: string) : void;
	}
	namespace VisualShaderNodeUniform {
	}

	/** A `Vector3` constant to be used within the visual shader graph.
	 A constant `Vector3`, which can be used as an input node. */
	class VisualShaderNodeVec3Constant extends VisualShaderNode {

		/** A `Vector3` constant which represents the state of this node. */
		constant: Vector3;

		/** Getter of `constant` property */
		get_constant() : Vector3;

		/** Setter of `constant` property */
		set_constant(p_value: Vector3) : void;
	}
	namespace VisualShaderNodeVec3Constant {
	}

	/** A `Vector3` uniform to be used within the visual shader graph.
	 Translated to `uniform vec3` in the shader language. */
	class VisualShaderNodeVec3Uniform extends VisualShaderNodeUniform {
	}
	namespace VisualShaderNodeVec3Uniform {
	}

	/** Clamps a vector value within the visual shader graph.
	 Constrains a value to lie between `min` and `max` values. The operation is performed on each component of the vector individually. */
	class VisualShaderNodeVectorClamp extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorClamp {
	}

	/** Composes a `Vector3` from three scalars within the visual shader graph.
	 Creates a `vec3` using three scalar values that can be provided from separate inputs. */
	class VisualShaderNodeVectorCompose extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorCompose {
	}

	/** Decomposes a `Vector3` into three scalars within the visual shader graph.
	 Takes a `vec3` and decomposes it into three scalar values that can be used as separate inputs. */
	class VisualShaderNodeVectorDecompose extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorDecompose {
	}

	/** Calculates a vector derivative within the visual shader graph.
	 This node is only available in `Fragment` and `Light` visual shaders. */
	class VisualShaderNodeVectorDerivativeFunc extends VisualShaderNode {

		/** A derivative type. See `Function` for options. */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeVectorDerivativeFunc {
		enum Function {
			/** Sum of absolute derivative in `x` and `y`. */
			FUNC_SUM = 0,
			/** Derivative in `x` using local differencing. */
			FUNC_X = 1,
			/** Derivative in `y` using local differencing. */
			FUNC_Y = 2,
		}

		/** Sum of absolute derivative in `x` and `y`. */
		const FUNC_SUM: Function.FUNC_SUM;

		/** Derivative in `x` using local differencing. */
		const FUNC_X: Function.FUNC_X;

		/** Derivative in `y` using local differencing. */
		const FUNC_Y: Function.FUNC_Y;
	}

	/** Returns the distance between two points. To be used within the visual shader graph.
	 Calculates distance from point represented by vector `p0` to vector `p1`.

	 Translated to `distance(p0, p1)` in the shader language. */
	class VisualShaderNodeVectorDistance extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorDistance {
	}

	/** A vector function to be used within the visual shader graph.
	 A visual shader node able to perform different functions using vectors. */
	class VisualShaderNodeVectorFunc extends VisualShaderNode {

		/** The function to be performed. See `Function` for options. */
		'function': number;

		/** Getter of `function` property */
		get_function() : number;

		/** Setter of `function` property */
		set_function(p_value: number) : void;
	}
	namespace VisualShaderNodeVectorFunc {
		enum Function {
			/** Normalizes the vector so that it has a length of `1` but points in the same direction. */
			FUNC_NORMALIZE = 0,
			/** Clamps the value between `0.0` and `1.0`. */
			FUNC_SATURATE = 1,
			/** Returns the opposite value of the parameter. */
			FUNC_NEGATE = 2,
			/** Returns `1/vector`. */
			FUNC_RECIPROCAL = 3,
			/** Converts RGB vector to HSV equivalent. */
			FUNC_RGB2HSV = 4,
			/** Converts HSV vector to RGB equivalent. */
			FUNC_HSV2RGB = 5,
			/** Returns the absolute value of the parameter. */
			FUNC_ABS = 6,
			/** Returns the arc-cosine of the parameter. */
			FUNC_ACOS = 7,
			/** Returns the inverse hyperbolic cosine of the parameter. */
			FUNC_ACOSH = 8,
			/** Returns the arc-sine of the parameter. */
			FUNC_ASIN = 9,
			/** Returns the inverse hyperbolic sine of the parameter. */
			FUNC_ASINH = 10,
			/** Returns the arc-tangent of the parameter. */
			FUNC_ATAN = 11,
			/** Returns the inverse hyperbolic tangent of the parameter. */
			FUNC_ATANH = 12,
			/** Finds the nearest integer that is greater than or equal to the parameter. */
			FUNC_CEIL = 13,
			/** Returns the cosine of the parameter. */
			FUNC_COS = 14,
			/** Returns the hyperbolic cosine of the parameter. */
			FUNC_COSH = 15,
			/** Converts a quantity in radians to degrees. */
			FUNC_DEGREES = 16,
			/** Base-e Exponential. */
			FUNC_EXP = 17,
			/** Base-2 Exponential. */
			FUNC_EXP2 = 18,
			/** Finds the nearest integer less than or equal to the parameter. */
			FUNC_FLOOR = 19,
			/** Computes the fractional part of the argument. */
			FUNC_FRAC = 20,
			/** Returns the inverse of the square root of the parameter. */
			FUNC_INVERSE_SQRT = 21,
			/** Natural logarithm. */
			FUNC_LOG = 22,
			/** Base-2 logarithm. */
			FUNC_LOG2 = 23,
			/** Converts a quantity in degrees to radians. */
			FUNC_RADIANS = 24,
			/** Finds the nearest integer to the parameter. */
			FUNC_ROUND = 25,
			/** Finds the nearest even integer to the parameter. */
			FUNC_ROUNDEVEN = 26,
			/** Extracts the sign of the parameter, i.e. returns `-1` if the parameter is negative, `1` if it's positive and `0` otherwise. */
			FUNC_SIGN = 27,
			/** Returns the sine of the parameter. */
			FUNC_SIN = 28,
			/** Returns the hyperbolic sine of the parameter. */
			FUNC_SINH = 29,
			/** Returns the square root of the parameter. */
			FUNC_SQRT = 30,
			/** Returns the tangent of the parameter. */
			FUNC_TAN = 31,
			/** Returns the hyperbolic tangent of the parameter. */
			FUNC_TANH = 32,
			/** Returns a value equal to the nearest integer to the parameter whose absolute value is not larger than the absolute value of the parameter. */
			FUNC_TRUNC = 33,
			/** Returns `1.0 - vector`. */
			FUNC_ONEMINUS = 34,
		}

		/** Normalizes the vector so that it has a length of `1` but points in the same direction. */
		const FUNC_NORMALIZE: Function.FUNC_NORMALIZE;

		/** Clamps the value between `0.0` and `1.0`. */
		const FUNC_SATURATE: Function.FUNC_SATURATE;

		/** Returns the opposite value of the parameter. */
		const FUNC_NEGATE: Function.FUNC_NEGATE;

		/** Returns `1/vector`. */
		const FUNC_RECIPROCAL: Function.FUNC_RECIPROCAL;

		/** Converts RGB vector to HSV equivalent. */
		const FUNC_RGB2HSV: Function.FUNC_RGB2HSV;

		/** Converts HSV vector to RGB equivalent. */
		const FUNC_HSV2RGB: Function.FUNC_HSV2RGB;

		/** Returns the absolute value of the parameter. */
		const FUNC_ABS: Function.FUNC_ABS;

		/** Returns the arc-cosine of the parameter. */
		const FUNC_ACOS: Function.FUNC_ACOS;

		/** Returns the inverse hyperbolic cosine of the parameter. */
		const FUNC_ACOSH: Function.FUNC_ACOSH;

		/** Returns the arc-sine of the parameter. */
		const FUNC_ASIN: Function.FUNC_ASIN;

		/** Returns the inverse hyperbolic sine of the parameter. */
		const FUNC_ASINH: Function.FUNC_ASINH;

		/** Returns the arc-tangent of the parameter. */
		const FUNC_ATAN: Function.FUNC_ATAN;

		/** Returns the inverse hyperbolic tangent of the parameter. */
		const FUNC_ATANH: Function.FUNC_ATANH;

		/** Finds the nearest integer that is greater than or equal to the parameter. */
		const FUNC_CEIL: Function.FUNC_CEIL;

		/** Returns the cosine of the parameter. */
		const FUNC_COS: Function.FUNC_COS;

		/** Returns the hyperbolic cosine of the parameter. */
		const FUNC_COSH: Function.FUNC_COSH;

		/** Converts a quantity in radians to degrees. */
		const FUNC_DEGREES: Function.FUNC_DEGREES;

		/** Base-e Exponential. */
		const FUNC_EXP: Function.FUNC_EXP;

		/** Base-2 Exponential. */
		const FUNC_EXP2: Function.FUNC_EXP2;

		/** Finds the nearest integer less than or equal to the parameter. */
		const FUNC_FLOOR: Function.FUNC_FLOOR;

		/** Computes the fractional part of the argument. */
		const FUNC_FRAC: Function.FUNC_FRAC;

		/** Returns the inverse of the square root of the parameter. */
		const FUNC_INVERSE_SQRT: Function.FUNC_INVERSE_SQRT;

		/** Natural logarithm. */
		const FUNC_LOG: Function.FUNC_LOG;

		/** Base-2 logarithm. */
		const FUNC_LOG2: Function.FUNC_LOG2;

		/** Converts a quantity in degrees to radians. */
		const FUNC_RADIANS: Function.FUNC_RADIANS;

		/** Finds the nearest integer to the parameter. */
		const FUNC_ROUND: Function.FUNC_ROUND;

		/** Finds the nearest even integer to the parameter. */
		const FUNC_ROUNDEVEN: Function.FUNC_ROUNDEVEN;

		/** Extracts the sign of the parameter, i.e. returns `-1` if the parameter is negative, `1` if it's positive and `0` otherwise. */
		const FUNC_SIGN: Function.FUNC_SIGN;

		/** Returns the sine of the parameter. */
		const FUNC_SIN: Function.FUNC_SIN;

		/** Returns the hyperbolic sine of the parameter. */
		const FUNC_SINH: Function.FUNC_SINH;

		/** Returns the square root of the parameter. */
		const FUNC_SQRT: Function.FUNC_SQRT;

		/** Returns the tangent of the parameter. */
		const FUNC_TAN: Function.FUNC_TAN;

		/** Returns the hyperbolic tangent of the parameter. */
		const FUNC_TANH: Function.FUNC_TANH;

		/** Returns a value equal to the nearest integer to the parameter whose absolute value is not larger than the absolute value of the parameter. */
		const FUNC_TRUNC: Function.FUNC_TRUNC;

		/** Returns `1.0 - vector`. */
		const FUNC_ONEMINUS: Function.FUNC_ONEMINUS;
	}

	/** Linearly interpolates between two vectors within the visual shader graph.
	 Translates to `mix(a, b, weight)` in the shader language, where `weight` is a `Vector3` with weights for each component. */
	class VisualShaderNodeVectorInterp extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorInterp {
	}

	/** Returns the length of a `Vector3` within the visual shader graph.
	 Translated to `length(p0)` in the shader language. */
	class VisualShaderNodeVectorLen extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorLen {
	}

	/** A vector operator to be used within the visual shader graph.
	 A visual shader node for use of vector operators. Operates on vector `a` and vector `b`. */
	class VisualShaderNodeVectorOp extends VisualShaderNode {

		/** The operator to be used. See `Operator` for options. */
		operator: number;

		/** Getter of `operator` property */
		get_operator() : number;

		/** Setter of `operator` property */
		set_operator(p_value: number) : void;
	}
	namespace VisualShaderNodeVectorOp {
		enum Operator {
			/** Adds two vectors. */
			OP_ADD = 0,
			/** Subtracts a vector from a vector. */
			OP_SUB = 1,
			/** Multiplies two vectors. */
			OP_MUL = 2,
			/** Divides vector by vector. */
			OP_DIV = 3,
			/** Returns the remainder of the two vectors. */
			OP_MOD = 4,
			/** Returns the value of the first parameter raised to the power of the second, for each component of the vectors. */
			OP_POW = 5,
			/** Returns the greater of two values, for each component of the vectors. */
			OP_MAX = 6,
			/** Returns the lesser of two values, for each component of the vectors. */
			OP_MIN = 7,
			/** Calculates the cross product of two vectors. */
			OP_CROSS = 8,
			/** Returns the arc-tangent of the parameters. */
			OP_ATAN2 = 9,
			/** Returns the vector that points in the direction of reflection. `a` is incident vector and `b` is the normal vector. */
			OP_REFLECT = 10,
			/** Vector step operator. Returns `0.0` if `a` is smaller than `b` and `1.0` otherwise. */
			OP_STEP = 11,
		}

		/** Adds two vectors. */
		const OP_ADD: Operator.OP_ADD;

		/** Subtracts a vector from a vector. */
		const OP_SUB: Operator.OP_SUB;

		/** Multiplies two vectors. */
		const OP_MUL: Operator.OP_MUL;

		/** Divides vector by vector. */
		const OP_DIV: Operator.OP_DIV;

		/** Returns the remainder of the two vectors. */
		const OP_MOD: Operator.OP_MOD;

		/** Returns the value of the first parameter raised to the power of the second, for each component of the vectors. */
		const OP_POW: Operator.OP_POW;

		/** Returns the greater of two values, for each component of the vectors. */
		const OP_MAX: Operator.OP_MAX;

		/** Returns the lesser of two values, for each component of the vectors. */
		const OP_MIN: Operator.OP_MIN;

		/** Calculates the cross product of two vectors. */
		const OP_CROSS: Operator.OP_CROSS;

		/** Returns the arc-tangent of the parameters. */
		const OP_ATAN2: Operator.OP_ATAN2;

		/** Returns the vector that points in the direction of reflection. `a` is incident vector and `b` is the normal vector. */
		const OP_REFLECT: Operator.OP_REFLECT;

		/** Vector step operator. Returns `0.0` if `a` is smaller than `b` and `1.0` otherwise. */
		const OP_STEP: Operator.OP_STEP;
	}

	/** Returns the `Vector3` that points in the direction of refraction. For use within the visual shader graph.
	 Translated to `refract(I, N, eta)` in the shader language, where `I` is the incident vector, `N` is the normal vector and `eta` is the ratio of the indicies of the refraction. */
	class VisualShaderNodeVectorRefract extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorRefract {
	}

	/** Linearly interpolates between two vectors using a scalar. For use within the visual shader graph.
	 Translates to `mix(a, b, weight)` in the shader language, where `a` and `b` are vectors and `weight` is a scalar. */
	class VisualShaderNodeVectorScalarMix extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorScalarMix {
	}

	/** Calculates a vector SmoothStep function using scalar within the visual shader graph.
	 Translates to `smoothstep(edge0, edge1, x)` in the shader language, where `x` is a scalar.

	 Returns `0.0` if `x` is smaller than `edge0` and `1.0` if `x` is larger than `edge1`. Otherwise the return value is interpolated between `0.0` and `1.0` using Hermite polynomials. */
	class VisualShaderNodeVectorScalarSmoothStep extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorScalarSmoothStep {
	}

	/** Calculates a vector Step function within the visual shader graph.
	 Translates to `step(edge, x)` in the shader language.

	 Returns `0.0` if `x` is smaller than `edge` and `1.0` otherwise. */
	class VisualShaderNodeVectorScalarStep extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorScalarStep {
	}

	/** Calculates a vector SmoothStep function within the visual shader graph.
	 Translates to `smoothstep(edge0, edge1, x)` in the shader language, where `x` is a vector.

	 Returns `0.0` if `x` is smaller than `edge0` and `1.0` if `x` is larger than `edge1`. Otherwise the return value is interpolated between `0.0` and `1.0` using Hermite polynomials. */
	class VisualShaderNodeVectorSmoothStep extends VisualShaderNode {
	}
	namespace VisualShaderNodeVectorSmoothStep {
	}

	/** Holds an `Object`, but does not contribute to the reference count if the object is a reference.
	 A weakref can hold a `Reference`, without contributing to the reference counter. A weakref can be created from an `Object` using `@GDScript.weakref`. If this object is not a reference, weakref still works, however, it does not have any effect on the object. Weakrefs are useful in cases where multiple classes have variables that refer to each other. Without weakrefs, using these classes could lead to memory leaks, since both references keep each other from being released. Making part of the variables a weakref can prevent this cyclic dependency, and allows the references to be released. */
	class WeakRef extends Reference {

		/** Returns the `Object` this weakref is referring to. */
		get_ref() : any;
	}
	namespace WeakRef {
	}

	/** 
	  */
	class WebRTCDataChannel extends PacketPeer {

		/** The transfer mode to use when sending outgoing packet. Either text or binary. */
		write_mode: number;

		/** Reserved, but not used for now. */
		poll() : number;

		/** Closes this data channel, notifying the other peer. */
		close() : void;

		/** Returns `true` if the last received packet was transferred as text. See `write_mode`. */
		was_string_packet() : boolean;

		/** Returns the current state of this channel, see `ChannelState`. */
		get_ready_state() : number;

		/** Returns the label assigned to this channel during creation. */
		get_label() : string;

		/** Returns `true` if this channel was created with ordering enabled (default). */
		is_ordered() : boolean;

		/** Returns the id assigned to this channel during creation (or auto-assigned during negotiation).

		 If the channel is not negotiated out-of-band the id will only be available after the connection is established (will return `65535` until then). */
		get_id() : number;

		/** Returns the `maxPacketLifeTime` value assigned to this channel during creation.

		 Will be `65535` if not specified. */
		get_max_packet_life_time() : number;

		/** Returns the `maxRetransmits` value assigned to this channel during creation.

		 Will be `65535` if not specified. */
		get_max_retransmits() : number;

		/** Returns the sub-protocol assigned to this channel during creation. An empty string if not specified. */
		get_protocol() : string;

		/** Returns `true` if this channel was created with out-of-band configuration. */
		is_negotiated() : boolean;

		/** Getter of `write_mode` property */
		get_write_mode() : number;

		/** Setter of `write_mode` property */
		set_write_mode(p_value: number) : void;
	}
	namespace WebRTCDataChannel {
		enum ChannelState {
			/** The channel was created, but it's still trying to connect. */
			STATE_CONNECTING = 0,
			/** The channel is currently open, and data can flow over it. */
			STATE_OPEN = 1,
			/** The channel is being closed, no new messages will be accepted, but those already in queue will be flushed. */
			STATE_CLOSING = 2,
			/** The channel was closed, or connection failed. */
			STATE_CLOSED = 3,
		}
		enum WriteMode {
			/** Tells the channel to send data over this channel as text. An external peer (non-Godot) would receive this as a string. */
			WRITE_MODE_TEXT = 0,
			/** Tells the channel to send data over this channel as binary. An external peer (non-Godot) would receive this as array buffer or blob. */
			WRITE_MODE_BINARY = 1,
		}

		/** Tells the channel to send data over this channel as text. An external peer (non-Godot) would receive this as a string. */
		const WRITE_MODE_TEXT: WriteMode.WRITE_MODE_TEXT;

		/** Tells the channel to send data over this channel as binary. An external peer (non-Godot) would receive this as array buffer or blob. */
		const WRITE_MODE_BINARY: WriteMode.WRITE_MODE_BINARY;

		/** The channel was created, but it's still trying to connect. */
		const STATE_CONNECTING: ChannelState.STATE_CONNECTING;

		/** The channel is currently open, and data can flow over it. */
		const STATE_OPEN: ChannelState.STATE_OPEN;

		/** The channel is being closed, no new messages will be accepted, but those already in queue will be flushed. */
		const STATE_CLOSING: ChannelState.STATE_CLOSING;

		/** The channel was closed, or connection failed. */
		const STATE_CLOSED: ChannelState.STATE_CLOSED;
	}

	/** 
	  */
	class WebRTCDataChannelGDNative extends WebRTCDataChannel {
	}
	namespace WebRTCDataChannelGDNative {
	}

	/** A simple interface to create a peer-to-peer mesh network composed of `WebRTCPeerConnection` that is compatible with the `MultiplayerAPI`.
	 This class constructs a full mesh of `WebRTCPeerConnection` (one connection for each peer) that can be used as a `MultiplayerAPI.network_peer`.

	 You can add each `WebRTCPeerConnection` via `add_peer` or remove them via `remove_peer`. Peers must be added in `WebRTCPeerConnection.STATE_NEW` state to allow it to create the appropriate channels. This class will not create offers nor set descriptions, it will only poll them, and notify connections and disconnections.

	 `NetworkedMultiplayerPeer.connection_succeeded` and `NetworkedMultiplayerPeer.server_disconnected` will not be emitted unless `server_compatibility` is `true` in `initialize`. Beside that data transfer works like in a `NetworkedMultiplayerPeer`. */
	class WebRTCMultiplayer extends NetworkedMultiplayerPeer {

		/**  */
		refuse_new_connections: boolean;

		/**  */
		transfer_mode: number;

		/** Initialize the multiplayer peer with the given `peer_id` (must be between 1 and 2147483647).

		 If `server_compatibilty` is `false` (default), the multiplayer peer will be immediately in state `NetworkedMultiplayerPeer.CONNECTION_CONNECTED` and `NetworkedMultiplayerPeer.connection_succeeded` will not be emitted.

		 If `server_compatibilty` is `true` the peer will suppress all `NetworkedMultiplayerPeer.peer_connected` signals until a peer with id `NetworkedMultiplayerPeer.TARGET_PEER_SERVER` connects and then emit `NetworkedMultiplayerPeer.connection_succeeded`. After that the signal `NetworkedMultiplayerPeer.peer_connected` will be emitted for every already connected peer, and any new peer that might connect. If the server peer disconnects after that, signal `NetworkedMultiplayerPeer.server_disconnected` will be emitted and state will become `NetworkedMultiplayerPeer.CONNECTION_CONNECTED`. */
		//@ts-ignore
		initialize(peer_id: number, server_compatibility: boolean = false) : number;

		/** Add a new peer to the mesh with the given `peer_id`. The `WebRTCPeerConnection` must be in state `WebRTCPeerConnection.STATE_NEW`.

		 Three channels will be created for reliable, unreliable, and ordered transport. The value of `unreliable_lifetime` will be passed to the `maxPacketLifetime` option when creating unreliable and ordered channels (see `WebRTCPeerConnection.create_data_channel`). */
		//@ts-ignore
		add_peer(peer: WebRTCPeerConnection, peer_id: number, unreliable_lifetime: number = 1) : number;

		/** Remove the peer with given `peer_id` from the mesh. If the peer was connected, and `NetworkedMultiplayerPeer.peer_connected` was emitted for it, then `NetworkedMultiplayerPeer.peer_disconnected` will be emitted. */
		remove_peer(peer_id: number) : void;

		/** Returns `true` if the given `peer_id` is in the peers map (it might not be connected though). */
		has_peer(peer_id: number) : boolean;

		/** Return a dictionary representation of the peer with given `peer_id` with three keys. `connection` containing the `WebRTCPeerConnection` to this peer, `channels` an array of three `WebRTCDataChannel`, and `connected` a boolean representing if the peer connection is currently connected (all three channels are open). */
		get_peer(peer_id: number) : object;

		/** Returns a dictionary which keys are the peer ids and values the peer representation as in `get_peer`. */
		get_peers() : object;

		/** Close all the add peer connections and channels, freeing all resources. */
		close() : void;

		/** Getter of `refuse_new_connections` property */
		is_refusing_new_connections() : boolean;

		/** Setter of `refuse_new_connections` property */
		set_refuse_new_connections(p_value: boolean) : void;

		/** Getter of `transfer_mode` property */
		get_transfer_mode() : number;

		/** Setter of `transfer_mode` property */
		set_transfer_mode(p_value: number) : void;
	}
	namespace WebRTCMultiplayer {
	}

	/** Interface to a WebRTC peer connection.
	 A WebRTC connection between the local computer and a remote peer. Provides an interface to connect, maintain and monitor the connection.

	 Setting up a WebRTC connection between two peers from now on) may not seem a trivial task, but it can be broken down into 3 main steps:

	 - The peer that wants to initiate the connection (`A` from now on) creates an offer and send it to the other peer (`B` from now on).

	 - `B` receives the offer, generate and answer, and sends it to `A`).

	 - `A` and `B` then generates and exchange ICE candidates with each other.

	 After these steps, the connection should become connected. Keep on reading or look into the tutorial for more information. */
	class WebRTCPeerConnection extends Reference {

		/** Re-initialize this peer connection, closing any previously active connection, and going back to state `STATE_NEW`. A dictionary of `options` can be passed to configure the peer connection.

		 Valid `options` are:

		 ```gdscript
		 {
		     "iceServers": [
		         {
		             "urls": [ "stun:stun.example.com:3478" ], # One or more STUN servers.
		         },
		         {
		             "urls": [ "turn:turn.example.com:3478" ], # One or more TURN servers.
		             "username": "a_username", # Optional username for the TURN server.
		             "credentials": "a_password", # Optional password for the TURN server.
		         }
		     ]
		 }
		 ``` */
		//@ts-ignore
		initialize(configuration: object = {

}) : number;

		/** Returns a new `WebRTCDataChannel` (or `null` on failure) with given `label` and optionally configured via the `options` dictionary. This method can only be called when the connection is in state `STATE_NEW`.

		 There are two ways to create a working data channel: either call `create_data_channel` on only one of the peer and listen to `data_channel_received` on the other, or call `create_data_channel` on both peers, with the same values, and the `negotiated` option set to `true`.

		 Valid `options` are:

		 ```gdscript
		 {
		     "negotiated": true, # When set to true (default off), means the channel is negotiated out of band. "id" must be set too. data_channel_received will not be called.
		     "id": 1, # When "negotiated" is true this value must also be set to the same value on both peer.
		 
		     # Only one of maxRetransmits and maxPacketLifeTime can be specified, not both. They make the channel unreliable (but also better at real time).
		     "maxRetransmits": 1, # Specify the maximum number of attempt the peer will make to retransmits packets if they are not acknowledged.
		     "maxPacketLifeTime": 100, # Specify the maximum amount of time before giving up retransmitions of unacknowledged packets (in milliseconds).
		     "ordered": true, # When in unreliable mode (i.e. either "maxRetransmits" or "maxPacketLifetime" is set), "ordered" (true by default) specify if packet ordering is to be enforced.
		 
		     "protocol": "my-custom-protocol", # A custom sub-protocol string for this channel.
		 }
		 ```

		 **Note:** You must keep a reference to channels created this way, or it will be closed. */
		//@ts-ignore
		create_data_channel(label: string, options: object = {

}) : WebRTCDataChannel;

		/** Creates a new SDP offer to start a WebRTC connection with a remote peer. At least one `WebRTCDataChannel` must have been created before calling this method.

		 If this functions returns `OK`, `session_description_created` will be called when the session is ready to be sent. */
		create_offer() : number;

		/** Sets the SDP description of the local peer. This should be called in response to `session_description_created`.

		 After calling this function the peer will start emitting `ice_candidate_created` (unless an `Error` different from `OK` is returned). */
		set_local_description(type: string, sdp: string) : number;

		/** Sets the SDP description of the remote peer. This should be called with the values generated by a remote peer and received over the signaling server.

		 If `type` is `offer` the peer will emit `session_description_created` with the appropriate answer.

		 If `type` is `answer` the peer will start emitting `ice_candidate_created`. */
		set_remote_description(type: string, sdp: string) : number;

		/** Add an ice candidate generated by a remote peer (and received over the signaling server). See `ice_candidate_created`. */
		add_ice_candidate(media: string, index: number, name: string) : number;

		/** Call this method frequently (e.g. in `Node._process` or `Node._physics_process`) to properly receive signals. */
		poll() : number;

		/** Close the peer connection and all data channels associated with it. Note, you cannot reuse this object for a new connection unless you call `initialize`. */
		close() : void;

		/** Returns the connection state. See `ConnectionState`. */
		get_connection_state() : number;
	}
	namespace WebRTCPeerConnection {

		/** Emitted when a new ICE candidate has been created. The three parameters are meant to be passed to the remote peer over the signaling server. */
		const ice_candidate_created: 'ice_candidate_created';

		/** Emitted after a successful call to `create_offer` or `set_remote_description` (when it generates an answer). The parameters are meant to be passed to `set_local_description` on this object, and sent to the remote peer over the signaling server. */
		const session_description_created: 'session_description_created';

		/** Emitted when a new in-band channel is received, i.e. when the channel was created with `negotiated: false` (default).

			 The object will be an instance of `WebRTCDataChannel`. You must keep a reference of it or it will be closed automatically. See `create_data_channel`. */
		const data_channel_received: 'data_channel_received';
		enum ConnectionState {
			/** The connection is new, data channels and an offer can be created in this state. */
			STATE_NEW = 0,
			/** The peer is connecting, ICE is in progress, none of the transports has failed. */
			STATE_CONNECTING = 1,
			/** The peer is connected, all ICE transports are connected. */
			STATE_CONNECTED = 2,
			/** At least one ICE transport is disconnected. */
			STATE_DISCONNECTED = 3,
			/** One or more of the ICE transports failed. */
			STATE_FAILED = 4,
			/** The peer connection is closed (after calling `close` for example). */
			STATE_CLOSED = 5,
		}

		/** The connection is new, data channels and an offer can be created in this state. */
		const STATE_NEW: ConnectionState.STATE_NEW;

		/** The peer is connecting, ICE is in progress, none of the transports has failed. */
		const STATE_CONNECTING: ConnectionState.STATE_CONNECTING;

		/** The peer is connected, all ICE transports are connected. */
		const STATE_CONNECTED: ConnectionState.STATE_CONNECTED;

		/** At least one ICE transport is disconnected. */
		const STATE_DISCONNECTED: ConnectionState.STATE_DISCONNECTED;

		/** One or more of the ICE transports failed. */
		const STATE_FAILED: ConnectionState.STATE_FAILED;

		/** The peer connection is closed (after calling `close` for example). */
		const STATE_CLOSED: ConnectionState.STATE_CLOSED;
	}

	/** 
	  */
	class WebRTCPeerConnectionGDNative extends WebRTCPeerConnection {
	}
	namespace WebRTCPeerConnectionGDNative {
	}

	/** A WebSocket client implementation.
	 This class implements a WebSocket client compatible with any RFC 6455-compliant WebSocket server.

	 This client can be optionally used as a network peer for the `MultiplayerAPI`.

	 After starting the client (`connect_to_url`), you will need to `NetworkedMultiplayerPeer.poll` it at regular intervals (e.g. inside `Node._process`).

	 You will receive appropriate signals when connecting, disconnecting, or when new data is available. */
	class WebSocketClient extends WebSocketMultiplayerPeer {

		/** If `true`, SSL certificate verification is enabled.

		 **Note:** You must specify the certificates to be used in the Project Settings for it to work when exported. */
		verify_ssl: boolean;

		/** If specified, this `X509Certificate` will be the only one accepted when connecting to an SSL host. Any other certificate provided by the server will be regarded as invalid.

		 **Note:** Specifying a custom `trusted_ssl_certificate` is not supported in HTML5 exports due to browsers restrictions. */
		trusted_ssl_certificate: X509Certificate;

		/** Connects to the given URL requesting one of the given `protocols` as sub-protocol. If the list empty (default), no sub-protocol will be requested.

		 If `true` is passed as `gd_mp_api`, the client will behave like a network peer for the `MultiplayerAPI`, connections to non-Godot servers will not work, and `data_received` will not be emitted.

		 If `false` is passed instead (default), you must call `PacketPeer` functions (`put_packet`, `get_packet`, etc.) on the `WebSocketPeer` returned via `get_peer(1)` and not on this object directly (e.g. `get_peer(1).put_packet(data)`).

		 You can optionally pass a list of `custom_headers` to be added to the handshake HTTP request.

		 **Note:** Specifying `custom_headers` is not supported in HTML5 exports due to browsers restrictions. */
		//@ts-ignore
		connect_to_url(url: string, protocols: PoolStringArray = PoolStringArray(  ), gd_mp_api: boolean = false, custom_headers: PoolStringArray = PoolStringArray(  )) : number;

		/** Disconnects this client from the connected host. See `WebSocketPeer.close` for more information. */
		//@ts-ignore
		disconnect_from_host(code: number = 1000, reason: string = "") : void;

		/** Return the IP address of the currently connected host. */
		get_connected_host() : string;

		/** Return the IP port of the currently connected host. */
		get_connected_port() : number;

		/** Getter of `verify_ssl` property */
		is_verify_ssl_enabled() : boolean;

		/** Setter of `verify_ssl` property */
		set_verify_ssl_enabled(p_value: boolean) : void;

		/** Getter of `trusted_ssl_certificate` property */
		get_trusted_ssl_certificate() : X509Certificate;

		/** Setter of `trusted_ssl_certificate` property */
		set_trusted_ssl_certificate(p_value: X509Certificate) : void;
	}
	namespace WebSocketClient {

		/** Emitted when the server requests a clean close. You should keep polling until you get a `connection_closed` signal to achieve the clean close. See `WebSocketPeer.close` for more details. */
		const server_close_request: 'server_close_request';

		/** Emitted when a connection with the server is established, `protocol` will contain the sub-protocol agreed with the server. */
		const connection_established: 'connection_established';

		/** Emitted when a WebSocket message is received.

			 **Note:** This signal is *not* emitted when used as high-level multiplayer peer. */
		const data_received: 'data_received';

		/** Emitted when the connection to the server fails. */
		const connection_error: 'connection_error';

		/** Emitted when the connection to the server is closed. `was_clean_close` will be `true` if the connection was shutdown cleanly. */
		const connection_closed: 'connection_closed';
	}

	/** Base class for WebSocket server and client.
	 Base class for WebSocket server and client, allowing them to be used as network peer for the `MultiplayerAPI`. */
	class WebSocketMultiplayerPeer extends NetworkedMultiplayerPeer {

		/**  */
		refuse_new_connections: boolean;

		/**  */
		transfer_mode: number;

		/** Configures the buffer sizes for this WebSocket peer. Default values can be specified in the Project Settings under `network/limits`. For server, values are meant per connected peer.

		 The first two parameters define the size and queued packets limits of the input buffer, the last two of the output buffer.

		 Buffer sizes are expressed in KiB, so `4 = 2^12 = 4096 bytes`. All parameters will be rounded up to the nearest power of two.

		 **Note:** HTML5 exports only use the input buffer since the output one is managed by browsers. */
		set_buffers(input_buffer_size_kb: number, input_max_packets: number, output_buffer_size_kb: number, output_max_packets: number) : number;

		/** Returns the `WebSocketPeer` associated to the given `peer_id`. */
		get_peer(peer_id: number) : WebSocketPeer;

		/** Getter of `refuse_new_connections` property */
		is_refusing_new_connections() : boolean;

		/** Setter of `refuse_new_connections` property */
		set_refuse_new_connections(p_value: boolean) : void;

		/** Getter of `transfer_mode` property */
		get_transfer_mode() : number;

		/** Setter of `transfer_mode` property */
		set_transfer_mode(p_value: number) : void;
	}
	namespace WebSocketMultiplayerPeer {

		/** Emitted when a packet is received from a peer.

			 **Note:** This signal is only emitted when the client or server is configured to use Godot multiplayer API. */
		const peer_packet: 'peer_packet';
	}

	/** A class representing a specific WebSocket connection.
	 This class represent a specific WebSocket connection, you can do lower level operations with it.

	 You can choose to write to the socket in binary or text mode, and you can recognize the mode used for writing by the other peer. */
	class WebSocketPeer extends PacketPeer {

		/** Gets the current selected write mode. See `WriteMode`. */
		get_write_mode() : number;

		/** Sets the socket to use the given `WriteMode`. */
		set_write_mode(mode: WebSocketPeer.WriteMode) : void;

		/** Returns `true` if this peer is currently connected. */
		is_connected_to_host() : boolean;

		/** Returns `true` if the last received packet was sent as a text payload. See `WriteMode`. */
		was_string_packet() : boolean;

		/** Closes this WebSocket connection. `code` is the status code for the closure (see RFC 6455 section 7.4 for a list of valid status codes). `reason` is the human readable reason for closing the connection (can be any UTF-8 string that's smaller than 123 bytes).

		 **Note:** To achieve a clean close, you will need to keep polling until either `WebSocketClient.connection_closed` or `WebSocketServer.client_disconnected` is received.

		 **Note:** The HTML5 export might not support all status codes. Please refer to browser-specific documentation for more details. */
		//@ts-ignore
		close(code: number = 1000, reason: string = "") : void;

		/** Returns the IP address of the connected peer.

		 **Note:** Not available in the HTML5 export. */
		get_connected_host() : string;

		/** Returns the remote port of the connected peer.

		 **Note:** Not available in the HTML5 export. */
		get_connected_port() : number;

		/** Disable Nagle's algorithm on the underling TCP socket (default). See `StreamPeerTCP.set_no_delay` for more information.

		 **Note:** Not available in the HTML5 export. */
		set_no_delay(enabled: boolean) : void;
	}
	namespace WebSocketPeer {
		enum WriteMode {
			/** Specifies that WebSockets messages should be transferred as text payload (only valid UTF-8 is allowed). */
			WRITE_MODE_TEXT = 0,
			/** Specifies that WebSockets messages should be transferred as binary payload (any byte combination is allowed). */
			WRITE_MODE_BINARY = 1,
		}

		/** Specifies that WebSockets messages should be transferred as text payload (only valid UTF-8 is allowed). */
		const WRITE_MODE_TEXT: WriteMode.WRITE_MODE_TEXT;

		/** Specifies that WebSockets messages should be transferred as binary payload (any byte combination is allowed). */
		const WRITE_MODE_BINARY: WriteMode.WRITE_MODE_BINARY;
	}

	/** A WebSocket server implementation.
	 This class implements a WebSocket server that can also support the high-level multiplayer API.

	 After starting the server (`listen`), you will need to `NetworkedMultiplayerPeer.poll` it at regular intervals (e.g. inside `Node._process`). When clients connect, disconnect, or send data, you will receive the appropriate signal.

	 **Note:** Not available in HTML5 exports. */
	class WebSocketServer extends WebSocketMultiplayerPeer {

		/** When not set to `*` will restrict incoming connections to the specified IP address. Setting `bind_ip` to `127.0.0.1` will cause the server to listen only to the local host. */
		bind_ip: string;

		/** When set to a valid `CryptoKey` (along with `ssl_certificate`) will cause the server to require SSL instead of regular TCP (i.e. the `wss://` protocol). */
		private_key: CryptoKey;

		/** When set to a valid `X509Certificate` (along with `private_key`) will cause the server to require SSL instead of regular TCP (i.e. the `wss://` protocol). */
		ssl_certificate: X509Certificate;

		/** When using SSL (see `private_key` and `ssl_certificate`), you can set this to a valid `X509Certificate` to be provided as additional CA chain information during the SSL handshake. */
		ca_chain: X509Certificate;

		/** Returns `true` if the server is actively listening on a port. */
		is_listening() : boolean;

		/** Starts listening on the given port.

		 You can specify the desired subprotocols via the "protocols" array. If the list empty (default), no sub-protocol will be requested.

		 If `true` is passed as `gd_mp_api`, the server will behave like a network peer for the `MultiplayerAPI`, connections from non-Godot clients will not work, and `data_received` will not be emitted.

		 If `false` is passed instead (default), you must call `PacketPeer` functions (`put_packet`, `get_packet`, etc.), on the `WebSocketPeer` returned via `get_peer(id)` to communicate with the peer with given `id` (e.g. `get_peer(id).get_available_packet_count`). */
		//@ts-ignore
		listen(port: number, protocols: PoolStringArray = PoolStringArray(  ), gd_mp_api: boolean = false) : number;

		/** Stops the server and clear its state. */
		stop() : void;

		/** Returns `true` if a peer with the given ID is connected. */
		has_peer(id: number) : boolean;

		/** Returns the IP address of the given peer. */
		get_peer_address(id: number) : string;

		/** Returns the remote port of the given peer. */
		get_peer_port(id: number) : number;

		/** Disconnects the peer identified by `id` from the server. See `WebSocketPeer.close` for more information. */
		//@ts-ignore
		disconnect_peer(id: number, code: number = 1000, reason: string = "") : void;

		/** Getter of `bind_ip` property */
		get_bind_ip() : string;

		/** Setter of `bind_ip` property */
		set_bind_ip(p_value: string) : void;

		/** Getter of `private_key` property */
		get_private_key() : CryptoKey;

		/** Setter of `private_key` property */
		set_private_key(p_value: CryptoKey) : void;

		/** Getter of `ssl_certificate` property */
		get_ssl_certificate() : X509Certificate;

		/** Setter of `ssl_certificate` property */
		set_ssl_certificate(p_value: X509Certificate) : void;

		/** Getter of `ca_chain` property */
		get_ca_chain() : X509Certificate;

		/** Setter of `ca_chain` property */
		set_ca_chain(p_value: X509Certificate) : void;
	}
	namespace WebSocketServer {

		/** Emitted when a client requests a clean close. You should keep polling until you get a `client_disconnected` signal with the same `id` to achieve the clean close. See `WebSocketPeer.close` for more details. */
		const client_close_request: 'client_close_request';

		/** Emitted when a new message is received.

			 **Note:** This signal is *not* emitted when used as high-level multiplayer peer. */
		const data_received: 'data_received';

		/** Emitted when a new client connects. "protocol" will be the sub-protocol agreed with the client. */
		const client_connected: 'client_connected';

		/** Emitted when a client disconnects. `was_clean_close` will be `true` if the connection was shutdown cleanly. */
		const client_disconnected: 'client_disconnected';
	}

	/** Base class for window dialogs.
	 Windowdialog is the base class for all window-based dialogs. It's a by-default toplevel `Control` that draws a window decoration and allows motion and resizing. */
	class WindowDialog extends Popup {

		/** The text displayed in the window's title bar. */
		window_title: string;

		/** If `true`, the user can resize the window. */
		resizable: boolean;

		/** Returns the close `TextureButton`. */
		get_close_button() : TextureButton;

		/** Getter of `window_title` property */
		get_title() : string;

		/** Setter of `window_title` property */
		set_title(p_value: string) : void;

		/** Getter of `resizable` property */
		get_resizable() : boolean;

		/** Setter of `resizable` property */
		set_resizable(p_value: boolean) : void;
	}
	namespace WindowDialog {
	}

	/** Class that has everything pertaining to a world.
	 Class that has everything pertaining to a world. A physics space, a visual scenario and a sound space. Spatial nodes register their resources into the current world. */
	class World extends Resource {

		/** The World's `Environment`. */
		environment: Environment;

		/** The World's fallback_environment will be used if the World's `Environment` fails or is missing. */
		fallback_environment: Environment;

		/** The World's physics space. */
		space: RID;

		/** The World's visual scenario. */
		scenario: RID;

		/** Direct access to the world's physics 3D space state. Used for querying current and potential collisions. Must only be accessed from within `_physics_process(delta)`. */
		direct_space_state: PhysicsDirectSpaceState;

		/** Getter of `environment` property */
		get_environment() : Environment;

		/** Setter of `environment` property */
		set_environment(p_value: Environment) : void;

		/** Getter of `fallback_environment` property */
		get_fallback_environment() : Environment;

		/** Setter of `fallback_environment` property */
		set_fallback_environment(p_value: Environment) : void;

		/** Getter of `space` property */
		get_space() : RID;

		/** Getter of `scenario` property */
		get_scenario() : RID;

		/** Getter of `direct_space_state` property */
		get_direct_space_state() : PhysicsDirectSpaceState;
	}
	namespace World {
	}

	/** Class that has everything pertaining to a 2D world.
	 Class that has everything pertaining to a 2D world. A physics space, a visual scenario and a sound space. 2D nodes register their resources into the current 2D world. */
	class World2D extends Resource {

		/** The `RID` of this world's canvas resource. Used by the `VisualServer` for 2D drawing. */
		canvas: RID;

		/** The `RID` of this world's physics space resource. Used by the `Physics2DServer` for 2D physics, treating it as both a space and an area. */
		space: RID;

		/** Direct access to the world's physics 2D space state. Used for querying current and potential collisions. Must only be accessed from the main thread within `_physics_process(delta)`. */
		direct_space_state: Physics2DDirectSpaceState;

		/** Getter of `canvas` property */
		get_canvas() : RID;

		/** Getter of `space` property */
		get_space() : RID;

		/** Getter of `direct_space_state` property */
		get_direct_space_state() : Physics2DDirectSpaceState;
	}
	namespace World2D {
	}

	/** Default environment properties for the entire scene (post-processing effects, lighting and background settings).
	 The `WorldEnvironment` node is used to configure the default `Environment` for the scene.

	 The parameters defined in the `WorldEnvironment` can be overridden by an `Environment` node set on the current `Camera`. Additionally, only one `WorldEnvironment` may be instanced in a given scene at a time.

	 The `WorldEnvironment` allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene. */
	class WorldEnvironment extends Node {

		/** The `Environment` resource used by this `WorldEnvironment`, defining the default properties. */
		environment: Environment;

		/** Getter of `environment` property */
		get_environment() : Environment;

		/** Setter of `environment` property */
		set_environment(p_value: Environment) : void;
	}
	namespace WorldEnvironment {
	}

	/** An X509 certificate (e.g. for SSL).
	 The X509Certificate class represents an X509 certificate. Certificates can be loaded and saved like any other `Resource`.

	 They can be used as the server certificate in `StreamPeerSSL.accept_stream` (along with the proper `CryptoKey`), and to specify the only certificate that should be accepted when connecting to an SSL server via `StreamPeerSSL.connect_to_stream`.

	 **Note:** Not available in HTML5 exports. */
	class X509Certificate extends Resource {

		/** Saves a certificate to the given `path` (should be a "*.crt" file). */
		save(path: string) : number;

		/** Loads a certificate from `path` ("*.crt" file). */
		load(path: string) : number;
	}
	namespace X509Certificate {
	}

	/** Low-level class for creating parsers for `url=https://en.wikipedia.org/wiki/XML`XML`/url` files.
	 This class can serve as base to make custom XML parsers. Since XML is a very flexible standard, this interface is low-level so it can be applied to any possible schema. */
	class XMLParser extends Reference {

		/** Reads the next node of the file. This returns an error code. */
		read() : number;

		/** Gets the type of the current node. Compare with `NodeType` constants. */
		get_node_type() : number;

		/** Gets the name of the current element node. This will raise an error if the current node type is neither `NODE_ELEMENT` nor `NODE_ELEMENT_END`. */
		get_node_name() : string;

		/** Gets the contents of a text node. This will raise an error in any other type of node. */
		get_node_data() : string;

		/** Gets the byte offset of the current node since the beginning of the file or buffer. */
		get_node_offset() : number;

		/** Gets the amount of attributes in the current element. */
		get_attribute_count() : number;

		/** Gets the name of the attribute specified by the index in `idx` argument. */
		get_attribute_name(idx: number) : string;

		/** Gets the value of the attribute specified by the index in `idx` argument. */
		get_attribute_value(idx: number) : string;

		/** Check whether the current element has a certain attribute. */
		has_attribute(name: string) : boolean;

		/** Gets the value of a certain attribute of the current element by name. This will raise an error if the element has no such attribute. */
		get_named_attribute_value(name: string) : string;

		/** Gets the value of a certain attribute of the current element by name. This will return an empty `String` if the attribute is not found. */
		get_named_attribute_value_safe(name: string) : string;

		/** Check whether the current element is empty (this only works for completely empty tags, e.g. `<element \>`). */
		is_empty() : boolean;

		/** Gets the current line in the parsed file (currently not implemented). */
		get_current_line() : number;

		/** Skips the current section. If the node contains other elements, they will be ignored and the cursor will go to the closing of the current element. */
		skip_section() : void;

		/** Moves the buffer cursor to a certain offset (since the beginning) and read the next node there. This returns an error code. */
		seek(position: number) : number;

		/** Opens an XML file for parsing. This returns an error code. */
		open(file: string) : number;

		/** Opens an XML raw buffer for parsing. This returns an error code. */
		open_buffer(buffer: PoolByteArray) : number;
	}
	namespace XMLParser {
		enum NodeType {
			/** There's no node (no file or buffer opened). */
			NODE_NONE = 0,
			/** Element (tag). */
			NODE_ELEMENT = 1,
			/** End of element. */
			NODE_ELEMENT_END = 2,
			/** Text node. */
			NODE_TEXT = 3,
			/** Comment node. */
			NODE_COMMENT = 4,
			/** CDATA content. */
			NODE_CDATA = 5,
			/** Unknown node. */
			NODE_UNKNOWN = 6,
		}

		/** There's no node (no file or buffer opened). */
		const NODE_NONE: NodeType.NODE_NONE;

		/** Element (tag). */
		const NODE_ELEMENT: NodeType.NODE_ELEMENT;

		/** End of element. */
		const NODE_ELEMENT_END: NodeType.NODE_ELEMENT_END;

		/** Text node. */
		const NODE_TEXT: NodeType.NODE_TEXT;

		/** Comment node. */
		const NODE_COMMENT: NodeType.NODE_COMMENT;

		/** CDATA content. */
		const NODE_CDATA: NodeType.NODE_CDATA;

		/** Unknown node. */
		const NODE_UNKNOWN: NodeType.NODE_UNKNOWN;
	}

	/** Sort all child nodes based on their Y positions.
	 Sort all child nodes based on their Y positions. The child node must inherit from `CanvasItem` for it to be sorted. Nodes that have a higher Y position will be drawn later, so they will appear on top of nodes that have a lower Y position.

	 Nesting of YSort nodes is possible. Children YSort nodes will be sorted in the same space as the parent YSort, allowing to better organize a scene or divide it in multiple ones, yet keep the unique sorting. */
	class YSort extends Node2D {

		/** If `true`, child nodes are sorted, otherwise sorting is disabled. */
		sort_enabled: boolean;

		/** Getter of `sort_enabled` property */
		is_sort_enabled() : boolean;

		/** Setter of `sort_enabled` property */
		set_sort_enabled(p_value: boolean) : void;
	}
	namespace YSort {
	}

}

